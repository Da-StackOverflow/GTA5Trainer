using Any = uint;
using Hash = uint;
using Entity = int;
using Player = int;
using FireId = int;
using Ped = int;
using Vehicle = int;
using Cam = int;
using Pickup = int;
using Obj = int;
using Interior = int;
using Blip = int;
using ScrHandle = int;

using static Bridge.Native;

namespace Bridge
{
	public static unsafe class Functions
	{

		// Pauses execution of the current script, please note this behavior is only seen when called from one of the game script files(ysc). In order to wait an asi script use "static void WAIT(DWORD time);" found in main.h
		public static void WAIT(int ms) { Invoke(0x4EDE34FBADD967A6, V(ms)); }
		// Examples:
		//  g_384A = SYSTEM::START_NEW_SCRIPT("cellphone_flashhand", 1424);
		//  l_10D = SYSTEM::START_NEW_SCRIPT("taxiService", 1828);
		//  SYSTEM::START_NEW_SCRIPT("AM_MP_YACHT", 5000);
		//  SYSTEM::START_NEW_SCRIPT("emergencycall", 512);
		//  SYSTEM::START_NEW_SCRIPT("emergencycall", 512); 
		//  SYSTEM::START_NEW_SCRIPT("FM_maintain_cloud_header_data", 1424);
		//  SYSTEM::START_NEW_SCRIPT("FM_Mission_Controller", 31000);
		//  SYSTEM::START_NEW_SCRIPT("tennis_family", 3650);
		//  SYSTEM::START_NEW_SCRIPT("Celebrations", 3650);
		// 
		// Decompiled examples of usage when starting a script:
		//  
		//     SCRIPT::REQUEST_SCRIPT(a_0);
		//     if (SCRIPT::HAS_SCRIPT_LOADED(a_0)) {
		//         SYSTEM::START_NEW_SCRIPT(a_0, v_3);
		//         SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(a_0);
		//         return 1;
		//     }
		//  
		// or:
		// 
		//     v_2 = "MrsPhilips2";
		//     SCRIPT::REQUEST_SCRIPT(v_2);
		//     while (!SCRIPT::HAS_SCRIPT_LOADED(v_2)) {
		//     SCRIPT::REQUEST_SCRIPT(v_2);
		//     SYSTEM::WAIT(0);
		//     }
		//     sub_8792(36);
		//     SYSTEM::START_NEW_SCRIPT(v_2, 17000);
		//     SCRIPT::SET_SCRIPT_AS_NO_LONGER_NEEDED(v_2);
		public static int START_NEW_SCRIPT(string scriptName, int stackSize) { return Invoke<int>(0xE81651AD79516E48, V(scriptName), V(stackSize)); }
		// return : script thread id, 0 if failed
		// Pass pointer to struct of args in p1, size of struct goes into p2
		public static int START_NEW_SCRIPT_WITH_ARGS(string scriptName, Any* args, int argCount, int stackSize) { return Invoke<int>(0xB8BA7F44DF1575E1, V(scriptName), V(args), V(argCount), V(stackSize)); }
		public static int START_NEW_SCRIPT_WITH_NAME_HASH(Hash scriptHash, int stackSize) { return Invoke<int>(0xEB1C67C3A5333A92, V(scriptHash), V(stackSize)); }
		public static int START_NEW_SCRIPT_WITH_NAME_HASH_AND_ARGS(Hash scriptHash, Any* args, int argCount, int stackSize) { return Invoke<int>(0xC4BB298BD441BE78, V(scriptHash), V(args), V(argCount), V(stackSize)); }
		// Counts up. Every 1000 is 1 real-time second. Use SETTIMERA(int value) to set the timer (e.g.: SETTIMERA(0)).
		public static int TIMERA() { return Invoke<int>(0x83666F9FB8FEBD4B); }
		public static int TIMERB() { return Invoke<int>(0xC9D9444186B5A374); }
		public static void SETTIMERA(int value) { Invoke(0xC1B1E9A034A63A62, V(value)); }
		public static void SETTIMERB(int value) { Invoke(0x5AE11BC36633DE4E, V(value)); }
		// Gets the current frame time.
		public static float TIMESTEP() { return Invoke<float>(0x0000000050597EE2); }
		public static float SIN(float value) { return Invoke<float>(0x0BADBFA3B172435F, V(value)); }
		public static float COS(float value) { return Invoke<float>(0xD0FFB162F40A139C, V(value)); }
		public static float SQRT(float value) { return Invoke<float>(0x71D93B57D07F9804, V(value)); }
		public static float POW(float base1, float exponent) { return Invoke<float>(0xE3621CC40F31FE2E, V(base1), V(exponent)); }
		public static float LOG10(float value) { return Invoke<float>(0xE816E655DE37FE20, V(value)); }
		// Calculates the magnitude of a vector.
		public static float VMAG(float x, float y, float z) { return Invoke<float>(0x652D2EEEF1D3E62C, V(x), V(y), V(z)); }
		// Calculates the magnitude of a vector but does not perform Sqrt operations. (Its way faster)
		public static float VMAG2(float x, float y, float z) { return Invoke<float>(0xA8CEACB4F35AE058, V(x), V(y), V(z)); }
		// Calculates distance between vectors.
		public static float VDIST(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<float>(0x2A488C176D52CCA5, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// Calculates distance between vectors but does not perform Sqrt operations. (Its way faster)
		public static float VDIST2(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<float>(0xB7A628320EFF8E47, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		public static int SHIFT_LEFT(int value, int bitShift) { return Invoke<int>(0xEDD95A39E5544DE8, V(value), V(bitShift)); }
		public static int SHIFT_RIGHT(int value, int bitShift) { return Invoke<int>(0x97EF1E5BCE9DC075, V(value), V(bitShift)); }
		public static int FLOOR(float value) { return Invoke<int>(0xF34EE736CF047844, V(value)); }
		// I'm guessing this rounds a float value up to the next whole number, and FLOOR rounds it down
		public static int CEIL(float value) { return Invoke<int>(0x11E019C8F43ACC8A, V(value)); }
		public static int ROUND(float value) { return Invoke<int>(0xF2DB717A73826179, V(value)); }
		public static float TO_FLOAT(int value) { return Invoke<float>(0xBBDA792448DB5A89, V(value)); }
		// THREAD_PRIO_HIGHEST = 0
		// THREAD_PRIO_NORMAL = 1
		// THREAD_PRIO_LOWEST = 2
		// THREAD_PRIO_MANUAL_UPDATE = 100
		public static void SET_THIS_THREAD_PRIORITY(int priority) { Invoke(0x42B65DEEF2EDF2A1, V(priority)); }




		public static bool APP_DATA_VALID() { return Invoke<bool>(0x846AA8E7D55EE5B6); }
		public static int APP_GET_INT(string property) { return Invoke<int>(0xD3A58A12C77D9D4B, V(property)); }
		public static float APP_GET_FLOAT(string property) { return Invoke<float>(0x1514FB24C02C2322, V(property)); }
		public static byte* APP_GET_STRING(string property) { return PInvoke<byte>(0x749B023950D2311C, V(property)); }
		public static void APP_SET_INT(string property, int value) { Invoke(0x607E8E3D3E4F9611, V(property), V(value)); }
		public static void APP_SET_FLOAT(string property, float value) { Invoke(0x25D7687C68E0DAA4, V(property), V(value)); }
		public static void APP_SET_STRING(string property, string value) { Invoke(0x3FF2FCEC4B7721B4, V(property), V(value)); }
		// Called in the gamescripts like:
		// APP::APP_SET_APP("car");
		// APP::APP_SET_APP("dog");
		public static void APP_SET_APP(string appName) { Invoke(0xCFD0406ADAF90D2B, V(appName)); }
		public static void APP_SET_BLOCK(string blockName) { Invoke(0x262AB456A3D21F93, V(blockName)); }
		public static void APP_CLEAR_BLOCK() { Invoke(0x5FE1DF3342DB7DBA); }
		public static void APP_CLOSE_APP() { Invoke(0xE41C65E07A5F05FC); }
		public static void APP_CLOSE_BLOCK() { Invoke(0xE8E3FCF72EAC0EF8); }
		public static bool APP_HAS_LINKED_SOCIAL_CLUB_ACCOUNT() { return Invoke<bool>(0x71EEE69745088DA0); }
		public static bool APP_HAS_SYNCED_DATA(string appName) { return Invoke<bool>(0xCA52279A7271517F, V(appName)); }
		public static void APP_SAVE_DATA() { Invoke(0x95C5D356CDA6E85F); }
		public static int APP_GET_DELETED_FILE_STATUS() { return Invoke<int>(0xC9853A2BE3DED1A6); }
		public static bool APP_DELETE_APP_DATA(string appName) { return Invoke<bool>(0x44151AEA95C8A003, V(appName)); }




		// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/RFb4GTny
		// 
		// AUDIO::PLAY_PED_RINGTONE("Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
		// AUDIO::PLAY_PED_RINGTONE("Dial_and_Remote_Ring", PLAYER::PLAYER_PED_ID(), 1);
		// 
		public static void PLAY_PED_RINGTONE(string ringtoneName, Ped ped, bool p2) { Invoke(0xF9E56683CA8E11A5, V(ringtoneName), V(ped), V(p2)); }
		public static bool IS_PED_RINGTONE_PLAYING(Ped ped) { return Invoke<bool>(0x1E8E5E20937E3137, V(ped)); }
		public static void STOP_PED_RINGTONE(Ped ped) { Invoke(0x6C5AE23EFA885092, V(ped)); }
		public static bool IS_MOBILE_PHONE_CALL_ONGOING() { return Invoke<bool>(0x7497D2CE2C30D24C); }
		public static bool IS_MOBILE_INTERFERENCE_ACTIVE() { return Invoke<bool>(0xC8B1B2425604CDD0); }
		public static int GET_CURRENT_TV_SHOW_PLAY_TIME() { return Invoke<int>(0xDD3AA743AB7D4D75); }
		public static void CREATE_NEW_SCRIPTED_CONVERSATION() { Invoke(0xD2C91A0B572AAE56); }
		// NOTE: ones that are -1, 0 - 35 are determined by a function where it gets a TextLabel from a global then runs,
		// GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME and depending on what the result is it goes in check order of 0 - 9 then A - Z then z (lowercase). So it will then return 0 - 35 or -1 if it's 'z'. The func to handle that ^^ is func_67 in dialog_handler.c atleast in TU27 Xbox360 scripts.
		// 
		// p0 is -1, 0 - 35
		// p1 is a char or string (whatever you wanna call it)
		// p2 is Global 10597 + i * 6. 'i' is a while(i < 70) loop
		// p3 is again -1, 0 - 35 
		// p4 is again -1, 0 - 35 
		// p5 is either 0 or 1 (bool ?)
		// p6 is either 0 or 1 (The func to determine this is bool)
		// p7 is either 0 or 1 (The func to determine this is bool)
		// p8 is either 0 or 1 (The func to determine this is bool)
		// p9 is 0 - 3 (Determined by func_60 in dialogue_handler.c)
		// p10 is either 0 or 1 (The func to determine this is bool)
		// p11 is either 0 or 1 (The func to determine this is bool)
		// p12 is unknown as in TU27 X360 scripts it only goes to p11.
		public static void ADD_LINE_TO_CONVERSATION(int index, string p1, string p2, int p3, int p4, bool p5, bool p6, bool p7, bool p8, int p9, bool p10, bool p11, bool p12) { Invoke(0xC5EF963405593646, V(index), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10), V(p11), V(p12)); }
		// 4 calls in the b617d scripts. The only one with p0 and p2 in clear text:
		// 
		// AUDIO::ADD_PED_TO_CONVERSATION(5, l_AF, "DINAPOLI");
		// 
		// =================================================
		// One of the 2 calls in dialogue_handler.c p0 is in a while-loop, and so is determined to also possibly be 0 - 15.
		public static void ADD_PED_TO_CONVERSATION(int index, Ped ped, string p2) { Invoke(0x95D9F4BC443956E7, V(index), V(ped), V(p2)); }
		public static void SET_POSITION_FOR_NULL_CONV_PED(Any p0, float p1, float p2, float p3) { Invoke(0x33E3C6C6F2F0B506, V(p0), V(p1), V(p2), V(p3)); }
		public static void SET_ENTITY_FOR_NULL_CONV_PED(int p0, Entity entity) { Invoke(0x892B6AB8F33606F5, V(p0), V(entity)); }
		// This native controls where the game plays audio from. By default the microphone is positioned on the player.
		// When p0 is true the game will play audio from the 3 positions inputted.
		// It is recommended to set all 3 positions to the same value as mixing different positions doesn't seem to work well.
		// The scripts mostly use it with only one position such as in fbi3.c: 
		// AUDIO::SET_MICROPHONE_POSITION(true, ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true), ENTITY::GET_ENTITY_COORDS(iLocal_3091, true));
		public static void SET_MICROPHONE_POSITION(bool toggle, float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3) { Invoke(0xB6AE90EDDE95C762, V(toggle), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(x3), V(y3), V(z3)); }
		public static void SET_CONVERSATION_AUDIO_CONTROLLED_BY_ANIM(bool p0) { Invoke(0x0B568201DD99F0EB, V(p0)); }
		public static void SET_CONVERSATION_AUDIO_PLACEHOLDER(bool p0) { Invoke(0x61631F5DF50D1C34, V(p0)); }
		public static void START_SCRIPT_PHONE_CONVERSATION(bool p0, bool p1) { Invoke(0x252E5F915EABB675, V(p0), V(p1)); }
		public static void PRELOAD_SCRIPT_PHONE_CONVERSATION(bool p0, bool p1) { Invoke(0x6004BCB0E226AAEA, V(p0), V(p1)); }
		public static void START_SCRIPT_CONVERSATION(bool p0, bool p1, bool p2, bool p3) { Invoke(0x6B17C62C9635D2DC, V(p0), V(p1), V(p2), V(p3)); }
		public static void PRELOAD_SCRIPT_CONVERSATION(bool p0, bool p1, bool p2, bool p3) { Invoke(0x3B3CAD6166916D87, V(p0), V(p1), V(p2), V(p3)); }
		public static void START_PRELOADED_CONVERSATION() { Invoke(0x23641AFE870AF385); }
		public static bool GET_IS_PRELOADED_CONVERSATION_READY() { return Invoke<bool>(0xE73364DB90778FFA); }
		public static bool IS_SCRIPTED_CONVERSATION_ONGOING() { return Invoke<bool>(0x16754C556D2EDE3D); }
		public static bool IS_SCRIPTED_CONVERSATION_LOADED() { return Invoke<bool>(0xDF0D54BE7A776737); }
		public static int GET_CURRENT_SCRIPTED_CONVERSATION_LINE() { return Invoke<int>(0x480357EE890C295A); }
		public static void PAUSE_SCRIPTED_CONVERSATION(bool p0) { Invoke(0x8530AD776CD72B12, V(p0)); }
		public static void RESTART_SCRIPTED_CONVERSATION() { Invoke(0x9AEB285D1818C9AC); }
		public static int STOP_SCRIPTED_CONVERSATION(bool p0) { return Invoke<int>(0xD79DEEFB53455EBA, V(p0)); }
		public static void SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE() { Invoke(0x9663FE6B7A61EB00); }
		// Example from carsteal3.c: AUDIO::INTERRUPT_CONVERSATION(PLAYER::PLAYER_PED_ID(), "CST4_CFAA", "FRANKLIN");
		// Voicelines can be found in GTAV\x64\audio\sfx in files starting with "SS_" which seems to mean scripted speech.
		public static void INTERRUPT_CONVERSATION(Ped ped, string voiceline, string speaker) { Invoke(0xA018A12E5C5C2FA6, V(ped), V(voiceline), V(speaker)); }
		// One call found in the b617d scripts:
		// 
		// AUDIO::INTERRUPT_CONVERSATION_AND_PAUSE(NETWORK::NET_TO_PED(l_3989._f26F[0/*1*/]), "CONV_INTERRUPT_QUIT_IT", "LESTER");
		public static void INTERRUPT_CONVERSATION_AND_PAUSE(Ped ped, string p1, string speaker) { Invoke(0x8A694D7A68F8DC38, V(ped), V(p1), V(speaker)); }
		public static int GET_VARIATION_CHOSEN_FOR_SCRIPTED_LINE(Any* p0) { return Invoke<int>(0xAA19F5572C38B564, V(p0)); }
		public static void SET_NO_DUCKING_FOR_CONVERSATION(bool p0) { Invoke(0xB542DE8C3D1CB210, V(p0)); }
		// This native does absolutely nothing, just a nullsub
		public static void REGISTER_SCRIPT_WITH_AUDIO(int p0) { Invoke(0xC6ED9D5092438D91, V(p0)); }
		// This native does absolutely nothing, just a nullsub
		public static void UNREGISTER_SCRIPT_WITH_AUDIO() { Invoke(0xA8638BE228D4751A); }
		// All occurrences and usages found in b617d: https://pastebin.com/NzZZ2Tmm
		// Full list of mission audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/missionAudioBankNames.json
		// p2 is always -1
		public static bool REQUEST_MISSION_AUDIO_BANK(string audioBank, bool p1, Any p2) { return Invoke<bool>(0x7345BDD95E62E0F2, V(audioBank), V(p1), V(p2)); }
		// All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/XZ1tmGEz
		// Full list of ambient audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientAudioBankNames.json
		// p2 is always -1
		public static bool REQUEST_AMBIENT_AUDIO_BANK(string audioBank, bool p1, Any p2) { return Invoke<bool>(0xFE02FFBED8CA9D99, V(audioBank), V(p1), V(p2)); }
		// All occurrences and usages found in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/AkmDAVn6
		// Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
		// p2 is always -1
		public static bool REQUEST_SCRIPT_AUDIO_BANK(string audioBank, bool p1, Any p2) { return Invoke<bool>(0x2F844A8B08D76685, V(audioBank), V(p1), V(p2)); }
		// p2 is always -1
		public static bool HINT_MISSION_AUDIO_BANK(string audioBank, bool p1, Any p2) { return Invoke<bool>(0x40763EA7B9B783E7, V(audioBank), V(p1), V(p2)); }
		// p2 is always -1
		public static bool HINT_AMBIENT_AUDIO_BANK(string audioBank, bool p1, Any p2) { return Invoke<bool>(0x8F8C0E370AE62F5C, V(audioBank), V(p1), V(p2)); }
		// p2 is always -1
		public static bool HINT_SCRIPT_AUDIO_BANK(string audioBank, bool p1, Any p2) { return Invoke<bool>(0xFB380A29641EC31A, V(audioBank), V(p1), V(p2)); }
		public static void RELEASE_MISSION_AUDIO_BANK() { Invoke(0x0EC92A1BF0857187); }
		public static void RELEASE_AMBIENT_AUDIO_BANK() { Invoke(0x65475A218FFAA93D); }
		// Full list of script audio bank names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scriptAudioBankNames.json
		public static void RELEASE_NAMED_SCRIPT_AUDIO_BANK(string audioBank) { Invoke(0x77ED170667F50170, V(audioBank)); }
		public static void RELEASE_SCRIPT_AUDIO_BANK() { Invoke(0x7A2D8AD0A9EB9C3F); }
		public static void UNHINT_AMBIENT_AUDIO_BANK() { Invoke(0x19AF7ED9B9D23058); }
		public static void UNHINT_SCRIPT_AUDIO_BANK() { Invoke(0x9AC92EED5E4793AB); }
		public static void UNHINT_NAMED_SCRIPT_AUDIO_BANK(string audioBank) { Invoke(0x11579D940949C49E, V(audioBank)); }
		public static int GET_SOUND_ID() { return Invoke<int>(0x430386FE9BF80B45); }
		public static void RELEASE_SOUND_ID(int soundId) { Invoke(0x353FC880830B88FA, V(soundId)); }
		// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/A8Ny8AHZ
		// 
		// Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
		public static void PLAY_SOUND(int soundId, string audioName, string audioRef, bool p3, Any p4, bool p5) { Invoke(0x7FF4944CC209192D, V(soundId), V(audioName), V(audioRef), V(p3), V(p4), V(p5)); }
		// List: https://pastebin.com/DCeRiaLJ
		// 
		// All occurrences as of Cayo Perico Heist DLC (b2189), sorted alphabetically and identical lines removed: https://git.io/JtLxM
		// 
		// Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
		public static void PLAY_SOUND_FRONTEND(int soundId, string audioName, string audioRef, bool p3) { Invoke(0x67C540AA08E4A6F5, V(soundId), V(audioName), V(audioRef), V(p3)); }
		// Only call found in the b617d scripts:
		// 
		// AUDIO::PLAY_DEFERRED_SOUND_FRONTEND("BACK", "HUD_FREEMODE_SOUNDSET");
		// 
		// Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
		public static void PLAY_DEFERRED_SOUND_FRONTEND(string soundName, string soundsetName) { Invoke(0xCADA5A0D0702381E, V(soundName), V(soundsetName)); }
		// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/f2A7vTj0 
		// No changes made in b678d.
		// 
		// gtaforums.com/topic/795622-audio-for-mods
		// 
		// Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
		public static void PLAY_SOUND_FROM_ENTITY(int soundId, string audioName, Entity entity, string audioRef, bool isNetwork, Any p5) { Invoke(0xE65F427EB70AB1ED, V(soundId), V(audioName), V(entity), V(audioRef), V(isNetwork), V(p5)); }
		// Only used with "formation_flying_blips_soundset" and "biker_formation_blips_soundset".
		// p1 is always the model of p2
		public static void PLAY_SOUND_FROM_ENTITY_HASH(int soundId, Hash model, Entity entity, Hash soundSetHash, Any p4, Any p5) { Invoke(0x5B9853296731E88D, V(soundId), V(model), V(entity), V(soundSetHash), V(p4), V(p5)); }
		// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/eeFc5DiW
		// 
		// gtaforums.com/topic/795622-audio-for-mods
		// 
		// Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
		public static void PLAY_SOUND_FROM_COORD(int soundId, string audioName, float x, float y, float z, string audioRef, bool isNetwork, int range, bool p8) { Invoke(0x8D8686B622B88120, V(soundId), V(audioName), V(x), V(y), V(z), V(audioRef), V(isNetwork), V(range), V(p8)); }
		public static void UPDATE_SOUND_COORD(int soundId, float x, float y, float z) { Invoke(0x7EC3C679D0E7E46B, V(soundId), V(x), V(y), V(z)); }
		public static void STOP_SOUND(int soundId) { Invoke(0xA3B0C41BA5CC0BB5, V(soundId)); }
		// Could this be used alongside either, 
		// SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES or _SET_NETWORK_ID_SYNC_TO_PLAYER to make it so other players can hear the sound while online? It'd be a bit troll-fun to be able to play the Zancudo UFO creepy sounds globally.
		public static int GET_NETWORK_ID_FROM_SOUND_ID(int soundId) { return Invoke<int>(0x2DE3F0A134FFBC0D, V(soundId)); }
		public static int GET_SOUND_ID_FROM_NETWORK_ID(int netId) { return Invoke<int>(0x75262FD12D0A1C84, V(netId)); }
		public static void SET_VARIABLE_ON_SOUND(int soundId, string variable, float p2) { Invoke(0xAD6B3148A78AE9B6, V(soundId), V(variable), V(p2)); }
		// From the scripts, p0:
		// 
		// "ArmWrestlingIntensity",
		// "INOUT",
		// "Monkey_Stream",
		// "ZoomLevel"
		public static void SET_VARIABLE_ON_STREAM(string variable, float p1) { Invoke(0x2F9D3834AEB9EF79, V(variable), V(p1)); }
		public static void OVERRIDE_UNDERWATER_STREAM(string p0, bool p1) { Invoke(0xF2A9CDABCEA04BD6, V(p0), V(p1)); }
		// AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 1.0);
		// AUDIO::SET_VARIABLE_ON_UNDER_WATER_STREAM("inTunnel", 0.0);
		public static void SET_VARIABLE_ON_UNDER_WATER_STREAM(string variableName, float value) { Invoke(0x733ADF241531E5C2, V(variableName), V(value)); }
		public static bool HAS_SOUND_FINISHED(int soundId) { return Invoke<bool>(0xFCBDCE714A7C88E5, V(soundId)); }
		// Plays ambient speech. See also _0x444180DB.
		// 
		// ped: The ped to play the ambient speech.
		// speechName: Name of the speech to play, eg. "GENERIC_HI".
		// speechParam: Can be one of the following:
		// SPEECH_PARAMS_STANDARD
		// SPEECH_PARAMS_ALLOW_REPEAT
		// SPEECH_PARAMS_BEAT
		// SPEECH_PARAMS_FORCE
		// SPEECH_PARAMS_FORCE_FRONTEND
		// SPEECH_PARAMS_FORCE_NO_REPEAT_FRONTEND
		// SPEECH_PARAMS_FORCE_NORMAL
		// SPEECH_PARAMS_FORCE_NORMAL_CLEAR
		// SPEECH_PARAMS_FORCE_NORMAL_CRITICAL
		// SPEECH_PARAMS_FORCE_SHOUTED
		// SPEECH_PARAMS_FORCE_SHOUTED_CLEAR
		// SPEECH_PARAMS_FORCE_SHOUTED_CRITICAL
		// SPEECH_PARAMS_FORCE_PRELOAD_ONLY
		// SPEECH_PARAMS_MEGAPHONE
		// SPEECH_PARAMS_HELI
		// SPEECH_PARAMS_FORCE_MEGAPHONE
		// SPEECH_PARAMS_FORCE_HELI
		// SPEECH_PARAMS_INTERRUPT
		// SPEECH_PARAMS_INTERRUPT_SHOUTED
		// SPEECH_PARAMS_INTERRUPT_SHOUTED_CLEAR
		// SPEECH_PARAMS_INTERRUPT_SHOUTED_CRITICAL
		// SPEECH_PARAMS_INTERRUPT_NO_FORCE
		// SPEECH_PARAMS_INTERRUPT_FRONTEND
		// SPEECH_PARAMS_INTERRUPT_NO_FORCE_FRONTEND
		// SPEECH_PARAMS_ADD_BLIP
		// SPEECH_PARAMS_ADD_BLIP_ALLOW_REPEAT
		// SPEECH_PARAMS_ADD_BLIP_FORCE
		// SPEECH_PARAMS_ADD_BLIP_SHOUTED
		// SPEECH_PARAMS_ADD_BLIP_SHOUTED_FORCE
		// SPEECH_PARAMS_ADD_BLIP_INTERRUPT
		// SPEECH_PARAMS_ADD_BLIP_INTERRUPT_FORCE
		// SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED
		// SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CLEAR
		// SPEECH_PARAMS_FORCE_PRELOAD_ONLY_SHOUTED_CRITICAL
		// SPEECH_PARAMS_SHOUTED
		// SPEECH_PARAMS_SHOUTED_CLEAR
		// SPEECH_PARAMS_SHOUTED_CRITICAL
		// 
		// Note: A list of Name and Parameters can be found here https://pastebin.com/1GZS5dCL
		// 
		// Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
		public static void PLAY_PED_AMBIENT_SPEECH_NATIVE(Ped ped, string speechName, string speechParam, Any p3) { Invoke(0x8E04FEDD28D42462, V(ped), V(speechName), V(speechParam), V(p3)); }
		// Plays ambient speech. See also _0x5C57B85D.
		// 
		// See PLAY_PED_AMBIENT_SPEECH_NATIVE for parameter specifications.
		// 
		// Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
		public static void PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE(Ped ped, string speechName, string speechParam, Any p3) { Invoke(0xC6941B4A3A8FBBB9, V(ped), V(speechName), V(speechParam), V(p3)); }
		// This is the same as PLAY_PED_AMBIENT_SPEECH_NATIVE and PLAY_PED_AMBIENT_SPEECH_AND_CLONE_NATIVE but it will allow you to play a speech file from a specific voice file. It works on players and all peds, even animals.
		// 
		// EX (C#):
		// GTA.Native.Function.Call(Hash.PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE, Game.Player.Character, "GENERIC_INSULT_HIGH", "s_m_y_sheriff_01_white_full_01", "SPEECH_PARAMS_FORCE_SHOUTED", 0);
		// 
		// The first param is the ped you want to play it on, the second is the speech name, the third is the voice name, the fourth is the speech param, and the last param is usually always 0.
		// 
		// Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
		public static void PLAY_PED_AMBIENT_SPEECH_WITH_VOICE_NATIVE(Ped ped, string speechName, string voiceName, string speechParam, bool p4) { Invoke(0x3523634255FC3318, V(ped), V(speechName), V(voiceName), V(speechParam), V(p4)); }
		// Full list of speeches and voices names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/speeches.json
		public static void PLAY_AMBIENT_SPEECH_FROM_POSITION_NATIVE(string speechName, string voiceName, float x, float y, float z, string speechParam) { Invoke(0xED640017ED337E45, V(speechName), V(voiceName), V(x), V(y), V(z), V(speechParam)); }
		// This native enables the audio flag "TrevorRageIsOverridden" and sets the voice effect to `voiceEffect`
		public static void OVERRIDE_TREVOR_RAGE(string voiceEffect) { Invoke(0x13AD665062541A7E, V(voiceEffect)); }
		public static void RESET_TREVOR_RAGE() { Invoke(0xE78503B10C4314E0); }
		public static void SET_PLAYER_ANGRY(Ped ped, bool toggle) { Invoke(0xEA241BB04110F091, V(ped), V(toggle)); }
		// Needs another parameter [int p2]. The signature is PED::PLAY_PAIN(Ped ped, int painID, int p1, int p2);
		// 
		// Last 2 parameters always seem to be 0.
		// 
		// EX: Function.Call(Hash.PLAY_PAIN, TestPed, 6, 0, 0);
		// 
		// Known Pain IDs
		// ________________________
		// 
		// 1 - Doesn't seem to do anything. Does NOT crash the game like previously said. (Latest patch)
		// 6 - Scream (Short)
		// 7 - Scared Scream (Kinda Long)
		// 8 - On Fire
		// 
		public static void PLAY_PAIN(Ped ped, int painID, int p1, Any p3) { Invoke(0xBC9AE166038A5CEC, V(ped), V(painID), V(p1), V(p3)); }
		public static void RELEASE_WEAPON_AUDIO() { Invoke(0xCE4AC0439F607045); }
		// mode can be any of these: 
		// SLOWMO_T1_TRAILER_SMASH
		// SLOWMO_T1_RAYFIRE_EXPLOSION
		// SLOWMO_PROLOGUE_VAULT
		// NIGEL_02_SLOWMO_SETTING
		// JSH_EXIT_TUNNEL_SLOWMO
		// SLOWMO_BIG_SCORE_JUMP
		// SLOWMO_FIB4_TRUCK_SMASH
		// SLOWMO_EXTREME_04
		// SLOW_MO_METH_HOUSE_RAYFIRE
		// BARRY_02_SLOWMO
		// BARRY_01_SLOWMO
		public static void ACTIVATE_AUDIO_SLOWMO_MODE(string mode) { Invoke(0xD01005D2BA2EB778, V(mode)); }
		// see ACTIVATE_AUDIO_SLOWMO_MODE for modes
		public static void DEACTIVATE_AUDIO_SLOWMO_MODE(string mode) { Invoke(0xDDC635D5B3262C56, V(mode)); }
		// Audio List
		// gtaforums.com/topic/795622-audio-for-mods/
		// 
		// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/FTeAj4yZ
		public static void SET_AMBIENT_VOICE_NAME(Ped ped, string name) { Invoke(0x6C8065A3B780185B, V(ped), V(name)); }
		public static void SET_AMBIENT_VOICE_NAME_HASH(Ped ped, Hash hash) { Invoke(0x9A53DED9921DE990, V(ped), V(hash)); }
		public static Hash GET_AMBIENT_VOICE_NAME_HASH(Ped ped) { return Invoke<Hash>(0x5E203DA2BA15D436, V(ped)); }
		// Assigns some ambient voice to the ped.
		public static void SET_PED_VOICE_FULL(Ped ped) { Invoke(0x40CF0D12D142A9E8, V(ped)); }
		public static void SET_PED_RACE_AND_VOICE_GROUP(Ped ped, int p1, Hash voiceGroup) { Invoke(0x1B7ABE26CBCBF8C7, V(ped), V(p1), V(voiceGroup)); }
		// From the scripts:
		// 
		// AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("PAIGE_PVG"));
		// AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("TALINA_PVG"));
		// AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_BLACK_PVG"));
		// AUDIO::SET_PED_VOICE_GROUP(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("FEMALE_LOST_WHITE_PVG"));
		public static void SET_PED_VOICE_GROUP(Ped ped, Hash voiceGroupHash) { Invoke(0x7CDC8C3B89F661B3, V(ped), V(voiceGroupHash)); }
		// Dat151RelType == 29
		public static void SET_PED_VOICE_GROUP_FROM_RACE_TO_PVG(Ped ped, Hash voiceGroupHash) { Invoke(0x0BABC1345ABBFB16, V(ped), V(voiceGroupHash)); }
		// bool p1: 0 = Female; 1 = Male
		public static void SET_PED_GENDER(Ped ped, bool p1) { Invoke(0xA5342D390CDA41D6, V(ped), V(p1)); }
		public static void STOP_CURRENT_PLAYING_SPEECH(Ped ped) { Invoke(0x7A73D05A607734C7, V(ped)); }
		public static void STOP_CURRENT_PLAYING_AMBIENT_SPEECH(Ped ped) { Invoke(0xB8BEC0CA6F0EDB0F, V(ped)); }
		public static bool IS_AMBIENT_SPEECH_PLAYING(Ped ped) { return Invoke<bool>(0x9072C8B49907BFAD, V(ped)); }
		public static bool IS_SCRIPTED_SPEECH_PLAYING(Ped p0) { return Invoke<bool>(0xCC9AA18DCC7084F4, V(p0)); }
		public static bool IS_ANY_SPEECH_PLAYING(Ped ped) { return Invoke<bool>(0x729072355FA39EC9, V(ped)); }
		public static bool IS_ANY_POSITIONAL_SPEECH_PLAYING() { return Invoke<bool>(0x30CA2EF91D15ADF8); }
		// Checks if the ped can play the speech or has the speech file, p2 is usually false.
		public static bool DOES_CONTEXT_EXIST_FOR_THIS_PED(Ped ped, string speechName, bool p2) { return Invoke<bool>(0x49B99BF3FDA89A7A, V(ped), V(speechName), V(p2)); }
		public static bool IS_PED_IN_CURRENT_CONVERSATION(Ped ped) { return Invoke<bool>(0x049E937F18F4020C, V(ped)); }
		// Sets the ped drunk sounds.  Only works with PLAYER_PED_ID
		// 
		// ====================================================
		// 
		// As mentioned above, this only sets the drunk sound to ped/player.
		// 
		// To give the Ped a drunk effect with drunk walking animation try using SET_PED_MOVEMENT_CLIPSET
		// 
		// Below is an example
		// 
		// if (!Function.Call<bool>(Hash.HAS_ANIM_SET_LOADED, "move_m@drunk@verydrunk"))
		//                 {
		//                     Function.Call(Hash.REQUEST_ANIM_SET, "move_m@drunk@verydrunk");
		//                 }
		//                 Function.Call(Hash.SET_PED_MOVEMENT_CLIPSET, Ped.Handle, "move_m@drunk@verydrunk", 0x3E800000);
		// 
		// 
		// 
		// And to stop the effect use
		// RESET_PED_MOVEMENT_CLIPSET
		public static void SET_PED_IS_DRUNK(Ped ped, bool toggle) { Invoke(0x95D2D383D5396B8A, V(ped), V(toggle)); }
		// Plays sounds from a ped with chop model. For example it used to play bark or sniff sounds. p1 is always 3 or 4294967295 in decompiled scripts. By a quick disassembling I can assume that this arg is unused.
		// This native is works only when you call it on the ped with right model (ac_chop only ?)
		// Speech Name can be: CHOP_SNIFF_SEQ CHOP_WHINE CHOP_LICKS_MOUTH CHOP_PANT bark GROWL SNARL BARK_SEQ
		public static void PLAY_ANIMAL_VOCALIZATION(Ped pedHandle, int p1, string speechName) { Invoke(0xEE066C7006C49C0A, V(pedHandle), V(p1), V(speechName)); }
		public static bool IS_ANIMAL_VOCALIZATION_PLAYING(Ped pedHandle) { return Invoke<bool>(0xC265DF9FB44A9FBD, V(pedHandle)); }
		// mood can be 0 or 1 (it's not a boolean value!). Effects audio of the animal.
		public static void SET_ANIMAL_MOOD(Ped animal, int mood) { Invoke(0xCC97B29285B1DC3B, V(animal), V(mood)); }
		public static bool IS_MOBILE_PHONE_RADIO_ACTIVE() { return Invoke<bool>(0xB35CE999E8EF317E); }
		public static void SET_MOBILE_PHONE_RADIO_STATE(bool state) { Invoke(0xBF286C554784F3DF, V(state)); }
		// Returns 255 (radio off index) if the function fails.
		public static int GET_PLAYER_RADIO_STATION_INDEX() { return Invoke<int>(0xE8AF77C4C06ADC93); }
		// Returns active radio station name
		public static byte* GET_PLAYER_RADIO_STATION_NAME() { return PInvoke<byte>(0xF6D733C32076AD03); }
		// Converts radio station index to string. Use HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION to get the user-readable text.
		public static byte* GET_RADIO_STATION_NAME(int radioStation) { return PInvoke<byte>(0xB28ECA15046CA8B9, V(radioStation)); }
		public static int GET_PLAYER_RADIO_STATION_GENRE() { return Invoke<int>(0xA571991A7FE6CCEB); }
		public static bool IS_RADIO_RETUNING() { return Invoke<bool>(0xA151A7394A214E65); }
		public static bool IS_RADIO_FADED_OUT() { return Invoke<bool>(0x0626A247D2405330); }
		// Tune Forward...
		public static void SET_RADIO_RETUNE_UP() { Invoke(0xFF266D1D0EB1195D); }
		// Tune Backwards...
		public static void SET_RADIO_RETUNE_DOWN() { Invoke(0xDD6BCF9E94425DF9); }
		// List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
		// An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
		public static void SET_RADIO_TO_STATION_NAME(string stationName) { Invoke(0xC69EDA28699D5107, V(stationName)); }
		// List of radio stations that are in the wheel, in clockwise order, as of LS Tuners DLC: https://git.io/J8a3k
		// An older list including hidden radio stations: https://pastebin.com/Kj9t38KF
		public static void SET_VEH_RADIO_STATION(Vehicle vehicle, string radioStation) { Invoke(0x1B9C0099CB942AC6, V(vehicle), V(radioStation)); }
		public static void SET_VEH_HAS_NORMAL_RADIO(Vehicle vehicle) { Invoke(0x3E45765F3FBB582F, V(vehicle)); }
		public static bool IS_VEHICLE_RADIO_ON(Vehicle vehicle) { return Invoke<bool>(0x0BE4BE946463F917, V(vehicle)); }
		public static void SET_VEH_FORCED_RADIO_THIS_FRAME(Vehicle vehicle) { Invoke(0xC1805D05E6D4FE10, V(vehicle)); }
		// Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
		public static void SET_EMITTER_RADIO_STATION(string emitterName, string radioStation, Any p2) { Invoke(0xACF57305B12AF907, V(emitterName), V(radioStation), V(p2)); }
		// Example:
		// AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_01_STAGE", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_02_MAIN_ROOM", false);    AUDIO::SET_STATIC_EMITTER_ENABLED((Any*)"LOS_SANTOS_VANILLA_UNICORN_03_BACK_ROOM", false);
		// 
		// This turns off surrounding sounds not connected directly to peds.
		// 
		// Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
		public static void SET_STATIC_EMITTER_ENABLED(string emitterName, bool toggle) { Invoke(0x399D2D3B33F1B8EB, V(emitterName), V(toggle)); }
		// Full list of static emitters by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/staticEmitters.json
		public static void LINK_STATIC_EMITTER_TO_ENTITY(string emitterName, Entity entity) { Invoke(0x651D3228960D08AF, V(emitterName), V(entity)); }
		// Sets radio station by index.
		public static void SET_RADIO_TO_STATION_INDEX(int radioStation) { Invoke(0xA619B168B8A8570F, V(radioStation)); }
		public static void SET_FRONTEND_RADIO_ACTIVE(bool active) { Invoke(0xF7F26C6E9CC9EBB8, V(active)); }
		// "news" that play on the radio after you've done something in story mode(?)
		public static void UNLOCK_MISSION_NEWS_STORY(int newsStory) { Invoke(0xB165AB7C248B2DC1, V(newsStory)); }
		public static bool IS_MISSION_NEWS_STORY_UNLOCKED(int newsStory) { return Invoke<bool>(0x66E49BF55B4B1874, V(newsStory)); }
		public static int GET_AUDIBLE_MUSIC_TRACK_TEXT_ID() { return Invoke<int>(0x50B196FC9ED6545B); }
		public static void PLAY_END_CREDITS_MUSIC(bool play) { Invoke(0xCD536C4D33DCC900, V(play)); }
		public static void SKIP_RADIO_FORWARD() { Invoke(0x6DDBBDD98E2E9C25); }
		public static void FREEZE_RADIO_STATION(string radioStation) { Invoke(0x344F393B027E38C3, V(radioStation)); }
		public static void UNFREEZE_RADIO_STATION(string radioStation) { Invoke(0xFC00454CF60B91DD, V(radioStation)); }
		public static void SET_RADIO_AUTO_UNFREEZE(bool toggle) { Invoke(0xC1AA9F53CE982990, V(toggle)); }
		public static void SET_INITIAL_PLAYER_STATION(string radioStation) { Invoke(0x88795F13FACDA88D, V(radioStation)); }
		public static void SET_USER_RADIO_CONTROL_ENABLED(bool toggle) { Invoke(0x19F21E63AE6EAE4E, V(toggle)); }
		// Only found this one in the decompiled scripts:
		// 
		// AUDIO::SET_RADIO_TRACK("RADIO_03_HIPHOP_NEW", "ARM1_RADIO_STARTS");
		// 
		public static void SET_RADIO_TRACK(string radioStation, string radioTrack) { Invoke(0xB39786F201FEE30B, V(radioStation), V(radioTrack)); }
		public static void SET_RADIO_TRACK_WITH_START_OFFSET(string radioStationName, string mixName, int p2) { Invoke(0x2CB0075110BE1E56, V(radioStationName), V(mixName), V(p2)); }
		public static void SET_NEXT_RADIO_TRACK(string radioName, string radioTrack, string p2, string p3) { Invoke(0x55ECF4D13D9903B0, V(radioName), V(radioTrack), V(p2), V(p3)); }
		public static void SET_VEHICLE_RADIO_LOUD(Vehicle vehicle, bool toggle) { Invoke(0xBB6F1CAEC68B0BCE, V(vehicle), V(toggle)); }
		public static bool CAN_VEHICLE_RECEIVE_CB_RADIO(Vehicle vehicle) { return Invoke<bool>(0x032A116663A4D5AC, V(vehicle)); }
		public static void SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY(bool toggle) { Invoke(0x1098355A16064BB3, V(toggle)); }
		public static bool DOES_PLAYER_VEH_HAVE_RADIO() { return Invoke<bool>(0x109697E2FFBAC8A1); }
		public static bool IS_PLAYER_VEH_RADIO_ENABLE() { return Invoke<bool>(0x5F43D83FD6738741); }
		// can't seem to enable radio on cop cars etc
		public static void SET_VEHICLE_RADIO_ENABLED(Vehicle vehicle, bool toggle) { Invoke(0x3B988190C0AA6C0B, V(vehicle), V(toggle)); }
		public static void SET_POSITIONED_PLAYER_VEHICLE_RADIO_EMITTER_ENABLED(Any p0) { Invoke(0xDA07819E452FFE8F, V(p0)); }
		// Examples:
		// 
		// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
		// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_MICHAEL", 1);
		// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_KILL_TREVOR", 1);
		// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "END_CREDITS_SAVE_MICHAEL_TREVOR", 1);
		// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
		// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_06_COUNTRY", "MAGDEMO2_RADIO_DINGHY", 1);
		// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE", "SEA_RACE_RADIO_PLAYLIST", 1);
		// AUDIO::SET_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK", "OFF_ROAD_RADIO_ROCK_LIST", 1);
		public static void SET_CUSTOM_RADIO_TRACK_LIST(string radioStation, string trackListName, bool p2) { Invoke(0x4E404A9361F75BB2, V(radioStation), V(trackListName), V(p2)); }
		// 3 calls in the b617d scripts, removed duplicate.
		// 
		// AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_16_SILVERLAKE");
		// AUDIO::CLEAR_CUSTOM_RADIO_TRACK_LIST("RADIO_01_CLASS_ROCK");
		public static void CLEAR_CUSTOM_RADIO_TRACK_LIST(string radioStation) { Invoke(0x1654F24A88A8E3FE, V(radioStation)); }
		public static int GET_NUM_UNLOCKED_RADIO_STATIONS() { return Invoke<int>(0xF1620ECB50E01DE7); }
		public static int FIND_RADIO_STATION_INDEX(Hash stationNameHash) { return Invoke<int>(0x8D67489793FF428B, V(stationNameHash)); }
		// 6 calls in the b617d scripts, removed identical lines:
		// 
		// AUDIO::SET_RADIO_STATION_MUSIC_ONLY("RADIO_01_CLASS_ROCK", 1);
		// AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 0);
		// AUDIO::SET_RADIO_STATION_MUSIC_ONLY(AUDIO::GET_RADIO_STATION_NAME(10), 1);
		public static void SET_RADIO_STATION_MUSIC_ONLY(string radioStation, bool toggle) { Invoke(0x774BD811F656A122, V(radioStation), V(toggle)); }
		public static void SET_RADIO_FRONTEND_FADE_TIME(float fadeTime) { Invoke(0x2C96CDB04FCA358E, V(fadeTime)); }
		// AUDIO::UNLOCK_RADIO_STATION_TRACK_LIST("RADIO_16_SILVERLAKE", "MIRRORPARK_LOCKED");
		public static void UNLOCK_RADIO_STATION_TRACK_LIST(string radioStation, string trackListName) { Invoke(0x031ACB6ABA18C729, V(radioStation), V(trackListName)); }
		public static void LOCK_RADIO_STATION_TRACK_LIST(string radioStation, string trackListName) { Invoke(0xFF5E5EA2DCEEACF3, V(radioStation), V(trackListName)); }
		// Just a nullsub (i.e. does absolutely nothing) since build 1604.
		public static void UPDATE_UNLOCKABLE_DJ_RADIO_TRACKS(bool enableMixes) { Invoke(0x47AED84213A47510, V(enableMixes)); }
		// Disables the radio station (hides it from the radio wheel).
		public static void LOCK_RADIO_STATION(string radioStationName, bool toggle) { Invoke(0x477D9DB48F889591, V(radioStationName), V(toggle)); }
		// Doesn't have an effect in Story Mode.
		public static void SET_RADIO_STATION_AS_FAVOURITE(string radioStation, bool toggle) { Invoke(0x4CAFEBFA21EC188D, V(radioStation), V(toggle)); }
		public static bool IS_RADIO_STATION_FAVOURITED(string radioStation) { return Invoke<bool>(0x2B1784DB08AFEA79, V(radioStation)); }
		public static bool GET_NEXT_AUDIBLE_BEAT(float* out1, float* out2, int* out3) { return Invoke<bool>(0xC64A06D939F826F5, V(out1), V(out2), V(out3)); }
		// Changes start time of a tracklist (milliseconds)
		// R* uses a random int: MISC::GET_RANDOM_INT_IN_RANGE(0, 13) * 60000)
		public static void FORCE_MUSIC_TRACK_LIST(string radioStation, string trackListName, int milliseconds) { Invoke(0x4E0AF9114608257C, V(radioStation), V(trackListName), V(milliseconds)); }
		public static int GET_CURRENT_TRACK_PLAY_TIME(string radioStationName) { return Invoke<int>(0x3E65CDE5215832C1, V(radioStationName)); }
		public static Hash GET_CURRENT_TRACK_SOUND_NAME(string radioStationName) { return Invoke<Hash>(0x34D66BC058019CE0, V(radioStationName)); }
		public static void SET_VEHICLE_MISSILE_WARNING_ENABLED(Vehicle vehicle, bool toggle) { Invoke(0xF3365489E0DD50F9, V(vehicle), V(toggle)); }
		// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
		public static void SET_AMBIENT_ZONE_STATE(string zoneName, bool p1, bool p2) { Invoke(0xBDA07E5950085E46, V(zoneName), V(p1), V(p2)); }
		// This function also has a p2, unknown. Signature AUDIO::CLEAR_AMBIENT_ZONE_STATE(string zoneName, bool p1, Any p2);
		// 
		// Still needs more research.
		// 
		// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
		public static void CLEAR_AMBIENT_ZONE_STATE(string zoneName, bool p1) { Invoke(0x218DD44AAAC964FF, V(zoneName), V(p1)); }
		public static void SET_AMBIENT_ZONE_LIST_STATE(string ambientZone, bool p1, bool p2) { Invoke(0x9748FA4DE50CCE3E, V(ambientZone), V(p1), V(p2)); }
		public static void CLEAR_AMBIENT_ZONE_LIST_STATE(string ambientZone, bool p1) { Invoke(0x120C48C614909FA4, V(ambientZone), V(p1)); }
		// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
		public static void SET_AMBIENT_ZONE_STATE_PERSISTENT(string ambientZone, bool p1, bool p2) { Invoke(0x1D6650420CEC9D3B, V(ambientZone), V(p1), V(p2)); }
		// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
		public static void SET_AMBIENT_ZONE_LIST_STATE_PERSISTENT(string ambientZone, bool p1, bool p2) { Invoke(0xF3638DAE8C4045E1, V(ambientZone), V(p1), V(p2)); }
		// Full list of ambient zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ambientZones.json
		public static bool IS_AMBIENT_ZONE_ENABLED(string ambientZone) { return Invoke<bool>(0x01E2817A479A7F9B, V(ambientZone)); }
		public static void REFRESH_CLOSEST_OCEAN_SHORELINE() { Invoke(0x5D2BFAAB8D956E0E); }
		// All occurrences found in b617d, sorted alphabetically and identical lines removed: 
		// 
		// AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_AK");
		// AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_CUSTOM");
		// AUDIO::SET_CUTSCENE_AUDIO_OVERRIDE("_TOOTHLESS");
		// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
		public static void SET_CUTSCENE_AUDIO_OVERRIDE(string name) { Invoke(0x3B4BF5F0859204D9, V(name)); }
		public static void SET_VARIABLE_ON_SYNCH_SCENE_AUDIO(string variableName, float value) { Invoke(0xBCC29F935ED07688, V(variableName), V(value)); }
		// Plays the given police radio message.
		// 
		// All found occurrences in b617d, sorted alphabetically and identical lines removed: https://pastebin.com/GBnsQ5hr
		// Full list of police report names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/policeReportNames.json
		public static int PLAY_POLICE_REPORT(string name, float p1) { return Invoke<int>(0xDFEBD56D9BD1EB16, V(name), V(p1)); }
		public static void CANCEL_ALL_POLICE_REPORTS() { Invoke(0xB4F90FAF7670B16F); }
		// Plays the siren sound of a vehicle which is otherwise activated when fastly double-pressing the horn key.
		// Only works on vehicles with a police siren.
		public static void BLIP_SIREN(Vehicle vehicle) { Invoke(0x1B9025BDA76822B6, V(vehicle)); }
		// Overrides the vehicle's horn hash.
		// When changing this hash on a vehicle, it will not return the 'overwritten' hash. It will still always return the default horn hash (same as GET_VEHICLE_DEFAULT_HORN)
		// 
		// vehicle - the vehicle whose horn should be overwritten
		// mute - p1 seems to be an option for muting the horn
		// p2 - maybe a horn id, since the function AUDIO::GET_VEHICLE_DEFAULT_HORN(veh) exists?
		public static void OVERRIDE_VEH_HORN(Vehicle vehicle, bool overrid, int hornHash) { Invoke(0x3CDC1E622CCE0356, V(vehicle), V(overrid), V(hornHash)); }
		// Checks whether the horn of a vehicle is currently played.
		public static bool IS_HORN_ACTIVE(Vehicle vehicle) { return Invoke<bool>(0x9D6BFC12B05C6121, V(vehicle)); }
		// Makes pedestrians sound their horn longer, faster and more agressive when they use their horn.
		public static void SET_AGGRESSIVE_HORNS(bool toggle) { Invoke(0x395BF71085D1B1D9, V(toggle)); }
		// Does nothing (it's a nullsub).
		public static void SET_RADIO_POSITION_AUDIO_MUTE(bool p0) { Invoke(0x02E93C796ABD3A97, V(p0)); }
		// SET_VEHICLE_CONVERSATIONS_PERSIST?
		public static void SET_VEHICLE_CONVERSATIONS_PERSIST(bool p0, bool p1) { Invoke(0x58BB377BEC7CD5F4, V(p0), V(p1)); }
		public static void SET_VEHICLE_CONVERSATIONS_PERSIST_NEW(bool p0, bool p1, bool p2) { Invoke(0x9BD7BD55E4533183, V(p0), V(p1), V(p2)); }
		public static bool IS_STREAM_PLAYING() { return Invoke<bool>(0xD11FA52EB849D978); }
		public static int GET_STREAM_PLAY_TIME() { return Invoke<int>(0x4E72BBDBCA58A3DB); }
		// Example:
		// AUDIO::LOAD_STREAM("CAR_STEAL_1_PASSBY", "CAR_STEAL_1_SOUNDSET");
		// 
		// All found occurrences in the b678d decompiled scripts: https://pastebin.com/3rma6w5w
		// 
		// Stream names often ends with "_MASTER", "_SMALL" or "_STREAM". Also "_IN", "_OUT" and numbers.   
		// 
		// soundSet is often set to 0 in the scripts. These are common to end the soundSets: "_SOUNDS", "_SOUNDSET" and numbers.
		// 
		// Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
		public static bool LOAD_STREAM(string streamName, string soundSet) { return Invoke<bool>(0x1F1F957154EC51DF, V(streamName), V(soundSet)); }
		// Example:
		// AUDIO::LOAD_STREAM_WITH_START_OFFSET("STASH_TOXIN_STREAM", 2400, "FBI_05_SOUNDS");
		// 
		// Only called a few times in the scripts.
		// 
		// Full list of audio / sound names by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/soundNames.json
		public static bool LOAD_STREAM_WITH_START_OFFSET(string streamName, int startOffset, string soundSet) { return Invoke<bool>(0x59C16B79F53B3712, V(streamName), V(startOffset), V(soundSet)); }
		public static void PLAY_STREAM_FROM_PED(Ped ped) { Invoke(0x89049DD63C08B5D1, V(ped)); }
		public static void PLAY_STREAM_FROM_VEHICLE(Vehicle vehicle) { Invoke(0xB70374A758007DFA, V(vehicle)); }
		// Used with AUDIO::LOAD_STREAM
		// 
		// Example from finale_heist2b.c4:
		// TASK::TASK_SYNCHRONIZED_SCENE(l_4C8[2/*14*/], l_4C8[2/*14*/]._f7, l_30A, "push_out_vault_l", 4.0, -1.5, 5, 713, 4.0, 0);
		//                     PED::SET_SYNCHRONIZED_SCENE_PHASE(l_4C8[2/*14*/]._f7, 0.0);
		//                     PED::FORCE_PED_AI_AND_ANIMATION_UPDATE(l_4C8[2/*14*/], 0, 0);
		//                     PED::SET_PED_COMBAT_ATTRIBUTES(l_4C8[2/*14*/], 38, 1);
		//                     PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(l_4C8[2/*14*/], 1);
		//                     if (AUDIO::LOAD_STREAM("Gold_Cart_Push_Anim_01", "BIG_SCORE_3B_SOUNDS")) {
		//                         AUDIO::PLAY_STREAM_FROM_OBJECT(l_36F[0/*1*/]);
		//                     }
		public static void PLAY_STREAM_FROM_OBJECT(Obj obj) { Invoke(0xEBAA9B64D76356FD, V(obj)); }
		public static void PLAY_STREAM_FRONTEND() { Invoke(0x58FCE43488F9F5F4); }
		public static void PLAY_STREAM_FROM_POSITION(float x, float y, float z) { Invoke(0x21442F412E8DE56B, V(x), V(y), V(z)); }
		public static void STOP_STREAM() { Invoke(0xA4718A1419D18151); }
		public static void STOP_PED_SPEAKING(Ped ped, bool shaking) { Invoke(0x9D64D7405520E3D3, V(ped), V(shaking)); }
		public static void BLOCK_ALL_SPEECH_FROM_PED(Ped ped, bool p1, bool p2) { Invoke(0xF8AD2EED7C47E8FE, V(ped), V(p1), V(p2)); }
		public static void STOP_PED_SPEAKING_SYNCED(Ped ped, bool p1) { Invoke(0xAB6781A5F3101470, V(ped), V(p1)); }
		public static void DISABLE_PED_PAIN_AUDIO(Ped ped, bool toggle) { Invoke(0xA9A41C1E940FB0E8, V(ped), V(toggle)); }
		// Common in the scripts:
		// AUDIO::IS_AMBIENT_SPEECH_DISABLED(PLAYER::PLAYER_PED_ID());
		public static bool IS_AMBIENT_SPEECH_DISABLED(Ped ped) { return Invoke<bool>(0x932C2D096A2C3FFF, V(ped)); }
		public static void BLOCK_SPEECH_CONTEXT_GROUP(string p0, int p1) { Invoke(0xA8A7D434AFB4B97B, V(p0), V(p1)); }
		public static void UNBLOCK_SPEECH_CONTEXT_GROUP(string p0) { Invoke(0x2ACABED337622DF2, V(p0)); }
		public static void SET_SIREN_WITH_NO_DRIVER(Vehicle vehicle, bool toggle) { Invoke(0x1FEF0683B96EBCF2, V(vehicle), V(toggle)); }
		public static void SET_SIREN_BYPASS_MP_DRIVER_CHECK(Vehicle vehicle, bool toggle) { Invoke(0xF584CF8529B51434, V(vehicle), V(toggle)); }
		public static void TRIGGER_SIREN_AUDIO(Vehicle vehicle) { Invoke(0x66C3FB05206041BA, V(vehicle)); }
		public static void SET_HORN_PERMANENTLY_ON(Vehicle vehicle) { Invoke(0x9C11908013EA4715, V(vehicle)); }
		public static void SET_HORN_ENABLED(Vehicle vehicle, bool toggle) { Invoke(0x76D683C108594D0E, V(vehicle), V(toggle)); }
		public static void SET_AUDIO_VEHICLE_PRIORITY(Vehicle vehicle, Any p1) { Invoke(0xE5564483E407F914, V(vehicle), V(p1)); }
		public static void SET_HORN_PERMANENTLY_ON_TIME(Vehicle vehicle, float time) { Invoke(0x9D3AF56E94C9AE98, V(vehicle), V(time)); }
		public static void USE_SIREN_AS_HORN(Vehicle vehicle, bool toggle) { Invoke(0xFA932DE350266EF8, V(vehicle), V(toggle)); }
		// This native sets the audio of the specified vehicle to the audioName (p1).
		// 
		// Use the audioNameHash found in vehicles.meta
		// 
		// Example:
		// _SET_VEHICLE_AUDIO(veh, "ADDER");
		// The selected vehicle will now have the audio of the Adder.
		public static void FORCE_USE_AUDIO_GAME_OBJECT(Vehicle vehicle, string audioName) { Invoke(0x4F0C413926060B38, V(vehicle), V(audioName)); }
		public static void PRELOAD_VEHICLE_AUDIO_BANK(Hash vehicleModel) { Invoke(0xCA4CEA6AE0000A7E, V(vehicleModel)); }
		public static void SET_VEHICLE_STARTUP_REV_SOUND(Vehicle vehicle, string p1, string p2) { Invoke(0xF1F8157B8C3F171C, V(vehicle), V(p1), V(p2)); }
		public static void RESET_VEHICLE_STARTUP_REV_SOUND(Vehicle vehicle) { Invoke(0xD2DCCD8E16E20997, V(vehicle)); }
		public static void SET_VEHICLE_FORCE_REVERSE_WARNING(Any p0, Any p1) { Invoke(0x97FFB4ADEED08066, V(p0), V(p1)); }
		public static bool IS_VEHICLE_AUDIBLY_DAMAGED(Vehicle vehicle) { return Invoke<bool>(0x5DB8010EE71FDEF2, V(vehicle)); }
		public static void SET_VEHICLE_AUDIO_ENGINE_DAMAGE_FACTOR(Vehicle vehicle, float damageFactor) { Invoke(0x59E7B488451F4D3A, V(vehicle), V(damageFactor)); }
		// intensity: 0.0f - 1.0f, only used once with 1.0f in R* Scripts (nigel2)
		// Makes an engine rattling noise when you decelerate, you need to be going faster to hear lower values
		public static void SET_VEHICLE_AUDIO_BODY_DAMAGE_FACTOR(Vehicle vehicle, float intensity) { Invoke(0x01BB4D577D38BD9E, V(vehicle), V(intensity)); }
		// Called together with SET_VEHICLE_TYRES_CAN_BURST
		public static void _FORCE_VEHICLE_ENGINE_SYNTH(Vehicle vehicle, bool force) { Invoke(0xEB7D0E1FCC8FE17A, V(vehicle), V(force)); }
		public static void ENABLE_VEHICLE_FANBELT_DAMAGE(Vehicle vehicle, bool toggle) { Invoke(0x1C073274E065C6D2, V(vehicle), V(toggle)); }
		public static void ENABLE_VEHICLE_EXHAUST_POPS(Vehicle vehicle, bool toggle) { Invoke(0x2BE4BC731D039D5A, V(vehicle), V(toggle)); }
		// SET_VEHICLE_BOOST_ACTIVE(vehicle, 1, 0);
		// SET_VEHICLE_BOOST_ACTIVE(vehicle, 0, 0); 
		// 
		// Will give a boost-soundeffect.
		public static void SET_VEHICLE_BOOST_ACTIVE(Vehicle vehicle, bool toggle) { Invoke(0x4A04DE7CAB2739A1, V(vehicle), V(toggle)); }
		public static void SET_PLAYER_VEHICLE_ALARM_AUDIO_ACTIVE(Vehicle vehicle, bool toggle) { Invoke(0x6FDDAD856E36988A, V(vehicle), V(toggle)); }
		public static void SET_SCRIPT_UPDATE_DOOR_AUDIO(Hash doorHash, bool toggle) { Invoke(0x06C0023BED16DD6B, V(doorHash), V(toggle)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static void PLAY_VEHICLE_DOOR_OPEN_SOUND(Vehicle vehicle, int doorId) { Invoke(0x3A539D52857EA82D, V(vehicle), V(doorId)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static void PLAY_VEHICLE_DOOR_CLOSE_SOUND(Vehicle vehicle, int doorId) { Invoke(0x62A456AA4769EF34, V(vehicle), V(doorId)); }
		// Works for planes only.
		public static void ENABLE_STALL_WARNING_SOUNDS(Vehicle vehicle, bool toggle) { Invoke(0xC15907D667F7CFB2, V(vehicle), V(toggle)); }
		public static void _ENABLE_DRAG_RACE_STATIONARY_WARNING_SOUNDS(Vehicle vehicle, bool enable) { Invoke(0xBEFB80290414FD4F, V(vehicle), V(enable)); }
		// Hardcoded to return 1
		public static bool IS_GAME_IN_CONTROL_OF_MUSIC() { return Invoke<bool>(0x6D28DC1671E334FD); }
		public static void SET_GPS_ACTIVE(bool active) { Invoke(0x3BD3F52BA9B1E4E8, V(active)); }
		// Called 38 times in the scripts. There are 5 different audioNames used.
		//  One unknown removed below.
		// 
		// AUDIO::PLAY_MISSION_COMPLETE_AUDIO("DEAD");
		// AUDIO::PLAY_MISSION_COMPLETE_AUDIO("FRANKLIN_BIG_01");
		// AUDIO::PLAY_MISSION_COMPLETE_AUDIO("GENERIC_FAILED");
		// AUDIO::PLAY_MISSION_COMPLETE_AUDIO("TREVOR_SMALL_01");
		public static void PLAY_MISSION_COMPLETE_AUDIO(string audioName) { Invoke(0xB138AAB8A70D3C69, V(audioName)); }
		public static bool IS_MISSION_COMPLETE_PLAYING() { return Invoke<bool>(0x19A30C23F5827F8A); }
		public static bool IS_MISSION_COMPLETE_READY_FOR_UI() { return Invoke<bool>(0x6F259F82D873B8B8); }
		public static void BLOCK_DEATH_JINGLE(bool toggle) { Invoke(0xF154B8D1775B2DEC, V(toggle)); }
		// Used to prepare a scene where the surrounding sound is muted or a bit changed. This does not play any sound.
		// 
		// List of all usable scene names found in b617d. Sorted alphabetically and identical names removed: https://pastebin.com/MtM9N9CC
		// Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
		public static bool START_AUDIO_SCENE(string scene) { return Invoke<bool>(0x013A80FC08F6E4F2, V(scene)); }
		// Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
		public static void STOP_AUDIO_SCENE(string scene) { Invoke(0xDFE8422B3B94E688, V(scene)); }
		// ??
		public static void STOP_AUDIO_SCENES() { Invoke(0xBAC7FC81A75EC1A1); }
		// Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
		public static bool IS_AUDIO_SCENE_ACTIVE(string scene) { return Invoke<bool>(0xB65B60556E2A9225, V(scene)); }
		// Full list of audio scene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/audioSceneNames.json
		public static void SET_AUDIO_SCENE_VARIABLE(string scene, string variable, float value) { Invoke(0xEF21A9EF089A2668, V(scene), V(variable), V(value)); }
		public static void SET_AUDIO_SCRIPT_CLEANUP_TIME(int time) { Invoke(0xA5F377B175A699C5, V(time)); }
		// All found occurrences in b678d:
		// https://pastebin.com/ceu67jz8
		public static void ADD_ENTITY_TO_AUDIO_MIX_GROUP(Entity entity, string groupName, float p2) { Invoke(0x153973AB99FE8980, V(entity), V(groupName), V(p2)); }
		public static void REMOVE_ENTITY_FROM_AUDIO_MIX_GROUP(Entity entity, float p1) { Invoke(0x18EB48CFC41F2EA0, V(entity), V(p1)); }
		public static bool AUDIO_IS_MUSIC_PLAYING() { return Invoke<bool>(0x845FFC3A4FEEFA3E); }
		// This is an alias of AUDIO_IS_MUSIC_PLAYING.
		public static bool AUDIO_IS_SCRIPTED_MUSIC_PLAYING() { return Invoke<bool>(0x2DD39BF3E2F9C47F); }
		// All music evt names found in the b617d scripts: https://pastebin.com/GnYt0R3P
		// Full list of music evt names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
		public static bool PREPARE_MUSIC_EVENT(string eventName) { return Invoke<bool>(0x1E5185B72EF5158A, V(eventName)); }
		// All music evt names found in the b617d scripts: https://pastebin.com/GnYt0R3P
		// Full list of music evt names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
		public static bool CANCEL_MUSIC_EVENT(string eventName) { return Invoke<bool>(0x5B17A90291133DA5, V(eventName)); }
		// List of all usable evt names found in b617d used with this native. Sorted alphabetically and identical names removed: https://pastebin.com/RzDFmB1W
		// 
		// All music evt names found in the b617d scripts: https://pastebin.com/GnYt0R3P
		// Full list of music evt names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/musicEventNames.json
		public static bool TRIGGER_MUSIC_EVENT(string eventName) { return Invoke<bool>(0x706D57B0F50DA710, V(eventName)); }
		public static bool IS_MUSIC_ONESHOT_PLAYING() { return Invoke<bool>(0xA097AB275061FB21); }
		public static int GET_MUSIC_PLAYTIME() { return Invoke<int>(0xE7A0D23DC414507B); }
		public static void SET_GLOBAL_RADIO_SIGNAL_LEVEL(Any p0) { Invoke(0x159B7318403A1CD8, V(p0)); }
		public static void RECORD_BROKEN_GLASS(float x, float y, float z, float radius) { Invoke(0xFBE20329593DEC9D, V(x), V(y), V(z), V(radius)); }
		public static void CLEAR_ALL_BROKEN_GLASS() { Invoke(0xB32209EFFDC04913); }
		public static void SCRIPT_OVERRIDES_WIND_ELEVATION(bool p0, Any p1) { Invoke(0x70B8EC8FC108A634, V(p0), V(p1)); }
		public static void SET_PED_WALLA_DENSITY(float p0, float p1) { Invoke(0x149AEE66F0CB3A99, V(p0), V(p1)); }
		public static void SET_PED_INTERIOR_WALLA_DENSITY(float p0, float p1) { Invoke(0x8BF907833BE275DE, V(p0), V(p1)); }
		public static void FORCE_PED_PANIC_WALLA() { Invoke(0x062D5EAD4DA2FA6A); }
		// Example:
		// 
		// bool prepareAlarm = AUDIO::PREPARE_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
		// Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
		public static bool PREPARE_ALARM(string alarmName) { return Invoke<bool>(0x9D74AE343DB65533, V(alarmName)); }
		// Example:
		// 
		// This will start the alarm at Fort Zancudo.
		// 
		// AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
		// 
		// First parameter (char) is the name of the alarm.
		// Second parameter (bool) is unknown, it does not seem to make a difference if this one is 0 or 1.
		// 
		// ----------
		// 
		// It DOES make a difference but it has to do with the duration or something I dunno yet
		// 
		// ----------
		// 
		//  Found in the b617d scripts:
		// 
		//  AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS", 0);
		//  AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER", 1);
		//  AUDIO::START_ALARM("AGENCY_HEIST_FIB_TOWER_ALARMS_UPPER_B", 0);
		//  AUDIO::START_ALARM("BIG_SCORE_HEIST_VAULT_ALARMS", a_0);
		//  AUDIO::START_ALARM("FBI_01_MORGUE_ALARMS", 1);
		//  AUDIO::START_ALARM("FIB_05_BIOTECH_LAB_ALARMS", 0);
		//  AUDIO::START_ALARM("JEWEL_STORE_HEIST_ALARMS", 0);
		//  AUDIO::START_ALARM("PALETO_BAY_SCORE_ALARM", 1);
		//  AUDIO::START_ALARM("PALETO_BAY_SCORE_CHICKEN_FACTORY_ALARM", 0);
		//  AUDIO::START_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
		//  AUDIO::START_ALARM("PORT_OF_LS_HEIST_SHIP_ALARMS", 0);
		//  AUDIO::START_ALARM("PRISON_ALARMS", 0);
		//  AUDIO::START_ALARM("PROLOGUE_VAULT_ALARMS", 0);
		// Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
		public static void START_ALARM(string alarmName, bool p2) { Invoke(0x0355EF116C4C97B2, V(alarmName), V(p2)); }
		// Example:
		// 
		// This will stop the alarm at Fort Zancudo.
		// 
		// AUDIO::STOP_ALARM("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS", 1);
		// 
		// First parameter (char) is the name of the alarm.
		// Second parameter (bool) has to be true (1) to have any effect.
		// Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
		public static void STOP_ALARM(string alarmName, bool toggle) { Invoke(0xA1CADDCD98415A41, V(alarmName), V(toggle)); }
		public static void STOP_ALL_ALARMS(bool stop) { Invoke(0x2F794A877ADD4C92, V(stop)); }
		// Example:
		// 
		// bool playing = AUDIO::IS_ALARM_PLAYING("PORT_OF_LS_HEIST_FORT_ZANCUDO_ALARMS");
		// Full list of alarm names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/alarmSounds.json
		public static bool IS_ALARM_PLAYING(string alarmName) { return Invoke<bool>(0x226435CB96CCFC8C, V(alarmName)); }
		// Returns hash of default vehicle horn
		// 
		// Hash is stored in audVehicleAudioEntity
		public static Hash GET_VEHICLE_DEFAULT_HORN(Vehicle vehicle) { return Invoke<Hash>(0x02165D55000219AC, V(vehicle)); }
		public static Hash GET_VEHICLE_DEFAULT_HORN_IGNORE_MODS(Vehicle vehicle) { return Invoke<Hash>(0xACB5DCCA1EC76840, V(vehicle)); }
		public static void RESET_PED_AUDIO_FLAGS(Ped ped) { Invoke(0xF54BB7B61036F335, V(ped)); }
		// Enables/disables ped's "loud" footstep sound.
		public static void SET_PED_FOOTSTEPS_EVENTS_ENABLED(Ped ped, bool toggle) { Invoke(0x0653B735BFBDFE87, V(ped), V(toggle)); }
		// Enables/disables ped's "quiet" footstep sound.
		public static void SET_PED_CLOTH_EVENTS_ENABLED(Ped ped, bool toggle) { Invoke(0x29DA3CA8D8B2692D, V(ped), V(toggle)); }
		// Sets audio flag "OverridePlayerGroundMaterial"
		public static void OVERRIDE_PLAYER_GROUND_MATERIAL(Hash hash, bool toggle) { Invoke(0xD2CC78CD3D0B50F9, V(hash), V(toggle)); }
		public static void USE_FOOTSTEP_SCRIPT_SWEETENERS(Ped ped, bool p1, Hash hash) { Invoke(0xBF4DC1784BE94DFA, V(ped), V(p1), V(hash)); }
		// Sets audio flag "OverrideMicrophoneSettings"
		public static void OVERRIDE_MICROPHONE_SETTINGS(Hash hash, bool toggle) { Invoke(0x75773E11BA459E90, V(hash), V(toggle)); }
		public static void FREEZE_MICROPHONE() { Invoke(0xD57AAAE0E2214D11); }
		// If value is set to true, and ambient siren sound will be played.
		// Appears to enable/disable an audio flag.
		public static void DISTANT_COP_CAR_SIRENS(bool value) { Invoke(0x552369F549563AD5, V(value)); }
		public static void SET_SIREN_CAN_BE_CONTROLLED_BY_AUDIO(Vehicle vehicle, bool p1) { Invoke(0x43FA0DFC5DF87815, V(vehicle), V(p1)); }
		public static void ENABLE_STUNT_JUMP_AUDIO() { Invoke(0xB81CF134AEB56FFB); }
		// Possible flag names:
		// "ActivateSwitchWheelAudio"
		// "AllowAmbientSpeechInSlowMo"
		// "AllowCutsceneOverScreenFade"
		// "AllowForceRadioAfterRetune"
		// "AllowPainAndAmbientSpeechToPlayDuringCutscene"
		// "AllowPlayerAIOnMission"
		// "AllowPoliceScannerWhenPlayerHasNoControl"
		// "AllowRadioDuringSwitch"
		// "AllowRadioOverScreenFade"
		// "AllowScoreAndRadio"
		// "AllowScriptedSpeechInSlowMo"
		// "AvoidMissionCompleteDelay"
		// "DisableAbortConversationForDeathAndInjury"
		// "DisableAbortConversationForRagdoll"
		// "DisableBarks"
		// "DisableFlightMusic"
		// "DisableReplayScriptStreamRecording"
		// "EnableHeadsetBeep"
		// "ForceConversationInterrupt"
		// "ForceSeamlessRadioSwitch"
		// "ForceSniperAudio"
		// "FrontendRadioDisabled"
		// "HoldMissionCompleteWhenPrepared"
		// "IsDirectorModeActive"
		// "IsPlayerOnMissionForSpeech"
		// "ListenerReverbDisabled"
		// "LoadMPData"
		// "MobileRadioInGame"
		// "OnlyAllowScriptTriggerPoliceScanner"
		// "PlayMenuMusic"
		// "PoliceScannerDisabled"
		// "ScriptedConvListenerMaySpeak"
		// "SpeechDucksScore"
		// "SuppressPlayerScubaBreathing"
		// "WantedMusicDisabled"
		// "WantedMusicOnMission"
		// 
		// -------------------------------
		// No added flag names between b393d and b573d, including b573d.
		// 
		// #######################################################################
		// 
		// "IsDirectorModeActive" is an audio flag which will allow you to play speech infinitely without any pauses like in Director Mode.
		// 
		// -----------------------------------------------------------------------
		// 
		// All flag IDs and hashes:
		// 
		// ID: 00 | Hash: 0x0FED7A7F
		// ID: 01 | Hash: 0x20A7858F
		// ID: 02 | Hash: 0xA11C2259
		// ID: 03 | Hash: 0x08DE4700
		// ID: 04 | Hash: 0x989F652F
		// ID: 05 | Hash: 0x3C9E76BA
		// ID: 06 | Hash: 0xA805FEB0
		// ID: 07 | Hash: 0x4B94EA26
		// ID: 08 | Hash: 0x803ACD34
		// ID: 09 | Hash: 0x7C741226
		// ID: 10 | Hash: 0x31DB9EBD
		// ID: 11 | Hash: 0xDF386F18
		// ID: 12 | Hash: 0x669CED42
		// ID: 13 | Hash: 0x51F22743
		// ID: 14 | Hash: 0x2052B35C
		// ID: 15 | Hash: 0x071472DC
		// ID: 16 | Hash: 0xF9928BCC
		// ID: 17 | Hash: 0x7ADBDD48
		// ID: 18 | Hash: 0xA959BA1A
		// ID: 19 | Hash: 0xBBE89B60
		// ID: 20 | Hash: 0x87A08871
		// ID: 21 | Hash: 0xED1057CE
		// ID: 22 | Hash: 0x1584AD7A
		// ID: 23 | Hash: 0x8582CFCB
		// ID: 24 | Hash: 0x7E5E2FB0
		// ID: 25 | Hash: 0xAE4F72DB
		// ID: 26 | Hash: 0x5D16D1FA
		// ID: 27 | Hash: 0x06B2F4B8
		// ID: 28 | Hash: 0x5D4CDC96
		// ID: 29 | Hash: 0x8B5A48BA
		// ID: 30 | Hash: 0x98FBD539
		// ID: 31 | Hash: 0xD8CB0473
		// ID: 32 | Hash: 0x5CBB4874
		// ID: 33 | Hash: 0x2E9F93A9
		// ID: 34 | Hash: 0xD93BEA86
		// ID: 35 | Hash: 0x92109B7D
		// ID: 36 | Hash: 0xB7EC9E4D
		// ID: 37 | Hash: 0xCABDBB1D
		// ID: 38 | Hash: 0xB3FD4A52
		// ID: 39 | Hash: 0x370D94E5
		// ID: 40 | Hash: 0xA0F7938F
		// ID: 41 | Hash: 0xCBE1CE81
		// ID: 42 | Hash: 0xC27F1271
		// ID: 43 | Hash: 0x9E3258EB
		// ID: 44 | Hash: 0x551CDA5B
		// ID: 45 | Hash: 0xCB6D663C
		// ID: 46 | Hash: 0x7DACE87F
		// ID: 47 | Hash: 0xF9DE416F
		// ID: 48 | Hash: 0x882E6E9E
		// ID: 49 | Hash: 0x16B447E7
		// ID: 50 | Hash: 0xBD867739
		// ID: 51 | Hash: 0xA3A58604
		// ID: 52 | Hash: 0x7E046BBC
		// ID: 53 | Hash: 0xD95FDB98
		// ID: 54 | Hash: 0x5842C0ED
		// ID: 55 | Hash: 0x285FECC6
		// ID: 56 | Hash: 0x9351AC43
		// ID: 57 | Hash: 0x50032E75
		// ID: 58 | Hash: 0xAE6D0D59
		// ID: 59 | Hash: 0xD6351785
		// ID: 60 | Hash: 0xD25D71BC
		// ID: 61 | Hash: 0x1F7F6423
		// ID: 62 | Hash: 0xE24C3AA6
		// ID: 63 | Hash: 0xBFFDD2B7
		public static void SET_AUDIO_FLAG(string flagName, bool toggle) { Invoke(0xB9EFD5C25018725A, V(flagName), V(toggle)); }
		// p1 is always 0 in the scripts
		public static bool PREPARE_SYNCHRONIZED_AUDIO_EVENT(string audioEvent, Any p1) { return Invoke<bool>(0xC7ABCACA4985A766, V(audioEvent), V(p1)); }
		public static bool PREPARE_SYNCHRONIZED_AUDIO_EVENT_FOR_SCENE(int sceneID, string audioEvent) { return Invoke<bool>(0x029FE7CD1B7E2E75, V(sceneID), V(audioEvent)); }
		public static bool PLAY_SYNCHRONIZED_AUDIO_EVENT(int sceneID) { return Invoke<bool>(0x8B2FD4560E55DD2D, V(sceneID)); }
		public static bool STOP_SYNCHRONIZED_AUDIO_EVENT(int sceneID) { return Invoke<bool>(0x92D6A88E64A94430, V(sceneID)); }
		public static void INIT_SYNCH_SCENE_AUDIO_WITH_POSITION(string audioEvent, float x, float y, float z) { Invoke(0xC8EDE9BDBCCBA6D4, V(audioEvent), V(x), V(y), V(z)); }
		public static void INIT_SYNCH_SCENE_AUDIO_WITH_ENTITY(string audioEvent, Entity entity) { Invoke(0x950A154B8DAB6185, V(audioEvent), V(entity)); }
		// Needs to be called every frame.
		// Audio mode to apply this frame: https://alloc8or.re/gta5/doc/enums/audSpecialEffectMode.txt
		public static void SET_AUDIO_SPECIAL_EFFECT_MODE(int mode) { Invoke(0x12561FCBB62D5B9C, V(mode)); }
		// Found in the b617d scripts, duplicates removed:  
		// 
		// AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN", "V_CARSHOWROOM_PS_WINDOW_BROKEN");
		// 
		//  AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN", "V_CIA_PS_WINDOW_BROKEN");
		// 
		//  AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED", "V_DLC_HEIST_APARTMENT_DOOR_OPEN");
		// 
		//  AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT", "V_FINALEBANK_PS_VAULT_BLOWN");
		// 
		//  AUDIO::SET_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW", "V_MICHAEL_PS_BATHROOM_WITHOUT_WINDOW");
		public static void SET_PORTAL_SETTINGS_OVERRIDE(string p0, string p1) { Invoke(0x044DBAD7A7FA2BE5, V(p0), V(p1)); }
		//  Found in the b617d scripts, duplicates removed: 
		// 
		//  AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CARSHOWROOM_PS_WINDOW_UNBROKEN");
		//  AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_CIA_PS_WINDOW_UNBROKEN");
		//  AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_DLC_HEIST_APARTMENT_DOOR_CLOSED");
		//  AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_FINALEBANK_PS_VAULT_INTACT");
		//  AUDIO::REMOVE_PORTAL_SETTINGS_OVERRIDE("V_MICHAEL_PS_BATHROOM_WITH_WINDOW");
		public static void REMOVE_PORTAL_SETTINGS_OVERRIDE(string p0) { Invoke(0xB4BBFD9CD8B3922B, V(p0)); }
		// STOP_S[MOKE_GRENADE_EXPLOSION_SOUNDS]?
		public static void STOP_SMOKE_GRENADE_EXPLOSION_SOUNDS() { Invoke(0xE4E6DD5566D28C82); }
		public static int GET_MUSIC_VOL_SLIDER() { return Invoke<int>(0x3A48AB4445D499BE); }
		public static void REQUEST_TENNIS_BANKS(Ped ped) { Invoke(0x4ADA3F19BE4A6047, V(ped)); }
		public static void UNREQUEST_TENNIS_BANKS() { Invoke(0x0150B6FF25A9E2E5); }
		public static void SET_SKIP_MINIGUN_SPIN_UP_AUDIO(bool p0) { Invoke(0xBEF34B1D9624D5DD, V(p0)); }
		public static void STOP_CUTSCENE_AUDIO() { Invoke(0x806058BBDC136E06); }
		public static bool HAS_LOADED_MP_DATA_SET() { return Invoke<bool>(0x544810ED9DB6BBE6); }
		public static bool HAS_LOADED_SP_DATA_SET() { return Invoke<bool>(0x5B50ABB1FE3746F4); }
		public static int GET_VEHICLE_HORN_SOUND_INDEX(Vehicle vehicle) { return Invoke<int>(0xD53F3A29BCE2580E, V(vehicle)); }
		public static void SET_VEHICLE_HORN_SOUND_INDEX(Vehicle vehicle, int value) { Invoke(0x0350E7E17BA767D0, V(vehicle), V(value)); }




		// BRAIN::ADD_SCRIPT_TO_RANDOM_PED("pb_prostitute", ${s_f_y_hooker_01}, 100, 0);
		// 
		// - Nacorpio
		// 
		// -----
		// 
		// Hardcoded to not work in Multiplayer.
		public static void ADD_SCRIPT_TO_RANDOM_PED(string name, Hash model, float p2, float p3) { Invoke(0x4EE5367468A65CCC, V(name), V(model), V(p2), V(p3)); }
		// Registers a script for any obj with a specific model hash.
		// 
		// BRAIN::REGISTER_OBJECT_SCRIPT_BRAIN("ob_telescope", ${prop_telescope_01}, 100, 4.0, -1, 9);
		// 
		// - Nacorpio
		public static void REGISTER_OBJECT_SCRIPT_BRAIN(string scriptName, Hash modelHash, int p2, float activationRange, int p4, int p5) { Invoke(0x0BE84C318BA6EC22, V(scriptName), V(modelHash), V(p2), V(activationRange), V(p4), V(p5)); }
		public static bool IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE(Obj obj) { return Invoke<bool>(0xCCBA154209823057, V(obj)); }
		public static void REGISTER_WORLD_POINT_SCRIPT_BRAIN(string scriptName, float activationRange, int p2) { Invoke(0x3CDC7136613284BD, V(scriptName), V(activationRange), V(p2)); }
		// Gets whether the world point the calling script is registered to is within desired range of the player.
		public static bool IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE() { return Invoke<bool>(0xC5042CC6F5E3D450); }
		public static void ENABLE_SCRIPT_BRAIN_SET(int brainSet) { Invoke(0x67AA4D73F0CFA86B, V(brainSet)); }
		public static void DISABLE_SCRIPT_BRAIN_SET(int brainSet) { Invoke(0x14D8518E9760F08F, V(brainSet)); }
		public static void REACTIVATE_ALL_WORLD_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE() { Invoke(0x0B40ED49D7D6FF84); }
		public static void REACTIVATE_ALL_OBJECT_BRAINS_THAT_ARE_WAITING_TILL_OUT_OF_RANGE() { Invoke(0x4D953DF78EBF8158); }
		// Possible values:
		// 
		// act_cinema
		// am_mp_carwash_launch
		// am_mp_carwash_control
		// am_mp_property_ext
		// chop
		// fairgroundHub
		// launcher_BasejumpHeli
		// launcher_BasejumpPack
		// launcher_CarWash
		// launcher_golf
		// launcher_Hunting_Ambient
		// launcher_MrsPhilips
		// launcher_OffroadRacing
		// launcher_pilotschool
		// launcher_Racing
		// launcher_rampage
		// launcher_rampage
		// launcher_range
		// launcher_stunts
		// launcher_stunts
		// launcher_tennis
		// launcher_Tonya
		// launcher_Triathlon
		// launcher_Yoga
		// ob_mp_bed_low
		// ob_mp_bed_med
		public static void REACTIVATE_NAMED_WORLD_BRAINS_WAITING_TILL_OUT_OF_RANGE(string scriptName) { Invoke(0x6D6840CEE8845831, V(scriptName)); }
		// Looks like a cousin of above function _6D6840CEE8845831 as it was found among them. Must be similar
		// 
		// Here are possible values of argument - 
		// 
		// "ob_tv"
		// "launcher_Darts"
		public static void REACTIVATE_NAMED_OBJECT_BRAINS_WAITING_TILL_OUT_OF_RANGE(string scriptName) { Invoke(0x6E91B04E08773030, V(scriptName)); }




		// ease - smooth transition between the camera's positions
		// easeTime - Time in milliseconds for the transition to happen
		// 
		// If you have created a script (rendering) camera, and want to go back to the 
		// character (gameplay) camera, call this native with render set to 0.
		// Setting ease to 1 will smooth the transition.
		public static void RENDER_SCRIPT_CAMS(bool render, bool ease, int easeTime, bool p3, bool p4, Any p5) { Invoke(0x07E5B515DB0636FC, V(render), V(ease), V(easeTime), V(p3), V(p4), V(p5)); }
		// This native makes the gameplay camera zoom into first person/third person with a special effect.
		public static void STOP_RENDERING_SCRIPT_CAMS_USING_CATCH_UP(bool render, float p1, int p2, Any p3) { Invoke(0xC819F3CBB62BF692, V(render), V(p1), V(p2), V(p3)); }
		// "DEFAULT_SCRIPTED_CAMERA"
		// "DEFAULT_ANIMATED_CAMERA"
		// "DEFAULT_SPLINE_CAMERA"
		// "DEFAULT_SCRIPTED_FLY_CAMERA"
		// "TIMED_SPLINE_CAMERA"
		public static Cam CREATE_CAM(string camName, bool p1) { return Invoke<Cam>(0xC3981DCE61D9E13F, V(camName), V(p1)); }
		// camName is always set to "DEFAULT_SCRIPTED_CAMERA" in Rockstar's scripts.
		// ------------
		// Camera names found in the b617d scripts:
		// "DEFAULT_ANIMATED_CAMERA"
		// "DEFAULT_SCRIPTED_CAMERA"
		// "DEFAULT_SCRIPTED_FLY_CAMERA"
		// "DEFAULT_SPLINE_CAMERA"
		// ------------
		// Side Note: It seems p8 is basically to represent what would be the bool p1 within CREATE_CAM native. As well as the p9 since it's always 2 in scripts seems to represent what would be the last param within SET_CAM_ROT native which normally would be 2.
		public static Cam CREATE_CAM_WITH_PARAMS(string camName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, bool p8, int p9) { return Invoke<Cam>(0xB51194800B257161, V(camName), V(posX), V(posY), V(posZ), V(rotX), V(rotY), V(rotZ), V(fov), V(p8), V(p9)); }
		public static Cam CREATE_CAMERA(Hash camHash, bool p1) { return Invoke<Cam>(0x5E3CF89C6BCCA67D, V(camHash), V(p1)); }
		// p9 uses 2 by default
		public static Cam CREATE_CAMERA_WITH_PARAMS(Hash camHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fov, bool p8, Any p9) { return Invoke<Cam>(0x6ABFA3E16460F22D, V(camHash), V(posX), V(posY), V(posZ), V(rotX), V(rotY), V(rotZ), V(fov), V(p8), V(p9)); }
		// bool param indicates whether the cam should be destroyed if it belongs to the calling script.
		public static void DESTROY_CAM(Cam cam, bool bScriptHostCam) { Invoke(0x865908C81A2C22E9, V(cam), V(bScriptHostCam)); }
		// bool param indicates whether the cam should be destroyed if it belongs to the calling script.
		public static void DESTROY_ALL_CAMS(bool bScriptHostCam) { Invoke(0x8E5FB15663F79120, V(bScriptHostCam)); }
		// Returns whether or not the passed camera handle exists.
		public static bool DOES_CAM_EXIST(Cam cam) { return Invoke<bool>(0xA7A932170592B50E, V(cam)); }
		// Set camera as active/inactive.
		public static void SET_CAM_ACTIVE(Cam cam, bool active) { Invoke(0x026FB97D0A425F84, V(cam), V(active)); }
		// Returns whether or not the passed camera handle is active.
		public static bool IS_CAM_ACTIVE(Cam cam) { return Invoke<bool>(0xDFB2B516207D3534, V(cam)); }
		public static bool IS_CAM_RENDERING(Cam cam) { return Invoke<bool>(0x02EC0AF5C5A49B7A, V(cam)); }
		public static Cam GET_RENDERING_CAM() { return Invoke<Cam>(0x5234F9F10919EABA); }
		public static Vector3 GET_CAM_COORD(Cam cam) { return Invoke<Vector3>(0xBAC038F7459AE5AE, V(cam)); }
		// The last parameter, as in other "ROT" methods, is usually 2.
		public static Vector3 GET_CAM_ROT(Cam cam, int rotationOrder) { return Invoke<Vector3>(0x7D304C1C955E3E12, V(cam), V(rotationOrder)); }
		public static float GET_CAM_FOV(Cam cam) { return Invoke<float>(0xC3330A45CCCDB26A, V(cam)); }
		public static float GET_CAM_NEAR_CLIP(Cam cam) { return Invoke<float>(0xC520A34DAFBF24B1, V(cam)); }
		public static float GET_CAM_FAR_CLIP(Cam cam) { return Invoke<float>(0xB60A9CFEB21CA6AA, V(cam)); }
		public static float GET_CAM_NEAR_DOF(Cam cam) { return Invoke<float>(0xC2612D223D915A1C, V(cam)); }
		public static float GET_CAM_FAR_DOF(Cam cam) { return Invoke<float>(0x255F8DAFD540D397, V(cam)); }
		public static float GET_CAM_DOF_STRENGTH(Cam cam) { return Invoke<float>(0x06D153C0B99B6128, V(cam)); }
		public static void SET_CAM_PARAMS(Cam cam, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float fieldOfView, Any p8, int p9, int p10, int p11) { Invoke(0xBFD8727AEA3CCEBA, V(cam), V(posX), V(posY), V(posZ), V(rotX), V(rotY), V(rotZ), V(fieldOfView), V(p8), V(p9), V(p10), V(p11)); }
		// Sets the position of the cam.
		public static void SET_CAM_COORD(Cam cam, float posX, float posY, float posZ) { Invoke(0x4D41783FB745E42E, V(cam), V(posX), V(posY), V(posZ)); }
		// Sets the rotation of the cam.
		// Last parameter unknown.
		// 
		// Last parameter seems to always be set to 2.
		public static void SET_CAM_ROT(Cam cam, float rotX, float rotY, float rotZ, int rotationOrder) { Invoke(0x85973643155D0B07, V(cam), V(rotX), V(rotY), V(rotZ), V(rotationOrder)); }
		// Sets the field of view of the cam.
		// ---------------------------------------------
		// Min: 1.0f
		// Max: 130.0f
		public static void SET_CAM_FOV(Cam cam, float fieldOfView) { Invoke(0xB13C14F66A00D047, V(cam), V(fieldOfView)); }
		public static void SET_CAM_NEAR_CLIP(Cam cam, float nearClip) { Invoke(0xC7848EFCCC545182, V(cam), V(nearClip)); }
		public static void SET_CAM_FAR_CLIP(Cam cam, float farClip) { Invoke(0xAE306F2A904BF86E, V(cam), V(farClip)); }
		public static void FORCE_CAM_FAR_CLIP(Cam cam, float p1) { Invoke(0xAABD62873FFB1A33, V(cam), V(p1)); }
		public static void SET_CAM_MOTION_BLUR_STRENGTH(Cam cam, float strength) { Invoke(0x6F0F77FBA9A8F2E6, V(cam), V(strength)); }
		public static void SET_CAM_NEAR_DOF(Cam cam, float nearDOF) { Invoke(0x3FA4BF0A7AB7DE2C, V(cam), V(nearDOF)); }
		public static void SET_CAM_FAR_DOF(Cam cam, float farDOF) { Invoke(0xEDD91296CD01AEE0, V(cam), V(farDOF)); }
		public static void SET_CAM_DOF_STRENGTH(Cam cam, float dofStrength) { Invoke(0x5EE29B4D7D5DF897, V(cam), V(dofStrength)); }
		public static void SET_CAM_DOF_PLANES(Cam cam, float p1, float p2, float p3, float p4) { Invoke(0x3CF48F6F96E749DC, V(cam), V(p1), V(p2), V(p3), V(p4)); }
		public static void SET_CAM_USE_SHALLOW_DOF_MODE(Cam cam, bool toggle) { Invoke(0x16A96863A17552BB, V(cam), V(toggle)); }
		public static void SET_USE_HI_DOF() { Invoke(0xA13B0222F3D94A94); }
		// Only used in R* Script fm_mission_controller_2020
		public static void SET_USE_HI_DOF_ON_SYNCED_SCENE_THIS_UPDATE() { Invoke(0x731A880555DA3647); }
		public static void SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE(Cam camera, float p1) { Invoke(0xF55E4046F6F831DC, V(camera), V(p1)); }
		public static void SET_CAM_DOF_OVERRIDDEN_FOCUS_DISTANCE_BLEND_LEVEL(Any p0, float p1) { Invoke(0xE111A7C0D200CBC5, V(p0), V(p1)); }
		// This native has its name defined inside its codE
		// 
		public static void SET_CAM_DOF_FNUMBER_OF_LENS(Cam camera, float p1) { Invoke(0x7DD234D6F3914C5B, V(camera), V(p1)); }
		// Native name labeled within its code
		public static void SET_CAM_DOF_FOCAL_LENGTH_MULTIPLIER(Cam camera, float multiplier) { Invoke(0x47B595D60664CFFA, V(camera), V(multiplier)); }
		// This native has a name defined inside its code
		public static void SET_CAM_DOF_FOCUS_DISTANCE_BIAS(Cam camera, float p1) { Invoke(0xC669EEA5D031B7DE, V(camera), V(p1)); }
		// This native has a name defined inside its code
		public static void SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE(Cam camera, float p1) { Invoke(0xC3654A441402562D, V(camera), V(p1)); }
		// This native has a name defined inside its code
		public static void SET_CAM_DOF_MAX_NEAR_IN_FOCUS_DISTANCE_BLEND_LEVEL(Cam camera, float p1) { Invoke(0x2C654B4943BDDF7C, V(camera), V(p1)); }
		// This native has a name defined inside its code
		public static void SET_CAM_DOF_SHOULD_KEEP_LOOK_AT_TARGET_IN_FOCUS(Cam camera, bool state) { Invoke(0x7CF3AF51DCFE4108, V(camera), V(state)); }
		// Last param determines if its relative to the Entity
		public static void ATTACH_CAM_TO_ENTITY(Cam cam, Entity entity, float xOffset, float yOffset, float zOffset, bool isRelative) { Invoke(0xFEDB7D269E8C60E3, V(cam), V(entity), V(xOffset), V(yOffset), V(zOffset), V(isRelative)); }
		public static void ATTACH_CAM_TO_PED_BONE(Cam cam, Ped ped, int boneIndex, float x, float y, float z, bool heading) { Invoke(0x61A3DBA14AB7F411, V(cam), V(ped), V(boneIndex), V(x), V(y), V(z), V(heading)); }
		public static void HARD_ATTACH_CAM_TO_PED_BONE(Cam cam, Ped ped, int boneIndex, float p3, float p4, float p5, float p6, float p7, float p8, bool p9) { Invoke(0x149916F50C34A40D, V(cam), V(ped), V(boneIndex), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9)); }
		// Example from am_mp_drone script: 
		// 
		// CAM::HARD_ATTACH_CAM_TO_ENTITY(Local_190.f_169, NETWORK::NET_TO_OBJ(Local_190.f_159), 0f, 0f, 180f, Var0, 1);
		public static void HARD_ATTACH_CAM_TO_ENTITY(Cam cam, Entity entity, float xRot, float yRot, float zRot, float xOffset, float yOffset, float zOffset, bool isRelative) { Invoke(0x202A5ED9CE01D6E7, V(cam), V(entity), V(xRot), V(yRot), V(zRot), V(xOffset), V(yOffset), V(zOffset), V(isRelative)); }
		// This native works with vehicles only. Bone indexes are usually given by this native GET_ENTITY_BONE_INDEX_BY_NAME.
		public static void ATTACH_CAM_TO_VEHICLE_BONE(Cam cam, Vehicle vehicle, int boneIndex, bool relativeRotation, float rotX, float rotY, float rotZ, float offsetX, float offsetY, float offsetZ, bool fixedDirection) { Invoke(0x8DB3F12A02CAEF72, V(cam), V(vehicle), V(boneIndex), V(relativeRotation), V(rotX), V(rotY), V(rotZ), V(offsetX), V(offsetY), V(offsetZ), V(fixedDirection)); }
		public static void DETACH_CAM(Cam cam) { Invoke(0xA2FABBE87F4BAD82, V(cam)); }
		// The native seems to only be called once.
		// 
		// The native is used as so,
		// CAM::SET_CAM_INHERIT_ROLL_VEHICLE(l_544, getElem(2, &l_525, 4));
		// In the exile1 script.
		public static void SET_CAM_INHERIT_ROLL_VEHICLE(Cam cam, bool p1) { Invoke(0x45F1DE9C34B93AE6, V(cam), V(p1)); }
		public static void POINT_CAM_AT_COORD(Cam cam, float x, float y, float z) { Invoke(0xF75497BB865F0803, V(cam), V(x), V(y), V(z)); }
		// p5 always seems to be 1 i.e TRUE
		public static void POINT_CAM_AT_ENTITY(Cam cam, Entity entity, float p2, float p3, float p4, bool p5) { Invoke(0x5640BFF86B16E8DC, V(cam), V(entity), V(p2), V(p3), V(p4), V(p5)); }
		// Parameters p0-p5 seems correct. The bool p6 is unknown, but through every X360 script it's always 1. Please correct p0-p5 if any prove to be wrong. 
		public static void POINT_CAM_AT_PED_BONE(Cam cam, Ped ped, int boneIndex, float x, float y, float z, bool p6) { Invoke(0x68B2B5F33BA63C41, V(cam), V(ped), V(boneIndex), V(x), V(y), V(z), V(p6)); }
		public static void STOP_CAM_POINTING(Cam cam) { Invoke(0xF33AB75780BA57DE, V(cam)); }
		// Allows you to aim and shoot at the direction the camera is facing.
		public static void SET_CAM_AFFECTS_AIMING(Cam cam, bool toggle) { Invoke(0x8C1DC7770C51DC8D, V(cam), V(toggle)); }
		// Rotates the radar to match the camera's Z rotation
		public static void SET_CAM_CONTROLS_MINI_MAP_HEADING(Cam cam, bool toggle) { Invoke(0x661B5C8654ADD825, V(cam), V(toggle)); }
		// When set to true shadows appear more smooth but less detailed.
		// Set to false by default.
		public static void SET_CAM_IS_INSIDE_VEHICLE(Cam cam, bool toggle) { Invoke(0xA2767257A320FC82, V(cam), V(toggle)); }
		public static void ALLOW_MOTION_BLUR_DECAY(Any p0, bool p1) { Invoke(0x271017B9BA825366, V(p0), V(p1)); }
		// NOTE: Debugging functions are not present in the retail version of the game.
		public static void SET_CAM_DEBUG_NAME(Cam camera, string name) { Invoke(0x1B93E0107865DD40, V(camera), V(name)); }
		public static Cam GET_DEBUG_CAM() { return Invoke<Cam>(0x77C3CEC46BE286F6); }
		// I filled p1-p6 (the floats) as they are as other natives with 6 floats in a row are similar and I see no other method. So if a test from anyone proves them wrong please correct.
		// 
		// p7 (length) determines the length of the spline, affects camera path and duration of transition between previous node and this one
		// 
		// p8 big values ~100 will slow down the camera movement before reaching this node
		// 
		// p9 != 0 seems to override the rotation/pitch (bool?)
		public static void ADD_CAM_SPLINE_NODE(Cam camera, float x, float y, float z, float xRot, float yRot, float zRot, int length, int smoothingStyle, int rotationOrder) { Invoke(0x8609C75EC438FB3B, V(camera), V(x), V(y), V(z), V(xRot), V(yRot), V(zRot), V(length), V(smoothingStyle), V(rotationOrder)); }
		// p0 is the spline camera to which the node is being added.
		// p1 is the camera used to create the node.
		// p3 is always 3 in scripts. It might be smoothing style or rotation order.
		public static void ADD_CAM_SPLINE_NODE_USING_CAMERA_FRAME(Cam cam, Cam cam2, int length, int p3) { Invoke(0x0A9F2A468B328E74, V(cam), V(cam2), V(length), V(p3)); }
		// p0 is the spline camera to which the node is being added.
		// p1 is the camera used to create the node.
		// p3 is always 3 in scripts. It might be smoothing style or rotation order.
		public static void ADD_CAM_SPLINE_NODE_USING_CAMERA(Cam cam, Cam cam2, int length, int p3) { Invoke(0x0FB82563989CF4FB, V(cam), V(cam2), V(length), V(p3)); }
		// p2 is always 2 in scripts. It might be smoothing style or rotation order.
		public static void ADD_CAM_SPLINE_NODE_USING_GAMEPLAY_FRAME(Cam cam, int length, int p2) { Invoke(0x609278246A29CA34, V(cam), V(length), V(p2)); }
		public static void SET_CAM_SPLINE_PHASE(Cam cam, float p1) { Invoke(0x242B5874F0A4E052, V(cam), V(p1)); }
		// Can use this with SET_CAM_SPLINE_PHASE to set the float it this native returns.
		// 
		// (returns 1.0f when no nodes has been added, reached end of non existing spline)
		public static float GET_CAM_SPLINE_PHASE(Cam cam) { return Invoke<float>(0xB5349E36C546509A, V(cam)); }
		// I'm pretty sure the parameter is the camera as usual, but I am not certain so I'm going to leave it as is.
		public static float GET_CAM_SPLINE_NODE_PHASE(Cam cam) { return Invoke<float>(0xD9D0E694C8282C96, V(cam)); }
		// I named p1 as timeDuration as it is obvious. I'm assuming tho it is ran in ms(Milliseconds) as usual.
		public static void SET_CAM_SPLINE_DURATION(Cam cam, int timeDuration) { Invoke(0x1381539FEE034CDA, V(cam), V(timeDuration)); }
		public static void SET_CAM_SPLINE_SMOOTHING_STYLE(Cam cam, int smoothingStyle) { Invoke(0xD1B0F412F109EA5D, V(cam), V(smoothingStyle)); }
		public static int GET_CAM_SPLINE_NODE_INDEX(Cam cam) { return Invoke<int>(0xB22B17DF858716A6, V(cam)); }
		public static void SET_CAM_SPLINE_NODE_EASE(Cam cam, int easingFunction, int p2, float p3) { Invoke(0x83B8201ED82A9A2D, V(cam), V(easingFunction), V(p2), V(p3)); }
		public static void SET_CAM_SPLINE_NODE_VELOCITY_SCALE(Cam cam, int p1, float scale) { Invoke(0xA6385DEB180F319F, V(cam), V(p1), V(scale)); }
		public static void OVERRIDE_CAM_SPLINE_VELOCITY(Cam cam, int p1, float p2, float p3) { Invoke(0x40B62FA033EB0346, V(cam), V(p1), V(p2), V(p3)); }
		// Max value for p1 is 15.
		public static void OVERRIDE_CAM_SPLINE_MOTION_BLUR(Cam cam, int p1, float p2, float p3) { Invoke(0x7DCF7C708D292D55, V(cam), V(p1), V(p2), V(p3)); }
		public static void SET_CAM_SPLINE_NODE_EXTRA_FLAGS(Cam cam, int p1, int flags) { Invoke(0x7BF1A54AE67AC070, V(cam), V(p1), V(flags)); }
		public static bool IS_CAM_SPLINE_PAUSED(Cam cam) { return Invoke<bool>(0x0290F35C0AD97864, V(cam)); }
		public static void _INTERPOLATE_CAM_WITH_PARAMS(Cam camera, float camPosX, float camPosY, float camPosZ, float camRotX, float camRotY, float camRotZ, float fov, int duration, int posCurveType, int rotCurveType, int rotOrder, int fovCurveType) { Invoke(0xDDA77EE33C005AAF, V(camera), V(camPosX), V(camPosY), V(camPosZ), V(camRotX), V(camRotY), V(camRotZ), V(fov), V(duration), V(posCurveType), V(rotCurveType), V(rotOrder), V(fovCurveType)); }
		public static void _ACTIVATE_CAM_WITH_INTERP_AND_FOV_CURVE(Cam camTo, Cam camFrom, int duration, int easeLocation, int easeRotation, int easeFov) { Invoke(0x34CFC4C2A38E83E3, V(camTo), V(camFrom), V(duration), V(easeLocation), V(easeRotation), V(easeFov)); }
		// Previous declaration void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, bool easeLocation, bool easeRotation) is completely wrong. The last two params are integers not BOOLs...
		// 
		public static void SET_CAM_ACTIVE_WITH_INTERP(Cam camTo, Cam camFrom, int duration, int easeLocation, int easeRotation) { Invoke(0x9FBDA379383A52A4, V(camTo), V(camFrom), V(duration), V(easeLocation), V(easeRotation)); }
		public static bool IS_CAM_INTERPOLATING(Cam cam) { return Invoke<bool>(0x036F97C908C2B52C, V(cam)); }
		// Possible shake types (updated b617d):
		// 
		// DEATH_FAIL_IN_EFFECT_SHAKE
		// DRUNK_SHAKE
		// FAMILY5_DRUG_TRIP_SHAKE
		// HAND_SHAKE
		// JOLT_SHAKE
		// LARGE_EXPLOSION_SHAKE
		// MEDIUM_EXPLOSION_SHAKE
		// SMALL_EXPLOSION_SHAKE
		// ROAD_VIBRATION_SHAKE
		// SKY_DIVING_SHAKE
		// VIBRATE_SHAKE
		// 
		// Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
		public static void SHAKE_CAM(Cam cam, string type, float amplitude) { Invoke(0x6A25241C340D3822, V(cam), V(type), V(amplitude)); }
		// Example from michael2 script.
		// 
		// CAM::ANIMATED_SHAKE_CAM(l_5069, "shake_cam_all@", "light", "", 1f);
		public static void ANIMATED_SHAKE_CAM(Cam cam, string p1, string p2, string p3, float amplitude) { Invoke(0xA2746EEAE3E577CD, V(cam), V(p1), V(p2), V(p3), V(amplitude)); }
		public static bool IS_CAM_SHAKING(Cam cam) { return Invoke<bool>(0x6B24BFE83A2BE47B, V(cam)); }
		public static void SET_CAM_SHAKE_AMPLITUDE(Cam cam, float amplitude) { Invoke(0xD93DB43B82BC0D00, V(cam), V(amplitude)); }
		public static void STOP_CAM_SHAKING(Cam cam, bool p1) { Invoke(0xBDECF64367884AC3, V(cam), V(p1)); }
		// CAM::SHAKE_SCRIPT_GLOBAL("HAND_SHAKE", 0.2);
		// 
		// Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
		public static void SHAKE_SCRIPT_GLOBAL(string p0, float p1) { Invoke(0xF4C8CF9E353AFECA, V(p0), V(p1)); }
		// CAM::ANIMATED_SHAKE_SCRIPT_GLOBAL("SHAKE_CAM_medium", "medium", "", 0.5f);
		// 
		// Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
		public static void ANIMATED_SHAKE_SCRIPT_GLOBAL(string p0, string p1, string p2, float p3) { Invoke(0xC2EAE3FB8CDBED31, V(p0), V(p1), V(p2), V(p3)); }
		// In drunk_Controller->c4, sub_309
		// if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
		//     CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
		// }
		public static bool IS_SCRIPT_GLOBAL_SHAKING() { return Invoke<bool>(0xC912AF078AF19212); }
		// In drunk_Controller->c4, sub_309
		// if (CAM::IS_SCRIPT_GLOBAL_SHAKING()) {
		//     CAM::STOP_SCRIPT_GLOBAL_SHAKING(0);
		// }
		public static void STOP_SCRIPT_GLOBAL_SHAKING(bool p0) { Invoke(0x1C9D7949FA533490, V(p0)); }
		// p1: 0..16
		public static void TRIGGER_VEHICLE_PART_BROKEN_CAMERA_SHAKE(Vehicle vehicle, int p1, float p2) { Invoke(0x5D96CFB59DA076A0, V(vehicle), V(p1), V(p2)); }
		// Atleast one time in a script for the zRot Rockstar uses GET_ENTITY_HEADING to help fill the parameter.
		// 
		// p9 is unknown at this time.
		// p10 throughout all the X360 Scripts is always 2.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool PLAY_CAM_ANIM(Cam cam, string animName, string animDictionary, float x, float y, float z, float xRot, float yRot, float zRot, bool p9, int p10) { return Invoke<bool>(0x9A2D0FB2E7852392, V(cam), V(animName), V(animDictionary), V(x), V(y), V(z), V(xRot), V(yRot), V(zRot), V(p9), V(p10)); }
		public static bool IS_CAM_PLAYING_ANIM(Cam cam, string animName, string animDictionary) { return Invoke<bool>(0xC90621D8A0CEECF2, V(cam), V(animName), V(animDictionary)); }
		public static void SET_CAM_ANIM_CURRENT_PHASE(Cam cam, float phase) { Invoke(0x4145A4C44FF3B5A6, V(cam), V(phase)); }
		public static float GET_CAM_ANIM_CURRENT_PHASE(Cam cam) { return Invoke<float>(0xA10B2DB49E92A6B0, V(cam)); }
		// Examples:
		// 
		// CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_2734, NETWORK::NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(l_2739), "PLAYER_EXIT_L_CAM", "mp_doorbell");
		// 
		// CAM::PLAY_SYNCHRONIZED_CAM_ANIM(l_F0D[7/*1*/], l_F4D[15/*1*/], "ah3b_attackheli_cam2", "missheistfbi3b_helicrash");
		public static bool PLAY_SYNCHRONIZED_CAM_ANIM(Any p0, Any p1, string animName, string animDictionary) { return Invoke<bool>(0xE32EFE9AB4A9AA0C, V(p0), V(p1), V(animName), V(animDictionary)); }
		public static void SET_FLY_CAM_HORIZONTAL_RESPONSE(Cam cam, float p1, float p2, float p3) { Invoke(0x503F5920162365B2, V(cam), V(p1), V(p2), V(p3)); }
		public static void SET_FLY_CAM_VERTICAL_RESPONSE(Cam cam, float p1, float p2, float p3) { Invoke(0xE827B9382CFB41BA, V(cam), V(p1), V(p2), V(p3)); }
		public static void SET_FLY_CAM_MAX_HEIGHT(Cam cam, float height) { Invoke(0xF9D02130ECDD1D77, V(cam), V(height)); }
		public static void SET_FLY_CAM_COORD_AND_CONSTRAIN(Cam cam, float x, float y, float z) { Invoke(0xC91C6C55199308CA, V(cam), V(x), V(y), V(z)); }
		public static void SET_FLY_CAM_VERTICAL_CONTROLS_THIS_UPDATE(Cam cam) { Invoke(0xC8B5C4A79CC18B94, V(cam)); }
		public static bool WAS_FLY_CAM_CONSTRAINED_ON_PREVIOUS_UDPATE(Cam cam) { return Invoke<bool>(0x5C48A1D6E3B33179, V(cam)); }
		public static bool IS_SCREEN_FADED_OUT() { return Invoke<bool>(0xB16FCE9DDC7BA182); }
		public static bool IS_SCREEN_FADED_IN() { return Invoke<bool>(0x5A859503B0C08678); }
		public static bool IS_SCREEN_FADING_OUT() { return Invoke<bool>(0x797AC7CB535BA28F); }
		public static bool IS_SCREEN_FADING_IN() { return Invoke<bool>(0x5C544BC6C57AC575); }
		// Fades the screen in.
		// 
		// duration: The time the fade should take, in milliseconds.
		public static void DO_SCREEN_FADE_IN(int duration) { Invoke(0xD4E8E24955024033, V(duration)); }
		// Fades the screen out.
		// 
		// duration: The time the fade should take, in milliseconds.
		public static void DO_SCREEN_FADE_OUT(int duration) { Invoke(0x891B5B39AC6302AF, V(duration)); }
		public static void SET_WIDESCREEN_BORDERS(bool p0, int p1) { Invoke(0xDCD4EA924F42D01A, V(p0), V(p1)); }
		public static bool ARE_WIDESCREEN_BORDERS_ACTIVE() { return Invoke<bool>(0x4879E4FE39074CDF); }
		public static Vector3 GET_GAMEPLAY_CAM_COORD() { return Invoke<Vector3>(0x14D6F5678D8F1B37); }
		// p0 dosen't seem to change much, I tried it with 0, 1, 2:
		// 0-Pitch(X): -70.000092
		// 0-Roll(Y): -0.000001
		// 0-Yaw(Z): -43.886459
		// 1-Pitch(X): -70.000092
		// 1-Roll(Y): -0.000001
		// 1-Yaw(Z): -43.886463
		// 2-Pitch(X): -70.000092
		// 2-Roll(Y): -0.000002
		// 2-Yaw(Z): -43.886467
		public static Vector3 GET_GAMEPLAY_CAM_ROT(int rotationOrder) { return Invoke<Vector3>(0x837765A25378F0BB, V(rotationOrder)); }
		public static float GET_GAMEPLAY_CAM_FOV() { return Invoke<float>(0x65019750A0324133); }
		// some camera effect that is used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
		public static void SET_GAMEPLAY_CAM_MOTION_BLUR_SCALING_THIS_UPDATE(float p0) { Invoke(0x487A82C650EB7799, V(p0)); }
		// some camera effect that is (also) used in the drunk-cheat, and turned off (by setting it to 0.0) along with the shaking effects once the drunk cheat is disabled.
		public static void SET_GAMEPLAY_CAM_MAX_MOTION_BLUR_STRENGTH_THIS_UPDATE(float p0) { Invoke(0x0225778816FDC28C, V(p0)); }
		public static float GET_GAMEPLAY_CAM_RELATIVE_HEADING() { return Invoke<float>(0x743607648ADD4587); }
		// Sets the camera position relative to heading in float from -360 to +360.
		// 
		// Heading is alwyas 0 in aiming camera.
		public static void SET_GAMEPLAY_CAM_RELATIVE_HEADING(float heading) { Invoke(0xB4EC2312F4E5B1F1, V(heading)); }
		public static float GET_GAMEPLAY_CAM_RELATIVE_PITCH() { return Invoke<float>(0x3A6867B4845BEDA2); }
		// This native sets the camera's pitch (rotation on the x-axis).
		public static void SET_GAMEPLAY_CAM_RELATIVE_PITCH(float angle, float scalingFactor) { Invoke(0x6D0858B8EDFD2B7D, V(angle), V(scalingFactor)); }
		public static void RESET_GAMEPLAY_CAM_FULL_ATTACH_PARENT_TRANSFORM_TIMER() { Invoke(0x7295C203DD659DFE); }
		public static void FORCE_CAMERA_RELATIVE_HEADING_AND_PITCH(float roll, float pitch, float yaw) { Invoke(0x48608C3464F58AB4, V(roll), V(pitch), V(yaw)); }
		public static void FORCE_BONNET_CAMERA_RELATIVE_HEADING_AND_PITCH(float p0, float p1) { Invoke(0x28B022A17B068A3A, V(p0), V(p1)); }
		// Does nothing
		public static void SET_FIRST_PERSON_SHOOTER_CAMERA_HEADING(float yaw) { Invoke(0x103991D4A307D472, V(yaw)); }
		public static void SET_FIRST_PERSON_SHOOTER_CAMERA_PITCH(float pitch) { Invoke(0x759E13EBC1C15C5A, V(pitch)); }
		public static void SET_SCRIPTED_CAMERA_IS_FIRST_PERSON_THIS_FRAME(bool p0) { Invoke(0x469F2ECDEC046337, V(p0)); }
		// Possible shake types (updated b617d):
		// 
		// DEATH_FAIL_IN_EFFECT_SHAKE
		// DRUNK_SHAKE
		// FAMILY5_DRUG_TRIP_SHAKE
		// HAND_SHAKE
		// JOLT_SHAKE
		// LARGE_EXPLOSION_SHAKE
		// MEDIUM_EXPLOSION_SHAKE
		// SMALL_EXPLOSION_SHAKE
		// ROAD_VIBRATION_SHAKE
		// SKY_DIVING_SHAKE
		// VIBRATE_SHAKE
		// 
		// Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
		public static void SHAKE_GAMEPLAY_CAM(string shakeName, float intensity) { Invoke(0xFD55E49555E017CF, V(shakeName), V(intensity)); }
		public static bool IS_GAMEPLAY_CAM_SHAKING() { return Invoke<bool>(0x016C090630DF1F89); }
		// Sets the amplitude for the gameplay (i.e. 3rd or 1st) camera to shake. Used in script "drunk_Controller->ysc.c4" to simulate making the player drunk.
		public static void SET_GAMEPLAY_CAM_SHAKE_AMPLITUDE(float amplitude) { Invoke(0xA87E00932DB4D85D, V(amplitude)); }
		public static void STOP_GAMEPLAY_CAM_SHAKING(bool p0) { Invoke(0x0EF93E9F3D08C178, V(p0)); }
		// Forces gameplay cam to specified ped as if you were the ped or spectating it
		public static void SET_GAMEPLAY_CAM_FOLLOW_PED_THIS_UPDATE(Ped ped) { Invoke(0x8BBACBF51DA047A8, V(ped)); }
		// Examples when this function will return 0 are:
		// - During busted screen.
		// - When player is coming out from a hospital.
		// - When player is coming out from a police station.
		// - When player is buying gun from AmmuNation.
		public static bool IS_GAMEPLAY_CAM_RENDERING() { return Invoke<bool>(0x39B5D1B10383F0C8); }
		public static bool IS_INTERPOLATING_FROM_SCRIPT_CAMS() { return Invoke<bool>(0x3044240D2E0FA842); }
		public static bool IS_INTERPOLATING_TO_SCRIPT_CAMS() { return Invoke<bool>(0x705A276EBFF3133D); }
		public static void SET_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_STATE(bool p0) { Invoke(0xDB90C6CCA48940F1, V(p0)); }
		// Shows the crosshair even if it wouldn't show normally. Only works for one frame, so make sure to call it repeatedly.
		public static void DISABLE_GAMEPLAY_CAM_ALTITUDE_FOV_SCALING_THIS_UPDATE() { Invoke(0xEA7F0AD7E9BA676F); }
		public static bool IS_GAMEPLAY_CAM_LOOKING_BEHIND() { return Invoke<bool>(0x70FDA869F3317EA9); }
		public static void SET_GAMEPLAY_CAM_IGNORE_ENTITY_COLLISION_THIS_UPDATE(Entity entity) { Invoke(0x2AED6301F67007D5, V(entity)); }
		public static void DISABLE_CAM_COLLISION_FOR_OBJECT(Entity entity) { Invoke(0x49482F9FCD825AAA, V(entity)); }
		public static void BYPASS_CAMERA_COLLISION_BUOYANCY_TEST_THIS_UPDATE() { Invoke(0xA7092AFE81944852); }
		public static void SET_GAMEPLAY_CAM_ENTITY_TO_LIMIT_FOCUS_OVER_BOUNDING_SPHERE_THIS_UPDATE(Entity entity) { Invoke(0xFD3151CD37EA2245, V(entity)); }
		// Sets some flag on cinematic camera
		public static void DISABLE_FIRST_PERSON_CAMERA_WATER_CLIPPING_TEST_THIS_UPDATE() { Invoke(0xB1381B97F70C7B30); }
		public static void SET_FOLLOW_CAM_IGNORE_ATTACH_PARENT_MOVEMENT_THIS_UPDATE() { Invoke(0xDD79DF9F4D26E1C9); }
		public static bool IS_SPHERE_VISIBLE(float x, float y, float z, float radius) { return Invoke<bool>(0xE33D59DA70B58FDF, V(x), V(y), V(z), V(radius)); }
		public static bool IS_FOLLOW_PED_CAM_ACTIVE() { return Invoke<bool>(0xC6D3D26810C8E0F9); }
		// From the scripts:
		// 
		// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ATTACHED_TO_ROPE_CAMERA", 0);
		// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_ON_EXILE1_LADDER_CAMERA", 1500);
		// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
		// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 3000);
		// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_FAMILY5_CAMERA", 0);
		// CAM::SET_FOLLOW_PED_CAM_THIS_UPDATE("FOLLOW_PED_SKY_DIVING_CAMERA", 0);
		public static bool SET_FOLLOW_PED_CAM_THIS_UPDATE(string camName, int p1) { return Invoke<bool>(0x44A113DD6FFC48D1, V(camName), V(p1)); }
		public static void USE_SCRIPT_CAM_FOR_AMBIENT_POPULATION_ORIGIN_THIS_FRAME(bool p0, bool p1) { Invoke(0x271401846BD26E92, V(p0), V(p1)); }
		public static void SET_FOLLOW_PED_CAM_LADDER_ALIGN_THIS_UPDATE() { Invoke(0xC8391C309684595A); }
		// minimum: Degrees between -180f and 180f.
		// maximum: Degrees between -180f and 180f.
		// 
		// Clamps the gameplay camera's current yaw.
		// 
		// Eg. SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the horizontal angle directly behind the player.
		public static void SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(float minimum, float maximum) { Invoke(0x8F993D26E0CA5E8E, V(minimum), V(maximum)); }
		// minimum: Degrees between -90f and 90f.
		// maximum: Degrees between -90f and 90f.
		// 
		// Clamps the gameplay camera's current pitch.
		// 
		// Eg. SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(0.0f, 0.0f) will set the vertical angle directly behind the player.
		public static void SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(float minimum, float maximum) { Invoke(0xA516C198B7DCA1E1, V(minimum), V(maximum)); }
		// Seems to animate the gameplay camera zoom.
		// 
		// Eg. SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1000f);
		// will animate the camera zooming in from 1000 meters away.
		// 
		// Game scripts use it like this:
		// 
		// // Setting this to 1 prevents V key from changing zoom
		// PLAYER::SET_PLAYER_FORCED_ZOOM(PLAYER::PLAYER_ID(), 1);
		// 
		// // These restrict how far you can move cam up/down left/right
		// CAM::SET_THIRD_PERSON_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(-20f, 50f);
		// CAM::SET_THIRD_PERSON_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(-60f, 0f);
		// 
		// CAM::SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(1f, 1f);
		public static void SET_THIRD_PERSON_CAM_ORBIT_DISTANCE_LIMITS_THIS_UPDATE(float p0, float distance) { Invoke(0xDF2E1F7742402E81, V(p0), V(distance)); }
		public static float _GET_THIRD_PERSON_CAM_MIN_ORBIT_DISTANCE_SPRING() { return Invoke<float>(0xBC456FB703431785); }
		public static float _GET_THIRD_PERSON_CAM_MAX_ORBIT_DISTANCE_SPRING() { return Invoke<float>(0xD4592A16D36673ED); }
		// Forces gameplay cam to specified vehicle as if you were in it
		public static void SET_IN_VEHICLE_CAM_STATE_THIS_UPDATE(Vehicle p0, int p1) { Invoke(0xE9EA16D6E54CDCA4, V(p0), V(p1)); }
		// Disables first person camera for the current frame.
		// 
		// Found in decompiled scripts:
		// GRAPHICS::DRAW_DEBUG_TEXT_2D("Disabling First Person Cam", 0.5, 0.8, 0.0, 0, 0, 255, 255);
		// CAM::DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE();
		public static void DISABLE_ON_FOOT_FIRST_PERSON_VIEW_THIS_UPDATE() { Invoke(0xDE2EF5DA284CC8DF); }
		public static void DISABLE_FIRST_PERSON_FLASH_EFFECT_THIS_UPDATE() { Invoke(0x59424BD75174C9B1); }
		public static void BLOCK_FIRST_PERSON_ORIENTATION_RESET_THIS_UPDATE() { Invoke(0x9F97DA93681F87EA); }
		public static int GET_FOLLOW_PED_CAM_ZOOM_LEVEL() { return Invoke<int>(0x33E6C8EFD0CD93E9); }
		// See viewmode enum in CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE for return value
		public static int GET_FOLLOW_PED_CAM_VIEW_MODE() { return Invoke<int>(0x8D4D46230B2C353A); }
		// Sets the type of Player camera:
		// 
		// 0 - Third Person Close
		// 1 - Third Person Mid
		// 2 - Third Person Far
		// 4 - First Person
		public static void SET_FOLLOW_PED_CAM_VIEW_MODE(int viewMode) { Invoke(0x5A4F9EDF1673F704, V(viewMode)); }
		public static bool IS_FOLLOW_VEHICLE_CAM_ACTIVE() { return Invoke<bool>(0xCBBDE6D335D6D496); }
		public static void SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_THIS_UPDATE(bool p0) { Invoke(0x91EF6EE6419E5B97, V(p0)); }
		public static void SET_FOLLOW_VEHICLE_CAM_HIGH_ANGLE_MODE_EVERY_UPDATE(bool p0, bool p1) { Invoke(0x9DFE13ECDC1EC196, V(p0), V(p1)); }
		public static bool SET_TABLE_GAMES_CAMERA_THIS_UPDATE(Hash hash) { return Invoke<bool>(0x79C0E43EB9B944E2, V(hash)); }
		public static int GET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL() { return Invoke<int>(0xEE82280AB767B690); }
		public static void SET_FOLLOW_VEHICLE_CAM_ZOOM_LEVEL(int zoomLevel) { Invoke(0x19464CB6E4078C8A, V(zoomLevel)); }
		// Returns the type of camera:
		// 
		// enum _viewmode //0xA11D7CA8
		// {
		// 	THIRD_PERSON_NEAR = 0,
		// 	THIRD_PERSON_MEDIUM = 1,
		// 	THIRD_PERSON_FAR = 2,
		// 	CINEMATIC = 3,
		// 	FIRST_PERSON = 4
		// };
		public static int GET_FOLLOW_VEHICLE_CAM_VIEW_MODE() { return Invoke<int>(0xA4FF579AC0E3AAAE); }
		// Sets the type of Player camera in vehicles:
		// viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
		public static void SET_FOLLOW_VEHICLE_CAM_VIEW_MODE(int viewMode) { Invoke(0xAC253D7842768F48, V(viewMode)); }
		// context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT
		public static int GET_CAM_VIEW_MODE_FOR_CONTEXT(int context) { return Invoke<int>(0xEE778F8C7E1142E2, V(context)); }
		// context: see _GET_CAM_ACTIVE_VIEW_MODE_CONTEXT, viewmode: see CAM.GET_FOLLOW_VEHICLE_CAM_VIEW_MODE
		public static void SET_CAM_VIEW_MODE_FOR_CONTEXT(int context, int viewMode) { Invoke(0x2A2173E46DAECD12, V(context), V(viewMode)); }
		// enum Context
		// {
		// 	ON_FOOT,
		// 	IN_VEHICLE,
		// 	ON_BIKE,
		// 	IN_BOAT,
		// 	IN_AIRCRAFT,
		// 	IN_SUBMARINE,
		// 	IN_HELI,
		// 	IN_TURRET
		// };
		public static int GET_CAM_ACTIVE_VIEW_MODE_CONTEXT() { return Invoke<int>(0x19CAFA3C87F7C2FF); }
		public static void USE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE() { Invoke(0x6493CF69859B116A); }
		// Sets gameplay camera to hash
		public static void USE_DEDICATED_STUNT_CAMERA_THIS_UPDATE(string camName) { Invoke(0x425A920FDB9A0DDA, V(camName)); }
		public static void FORCE_VEHICLE_CAM_STUNT_SETTINGS_THIS_UPDATE() { Invoke(0x0AA27680A0BD43FA); }
		public static void SET_FOLLOW_VEHICLE_CAM_SEAT_THIS_UPDATE(int seatIndex) { Invoke(0x5C90CAB09951A12F, V(seatIndex)); }
		public static bool IS_AIM_CAM_ACTIVE() { return Invoke<bool>(0x68EDDA28A5976D07); }
		public static bool IS_AIM_CAM_ACTIVE_IN_ACCURATE_MODE() { return Invoke<bool>(0x74BD83EA840F6BC9); }
		public static bool IS_FIRST_PERSON_AIM_CAM_ACTIVE() { return Invoke<bool>(0x5E346D934122613F); }
		public static void DISABLE_AIM_CAM_THIS_UPDATE() { Invoke(0x1A31FE0049E542F6); }
		public static float GET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR() { return Invoke<float>(0x7EC52CC40597D170); }
		public static void SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR(float zoomFactor) { Invoke(0x70894BD0915C5BCA, V(zoomFactor)); }
		public static void SET_FIRST_PERSON_AIM_CAM_ZOOM_FACTOR_LIMITS_THIS_UPDATE(float p0, float p1) { Invoke(0xCED08CBE8EBB97C7, V(p0), V(p1)); }
		public static void SET_FIRST_PERSON_AIM_CAM_RELATIVE_HEADING_LIMITS_THIS_UPDATE(float p0, float p1) { Invoke(0x2F7F2B26DD3F18EE, V(p0), V(p1)); }
		public static void SET_FIRST_PERSON_AIM_CAM_RELATIVE_PITCH_LIMITS_THIS_UPDATE(float p0, float p1) { Invoke(0xBCFC632DB7673BF0, V(p0), V(p1)); }
		public static void SET_FIRST_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(float p0) { Invoke(0x0AF7B437918103B3, V(p0)); }
		public static void SET_THIRD_PERSON_AIM_CAM_NEAR_CLIP_THIS_UPDATE(float p0) { Invoke(0x42156508606DE65E, V(p0)); }
		public static void SET_ALLOW_CUSTOM_VEHICLE_DRIVE_BY_CAM_THIS_UPDATE(bool p0) { Invoke(0x4008EDF7D6E48175, V(p0)); }
		public static void FORCE_TIGHTSPACE_CUSTOM_FRAMING_THIS_UPDATE() { Invoke(0x380B4968D1E09E55); }
		public static Vector3 GET_FINAL_RENDERED_CAM_COORD() { return Invoke<Vector3>(0xA200EB1EE790F448); }
		// p0 seems to consistently be 2 across scripts
		// 
		// Function is called faily often by CAM::CREATE_CAM_WITH_PARAMS
		public static Vector3 GET_FINAL_RENDERED_CAM_ROT(int rotationOrder) { return Invoke<Vector3>(0x5B4E4C817FCC2DFB, V(rotationOrder)); }
		public static Vector3 GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_ROT(Player player, int rotationOrder) { return Invoke<Vector3>(0x26903D9CD1175F2C, V(player), V(rotationOrder)); }
		// Gets some camera fov
		public static float GET_FINAL_RENDERED_CAM_FOV() { return Invoke<float>(0x80EC114669DAEFF4); }
		public static float GET_FINAL_RENDERED_REMOTE_PLAYER_CAM_FOV(Player player) { return Invoke<float>(0x5F35F6732C3FBBA0, V(player)); }
		public static float GET_FINAL_RENDERED_CAM_NEAR_CLIP() { return Invoke<float>(0xD0082607100D7193); }
		public static float GET_FINAL_RENDERED_CAM_FAR_CLIP() { return Invoke<float>(0xDFC8CBC606FDB0FC); }
		public static float GET_FINAL_RENDERED_CAM_NEAR_DOF() { return Invoke<float>(0xA03502FC581F7D9B); }
		public static float GET_FINAL_RENDERED_CAM_FAR_DOF() { return Invoke<float>(0x9780F32BCAF72431); }
		public static float GET_FINAL_RENDERED_CAM_MOTION_BLUR_STRENGTH() { return Invoke<float>(0x162F9D995753DC19); }
		public static void SET_GAMEPLAY_COORD_HINT(float x, float y, float z, int duration, int blendOutDuration, int blendInDuration, int p6) { Invoke(0xD51ADCD2D8BC0FB3, V(x), V(y), V(z), V(duration), V(blendOutDuration), V(blendInDuration), V(p6)); }
		public static void SET_GAMEPLAY_PED_HINT(Ped ped, float x1, float y1, float z1, bool p4, int duration, int blendOutDuration, int blendInDuration) { Invoke(0x2B486269ACD548D3, V(ped), V(x1), V(y1), V(z1), V(p4), V(duration), V(blendOutDuration), V(blendInDuration)); }
		// Focuses the camera on the specified vehicle.
		public static void SET_GAMEPLAY_VEHICLE_HINT(Vehicle vehicle, float offsetX, float offsetY, float offsetZ, bool p4, int time, int easeInTime, int easeOutTime) { Invoke(0xA2297E18F3E71C2E, V(vehicle), V(offsetX), V(offsetY), V(offsetZ), V(p4), V(time), V(easeInTime), V(easeOutTime)); }
		public static void SET_GAMEPLAY_OBJECT_HINT(Obj obj, float xOffset, float yOffset, float zOffset, bool p4, int time, int easeInTime, int easeOutTime) { Invoke(0x83E87508A2CA2AC6, V(obj), V(xOffset), V(yOffset), V(zOffset), V(p4), V(time), V(easeInTime), V(easeOutTime)); }
		// p8 could be some sort of flag. Scripts use:
		// -244429742
		// 0
		// 1726668277
		// 1844968929
		public static void SET_GAMEPLAY_ENTITY_HINT(Entity entity, float xOffset, float yOffset, float zOffset, bool p4, int time, int easeInTime, int easeOutTime, int p8) { Invoke(0x189E955A8313E298, V(entity), V(xOffset), V(yOffset), V(zOffset), V(p4), V(time), V(easeInTime), V(easeOutTime), V(p8)); }
		public static bool IS_GAMEPLAY_HINT_ACTIVE() { return Invoke<bool>(0xE520FF1AD2785B40); }
		public static void STOP_GAMEPLAY_HINT(bool p0) { Invoke(0xF46C581C61718916, V(p0)); }
		// This native does absolutely nothing, just a nullsub
		public static void STOP_GAMEPLAY_HINT_BEING_CANCELLED_THIS_UPDATE(bool p0) { Invoke(0xCCD078C2665D2973, V(p0)); }
		public static void STOP_CODE_GAMEPLAY_HINT(bool p0) { Invoke(0x247ACBC4ABBC9D1C, V(p0)); }
		public static bool IS_CODE_GAMEPLAY_HINT_ACTIVE() { return Invoke<bool>(0xBF72910D0F26F025); }
		public static void SET_GAMEPLAY_HINT_FOV(float FOV) { Invoke(0x513403FB9C56211F, V(FOV)); }
		public static void SET_GAMEPLAY_HINT_FOLLOW_DISTANCE_SCALAR(float value) { Invoke(0xF8BDBF3D573049A1, V(value)); }
		public static void SET_GAMEPLAY_HINT_BASE_ORBIT_PITCH_OFFSET(float value) { Invoke(0xD1F8363DFAD03848, V(value)); }
		public static void SET_GAMEPLAY_HINT_CAMERA_RELATIVE_SIDE_OFFSET(float xOffset) { Invoke(0x5D7B620DAE436138, V(xOffset)); }
		public static void SET_GAMEPLAY_HINT_CAMERA_RELATIVE_VERTICAL_OFFSET(float yOffset) { Invoke(0xC92717EF615B6704, V(yOffset)); }
		public static void SET_GAMEPLAY_HINT_CAMERA_BLEND_TO_FOLLOW_PED_MEDIUM_VIEW_MODE(bool toggle) { Invoke(0xE3433EADAAF7EE40, V(toggle)); }
		public static void SET_CINEMATIC_BUTTON_ACTIVE(bool p0) { Invoke(0x51669F7D1FB53D9F, V(p0)); }
		public static bool IS_CINEMATIC_CAM_RENDERING() { return Invoke<bool>(0xB15162CB5826E9E8); }
		// p0 argument found in the b617d scripts: "DRUNK_SHAKE"
		// 
		// Full list of cam shake types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/camShakeTypesCompact.json
		public static void SHAKE_CINEMATIC_CAM(string shakeType, float amount) { Invoke(0xDCE214D9ED58F3CF, V(shakeType), V(amount)); }
		public static bool IS_CINEMATIC_CAM_SHAKING() { return Invoke<bool>(0xBBC08F6B4CB8FF0A); }
		public static void SET_CINEMATIC_CAM_SHAKE_AMPLITUDE(float p0) { Invoke(0xC724C701C30B2FE7, V(p0)); }
		public static void STOP_CINEMATIC_CAM_SHAKING(bool p0) { Invoke(0x2238E588E588A6D7, V(p0)); }
		public static void DISABLE_CINEMATIC_BONNET_CAMERA_THIS_UPDATE() { Invoke(0xADFF1B2A555F5FBA); }
		public static void DISABLE_CINEMATIC_VEHICLE_IDLE_MODE_THIS_UPDATE() { Invoke(0x62ECFCFDEE7885D6); }
		// Resets the vehicle idle camera timer. Calling this in a loop will disable the idle camera.
		public static void INVALIDATE_CINEMATIC_VEHICLE_IDLE_MODE() { Invoke(0x9E4CFFF989258472); }
		// Resets the idle camera timer. Calling that in a loop once every few seconds is enough to disable the idle cinematic camera.
		public static void INVALIDATE_IDLE_CAM() { Invoke(0xF4F2C0D4EE209E20); }
		public static bool IS_CINEMATIC_IDLE_CAM_RENDERING() { return Invoke<bool>(0xCA9D2AA3E326D720); }
		public static bool IS_CINEMATIC_FIRST_PERSON_VEHICLE_INTERIOR_CAM_RENDERING() { return Invoke<bool>(0x4F32C0D5A90A9B40); }
		// hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
		public static void CREATE_CINEMATIC_SHOT(Hash p0, int time, bool p2, Entity entity) { Invoke(0x741B0129D4560F31, V(p0), V(time), V(p2), V(entity)); }
		// Hash is always JOAAT("CAMERA_MAN_SHOT") in decompiled scripts
		public static bool IS_CINEMATIC_SHOT_ACTIVE(Hash p0) { return Invoke<bool>(0xCC9F3371A7C28BC9, V(p0)); }
		// Only used once in carsteal3 with p0 set to -1096069633 (CAMERA_MAN_SHOT)
		public static void STOP_CINEMATIC_SHOT(Hash p0) { Invoke(0x7660C6E75D3A078E, V(p0)); }
		public static void FORCE_CINEMATIC_RENDERING_THIS_UPDATE(bool toggle) { Invoke(0xA41BCD7213805AAC, V(toggle)); }
		public static void SET_CINEMATIC_NEWS_CHANNEL_ACTIVE_THIS_UPDATE() { Invoke(0xDC9DA9E8789F5246); }
		// Toggles the vehicle cinematic cam; requires the player ped to be in a vehicle to work.
		public static void SET_CINEMATIC_MODE_ACTIVE(bool toggle) { Invoke(0xDCF0754AC3D6FD4E, V(toggle)); }
		public static bool IS_IN_VEHICLE_MOBILE_PHONE_CAMERA_RENDERING() { return Invoke<bool>(0x1F2300CB7FA7B7F6); }
		public static bool DISABLE_CINEMATIC_SLOW_MO_THIS_UPDATE() { return Invoke<bool>(0x17FCA7199A530203); }
		public static bool IS_BONNET_CINEMATIC_CAM_RENDERING() { return Invoke<bool>(0xD7360051C885628B); }
		// Tests some cinematic camera flags
		public static bool IS_CINEMATIC_CAM_INPUT_ACTIVE() { return Invoke<bool>(0xF5F1E89A970B7796); }
		public static void IGNORE_MENU_PREFERENCE_FOR_BONNET_CAMERA_THIS_UPDATE() { Invoke(0x7B8A361C1813FBEF); }
		public static void BYPASS_CUTSCENE_CAM_RENDERING_THIS_UPDATE() { Invoke(0xDB629FFD9285FA06); }
		public static void STOP_CUTSCENE_CAM_SHAKING(Any p0) { Invoke(0x324C5AA411DA7737, V(p0)); }
		// Hardcoded to only work in multiplayer.
		public static void SET_CUTSCENE_CAM_FAR_CLIP_THIS_UPDATE(float p0) { Invoke(0x12DED8CA53D47EA5, V(p0)); }
		public static Ped GET_FOCUS_PED_ON_SCREEN(float p0, int p1, float p2, float p3, float p4, float p5, float p6, int p7, int p8) { return Invoke<Ped>(0x89215EC747DF244A, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		public static void DISABLE_NEAR_CLIP_SCAN_THIS_UPDATE() { Invoke(0x5A43C76F7FC7BA5F); }
		// if p0 is 0, effect is cancelled
		// 
		// if p0 is 1, effect zooms in, gradually tilts cam clockwise apx 30 degrees, wobbles slowly. Motion blur is active until cancelled.
		// 
		// if p0 is 2, effect immediately tilts cam clockwise apx 30 degrees, begins to wobble slowly, then gradually tilts cam back to normal. The wobbling will continue until the effect is cancelled.
		public static void SET_CAM_DEATH_FAIL_EFFECT_STATE(int p0) { Invoke(0x80C8B1846639BB19, V(p0)); }
		public static void SET_FIRST_PERSON_FLASH_EFFECT_TYPE(Any p0) { Invoke(0x5C41E6BABC9E2112, V(p0)); }
		// From b617 scripts:
		// 
		// CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("DINGHY");
		// CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("ISSI2");
		// CAM::SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME("SPEEDO");
		public static void SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_NAME(string vehicleName) { Invoke(0x21E253A7F8DA5DFB, V(vehicleName)); }
		public static void SET_FIRST_PERSON_FLASH_EFFECT_VEHICLE_MODEL_HASH(Hash vehicleModel) { Invoke(0x11FA5D3479C7DD47, V(vehicleModel)); }
		public static bool IS_ALLOWED_INDEPENDENT_CAMERA_MODES() { return Invoke<bool>(0xEAF0FA793D05C592); }
		public static void CAMERA_PREVENT_COLLISION_SETTINGS_FOR_TRIPLEHEAD_IN_INTERIORS_THIS_UPDATE() { Invoke(0x62374889A4D59F72); }
		public static float REPLAY_GET_MAX_DISTANCE_ALLOWED_FROM_PLAYER() { return Invoke<float>(0x8BFCEB5EA1B161B6); }




		// SET_CLOCK_TIME(12, 34, 56);
		public static void SET_CLOCK_TIME(int hour, int minute, int second) { Invoke(0x47C3B5848C3E45D8, V(hour), V(minute), V(second)); }
		public static void PAUSE_CLOCK(bool toggle) { Invoke(0x4055E40BD2DBEC1D, V(toggle)); }
		public static void ADVANCE_CLOCK_TIME_TO(int hour, int minute, int second) { Invoke(0xC8CA9670B9D83B3B, V(hour), V(minute), V(second)); }
		public static void ADD_TO_CLOCK_TIME(int hours, int minutes, int seconds) { Invoke(0xD716F30D8C8980E2, V(hours), V(minutes), V(seconds)); }
		// Gets the current ingame hour, expressed without zeros. (09:34 will be represented as 9)
		public static int GET_CLOCK_HOURS() { return Invoke<int>(0x25223CA6B4D20B7F); }
		// Gets the current ingame clock minute.
		public static int GET_CLOCK_MINUTES() { return Invoke<int>(0x13D2B8ADD79640F2); }
		// Gets the current ingame clock second. Note that ingame clock seconds change really fast since a day in GTA is only 48 minutes in real life.
		public static int GET_CLOCK_SECONDS() { return Invoke<int>(0x494E97C2EF27C470); }
		public static void SET_CLOCK_DATE(int day, int month, int year) { Invoke(0xB096419DF0D06CE7, V(day), V(month), V(year)); }
		// Gets the current day of the week.
		// 
		// 0: Sunday
		// 1: Monday
		// 2: Tuesday
		// 3: Wednesday
		// 4: Thursday
		// 5: Friday
		// 6: Saturday
		public static int GET_CLOCK_DAY_OF_WEEK() { return Invoke<int>(0xD972E4BD7AEB235F); }
		public static int GET_CLOCK_DAY_OF_MONTH() { return Invoke<int>(0x3D10BC92A4DB1D35); }
		public static int GET_CLOCK_MONTH() { return Invoke<int>(0xBBC72712E80257A1); }
		public static int GET_CLOCK_YEAR() { return Invoke<int>(0x961777E64BDAF717); }
		public static int GET_MILLISECONDS_PER_GAME_MINUTE() { return Invoke<int>(0x2F8B4D1C595B11DB); }
		// Gets system time as year, month, day, hour, minute and second.
		// 
		// Example usage:
		// 
		//     int year;
		//  int month;
		//     int day;
		//   int hour;
		//  int minute;
		//    int second;
		// 
		//  TIME::GET_POSIX_TIME(&year, &month, &day, &hour, &minute, &second);
		// 
		public static void GET_POSIX_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second) { Invoke(0xDA488F299A5B164E, V(year), V(month), V(day), V(hour), V(minute), V(second)); }
		// Gets current UTC time
		public static void GET_UTC_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second) { Invoke(0x8117E09A19EEF4D3, V(year), V(month), V(day), V(hour), V(minute), V(second)); }
		// Gets local system time as year, month, day, hour, minute and second.
		// 
		// Example usage:
		// 
		// int year;
		// int month;
		// int day;
		// int hour;
		// int minute;
		// int second;
		// or use std::tm struct
		// 
		// TIME::GET_LOCAL_TIME(&year, &month, &day, &hour, &minute, &second);
		// 
		public static void GET_LOCAL_TIME(int* year, int* month, int* day, int* hour, int* minute, int* second) { Invoke(0x50C7A99057A69748, V(year), V(month), V(day), V(hour), V(minute), V(second)); }




		// flags: Usually 8
		// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
		public static void REQUEST_CUTSCENE(string cutsceneName, int flags) { Invoke(0x7A86743F475D9E09, V(cutsceneName), V(flags)); }
		// flags: Usually 8
		// 
		// playbackFlags: Which scenes should be played.
		// Example: 0x105 (bit 0, 2 and 8 set) will enable scene 1, 3 and 9.
		// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
		public static void REQUEST_CUTSCENE_WITH_PLAYBACK_LIST(string cutsceneName, int playbackFlags, int flags) { Invoke(0xC23DE0E91C30B58C, V(cutsceneName), V(playbackFlags), V(flags)); }
		public static void REMOVE_CUTSCENE() { Invoke(0x440AF51A3462B86F); }
		public static bool HAS_CUTSCENE_LOADED() { return Invoke<bool>(0xC59F528E9AB9F339); }
		// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
		public static bool HAS_THIS_CUTSCENE_LOADED(string cutsceneName) { return Invoke<bool>(0x228D3D94F8A11C3C, V(cutsceneName)); }
		// Sets the cutscene's owning thread ID.
		public static void SET_SCRIPT_CAN_START_CUTSCENE(int threadId) { Invoke(0x8D9DF6ECA8768583, V(threadId)); }
		public static bool CAN_REQUEST_ASSETS_FOR_CUTSCENE_ENTITY() { return Invoke<bool>(0xB56BBBCC2955D9CB); }
		public static bool IS_CUTSCENE_PLAYBACK_FLAG_SET(int flag) { return Invoke<bool>(0x71B74D2AE19338D0, V(flag)); }
		public static void SET_CUTSCENE_ENTITY_STREAMING_FLAGS(string cutsceneEntName, int p1, int p2) { Invoke(0x4C61C75BEE8184C2, V(cutsceneEntName), V(p1), V(p2)); }
		// Simply loads the cutscene and doesn't do extra stuff that REQUEST_CUTSCENE does.
		// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
		public static void REQUEST_CUT_FILE(string cutsceneName) { Invoke(0x06A3524161C502BA, V(cutsceneName)); }
		// Simply checks if the cutscene has loaded and doesn't check via CutSceneManager as opposed to HAS_[THIS]_CUTSCENE_LOADED.
		// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
		public static bool HAS_CUT_FILE_LOADED(string cutsceneName) { return Invoke<bool>(0xA1C996C2A744262E, V(cutsceneName)); }
		// Simply unloads the cutscene and doesn't do extra stuff that REMOVE_CUTSCENE does.
		// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
		public static void REMOVE_CUT_FILE(string cutsceneName) { Invoke(0xD00D76A7DFC9D852, V(cutsceneName)); }
		// Full list of cutscene names by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/cutsceneNames.json
		public static int GET_CUT_FILE_CONCAT_COUNT(string cutsceneName) { return Invoke<int>(0x0ABC54DE641DC0FC, V(cutsceneName)); }
		// flags: Usually 0.
		public static void START_CUTSCENE(int flags) { Invoke(0x186D5CB5E7B0FF7B, V(flags)); }
		// flags: Usually 0.
		public static void START_CUTSCENE_AT_COORDS(float x, float y, float z, int flags) { Invoke(0x1C9ADDA3244A1FBF, V(x), V(y), V(z), V(flags)); }
		public static void STOP_CUTSCENE(bool p0) { Invoke(0xC7272775B4DC786E, V(p0)); }
		public static void STOP_CUTSCENE_IMMEDIATELY() { Invoke(0xD220BDD222AC4A1E); }
		// p3 could be heading. Needs more research.
		public static void SET_CUTSCENE_ORIGIN(float x, float y, float z, float p3, int p4) { Invoke(0xB812B3FD1C01CF27, V(x), V(y), V(z), V(p3), V(p4)); }
		public static void SET_CUTSCENE_ORIGIN_AND_ORIENTATION(float x1, float y1, float z1, float x2, float y2, float z2, int p6) { Invoke(0x011883F41211432A, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p6)); }
		public static int GET_CUTSCENE_TIME() { return Invoke<int>(0xE625BEABBAFFDAB9); }
		public static int GET_CUTSCENE_PLAY_TIME() { return Invoke<int>(0x710286BC5EF4D6E1); }
		public static int GET_CUTSCENE_TOTAL_DURATION() { return Invoke<int>(0xEE53B14A19E480D4); }
		public static int GET_CUTSCENE_END_TIME() { return Invoke<int>(0x971D7B15BCDBEF99); }
		public static int GET_CUTSCENE_PLAY_DURATION() { return Invoke<int>(0x5D583F71C901F2A3); }
		public static bool WAS_CUTSCENE_SKIPPED() { return Invoke<bool>(0x40C8656EDAEDD569); }
		public static bool HAS_CUTSCENE_FINISHED() { return Invoke<bool>(0x7C0A893088881D57); }
		public static bool IS_CUTSCENE_ACTIVE() { return Invoke<bool>(0x991251AFC3981F84); }
		public static bool IS_CUTSCENE_PLAYING() { return Invoke<bool>(0xD3C2E180A40F031E); }
		public static int GET_CUTSCENE_SECTION_PLAYING() { return Invoke<int>(0x49010A6A396553D8); }
		public static Entity GET_ENTITY_INDEX_OF_CUTSCENE_ENTITY(string cutsceneEntName, Hash modelHash) { return Invoke<Entity>(0x0A2E9FDB9A8C62F6, V(cutsceneEntName), V(modelHash)); }
		public static int GET_CUTSCENE_CONCAT_SECTION_PLAYING() { return Invoke<int>(0x583DF8E3D4AFBD98); }
		// This function is hard-coded to always return 1.
		public static bool IS_CUTSCENE_AUTHORIZED(string cutsceneName) { return Invoke<bool>(0x4CEBC1ED31E8925E, V(cutsceneName)); }
		public static int DOES_CUTSCENE_HANDLE_EXIST(int cutsceneHandle) { return Invoke<int>(0x4FCD976DA686580C, V(cutsceneHandle)); }
		public static void REGISTER_ENTITY_FOR_CUTSCENE(Ped cutscenePed, string cutsceneEntName, int p2, Hash modelHash, int p4) { Invoke(0xE40C1C56DF95C2E8, V(cutscenePed), V(cutsceneEntName), V(p2), V(modelHash), V(p4)); }
		public static Entity GET_ENTITY_INDEX_OF_REGISTERED_ENTITY(string cutsceneEntName, Hash modelHash) { return Invoke<Entity>(0xC0741A26499654CD, V(cutsceneEntName), V(modelHash)); }
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static void SET_VEHICLE_MODEL_PLAYER_WILL_EXIT_SCENE(Hash modelHash) { Invoke(0x7F96F23FA9B73327, V(modelHash)); }
		// Only used twice in R* scripts
		public static void SET_CUTSCENE_TRIGGER_AREA(float x1, float y1, float z1, float x2, float y2, float z2) { Invoke(0x9896CE4721BE84BA, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// modelHash (p1) was always 0 in R* scripts
		public static bool CAN_SET_ENTER_STATE_FOR_REGISTERED_ENTITY(string cutsceneEntName, Hash modelHash) { return Invoke<bool>(0x645D0B458D8E17B5, V(cutsceneEntName), V(modelHash)); }
		public static bool CAN_SET_EXIT_STATE_FOR_REGISTERED_ENTITY(string cutsceneEntName, Hash modelHash) { return Invoke<bool>(0x4C6A6451C79E4662, V(cutsceneEntName), V(modelHash)); }
		public static bool CAN_SET_EXIT_STATE_FOR_CAMERA(bool p0) { return Invoke<bool>(0xB2CBCD0930DFB420, V(p0)); }
		// Toggles a value (bool) for cutscenes.
		public static void SET_PAD_CAN_SHAKE_DURING_CUTSCENE(bool toggle) { Invoke(0xC61B86C9F61EB404, V(toggle)); }
		public static void SET_CUTSCENE_FADE_VALUES(bool p0, bool p1, bool p2, bool p3) { Invoke(0x8093F23ABACCC7D4, V(p0), V(p1), V(p2), V(p3)); }
		public static void SET_CUTSCENE_MULTIHEAD_FADE(bool p0, bool p1, bool p2, bool p3) { Invoke(0x20746F7B1032A3C7, V(p0), V(p1), V(p2), V(p3)); }
		public static void SET_CUTSCENE_MULTIHEAD_FADE_MANUAL(bool p0) { Invoke(0x06EE9048FD080382, V(p0)); }
		public static bool IS_MULTIHEAD_FADE_UP() { return Invoke<bool>(0xA0FE76168A189DDB); }
		// Stops current cutscene with a fade transition
		// p0: always true in R* Scripts
		// You will need to manually fade the screen back in
		// SET_CUTSCENE_INPUTS_PARTIALLY_FADE?
		public static void NETWORK_SET_MOCAP_CUTSCENE_CAN_BE_SKIPPED(bool p0) { Invoke(0x2F137B508DE238F2, V(p0)); }
		public static void SET_CAR_GENERATORS_CAN_UPDATE_DURING_CUTSCENE(bool p0) { Invoke(0xE36A98D8AB3D3C66, V(p0)); }
		public static bool CAN_USE_MOBILE_PHONE_DURING_CUTSCENE() { return Invoke<bool>(0x5EDEF0CF8C1DAB3C); }
		public static void SET_CUTSCENE_CAN_BE_SKIPPED(bool p0) { Invoke(0x41FAA8FB2ECE8720, V(p0)); }
		public static void SET_CAN_DISPLAY_MINIMAP_DURING_CUTSCENE_THIS_UPDATE() { Invoke(0x2131046957F31B04); }
		// Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
		public static void SET_CUTSCENE_PED_COMPONENT_VARIATION(string cutsceneEntName, int componentId, int drawableId, int textureId, Hash modelHash) { Invoke(0xBA01E7B6DEEFBBC9, V(cutsceneEntName), V(componentId), V(drawableId), V(textureId), V(modelHash)); }
		public static void SET_CUTSCENE_PED_COMPONENT_VARIATION_FROM_PED(string cutsceneEntName, Ped ped, Hash modelHash) { Invoke(0x2A56C06EBEF2B0D9, V(cutsceneEntName), V(ped), V(modelHash)); }
		public static bool DOES_CUTSCENE_ENTITY_EXIST(string cutsceneEntName, Hash modelHash) { return Invoke<bool>(0x499EF20C5DB25C59, V(cutsceneEntName), V(modelHash)); }
		// Thanks R*! ;)
		// 
		// if ((l_161 == 0) || (l_161 == 2)) {
		//     sub_2ea27("Trying to set Jimmy prop variation");
		//     CUTSCENE::SET_CUTSCENE_PED_PROP_VARIATION("Jimmy_Boston", 1, 0, 0, 0);
		// }
		// 
		// Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
		public static void SET_CUTSCENE_PED_PROP_VARIATION(string cutsceneEntName, int componentId, int drawableId, int textureId, Hash modelHash) { Invoke(0x0546524ADE2E9723, V(cutsceneEntName), V(componentId), V(drawableId), V(textureId), V(modelHash)); }
		// Possibly HAS_CUTSCENE_CUT_THIS_FRAME, needs more research.
		public static bool HAS_CUTSCENE_CUT_THIS_FRAME() { return Invoke<bool>(0x708BDD8CD795B043); }




		// Adds the given requestID to the watch list.
		public static void DATAFILE_WATCH_REQUEST_ID(int requestId) { Invoke(0xAD6875BBC0FC899C, V(requestId)); }
		public static void DATAFILE_CLEAR_WATCH_LIST() { Invoke(0x6CC86E78358D5119); }
		public static bool DATAFILE_IS_VALID_REQUEST_ID(int index) { return Invoke<bool>(0xFCCAE5B92A830878, V(index)); }
		public static bool DATAFILE_HAS_LOADED_FILE_DATA(int requestId) { return Invoke<bool>(0x15FF52B809DB2353, V(requestId)); }
		public static bool DATAFILE_HAS_VALID_FILE_DATA(int requestId) { return Invoke<bool>(0xF8CC1EBE0B62E29F, V(requestId)); }
		public static bool DATAFILE_SELECT_ACTIVE_FILE(int requestId, Any p1) { return Invoke<bool>(0x22DA66936E0FFF37, V(requestId), V(p1)); }
		public static bool DATAFILE_DELETE_REQUESTED_FILE(int requestId) { return Invoke<bool>(0x8F5EA1C01D65A100, V(requestId)); }
		public static bool UGC_CREATE_CONTENT(Any* data, int dataCount, string contentName, string description, string tagsCsv, string contentTypeName, bool publish, Any p7) { return Invoke<bool>(0xC84527E235FCA219, V(data), V(dataCount), V(contentName), V(description), V(tagsCsv), V(contentTypeName), V(publish), V(p7)); }
		public static bool UGC_CREATE_MISSION(string contentName, string description, string tagsCsv, string contentTypeName, bool publish, Any p5) { return Invoke<bool>(0xA5EFC3E847D60507, V(contentName), V(description), V(tagsCsv), V(contentTypeName), V(publish), V(p5)); }
		public static bool UGC_UPDATE_CONTENT(string contentId, Any* data, int dataCount, string contentName, string description, string tagsCsv, string contentTypeName, Any p7) { return Invoke<bool>(0x648E7A5434AF7969, V(contentId), V(data), V(dataCount), V(contentName), V(description), V(tagsCsv), V(contentTypeName), V(p7)); }
		public static bool UGC_UPDATE_MISSION(string contentId, string contentName, string description, string tagsCsv, string contentTypeName, Any p5) { return Invoke<bool>(0x4645DE9980999E93, V(contentId), V(contentName), V(description), V(tagsCsv), V(contentTypeName), V(p5)); }
		public static bool UGC_SET_PLAYER_DATA(string contentId, float rating, string contentTypeName, Any p3) { return Invoke<bool>(0x692D808C34A82143, V(contentId), V(rating), V(contentTypeName), V(p3)); }
		public static bool DATAFILE_SELECT_UGC_DATA(int p0, Any p1) { return Invoke<bool>(0xA69AC4ADE82B57A4, V(p0), V(p1)); }
		public static bool DATAFILE_SELECT_UGC_STATS(int p0, bool p1, Any p2) { return Invoke<bool>(0x9CB0BFA7A9342C3D, V(p0), V(p1), V(p2)); }
		public static bool DATAFILE_SELECT_UGC_PLAYER_DATA(int p0, Any p1) { return Invoke<bool>(0x52818819057F2B40, V(p0), V(p1)); }
		public static bool DATAFILE_SELECT_CREATOR_STATS(int p0, Any p1) { return Invoke<bool>(0x01095C95CD46B624, V(p0), V(p1)); }
		// Loads a User-Generated Content (UGC) file. These files can be found in "[GTA5]\data\ugc" and "[GTA5]\common\patch\ugc". They seem to follow a naming convention, most likely of "[name]_[part].ugc". See example below for usage.
		// 
		// Returns whether or not the file was successfully loaded.
		// 
		// Example:
		// DATAFILE::DATAFILE_LOAD_OFFLINE_UGC("RockstarPlaylists") // loads "rockstarplaylists_00.ugc"
		public static bool DATAFILE_LOAD_OFFLINE_UGC(string filename, Any p1) { return Invoke<bool>(0xC5238C011AF405E4, V(filename), V(p1)); }
		public static void DATAFILE_CREATE(int p0) { Invoke(0xD27058A1CA2B13EE, V(p0)); }
		public static void DATAFILE_DELETE(int p0) { Invoke(0x9AB9C1CFC8862DFB, V(p0)); }
		public static void DATAFILE_STORE_MISSION_HEADER(int p0) { Invoke(0x2ED61456317B8178, V(p0)); }
		public static void DATAFILE_FLUSH_MISSION_HEADER() { Invoke(0xC55854C7D7274882); }
		public static Any* DATAFILE_GET_FILE_DICT(int p0) { return PInvoke<Any>(0x906B778CA1DC72B6, V(p0)); }
		public static bool DATAFILE_START_SAVE_TO_CLOUD(string filename, Any p1) { return Invoke<bool>(0x83BCCE3224735F05, V(filename), V(p1)); }
		public static bool DATAFILE_UPDATE_SAVE_TO_CLOUD(bool* p0) { return Invoke<bool>(0x4DFDD9EB705F8140, V(p0)); }
		public static bool DATAFILE_IS_SAVE_PENDING() { return Invoke<bool>(0xBEDB96A7584AA8CF); }
		public static bool DATAFILE_LOAD_OFFLINE_UGC_FOR_ADDITIONAL_DATA_FILE(Any p0, Any p1) { return Invoke<bool>(0xA6EEF01087181EDD, V(p0), V(p1)); }
		public static void DATAFILE_DELETE_FOR_ADDITIONAL_DATA_FILE(Any p0) { Invoke(0x6AD0BD5E087866CB, V(p0)); }
		public static Any* DATAFILE_GET_FILE_DICT_FOR_ADDITIONAL_DATA_FILE(Any p0) { return PInvoke<Any>(0xDBF860CF1DB8E599, V(p0)); }
		public static void DATADICT_SET_BOOL(Any* objectData, string key, bool value) { Invoke(0x35124302A556A325, V(objectData), V(key), V(value)); }
		public static void DATADICT_SET_INT(Any* objectData, string key, int value) { Invoke(0xE7E035450A7948D5, V(objectData), V(key), V(value)); }
		public static void DATADICT_SET_FLOAT(Any* objectData, string key, float value) { Invoke(0xC27E1CC2D795105E, V(objectData), V(key), V(value)); }
		public static void DATADICT_SET_STRING(Any* objectData, string key, string value) { Invoke(0x8FF3847DADD8E30C, V(objectData), V(key), V(value)); }
		public static void DATADICT_SET_VECTOR(Any* objectData, string key, float valueX, float valueY, float valueZ) { Invoke(0x4CD49B76338C7DEE, V(objectData), V(key), V(valueX), V(valueY), V(valueZ)); }
		public static Any* DATADICT_CREATE_DICT(Any* objectData, string key) { return PInvoke<Any>(0xA358F56F10732EE1, V(objectData), V(key)); }
		public static Any* DATADICT_CREATE_ARRAY(Any* objectData, string key) { return PInvoke<Any>(0x5B11728527CA6E5F, V(objectData), V(key)); }
		public static bool DATADICT_GET_BOOL(Any* objectData, string key) { return Invoke<bool>(0x1186940ED72FFEEC, V(objectData), V(key)); }
		public static int DATADICT_GET_INT(Any* objectData, string key) { return Invoke<int>(0x78F06F6B1FB5A80C, V(objectData), V(key)); }
		public static float DATADICT_GET_FLOAT(Any* objectData, string key) { return Invoke<float>(0x06610343E73B9727, V(objectData), V(key)); }
		public static byte* DATADICT_GET_STRING(Any* objectData, string key) { return PInvoke<byte>(0x3D2FD9E763B24472, V(objectData), V(key)); }
		public static Vector3 DATADICT_GET_VECTOR(Any* objectData, string key) { return Invoke<Vector3>(0x46CD3CB66E0825CC, V(objectData), V(key)); }
		public static Any* DATADICT_GET_DICT(Any* objectData, string key) { return PInvoke<Any>(0xB6B9DDC412FCEEE2, V(objectData), V(key)); }
		public static Any* DATADICT_GET_ARRAY(Any* objectData, string key) { return PInvoke<Any>(0x7A983AA9DA2659ED, V(objectData), V(key)); }
		// Types:
		// 1 = Boolean
		// 2 = Integer
		// 3 = Float
		// 4 = string
		// 5 = Vector3
		// 6 = Object
		// 7 = Array
		public static int DATADICT_GET_TYPE(Any* objectData, string key) { return Invoke<int>(0x031C55ED33227371, V(objectData), V(key)); }
		public static void DATAARRAY_ADD_BOOL(Any* arrayData, bool value) { Invoke(0xF8B0F5A43E928C76, V(arrayData), V(value)); }
		public static void DATAARRAY_ADD_INT(Any* arrayData, int value) { Invoke(0xCABDB751D86FE93B, V(arrayData), V(value)); }
		public static void DATAARRAY_ADD_FLOAT(Any* arrayData, float value) { Invoke(0x57A995FD75D37F56, V(arrayData), V(value)); }
		public static void DATAARRAY_ADD_STRING(Any* arrayData, string value) { Invoke(0x2F0661C155AEEEAA, V(arrayData), V(value)); }
		public static void DATAARRAY_ADD_VECTOR(Any* arrayData, float valueX, float valueY, float valueZ) { Invoke(0x407F8D034F70F0C2, V(arrayData), V(valueX), V(valueY), V(valueZ)); }
		public static Any* DATAARRAY_ADD_DICT(Any* arrayData) { return PInvoke<Any>(0x6889498B3E19C797, V(arrayData)); }
		public static bool DATAARRAY_GET_BOOL(Any* arrayData, int arrayIndex) { return Invoke<bool>(0x50C1B2874E50C114, V(arrayData), V(arrayIndex)); }
		public static int DATAARRAY_GET_INT(Any* arrayData, int arrayIndex) { return Invoke<int>(0x3E5AE19425CD74BE, V(arrayData), V(arrayIndex)); }
		public static float DATAARRAY_GET_FLOAT(Any* arrayData, int arrayIndex) { return Invoke<float>(0xC0C527B525D7CFB5, V(arrayData), V(arrayIndex)); }
		public static byte* DATAARRAY_GET_STRING(Any* arrayData, int arrayIndex) { return PInvoke<byte>(0xD3F2FFEB8D836F52, V(arrayData), V(arrayIndex)); }
		public static Vector3 DATAARRAY_GET_VECTOR(Any* arrayData, int arrayIndex) { return Invoke<Vector3>(0x8D2064E5B64A628A, V(arrayData), V(arrayIndex)); }
		public static Any* DATAARRAY_GET_DICT(Any* arrayData, int arrayIndex) { return PInvoke<Any>(0x8B5FADCC4E3A145F, V(arrayData), V(arrayIndex)); }
		public static int DATAARRAY_GET_COUNT(Any* arrayData) { return Invoke<int>(0x065DB281590CEA2D, V(arrayData)); }
		// Types:
		// 1 = Boolean
		// 2 = Integer
		// 3 = Float
		// 4 = string
		// 5 = Vector3
		// 6 = Object
		// 7 = Array
		public static int DATAARRAY_GET_TYPE(Any* arrayData, int arrayIndex) { return Invoke<int>(0x3A0014ADB172A3C5, V(arrayData), V(arrayIndex)); }




		public static bool DECOR_SET_TIME(Entity entity, string propertyName, int timestamp) { return Invoke<bool>(0x95AED7B8E39ECAA4, V(entity), V(propertyName), V(timestamp)); }
		// This function sets metadata of type bool to specified entity.
		// 
		public static bool DECOR_SET_BOOL(Entity entity, string propertyName, bool value) { return Invoke<bool>(0x6B1E8E2ED1335B71, V(entity), V(propertyName), V(value)); }
		public static bool DECOR_SET_FLOAT(Entity entity, string propertyName, float value) { return Invoke<bool>(0x211AB1DD8D0F363A, V(entity), V(propertyName), V(value)); }
		// Sets property to int.
		public static bool DECOR_SET_INT(Entity entity, string propertyName, int value) { return Invoke<bool>(0x0CE3AA5E1CA19E10, V(entity), V(propertyName), V(value)); }
		public static bool DECOR_GET_BOOL(Entity entity, string propertyName) { return Invoke<bool>(0xDACE671663F2F5DB, V(entity), V(propertyName)); }
		public static float DECOR_GET_FLOAT(Entity entity, string propertyName) { return Invoke<float>(0x6524A2F114706F43, V(entity), V(propertyName)); }
		public static int DECOR_GET_INT(Entity entity, string propertyName) { return Invoke<int>(0xA06C969B02A97298, V(entity), V(propertyName)); }
		// Returns whether or not the specified property is set for the entity.
		public static bool DECOR_EXIST_ON(Entity entity, string propertyName) { return Invoke<bool>(0x05661B80A8C9165F, V(entity), V(propertyName)); }
		public static bool DECOR_REMOVE(Entity entity, string propertyName) { return Invoke<bool>(0x00EE9F297C738720, V(entity), V(propertyName)); }
		// https://alloc8or.re/gta5/doc/enums/eDecorType.txt
		public static void DECOR_REGISTER(string propertyName, int type) { Invoke(0x9FD90732F56403CE, V(propertyName), V(type)); }
		// type: see DECOR_REGISTER
		public static bool DECOR_IS_REGISTERED_AS_TYPE(string propertyName, int type) { return Invoke<bool>(0x4F14F9F870D6FBC8, V(propertyName), V(type)); }
		// Called after all decorator type initializations.
		public static void DECOR_REGISTER_LOCK() { Invoke(0xA9D14EEA259F9248); }




		public static bool ARE_ANY_CCS_PENDING() { return Invoke<bool>(0x241FCA5B1AA14F75); }
		// Returns true if the given DLC pack is present.
		public static bool IS_DLC_PRESENT(Hash dlcHash) { return Invoke<bool>(0x812595A0644CE1DE, V(dlcHash)); }
		// This function is hard-coded to always return 1.
		public static bool DLC_CHECK_CLOUD_DATA_CORRECT() { return Invoke<bool>(0xF2E07819EF1A5289); }
		// This function is hard-coded to always return 0.
		public static int GET_EXTRACONTENT_CLOUD_RESULT() { return Invoke<int>(0x9489659372A81585); }
		// This function is hard-coded to always return 1.
		public static bool DLC_CHECK_COMPAT_PACK_CONFIGURATION() { return Invoke<bool>(0xA213B11DFF526300); }
		public static bool GET_EVER_HAD_BAD_PACK_ORDER() { return Invoke<bool>(0x8D30F648014A92B5); }
		public static bool GET_IS_LOADING_SCREEN_ACTIVE() { return Invoke<bool>(0x10D0A8F259E93EC9); }
		public static bool GET_IS_INITIAL_LOADING_SCREEN_ACTIVE() { return Invoke<bool>(0xC4637A6D03C24CC3); }
		// Sets the value of the specified variable to 0.
		// Always returns true.
		public static bool HAS_CLOUD_REQUESTS_FINISHED(bool* p0, int unused) { return Invoke<bool>(0x46E2B844905BC5F0, V(p0), V(unused)); }
		// Unloads GROUP_MAP (GTAO/MP) DLC data and loads GROUP_MAP_SP DLC. Neither are loaded by default, ON_ENTER_MP is a cognate to this function and loads MP DLC (and unloads SP DLC by extension).
		// Works in singleplayer.
		public static void ON_ENTER_SP() { Invoke(0xD7C10C4A637992C9); }
		// This loads the GTA:O dlc map parts (high end garages, apartments).
		// Works in singleplayer.
		// In order to use GTA:O heist IPL's you have to call this native with the following params: SET_INSTANCE_PRIORITY_MODE(1);
		public static void ON_ENTER_MP() { Invoke(0x0888C3502DBBEEF5); }




		// Checks whether an entity exists in the game world.
		public static bool DOES_ENTITY_EXIST(Entity entity) { return Invoke<bool>(0x7239B21A38F536BA, V(entity)); }
		public static bool DOES_ENTITY_BELONG_TO_THIS_SCRIPT(Entity entity, bool p1) { return Invoke<bool>(0xDDE6DF5AE89981D2, V(entity), V(p1)); }
		public static bool DOES_ENTITY_HAVE_DRAWABLE(Entity entity) { return Invoke<bool>(0x060D6E96F8B8E48D, V(entity)); }
		public static bool DOES_ENTITY_HAVE_PHYSICS(Entity entity) { return Invoke<bool>(0xDA95EA3317CC5064, V(entity)); }
		public static bool DOES_ENTITY_HAVE_SKELETON(Entity entity) { return Invoke<bool>(0x764EB96874EFFDC1, V(entity)); }
		public static bool DOES_ENTITY_HAVE_ANIM_DIRECTOR(Entity entity) { return Invoke<bool>(0x2158E81A6AF65EA9, V(entity)); }
		// P3 is always 3 as far as i cant tell
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool HAS_ENTITY_ANIM_FINISHED(Entity entity, string animDict, string animName, int p3) { return Invoke<bool>(0x20B711662962B472, V(entity), V(animDict), V(animName), V(p3)); }
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_OBJECT(Entity entity) { return Invoke<bool>(0x95EB9964FF5C5C65, V(entity)); }
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_PED(Entity entity) { return Invoke<bool>(0x605F5A140F202491, V(entity)); }
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_ANY_VEHICLE(Entity entity) { return Invoke<bool>(0xDFD5033FDBA0A9C8, V(entity)); }
		// Entity 1 = Victim
		// Entity 2 = Attacker
		// 
		// p2 seems to always be 1
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_ENTITY(Entity entity1, Entity entity2, bool p2) { return Invoke<bool>(0xC86D67D52A707CF8, V(entity1), V(entity2), V(p2)); }
		// traceType is always 17 in the scripts.
		// 
		// There is other codes used for traceType:
		// 19 - in jewelry_prep1a
		// 126 - in am_hunt_the_beast
		// 256 & 287 - in fm_mission_controller
		public static bool HAS_ENTITY_CLEAR_LOS_TO_ENTITY(Entity entity1, Entity entity2, int traceType) { return Invoke<bool>(0xFCDFF7B72D23A1AC, V(entity1), V(entity2), V(traceType)); }
		public static bool HAS_ENTITY_CLEAR_LOS_TO_ENTITY_ADJUST_FOR_COVER(Entity entity1, Entity entity2, int traceType) { return Invoke<bool>(0x394BDE2A7BBA031E, V(entity1), V(entity2), V(traceType)); }
		// Has the entity1 got a clear line of sight to the other entity2 from the direction entity1 is facing.
		// This is one of the most CPU demanding bool natives in the game; avoid calling this in things like nested for-loops
		public static bool HAS_ENTITY_CLEAR_LOS_TO_ENTITY_IN_FRONT(Entity entity1, Entity entity2) { return Invoke<bool>(0x0267D00AF114F17A, V(entity1), V(entity2)); }
		// Called on tick.
		// Tested with vehicles, returns true whenever the vehicle is touching any entity.
		// 
		// Note: for vehicles, the wheels can touch the ground and it will still return false, but if the body of the vehicle touches the ground, it will return true.
		public static bool HAS_ENTITY_COLLIDED_WITH_ANYTHING(Entity entity) { return Invoke<bool>(0x8BAD02F0368D9E14, V(entity)); }
		public static Entity _GET_LAST_ENTITY_HIT_BY_ENTITY(Entity entity) { return Invoke<Entity>(0xA75EE4F689B85391, V(entity)); }
		public static Hash GET_LAST_MATERIAL_HIT_BY_ENTITY(Entity entity) { return Invoke<Hash>(0x5C3D0A935F535C4C, V(entity)); }
		public static Vector3 GET_COLLISION_NORMAL_OF_LAST_HIT_FOR_ENTITY(Entity entity) { return Invoke<Vector3>(0xE465D4AB7CA6AE72, V(entity)); }
		// Based on carmod_shop script decompile this takes a vehicle parameter. It is called when repair is done on initial enter.
		public static void FORCE_ENTITY_AI_AND_ANIMATION_UPDATE(Entity entity) { Invoke(0x40FDEDB72F8293B2, V(entity)); }
		// Returns a float value representing animation's current playtime with respect to its total playtime. This value increasing in a range from [0 to 1] and wrap back to 0 when it reach 1.
		// 
		// Example:
		// 0.000000 - mark the starting of animation.
		// 0.500000 - mark the midpoint of the animation.
		// 1.000000 - mark the end of animation.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static float GET_ENTITY_ANIM_CURRENT_TIME(Entity entity, string animDict, string animName) { return Invoke<float>(0x346D81500D088F42, V(entity), V(animDict), V(animName)); }
		// Returns a float value representing animation's total playtime in milliseconds.
		// 
		// Example:
		// GET_ENTITY_ANIM_TOTAL_TIME(PLAYER_ID(),"amb@world_human_yoga@female@base1","base_b") 
		// return 20800.000000
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static float GET_ENTITY_ANIM_TOTAL_TIME(Entity entity, string animDict, string animName) { return Invoke<float>(0x50BD2730B191E360, V(entity), V(animDict), V(animName)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static float GET_ANIM_DURATION(string animDict, string animName) { return Invoke<float>(0xFEDDF04D62B8D790, V(animDict), V(animName)); }
		public static Entity GET_ENTITY_ATTACHED_TO(Entity entity) { return Invoke<Entity>(0x48C2BED9180FE123, V(entity)); }
		// Gets the current coordinates for a specified entity.
		// `entity` = The entity to get the coordinates from.
		// `alive` = Unused by the game, potentially used by debug builds of GTA in order to assert whether or not an entity was alive.
		public static Vector3 GET_ENTITY_COORDS(Entity entity, bool alive) { return Invoke<Vector3>(0x3FEF770D40960D5A, V(entity), V(alive)); }
		// Gets the entity's forward vector.
		public static Vector3 GET_ENTITY_FORWARD_VECTOR(Entity entity) { return Invoke<Vector3>(0x0A794A5A57F8DF91, V(entity)); }
		// Gets the X-component of the entity's forward vector.
		public static float GET_ENTITY_FORWARD_X(Entity entity) { return Invoke<float>(0x8BB4EF4214E0E6D5, V(entity)); }
		// Gets the Y-component of the entity's forward vector.
		public static float GET_ENTITY_FORWARD_Y(Entity entity) { return Invoke<float>(0x866A4A5FAE349510, V(entity)); }
		// Returns the heading of the entity in degrees. Also know as the "Yaw" of an entity.
		public static float GET_ENTITY_HEADING(Entity entity) { return Invoke<float>(0xE83D4F9BA2A38914, V(entity)); }
		// Gets the heading of the entity physics in degrees, which tends to be more accurate than just "GET_ENTITY_HEADING". This can be clearly seen while, for example, ragdolling a ped/player.
		// 
		// NOTE: The name and description of this native are based on independent research. If you find this native to be more suitable under a different name and/or described differently, please feel free to do so.
		public static float GET_ENTITY_HEADING_FROM_EULERS(Entity entity) { return Invoke<float>(0x846BF6291198A71E, V(entity)); }
		// Returns an integer value of entity's current health.
		// 
		// Example of range for ped:
		// - Player [0 to 200]
		// - Ped [100 to 200]
		// - Vehicle [0 to 1000]
		// - Object [0 to 1000]
		// 
		// Health is actually a float value but this native casts it to int.
		// In order to get the actual value, do:
		// float health = *(float *)(entityAddress + 0x280);
		public static int GET_ENTITY_HEALTH(Entity entity) { return Invoke<int>(0xEEF059FAD016D209, V(entity)); }
		// Return an integer value of entity's maximum health.
		// 
		// Example:
		// - Player = 200
		// - Ped = 150
		public static int GET_ENTITY_MAX_HEALTH(Entity entity) { return Invoke<int>(0x15D757606D170C3C, V(entity)); }
		// For instance: ENTITY::SET_ENTITY_MAX_HEALTH(PLAYER::PLAYER_PED_ID(), 200); // director_mode.c4: 67849
		public static void SET_ENTITY_MAX_HEALTH(Entity entity, int value) { Invoke(0x166E7CF68597D8B5, V(entity), V(value)); }
		public static float GET_ENTITY_HEIGHT(Entity entity, float X, float Y, float Z, bool atTop, bool inWorldCoords) { return Invoke<float>(0x5A504562485944DD, V(entity), V(X), V(Y), V(Z), V(atTop), V(inWorldCoords)); }
		// Return height (z-dimension) above ground. 
		// Example: The pilot in a titan plane is 1.844176 above ground.
		// 
		// How can i convert it to meters?
		// Everything seems to be in meters, probably this too.
		public static float GET_ENTITY_HEIGHT_ABOVE_GROUND(Entity entity) { return Invoke<float>(0x1DD55701034110E5, V(entity)); }
		public static void GET_ENTITY_MATRIX(Entity entity, Vector3* forwardVector, Vector3* rightVector, Vector3* upVector, Vector3* position) { Invoke(0xECB2FC7235A7D137, V(entity), V(forwardVector), V(rightVector), V(upVector), V(position)); }
		// Returns the model hash from the entity
		public static Hash GET_ENTITY_MODEL(Entity entity) { return Invoke<Hash>(0x9F47B058362C84B5, V(entity)); }
		// Converts world coords (posX - Z) to coords relative to the entity
		// 
		// Example:
		// posX is given as 50
		// entity's x coord is 40
		// the returned x coord will then be 10 or -10, not sure haven't used this in a while (think it is 10 though).
		public static Vector3 GET_OFFSET_FROM_ENTITY_GIVEN_WORLD_COORDS(Entity entity, float posX, float posY, float posZ) { return Invoke<Vector3>(0x2274BC1C4885E333, V(entity), V(posX), V(posY), V(posZ)); }
		// Offset values are relative to the entity.
		// 
		// x = left/right
		// y = forward/backward
		// z = up/down
		public static Vector3 GET_OFFSET_FROM_ENTITY_IN_WORLD_COORDS(Entity entity, float offsetX, float offsetY, float offsetZ) { return Invoke<Vector3>(0x1899F328B0E12848, V(entity), V(offsetX), V(offsetY), V(offsetZ)); }
		public static float GET_ENTITY_PITCH(Entity entity) { return Invoke<float>(0xD45DC2893621E1FE, V(entity)); }
		// w is the correct parameter name!
		public static void GET_ENTITY_QUATERNION(Entity entity, float* x, float* y, float* z, float* w) { Invoke(0x7B3703D2D32DFA18, V(entity), V(x), V(y), V(z), V(w)); }
		// Displays the current ROLL axis of the entity [-180.0000/180.0000+]
		// (Sideways Roll) such as a vehicle tipped on its side
		public static float GET_ENTITY_ROLL(Entity entity) { return Invoke<float>(0x831E0242595560DF, V(entity)); }
		// rotationOrder is the order yaw, pitch and roll is applied. Usually 2. Returns a vector where the Z coordinate is the yaw.
		// 
		// rotationOrder refers to the order yaw pitch roll is applied; value ranges from 0 to 5 and is usually *2* in scripts.
		// What you use for rotationOrder when getting must be the same as rotationOrder when setting the rotation.
		// 
		// What it returns is the yaw on the z part of the vector, which makes sense considering R* considers z as vertical. Here's a picture for those of you who don't understand pitch, yaw, and roll: www.allstar.fiu.edu/aero/images/pic5-1.gif
		// 
		// Rotation Orders:
		// 0: ZYX - Rotate around the z-axis, then the y-axis and finally the x-axis.
		// 1: YZX - Rotate around the y-axis, then the z-axis and finally the x-axis.
		// 2: ZXY - Rotate around the z-axis, then the x-axis and finally the y-axis.
		// 3: XZY - Rotate around the x-axis, then the z-axis and finally the y-axis.
		// 4: YXZ - Rotate around the y-axis, then the x-axis and finally the z-axis.
		// 5: XYZ - Rotate around the x-axis, then the y-axis and finally the z-axis.
		public static Vector3 GET_ENTITY_ROTATION(Entity entity, int rotationOrder) { return Invoke<Vector3>(0xAFBD61CC738D9EB9, V(entity), V(rotationOrder)); }
		public static Vector3 GET_ENTITY_ROTATION_VELOCITY(Entity entity) { return Invoke<Vector3>(0x213B91045D09B983, V(entity)); }
		// Returns the name of the script that owns/created the entity or nullptr. Second parameter is unused, can just be a nullptr.
		public static byte* GET_ENTITY_SCRIPT(Entity entity, ScrHandle* script) { return PInvoke<byte>(0xA6E9C38DB51D7748, V(entity), V(script)); }
		// result is in meters per second
		// 
		// ------------------------------------------------------------
		// So would the conversion to mph and km/h, be along the lines of this.
		// 
		// float speed = GET_ENTITY_SPEED(veh);
		// float kmh = (speed * 3.6);
		// float mph = (speed * 2.236936);
		// ------------------------------------------------------------
		public static float GET_ENTITY_SPEED(Entity entity) { return Invoke<float>(0xD5037BA82E12416F, V(entity)); }
		// Relative can be used for getting speed relative to the frame of the vehicle, to determine for example, if you are going in reverse (-y speed) or not (+y speed). 
		public static Vector3 GET_ENTITY_SPEED_VECTOR(Entity entity, bool relative) { return Invoke<Vector3>(0x9A8D700A51CB7B0D, V(entity), V(relative)); }
		public static float GET_ENTITY_UPRIGHT_VALUE(Entity entity) { return Invoke<float>(0x95EED5A694951F9F, V(entity)); }
		public static Vector3 GET_ENTITY_VELOCITY(Entity entity) { return Invoke<Vector3>(0x4805D2B1D8CF94A9, V(entity)); }
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		public static Obj GET_OBJECT_INDEX_FROM_ENTITY_INDEX(Entity entity) { return Invoke<Obj>(0xD7E3B9735C0F89D6, V(entity)); }
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		public static Ped GET_PED_INDEX_FROM_ENTITY_INDEX(Entity entity) { return Invoke<Ped>(0x04A2A40C73395041, V(entity)); }
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		public static Vehicle GET_VEHICLE_INDEX_FROM_ENTITY_INDEX(Entity entity) { return Invoke<Vehicle>(0x4B53F92932ADFAC0, V(entity)); }
		// Returns the coordinates of an entity-bone.
		public static Vector3 GET_WORLD_POSITION_OF_ENTITY_BONE(Entity entity, int boneIndex) { return Invoke<Vector3>(0x44A8FCB8ED227738, V(entity), V(boneIndex)); }
		public static Player GET_NEAREST_PLAYER_TO_ENTITY(Entity entity) { return Invoke<Player>(0x7196842CB375CDB3, V(entity)); }
		public static Player GET_NEAREST_PLAYER_TO_ENTITY_ON_TEAM(Entity entity, int team) { return Invoke<Player>(0x4DC9A62F844D9337, V(entity), V(team)); }
		public static int GET_NEAREST_PARTICIPANT_TO_ENTITY(Entity entity) { return Invoke<int>(0xFFBD7052D65BE0FF, V(entity)); }
		// Returns:
		// 0 = no entity
		// 1 = ped
		// 2 = vehicle
		// 3 = obj
		public static int GET_ENTITY_TYPE(Entity entity) { return Invoke<int>(0x8ACD366038D14505, V(entity)); }
		// A population type, from the following enum: https://alloc8or.re/gta5/doc/enums/ePopulationType.txt
		public static int GET_ENTITY_POPULATION_TYPE(Entity entity) { return Invoke<int>(0xF6F5161F4534EDFF, V(entity)); }
		public static bool IS_AN_ENTITY(ScrHandle handle) { return Invoke<bool>(0x731EC8A916BD11A1, V(handle)); }
		public static bool IS_ENTITY_A_PED(Entity entity) { return Invoke<bool>(0x524AC5ECEA15343E, V(entity)); }
		public static bool IS_ENTITY_A_MISSION_ENTITY(Entity entity) { return Invoke<bool>(0x0A7B270912999B3C, V(entity)); }
		public static bool IS_ENTITY_A_VEHICLE(Entity entity) { return Invoke<bool>(0x6AC7003FA6E5575E, V(entity)); }
		public static bool IS_ENTITY_AN_OBJECT(Entity entity) { return Invoke<bool>(0x8D68C8FD0FACA94E, V(entity)); }
		// Checks if entity is within x/y/zSize distance of x/y/z. 
		// 
		// Last three are unknown ints, almost always p7 = 0, p8 = 1, p9 = 0
		public static bool IS_ENTITY_AT_COORD(Entity entity, float xPos, float yPos, float zPos, float xSize, float ySize, float zSize, bool p7, bool p8, int p9) { return Invoke<bool>(0x20B60995556D004F, V(entity), V(xPos), V(yPos), V(zPos), V(xSize), V(ySize), V(zSize), V(p7), V(p8), V(p9)); }
		// Checks if entity1 is within the box defined by x/y/zSize of entity2.
		// 
		// Last three parameters are almost alwasy p5 = 0, p6 = 1, p7 = 0
		public static bool IS_ENTITY_AT_ENTITY(Entity entity1, Entity entity2, float xSize, float ySize, float zSize, bool p5, bool p6, int p7) { return Invoke<bool>(0x751B70C3D034E187, V(entity1), V(entity2), V(xSize), V(ySize), V(zSize), V(p5), V(p6), V(p7)); }
		// Whether the entity is attached to any other entity.
		public static bool IS_ENTITY_ATTACHED(Entity entity) { return Invoke<bool>(0xB346476EF1A64897, V(entity)); }
		public static bool IS_ENTITY_ATTACHED_TO_ANY_OBJECT(Entity entity) { return Invoke<bool>(0xCF511840CEEDE0CC, V(entity)); }
		public static bool IS_ENTITY_ATTACHED_TO_ANY_PED(Entity entity) { return Invoke<bool>(0xB1632E9A5F988D11, V(entity)); }
		public static bool IS_ENTITY_ATTACHED_TO_ANY_VEHICLE(Entity entity) { return Invoke<bool>(0x26AA915AD89BFB4B, V(entity)); }
		public static bool IS_ENTITY_ATTACHED_TO_ENTITY(Entity from, Entity to) { return Invoke<bool>(0xEFBE71898A993728, V(from), V(to)); }
		public static bool IS_ENTITY_DEAD(Entity entity, bool p1) { return Invoke<bool>(0x5F9532F3B5CC2551, V(entity), V(p1)); }
		public static bool IS_ENTITY_IN_AIR(Entity entity) { return Invoke<bool>(0x886E37EC497200B6, V(entity)); }
		// `p8` is a debug flag invoking functions in the same path as ``DRAW_MARKER``
		// `p10` is some entity flag check, also used in `IS_ENTITY_AT_ENTITY`, `IS_ENTITY_IN_AREA`, and `IS_ENTITY_AT_COORD`.
		// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
		public static bool IS_ENTITY_IN_ANGLED_AREA(Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, float width, bool debug, bool includeZ, Any p10) { return Invoke<bool>(0x51210CED3DA1C78A, V(entity), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(debug), V(includeZ), V(p10)); }
		public static bool IS_ENTITY_IN_AREA(Entity entity, float x1, float y1, float z1, float x2, float y2, float z2, bool p7, bool p8, Any p9) { return Invoke<bool>(0x54736AA40E271165, V(entity), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p7), V(p8), V(p9)); }
		// Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
		public static bool IS_ENTITY_IN_ZONE(Entity entity, string zone) { return Invoke<bool>(0xB6463CF6AF527071, V(entity), V(zone)); }
		public static bool IS_ENTITY_IN_WATER(Entity entity) { return Invoke<bool>(0xCFB0A0D8EDD145A3, V(entity)); }
		// Get how much of the entity is submerged.  1.0f is whole entity.
		public static float GET_ENTITY_SUBMERGED_LEVEL(Entity entity) { return Invoke<float>(0xE81AFC1BC4CC41CE, V(entity)); }
		public static void SET_ENTITY_REQUIRES_MORE_EXPENSIVE_RIVER_CHECK(Entity entity, bool toggle) { Invoke(0x694E00132F2823ED, V(entity), V(toggle)); }
		// Returns true if the entity is in between the minimum and maximum values for the 2d screen coords. 
		// This means that it will return true even if the entity is behind a wall for example, as long as you're looking at their location. 
		// Chipping
		public static bool IS_ENTITY_ON_SCREEN(Entity entity) { return Invoke<bool>(0xE659E47AF827484B, V(entity)); }
		// See also PED::IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM 0x6EC47A344923E1ED 0x3C30B447
		// 
		// Taken from ENTITY::IS_ENTITY_PLAYING_ANIM(PLAYER::PLAYER_PED_ID(), "creatures@shark@move", "attack_player", 3)
		// 
		// p4 is always 3 in the scripts.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool IS_ENTITY_PLAYING_ANIM(Entity entity, string animDict, string animName, int taskFlag) { return Invoke<bool>(0x1F0B79228E461EC9, V(entity), V(animDict), V(animName), V(taskFlag)); }
		// a static ped will not react to natives like "APPLY_FORCE_TO_ENTITY" or "SET_ENTITY_VELOCITY" and oftentimes will not react to task-natives like "TASK::TASK_COMBAT_PED". The only way I know of to make one of these peds react is to ragdoll them (or sometimes to use CLEAR_PED_TASKS_IMMEDIATELY(). Static peds include almost all far-away peds, beach-combers, peds in certain scenarios, peds crossing a crosswalk, peds walking to get back into their cars, and others. If anyone knows how to make a ped non-static without ragdolling them, please edit this with the solution.
		// 
		// how can I make an entity static???
		public static bool IS_ENTITY_STATIC(Entity entity) { return Invoke<bool>(0x1218E6886D3D8327, V(entity)); }
		public static bool IS_ENTITY_TOUCHING_ENTITY(Entity entity, Entity targetEntity) { return Invoke<bool>(0x17FFC1B2BA35A494, V(entity), V(targetEntity)); }
		public static bool IS_ENTITY_TOUCHING_MODEL(Entity entity, Hash modelHash) { return Invoke<bool>(0x0F42323798A58C8C, V(entity), V(modelHash)); }
		public static bool IS_ENTITY_UPRIGHT(Entity entity, float angle) { return Invoke<bool>(0x5333F526F6AB19AA, V(entity), V(angle)); }
		public static bool IS_ENTITY_UPSIDEDOWN(Entity entity) { return Invoke<bool>(0x1DBD58820FA61D71, V(entity)); }
		public static bool IS_ENTITY_VISIBLE(Entity entity) { return Invoke<bool>(0x47D6F43D77935C75, V(entity)); }
		public static bool IS_ENTITY_VISIBLE_TO_SCRIPT(Entity entity) { return Invoke<bool>(0xD796CB5BA8F20E32, V(entity)); }
		public static bool IS_ENTITY_OCCLUDED(Entity entity) { return Invoke<bool>(0xE31C2C72B8692B64, V(entity)); }
		public static bool WOULD_ENTITY_BE_OCCLUDED(Hash entityModelHash, float x, float y, float z, bool p4) { return Invoke<bool>(0xEE5D2A122E09EC42, V(entityModelHash), V(x), V(y), V(z), V(p4)); }
		public static bool IS_ENTITY_WAITING_FOR_WORLD_COLLISION(Entity entity) { return Invoke<bool>(0xD05BFF0C0A12C68F, V(entity)); }
		// Applies a force to the specified entity.
		// 
		// **List of force types (p1)**:
		// public static enum ForceType
		// {
		//     MinForce = 0,
		//     MaxForceRot = 1,
		//     MinForce2 = 2,
		//     MaxForceRot2 = 3,
		//     ForceNoRot = 4,
		//     ForceRotPlusForce = 5
		// }
		// Research/documentation on the gtaforums can be found here https://gtaforums.com/topic/885669-precisely-define-obj-physics/) and here https://gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/.
		// 
		// p6/relative - makes the xyz force not relative to world coords, but to something else
		// p7/highForce - setting false will make the force really low
		public static void APPLY_FORCE_TO_ENTITY_CENTER_OF_MASS(Entity entity, int forceType, float x, float y, float z, bool p5, bool isDirectionRel, bool isForceRel, bool p8) { Invoke(0x18FF00FC7EFF559E, V(entity), V(forceType), V(x), V(y), V(z), V(p5), V(isDirectionRel), V(isForceRel), V(p8)); }
		// Documented here:
		// gtaforums.com/topic/885669-precisely-define-obj-physics/
		// gtaforums.com/topic/887362-apply-forces-and-momentums-to-entityobject/
		// 
		// forceFlags:
		// First bit (lowest): Strong force flag, factor 100
		// Second bit: Unkown flag
		// Third bit: Momentum flag=1 (vector (x,y,z) is a momentum, more research needed)
		// If higher bits are unequal 0 the function doesn't applay any forces at all.
		// (As integer possible values are 0-7)
		// 
		// 0: weak force
		// 1: strong force
		// 2: same as 0 (2nd bit?)
		// 3: same as 1
		// 4: weak momentum
		// 5: strong momentum
		// 6: same as 4
		// 7: same as 5
		// 
		// isLocal: vector defined in local (body-fixed) coordinate frame
		// isMassRel: if true the force gets multiplied with the objects mass (this is why it was known as highForce) and different objects will have the same acceleration.
		// 
		// p8 !!! Whenever I set this !=0, my script stopped.
		public static void APPLY_FORCE_TO_ENTITY(Entity entity, int forceFlags, float x, float y, float z, float offX, float offY, float offZ, int boneIndex, bool isDirectionRel, bool ignoreUpVec, bool isForceRel, bool p12, bool p13) { Invoke(0xC5F68BE9613E2D18, V(entity), V(forceFlags), V(x), V(y), V(z), V(offX), V(offY), V(offZ), V(boneIndex), V(isDirectionRel), V(ignoreUpVec), V(isForceRel), V(p12), V(p13)); }
		// Attaches entity1 to bone (boneIndex) of entity2.
		// 
		// boneIndex - this is different to boneID, use GET_PED_BONE_INDEX to get the index from the ID. use the index for attaching to specific bones. entity1 will be attached to entity2's centre if bone index given doesn't correspond to bone indexes for that entity type.
		// 
		// useSoftPinning - if set to false attached entity will not detach when fixed
		// collision - controls collision between the two entities (FALSE disables collision).
		// isPed - pitch doesnt work when false and roll will only work on negative numbers (only peds)
		// vertexIndex - position of vertex
		// fixedRot - if false it ignores entity vector 
		// 
		public static void ATTACH_ENTITY_TO_ENTITY(Entity entity1, Entity entity2, int boneIndex, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, bool p9, bool useSoftPinning, bool collision, bool isPed, int vertexIndex, bool fixedRot, Any p15) { Invoke(0x6B9BBD38AB0796DF, V(entity1), V(entity2), V(boneIndex), V(xPos), V(yPos), V(zPos), V(xRot), V(yRot), V(zRot), V(p9), V(useSoftPinning), V(collision), V(isPed), V(vertexIndex), V(fixedRot), V(p15)); }
		public static void ATTACH_ENTITY_BONE_TO_ENTITY_BONE(Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, bool p4, bool p5) { Invoke(0x5C48B75732C8456C, V(entity1), V(entity2), V(boneIndex1), V(boneIndex2), V(p4), V(p5)); }
		public static void ATTACH_ENTITY_BONE_TO_ENTITY_BONE_Y_FORWARD(Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, bool p4, bool p5) { Invoke(0xFD1695C5D3B05439, V(entity1), V(entity2), V(boneIndex1), V(boneIndex2), V(p4), V(p5)); }
		// breakForce is the amount of force required to break the bond.
		// p14 - is always 1 in scripts
		// p15 - is 1 or 0 in scripts - unknoun what it does
		// p16 - controls collision between the two entities (FALSE disables collision).
		// p17 - do not teleport entity to be attached to the position of the bone Index of the target entity (if 1, entity will not be teleported to target bone)
		// p18 - is always 2 in scripts.
		// 
		// 
		public static void ATTACH_ENTITY_TO_ENTITY_PHYSICALLY(Entity entity1, Entity entity2, int boneIndex1, int boneIndex2, float xPos1, float yPos1, float zPos1, float xPos2, float yPos2, float zPos2, float xRot, float yRot, float zRot, float breakForce, bool fixedRot, bool p15, bool collision, bool p17, int p18) { Invoke(0xC3675780C92F90F9, V(entity1), V(entity2), V(boneIndex1), V(boneIndex2), V(xPos1), V(yPos1), V(zPos1), V(xPos2), V(yPos2), V(zPos2), V(xRot), V(yRot), V(zRot), V(breakForce), V(fixedRot), V(p15), V(collision), V(p17), V(p18)); }
		public static void ATTACH_ENTITY_TO_ENTITY_PHYSICALLY_OVERRIDE_INVERSE_MASS(Entity firstEntityIndex, Entity secondEntityIndex, int firstEntityBoneIndex, int secondEntityBoneIndex, float secondEntityOffsetX, float secondEntityOffsetY, float secondEntityOffsetZ, float firstEntityOffsetX, float firstEntityOffsetY, float firstEntityOffsetZ, float vecRotationX, float vecRotationY, float vecRotationZ, float physicalStrength, bool constrainRotation, bool doInitialWarp, bool collideWithEntity, bool addInitialSeperation, int rotOrder, float invMassScaleA, float invMassScaleB) { Invoke(0x168A09D1B25B0BA4, V(firstEntityIndex), V(secondEntityIndex), V(firstEntityBoneIndex), V(secondEntityBoneIndex), V(secondEntityOffsetX), V(secondEntityOffsetY), V(secondEntityOffsetZ), V(firstEntityOffsetX), V(firstEntityOffsetY), V(firstEntityOffsetZ), V(vecRotationX), V(vecRotationY), V(vecRotationZ), V(physicalStrength), V(constrainRotation), V(doInitialWarp), V(collideWithEntity), V(addInitialSeperation), V(rotOrder), V(invMassScaleA), V(invMassScaleB)); }
		// Called to update entity attachments.
		public static void PROCESS_ENTITY_ATTACHMENTS(Entity entity) { Invoke(0xF4080490ADC51C6F, V(entity)); }
		// Returns the index of the bone. If the bone was not found, -1 will be returned. 
		// 
		// list:
		// https://pastebin.com/D7JMnX1g
		// 
		// BoneNames:
		//   chassis,
		//   windscreen,
		//    seat_pside_r,
		//  seat_dside_r,
		//  bodyshell,
		//     suspension_lm,
		//     suspension_lr,
		//     platelight,
		//    attach_female,
		//     attach_male,
		//   bonnet,
		//    boot,
		//  chassis_dummy,  //Center of the dummy
		//  chassis_Control,    //Not found yet
		//    door_dside_f,   //Door left, front
		//     door_dside_r,   //Door left, back
		//  door_pside_f,   //Door right, front
		//    door_pside_r,   //Door right, back
		//     Gun_GripR,
		//     windscreen_f,
		//  platelight, //Position where the light above the numberplate is located
		//    VFX_Emitter,
		//   window_lf,  //Window left, front
		//   window_lr,  //Window left, back
		//    window_rf,  //Window right, front
		//  window_rr,  //Window right, back
		//   engine, //Position of the engine
		//   gun_ammo,
		//  ROPE_ATTATCH,   //Not misspelled. In script "finale_heist2b.c4".
		//     wheel_lf,   //Wheel left, front
		//    wheel_lr,   //Wheel left, back
		//     wheel_rf,   //Wheel right, front
		//   wheel_rr,   //Wheel right, back
		//    exhaust,    //Exhaust. shows only the position of the stock-exhaust
		//    overheat,   //A position on the engine(not exactly sure, how to name it)
		//   misc_e, //Not a car-bone.
		//  seat_dside_f,   //Driver-seat
		//  seat_pside_f,   //Seat next to driver
		//  Gun_Nuzzle,
		//    seat_r
		// 
		// I doubt that the function is case-sensitive, since I found a "Chassis" and a "chassis". - Just tested: Definitely not case-sensitive.
		// 
		// 
		public static int GET_ENTITY_BONE_INDEX_BY_NAME(Entity entity, string boneName) { return Invoke<int>(0xFB71170B7E76ACBA, V(entity), V(boneName)); }
		public static void CLEAR_ENTITY_LAST_DAMAGE_ENTITY(Entity entity) { Invoke(0xA72CD9CA74A5ECBA, V(entity)); }
		// Deletes the specified entity, then sets the handle pointed to by the pointer to NULL.
		public static void DELETE_ENTITY(Entity* entity) { Invoke(0xAE3CBE5BF394C9C9, V(entity)); }
		// If `collision` is set to true, both entities won't collide with the other until the distance between them is above 4 meters.
		// Set `dynamic` to true to keep velocity after dettaching
		public static void DETACH_ENTITY(Entity entity, bool dynamic, bool collision) { Invoke(0x961AC54BF0613F5D, V(entity), V(dynamic), V(collision)); }
		// Freezes or unfreezes an entity preventing its coordinates to change by the player if set to `true`. You can still change the entity position using SET_ENTITY_COORDS.
		public static void FREEZE_ENTITY_POSITION(Entity entity, bool toggle) { Invoke(0x428CA6DBD1094446, V(entity), V(toggle)); }
		// True means it can be deleted by the engine when switching lobbies/missions/etc, false means the script is expected to clean it up.
		// 
		// "Allow Freeze If No Collision"
		public static void SET_ENTITY_SHOULD_FREEZE_WAITING_ON_COLLISION(Entity entity, bool toggle) { Invoke(0x3910051CCECDB00C, V(entity), V(toggle)); }
		// delta and bitset are guessed fields. They are based on the fact that most of the calls have 0 or nil field types passed in.
		// 
		// The only time bitset has a value is 0x4000 and the only time delta has a value is during stealth with usually <1.0f values.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool PLAY_ENTITY_ANIM(Entity entity, string animName, string animDict, float p3, bool loop, bool stayInAnim, bool p6, float delta, Any bitset) { return Invoke<bool>(0x7FB218262B810701, V(entity), V(animName), V(animDict), V(p3), V(loop), V(stayInAnim), V(p6), V(delta), V(bitset)); }
		// p4 and p7 are usually 1000.0f.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool PLAY_SYNCHRONIZED_ENTITY_ANIM(Entity entity, int syncedScene, string animation, string propName, float p4, float p5, Any p6, float p7) { return Invoke<bool>(0xC77720A12FE14A86, V(entity), V(syncedScene), V(animation), V(propName), V(p4), V(p5), V(p6), V(p7)); }
		// p6,p7 probably animname and animdict
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool PLAY_SYNCHRONIZED_MAP_ENTITY_ANIM(float x1, float y1, float z1, float x2, Any y2, float z2, string p6, string p7, float p8, float p9, Any p10, float p11) { return Invoke<bool>(0xB9C54555ED30FBC4, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p6), V(p7), V(p8), V(p9), V(p10), V(p11)); }
		public static bool STOP_SYNCHRONIZED_MAP_ENTITY_ANIM(float x1, float y1, float z1, float x2, Any y2, float z2) { return Invoke<bool>(0x11E79CAB7183B6F5, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// RAGEPluginHook list: docs.ragepluginhook.net/html/62951c37-a440-478c-b389-c471230ddfc5.htm
		public static bool STOP_ENTITY_ANIM(Entity entity, string animation, string animGroup, float p3) { return Invoke<bool>(0x28004F88151E03E0, V(entity), V(animation), V(animGroup), V(p3)); }
		// p1 sync task id?
		public static bool STOP_SYNCHRONIZED_ENTITY_ANIM(Entity entity, float p1, bool p2) { return Invoke<bool>(0x43D3807C077261E3, V(entity), V(p1), V(p2)); }
		// if (ENTITY::HAS_ANIM_EVENT_FIRED(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("CreateObject")))
		public static bool HAS_ANIM_EVENT_FIRED(Entity entity, Hash actionHash) { return Invoke<bool>(0xEAF4CD9EA3E7E922, V(entity), V(actionHash)); }
		// In the script "player_scene_t_bbfight.c4":
		// "if (ENTITY::FIND_ANIM_EVENT_PHASE(&l_16E, &l_19F[v_4/*16*/], v_9, &v_A, &v_B))"
		// -- &l_16E (p0) is requested as an anim dictionary earlier in the script.
		// -- &l_19F[v_4/*16*/] (p1) is used in other natives in the script as the "animation" param.
		// -- v_9 (p2) is instantiated as "victim_fall"; I'm guessing that's another anim
		// --v_A and v_B (p3 & p4) are both set as -1.0, but v_A is used immediately after this native for: 
		// "if (v_A < ENTITY::GET_ENTITY_ANIM_CURRENT_TIME(...))"
		// Both v_A and v_B are seemingly used to contain both Vector3's and floats, so I can't say what either really is other than that they are both output parameters. p4 looks more like a *Vector3 though
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool FIND_ANIM_EVENT_PHASE(string animDictionary, string animName, string p2, Any* p3, Any* p4) { return Invoke<bool>(0x07F1BE2BCCAA27A7, V(animDictionary), V(animName), V(p2), V(p3), V(p4)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void SET_ENTITY_ANIM_CURRENT_TIME(Entity entity, string animDictionary, string animName, float time) { Invoke(0x4487C259F0F70977, V(entity), V(animDictionary), V(animName), V(time)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void SET_ENTITY_ANIM_SPEED(Entity entity, string animDictionary, string animName, float speedMultiplier) { Invoke(0x28D1A16553C51776, V(entity), V(animDictionary), V(animName), V(speedMultiplier)); }
		// Makes the specified entity (ped, vehicle or obj) persistent. Persistent entities will not automatically be removed by the engine.
		// 
		// p1 has no effect when either its on or off 
		// maybe a quick disassembly will tell us what it does
		// 
		// p2 has no effect when either its on or off 
		// maybe a quick disassembly will tell us what it does
		public static void SET_ENTITY_AS_MISSION_ENTITY(Entity entity, bool p1, bool p2) { Invoke(0xAD738C3085FE7E11, V(entity), V(p1), V(p2)); }
		// Marks the specified entity (ped, vehicle or obj) as no longer needed if its population type is set to the mission type.
		// If the entity is ped, it will also clear their tasks immediately just like when CLEAR_PED_TASKS_IMMEDIATELY is called.
		// Entities marked as no longer needed, will be deleted as the engine sees fit.
		// Use this if you just want to just let the game delete the ped:
		// void MarkPedAsAmbientPed(Ped ped) {
		//   auto addr = getScriptHandleBaseAddress(ped);
		// 
		//   if (!addr) {
		//     return;
		//   }
		// 
		//   //the game uses only lower 4 bits as entity population type 
		//   BYTE origValue = *(BYTE *)(addr + 0xDA);
		//   *(BYTE *)(addr + 0xDA) = ((origValue & 0xF0) | ePopulationType::POPTYPE_RANDOM_AMBIENT);
		// }
		public static void SET_ENTITY_AS_NO_LONGER_NEEDED(Entity* entity) { Invoke(0xB736A491E64A32CF, V(entity)); }
		// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		public static void SET_PED_AS_NO_LONGER_NEEDED(Ped* ped) { Invoke(0x2595DD4236549CE3, V(ped)); }
		// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		public static void SET_VEHICLE_AS_NO_LONGER_NEEDED(Vehicle* vehicle) { Invoke(0x629BFA74418D6239, V(vehicle)); }
		// This is an alias of SET_ENTITY_AS_NO_LONGER_NEEDED.
		public static void SET_OBJECT_AS_NO_LONGER_NEEDED(Obj* obj) { Invoke(0x3AE22DEB5BA5A3E6, V(obj)); }
		public static void SET_ENTITY_CAN_BE_DAMAGED(Entity entity, bool toggle) { Invoke(0x1760FFA8AB074D66, V(entity), V(toggle)); }
		public static bool GET_ENTITY_CAN_BE_DAMAGED(Entity entity) { return Invoke<bool>(0xD95CC5D2AB15A09F, V(entity)); }
		public static void SET_ENTITY_CAN_BE_DAMAGED_BY_RELATIONSHIP_GROUP(Entity entity, bool bCanBeDamaged, int relGroup) { Invoke(0xE22D8FDE858B8119, V(entity), V(bCanBeDamaged), V(relGroup)); }
		public static void SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_SCRIPT_PARTICIPANTS(Entity entity, bool toggle) { Invoke(0x352E2B5CF420BF3B, V(entity), V(toggle)); }
		// Sets whether the entity can be targeted without being in line-of-sight.
		public static void SET_ENTITY_CAN_BE_TARGETED_WITHOUT_LOS(Entity entity, bool toggle) { Invoke(0xD3997889736FD899, V(entity), V(toggle)); }
		public static void SET_ENTITY_COLLISION(Entity entity, bool toggle, bool keepPhysics) { Invoke(0x1A9205C1B9EE827F, V(entity), V(toggle), V(keepPhysics)); }
		public static bool GET_ENTITY_COLLISION_DISABLED(Entity entity) { return Invoke<bool>(0xCCF1E97BEFDAE480, V(entity)); }
		public static void SET_ENTITY_COMPLETELY_DISABLE_COLLISION(Entity entity, bool toggle, bool keepPhysics) { Invoke(0x9EBC85ED0FFFE51C, V(entity), V(toggle), V(keepPhysics)); }
		// p7 is always 1 in the scripts. Set to 1, an area around the destination coords for the moved entity is cleared from other entities. 
		//  
		// Often ends with 1, 0, 0, 1); in the scripts. It works. 
		// 
		// Axis - Invert Axis Flags
		public static void SET_ENTITY_COORDS(Entity entity, float xPos, float yPos, float zPos, bool xAxis, bool yAxis, bool zAxis, bool clearArea) { Invoke(0x06843DA7060A026B, V(entity), V(xPos), V(yPos), V(zPos), V(xAxis), V(yAxis), V(zAxis), V(clearArea)); }
		public static void SET_ENTITY_COORDS_WITHOUT_PLANTS_RESET(Entity entity, float xPos, float yPos, float zPos, bool alive, bool deadFlag, bool ragdollFlag, bool clearArea) { Invoke(0x621873ECE1178967, V(entity), V(xPos), V(yPos), V(zPos), V(alive), V(deadFlag), V(ragdollFlag), V(clearArea)); }
		// Axis - Invert Axis Flags
		public static void SET_ENTITY_COORDS_NO_OFFSET(Entity entity, float xPos, float yPos, float zPos, bool xAxis, bool yAxis, bool zAxis) { Invoke(0x239A3351AC1DA385, V(entity), V(xPos), V(yPos), V(zPos), V(xAxis), V(yAxis), V(zAxis)); }
		public static void SET_ENTITY_DYNAMIC(Entity entity, bool toggle) { Invoke(0x1718DE8E3F2823CA, V(entity), V(toggle)); }
		// Set the heading of an entity in degrees also known as "Yaw".
		public static void SET_ENTITY_HEADING(Entity entity, float heading) { Invoke(0x8E2530AA8ADA980E, V(entity), V(heading)); }
		// health >= 0
		// male ped ~= 100 - 200
		// female ped ~= 0 - 100
		public static void SET_ENTITY_HEALTH(Entity entity, int health, Entity instigator, Hash weaponType) { Invoke(0x6B76DC1F3AE6E6A3, V(entity), V(health), V(instigator), V(weaponType)); }
		// Sets a ped or an obj totally invincible. It doesn't take any kind of damage. Peds will not ragdoll on explosions and the tazer animation won't apply either.
		// 
		// If you use this for a ped and you want Ragdoll to stay enabled, then do:
		// *(DWORD *)(pedAddress + 0x188) |= (1 << 9);
		// 
		// Use this if you want to get the invincibility status:
		//   bool IsPedInvincible(Ped ped)
		//  {
		//      auto addr = getScriptHandleBaseAddress(ped);    
		// 
		//         if (addr)
		//      {
		//          DWORD flag = *(DWORD *)(addr + 0x188);
		//             return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
		//       }
		// 
		//        return false;
		//  }
		public static void SET_ENTITY_INVINCIBLE(Entity entity, bool toggle, bool dontResetOnCleanup) { Invoke(0x3882114BDE571AD4, V(entity), V(toggle), V(dontResetOnCleanup)); }
		public static void SET_ENTITY_IS_TARGET_PRIORITY(Entity entity, bool p1, float p2) { Invoke(0xEA02E132F5C68722, V(entity), V(p1), V(p2)); }
		public static void SET_ENTITY_LIGHTS(Entity entity, bool toggle) { Invoke(0x7CFBA6A80BDF3874, V(entity), V(toggle)); }
		// Loads collision grid for an entity spawned outside of a player's loaded area. This allows peds to execute tasks rather than sit dormant because of a lack of a physics grid.
		// Certainly not the main usage of this native but when set to true for a Vehicle, it will prevent the vehicle to explode if it is spawned far away from the player.
		public static void SET_ENTITY_LOAD_COLLISION_FLAG(Entity entity, bool toggle, Any p2) { Invoke(0x0DC7CABAB1E9B67E, V(entity), V(toggle), V(p2)); }
		public static bool HAS_COLLISION_LOADED_AROUND_ENTITY(Entity entity) { return Invoke<bool>(0xE9676F61BC0B3321, V(entity)); }
		public static void SET_ENTITY_MAX_SPEED(Entity entity, float speed) { Invoke(0x0E46A3FCBDE2A1B1, V(entity), V(speed)); }
		public static void SET_ENTITY_ONLY_DAMAGED_BY_PLAYER(Entity entity, bool toggle) { Invoke(0x79F020FF9EDC0748, V(entity), V(toggle)); }
		public static void SET_ENTITY_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP(Entity entity, bool p1, Any p2) { Invoke(0x7022BD828FA0B082, V(entity), V(p1), V(p2)); }
		// Enable / disable each type of damage.
		// 
		// waterProof is damage related to water not drowning
		// --------------
		// p7 is to to '1' in am_mp_property_ext/int: ENTITY::SET_ENTITY_PROOFS(uParam0->f_19, true, true, true, true, true, true, 1, true);
		// 
		public static void SET_ENTITY_PROOFS(Entity entity, bool bulletProof, bool fireProof, bool explosionProof, bool collisionProof, bool meleeProof, bool steamProof, bool dontResetOnCleanup, bool waterProof) { Invoke(0xFAEE099C6F890BB8, V(entity), V(bulletProof), V(fireProof), V(explosionProof), V(collisionProof), V(meleeProof), V(steamProof), V(dontResetOnCleanup), V(waterProof)); }
		public static bool GET_ENTITY_PROOFS(Entity entity, bool* bulletProof, bool* fireProof, bool* explosionProof, bool* collisionProof, bool* meleeProof, bool* steamProof, bool* p7, bool* drownProof) { return Invoke<bool>(0xBE8CD9BE829BBEBF, V(entity), V(bulletProof), V(fireProof), V(explosionProof), V(collisionProof), V(meleeProof), V(steamProof), V(p7), V(drownProof)); }
		// w is the correct parameter name!
		public static void SET_ENTITY_QUATERNION(Entity entity, float x, float y, float z, float w) { Invoke(0x77B21BE7AC540F07, V(entity), V(x), V(y), V(z), V(w)); }
		public static void SET_ENTITY_RECORDS_COLLISIONS(Entity entity, bool toggle) { Invoke(0x0A50A1EEDAD01E65, V(entity), V(toggle)); }
		// rotationOrder refers to the order yaw pitch roll is applied
		// value ranges from 0 to 5. What you use for rotationOrder when setting must be the same as rotationOrder when getting the rotation. 
		// Unsure what value corresponds to what rotation order, more testing will be needed for that.
		// For the most part R* uses 1 or 2 as the order.
		// p5 is usually set as true
		// 
		public static void SET_ENTITY_ROTATION(Entity entity, float pitch, float roll, float yaw, int rotationOrder, bool p5) { Invoke(0x8524A8B0171D5E07, V(entity), V(pitch), V(roll), V(yaw), V(rotationOrder), V(p5)); }
		// p2 is always 0.
		public static void SET_ENTITY_VISIBLE(Entity entity, bool toggle, bool p2) { Invoke(0xEA1C610A04DB6BBB, V(entity), V(toggle), V(p2)); }
		public static void SET_ENTITY_WATER_REFLECTION_FLAG(Entity entity, bool toggle) { Invoke(0xC34BC448DA29F5E9, V(entity), V(toggle)); }
		public static void SET_ENTITY_MIRROR_REFLECTION_FLAG(Entity entity, bool p1) { Invoke(0xE66377CDDADA4810, V(entity), V(p1)); }
		// Note that the third parameter(denoted as z) is "up and down" with positive numbers encouraging upwards movement.
		public static void SET_ENTITY_VELOCITY(Entity entity, float x, float y, float z) { Invoke(0x1C99BB7B6E96D16F, V(entity), V(x), V(y), V(z)); }
		public static void SET_ENTITY_ANGULAR_VELOCITY(Entity entity, float x, float y, float z) { Invoke(0x8339643499D1222E, V(entity), V(x), V(y), V(z)); }
		public static void SET_ENTITY_HAS_GRAVITY(Entity entity, bool toggle) { Invoke(0x4A4722448F18EEF5, V(entity), V(toggle)); }
		// LOD distance can be 0 to 0xFFFF (higher values will result in 0xFFFF) as it is actually stored as a 16-bit value (aka uint16_t).
		public static void SET_ENTITY_LOD_DIST(Entity entity, int value) { Invoke(0x5927F96A78577363, V(entity), V(value)); }
		// Returns the LOD distance of an entity.
		public static int GET_ENTITY_LOD_DIST(Entity entity) { return Invoke<int>(0x4159C2762B5791D6, V(entity)); }
		// skin - everything alpha except skin
		// Set entity alpha level. Ranging from 0 to 255 but chnages occur after every 20 percent (after every 51).
		public static void SET_ENTITY_ALPHA(Entity entity, int alphaLevel, bool skin) { Invoke(0x44A0870B7E92D7C0, V(entity), V(alphaLevel), V(skin)); }
		public static int GET_ENTITY_ALPHA(Entity entity) { return Invoke<int>(0x5A47B3B5E63E94C6, V(entity)); }
		public static void RESET_ENTITY_ALPHA(Entity entity) { Invoke(0x9B1E824FFBB7027A, V(entity)); }
		// Similar to RESET_ENTITY_ALPHA
		public static void RESET_PICKUP_ENTITY_GLOW(Entity entity) { Invoke(0x490861B88F4FD846, V(entity)); }
		public static void SET_PICKUP_COLLIDES_WITH_PROJECTILES(Any p0, Any p1) { Invoke(0xCEA7C8E1B48FF68C, V(p0), V(p1)); }
		// Only called once in the scripts.
		// 
		// Related to weapon objects.
		// 
		public static void SET_ENTITY_SORT_BIAS(Entity entity, float p1) { Invoke(0x5C3B791D580E0BC2, V(entity), V(p1)); }
		public static void SET_ENTITY_ALWAYS_PRERENDER(Entity entity, bool toggle) { Invoke(0xACAD101E1FB66689, V(entity), V(toggle)); }
		public static void SET_ENTITY_RENDER_SCORCHED(Entity entity, bool toggle) { Invoke(0x730F5F8D3F0F2050, V(entity), V(toggle)); }
		// Example here: www.gtaforums.com/topic/830463-help-with-turning-lights-green-and-causing-peds-to-crash-into-each-other/#entry1068211340
		// 
		// 0 = green
		// 1 = red
		// 2 = yellow
		// 3 = reset changes
		// changing lights may not change the behavior of vehicles
		public static void SET_ENTITY_TRAFFICLIGHT_OVERRIDE(Entity entity, int state) { Invoke(0x57C5DB656185EAC4, V(entity), V(state)); }
		public static void SET_ENTITY_IS_IN_VEHICLE(Entity entity) { Invoke(0x78E8E3A640178255, V(entity)); }
		// Only works with objects!
		public static void CREATE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, bool p6) { Invoke(0x92C47782FDA8B2A3, V(x), V(y), V(z), V(radius), V(originalModel), V(newModel), V(p6)); }
		public static void REMOVE_MODEL_SWAP(float x, float y, float z, float radius, Hash originalModel, Hash newModel, bool p6) { Invoke(0x033C0F9A64E229AE, V(x), V(y), V(z), V(radius), V(originalModel), V(newModel), V(p6)); }
		// p5 = sets as true in scripts
		// Same as the comment for CREATE_MODEL_SWAP unless for some reason p5 affects it this only works with objects as well.
		// 
		// Network players do not see changes done with this.
		public static void CREATE_MODEL_HIDE(float x, float y, float z, float radius, Hash modelHash, bool p5) { Invoke(0x8A97BCA30A0CE478, V(x), V(y), V(z), V(radius), V(modelHash), V(p5)); }
		public static void CREATE_MODEL_HIDE_EXCLUDING_SCRIPT_OBJECTS(float x, float y, float z, float radius, Hash modelHash, bool p5) { Invoke(0x3A52AE588830BF7F, V(x), V(y), V(z), V(radius), V(modelHash), V(p5)); }
		// This native makes entities visible that are hidden by the native CREATE_MODEL_HIDE.
		// p5 should be false, true does nothing
		public static void REMOVE_MODEL_HIDE(float x, float y, float z, float radius, Hash modelHash, bool p5) { Invoke(0xD9E3006FB3CBD765, V(x), V(y), V(z), V(radius), V(modelHash), V(p5)); }
		public static void CREATE_FORCED_OBJECT(float x, float y, float z, Any p3, Hash modelHash, bool p5) { Invoke(0x150E808B375A385A, V(x), V(y), V(z), V(p3), V(modelHash), V(p5)); }
		public static void REMOVE_FORCED_OBJECT(float x, float y, float z, float p3, Hash modelHash) { Invoke(0x61B6775E83C0DB6F, V(x), V(y), V(z), V(p3), V(modelHash)); }
		// Calling this function disables collision between two entities.
		// The importance of the order for entity1 and entity2 is unclear.
		// The third parameter, `thisFrame`, decides whether the collision is to be disabled until it is turned back on, or if it's just this frame.
		public static void SET_ENTITY_NO_COLLISION_ENTITY(Entity entity1, Entity entity2, bool thisFrameOnly) { Invoke(0xA53ED5520C07654A, V(entity1), V(entity2), V(thisFrameOnly)); }
		public static void _SET_ENTITY_NO_COLLISION_WITH_NETWORKED_ENTITY(Entity entity1, Entity entity2) { Invoke(0x0A27A7827347B3B1, V(entity1), V(entity2)); }
		public static void SET_ENTITY_MOTION_BLUR(Entity entity, bool toggle) { Invoke(0x295D82A8559F9150, V(entity), V(toggle)); }
		// p1 always false.
		public static void SET_CAN_AUTO_VAULT_ON_ENTITY(Entity entity, bool toggle) { Invoke(0xE12ABE5E3A389A6C, V(entity), V(toggle)); }
		// p1 always false.
		public static void SET_CAN_CLIMB_ON_ENTITY(Entity entity, bool toggle) { Invoke(0xA80AE305E0A3044F, V(entity), V(toggle)); }
		// Only called within 1 script for x360. 'fm_mission_controller' and it used on an obj. 
		// 
		// Ran after these 2 natives,
		// set_object_targettable(uParam0, 0);
		// set_entity_invincible(uParam0, 1);
		public static void SET_WAIT_FOR_COLLISIONS_BEFORE_PROBE(Entity entity, bool toggle) { Invoke(0xDC6F8601FAF2E893, V(entity), V(toggle)); }
		public static void SET_ENTITY_NOWEAPONDECALS(Entity entity, bool p1) { Invoke(0x2C2E3DC128F44309, V(entity), V(p1)); }
		public static void SET_ENTITY_USE_MAX_DISTANCE_FOR_WATER_REFLECTION(Entity entity, bool p1) { Invoke(0x1A092BB0C3808B96, V(entity), V(p1)); }
		// Gets the world rotation of the specified bone of the specified entity.
		public static Vector3 GET_ENTITY_BONE_ROTATION(Entity entity, int boneIndex) { return Invoke<Vector3>(0xCE6294A232D03786, V(entity), V(boneIndex)); }
		// Gets the world position of the specified bone of the specified entity.
		public static Vector3 GET_ENTITY_BONE_POSTION(Entity entity, int boneIndex) { return Invoke<Vector3>(0x46F8696933A63C9B, V(entity), V(boneIndex)); }
		// Gets the local rotation of the specified bone of the specified entity.
		public static Vector3 GET_ENTITY_BONE_OBJECT_ROTATION(Entity entity, int boneIndex) { return Invoke<Vector3>(0xBD8D32550E5CEBFE, V(entity), V(boneIndex)); }
		public static Vector3 GET_ENTITY_BONE_OBJECT_POSTION(Entity entity, int boneIndex) { return Invoke<Vector3>(0xCF1247CC86961FD6, V(entity), V(boneIndex)); }
		public static int GET_ENTITY_BONE_COUNT(Entity entity) { return Invoke<int>(0xB328DCC3A3AA401B, V(entity)); }
		public static void ENABLE_ENTITY_BULLET_COLLISION(Entity entity) { Invoke(0x6CE177D014502E8A, V(entity)); }
		public static void SET_ENTITY_CAN_ONLY_BE_DAMAGED_BY_ENTITY(Entity entity1, Entity entity2) { Invoke(0xB17BC6453F6CF5AC, V(entity1), V(entity2)); }
		public static void SET_ENTITY_CANT_CAUSE_COLLISION_DAMAGED_ENTITY(Entity entity1, Entity entity2) { Invoke(0x68B562E124CC0AEF, V(entity1), V(entity2)); }
		// p1 is always set to 1
		public static void SET_ALLOW_MIGRATE_TO_SPECTATOR(Entity entity, Any p1) { Invoke(0x36F32DE87082343E, V(entity), V(p1)); }
		// Gets the handle of an entity with a specific model hash attached to another entity, such as an obj attached to a ped.
		//  This native does not appear to have anything to do with pickups as in scripts it is used with objects.
		// 
		// Example from fm_mission_controller_2020.c:
		// 
		// iVar8 = ENTITY::GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(bParam0->f_9, joaat("p_cs_clipboard"));
		public static Entity GET_ENTITY_OF_TYPE_ATTACHED_TO_ENTITY(Entity entity, Hash modelHash) { return Invoke<Entity>(0x1F922734E259BD26, V(entity), V(modelHash)); }
		public static void SET_PICK_UP_BY_CARGOBOB_DISABLED(Entity entity, bool toggle) { Invoke(0xD7B80E7C3BEFC396, V(entity), V(toggle)); }




		public static void SET_DECISION_MAKER(Ped ped, Hash name) { Invoke(0xB604A2942ADED0EE, V(ped), V(name)); }
		// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
		public static void CLEAR_DECISION_MAKER_EVENT_RESPONSE(Hash name, int eventType) { Invoke(0x4FC9381A7AEE8968, V(name), V(eventType)); }
		// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
		// 
		// This is limited to 4 blocked events at a time.
		public static void BLOCK_DECISION_MAKER_EVENT(Hash name, int eventType) { Invoke(0xE42FCDFD0E4196F7, V(name), V(eventType)); }
		// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
		public static void UNBLOCK_DECISION_MAKER_EVENT(Hash name, int eventType) { Invoke(0xD7CD9CF34F2C99E8, V(name), V(eventType)); }
		// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
		public static int ADD_SHOCKING_EVENT_AT_POSITION(int eventType, float x, float y, float z, float duration) { return Invoke<int>(0xD9F8455409B525E9, V(eventType), V(x), V(y), V(z), V(duration)); }
		// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
		public static int ADD_SHOCKING_EVENT_FOR_ENTITY(int eventType, Entity entity, float duration) { return Invoke<int>(0x7FD8F3BE76F89422, V(eventType), V(entity), V(duration)); }
		// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
		public static bool IS_SHOCKING_EVENT_IN_SPHERE(int eventType, float x, float y, float z, float radius) { return Invoke<bool>(0x1374ABB7C15BAB92, V(eventType), V(x), V(y), V(z), V(radius)); }
		public static bool REMOVE_SHOCKING_EVENT(ScrHandle evt) { return Invoke<bool>(0x2CDA538C44C6CCE5, V(evt)); }
		public static void REMOVE_ALL_SHOCKING_EVENTS(bool p0) { Invoke(0xEAABE8FDFA21274C, V(p0)); }
		public static void REMOVE_SHOCKING_EVENT_SPAWN_BLOCKING_AREAS() { Invoke(0x340F1415B68AEADE); }
		public static void SUPPRESS_SHOCKING_EVENTS_NEXT_FRAME() { Invoke(0x2F9A292AD0A3BD89); }
		// eventType: https://alloc8or.re/gta5/doc/enums/eEventType.txt
		public static void SUPPRESS_SHOCKING_EVENT_TYPE_NEXT_FRAME(int eventType) { Invoke(0x3FD2EC8BF1F1CF30, V(eventType)); }
		public static void SUPPRESS_AGITATION_EVENTS_NEXT_FRAME() { Invoke(0x5F3B7749C112D552); }




		// Character types:
		// 0 = Michael, 
		// 1 = Franklin, 
		// 2 = Trevor, 
		// 3 = MPMale, 
		// 4 = MPFemale
		public static int GET_NUM_TATTOO_SHOP_DLC_ITEMS(int character) { return Invoke<int>(0x278F76C3B0A8F109, V(character)); }
		// Character types:
		// 0 = Michael, 
		// 1 = Franklin, 
		// 2 = Trevor, 
		// 3 = MPMale, 
		// 4 = MPFemale
		// 
		// 
		// enum TattooZoneData
		// {  
		//     ZONE_TORSO = 0,  
		//     ZONE_HEAD = 1,  
		//     ZONE_LEFT_ARM = 2,  
		//     ZONE_RIGHT_ARM = 3,  
		//     ZONE_LEFT_LEG = 4,  
		//     ZONE_RIGHT_LEG = 5,  
		//     ZONE_UNKNOWN = 6,
		//     ZONE_NONE = 7,  
		// };
		// struct outComponent
		// {
		//     // these vars are suffixed with 4 bytes of padding each.
		//     uint unk;
		//     int unk2;
		//     uint tattooCollectionHash;
		//     uint tattooNameHash;
		//     int unk3;
		//     TattooZoneData zoneId;
		//     uint unk4;
		//     uint unk5;
		//     // maybe more, not sure exactly, decompiled scripts are very vague around this part.
		// }
		public static bool GET_TATTOO_SHOP_DLC_ITEM_DATA(int characterType, int decorationIndex, Any* outComponent) { return Invoke<bool>(0xFF56381874F82086, V(characterType), V(decorationIndex), V(outComponent)); }
		// Returns some sort of index/offset for overlays/decorations.
		// 
		// Character types:
		// 0 = Michael, 
		// 1 = Franklin, 
		// 2 = Trevor, 
		// 3 = MPMale, 
		// 4 = MPFemale
		public static int GET_TATTOO_SHOP_DLC_ITEM_INDEX(Hash overlayHash, Any p1, int character) { return Invoke<int>(0x10144267DD22866C, V(overlayHash), V(p1), V(character)); }
		public static void INIT_SHOP_PED_COMPONENT(Any* outComponent) { Invoke(0x1E8C308FD312C036, V(outComponent)); }
		public static void INIT_SHOP_PED_PROP(Any* outProp) { Invoke(0xEB0A2B758F7B850F, V(outProp)); }
		public static int SETUP_SHOP_PED_APPAREL_QUERY(int p0, int p1, int p2, int p3) { return Invoke<int>(0x50F457823CE6EB5F, V(p0), V(p1), V(p2), V(p3)); }
		// character is 0 for Michael, 1 for Franklin, 2 for Trevor, 3 for freemode male, and 4 for freemode female.
		// 
		// componentId is between 0 and 11 and corresponds to the usual component slots.
		// 
		// p1 could be the outfit number; unsure.
		// 
		// p2 is usually -1; unknown function.
		// 
		// p3 appears to be for selecting between clothes and props; false is used with components/clothes, true is used with props.
		// 
		// p4 is usually -1; unknown function.
		// 
		// componentId is -1 when p3 is true in decompiled scripts.
		public static int SETUP_SHOP_PED_APPAREL_QUERY_TU(int character, int p1, int p2, bool p3, int p4, int componentId) { return Invoke<int>(0x9BDF59818B1E38C1, V(character), V(p1), V(p2), V(p3), V(p4), V(componentId)); }
		// See https://git.io/JtcRf for example and structs.
		public static void GET_SHOP_PED_QUERY_COMPONENT(int componentId, Any* outComponent) { Invoke(0x249E310B2D920699, V(componentId), V(outComponent)); }
		// Returns some sort of index/offset for components.
		// Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = false and componentId with the drawable's component slot first, returns -1 otherwise.
		public static int GET_SHOP_PED_QUERY_COMPONENT_INDEX(Hash componentHash) { return Invoke<int>(0x96E2929292A4DB77, V(componentHash)); }
		// More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
		public static void GET_SHOP_PED_COMPONENT(Hash componentHash, Any* outComponent) { Invoke(0x74C0E2A57EC66760, V(componentHash), V(outComponent)); }
		// See https://git.io/JtcRf for example and structs.
		public static void GET_SHOP_PED_QUERY_PROP(int componentId, Any* outProp) { Invoke(0xDE44A00999B2837D, V(componentId), V(outProp)); }
		// Returns some sort of index/offset for props.
		// Needs _GET_NUM_PROPS_FROM_OUTFIT to be called with p3 = true and componentId = -1 first, returns -1 otherwise.
		public static int GET_SHOP_PED_QUERY_PROP_INDEX(Hash componentHash) { return Invoke<int>(0x6CEBE002E58DEE97, V(componentHash)); }
		// More info here: https://gist.github.com/root-cause/3b80234367b0c856d60bf5cb4b826f86
		public static void GET_SHOP_PED_PROP(Hash componentHash, Any* outProp) { Invoke(0x5D5CAFF661DDF6FC, V(componentHash), V(outProp)); }
		public static Hash GET_HASH_NAME_FOR_COMPONENT(Entity entity, int componentId, int drawableVariant, int textureVariant) { return Invoke<Hash>(0x0368B3A838070348, V(entity), V(componentId), V(drawableVariant), V(textureVariant)); }
		public static Hash GET_HASH_NAME_FOR_PROP(Entity entity, int componentId, int propIndex, int propTextureIndex) { return Invoke<Hash>(0x5D6160275CAEC8DD, V(entity), V(componentId), V(propIndex), V(propTextureIndex)); }
		public static int GET_SHOP_PED_APPAREL_VARIANT_COMPONENT_COUNT(Hash componentHash) { return Invoke<int>(0xC17AD0E5752BECDA, V(componentHash)); }
		// `propHash`: Ped helmet prop hash?
		// This native returns 1 when the player helmet has a visor (there is another prop index for the same helmet with closed/opened visor variant) that can be toggled. 0 if there's no alternative version with a visor for this helmet prop.
		public static int GET_SHOP_PED_APPAREL_VARIANT_PROP_COUNT(Hash propHash) { return Invoke<int>(0xD40AAC51E8E4C663, V(propHash)); }
		public static void GET_VARIANT_COMPONENT(Hash componentHash, int variantComponentIndex, Hash* nameHash, int* enumValue, int* componentType) { Invoke(0x6E11F282F11863B6, V(componentHash), V(variantComponentIndex), V(nameHash), V(enumValue), V(componentType)); }
		public static void GET_VARIANT_PROP(Hash componentHash, int variantPropIndex, Hash* nameHash, int* enumValue, int* anchorPoint) { Invoke(0xD81B7F27BC773E66, V(componentHash), V(variantPropIndex), V(nameHash), V(enumValue), V(anchorPoint)); }
		// Returns number of possible values of the forcedComponentIndex argument of GET_FORCED_COMPONENT.
		public static int GET_SHOP_PED_APPAREL_FORCED_COMPONENT_COUNT(Hash componentHash) { return Invoke<int>(0xC6B9DB42C04DD8C3, V(componentHash)); }
		// Returns number of possible values of the forcedPropIndex argument of GET_FORCED_PROP.
		public static int GET_SHOP_PED_APPAREL_FORCED_PROP_COUNT(Hash componentHash) { return Invoke<int>(0x017568A8182D98A6, V(componentHash)); }
		public static void GET_FORCED_COMPONENT(Hash componentHash, int forcedComponentIndex, Hash* nameHash, int* enumValue, int* componentType) { Invoke(0x6C93ED8C2F74859B, V(componentHash), V(forcedComponentIndex), V(nameHash), V(enumValue), V(componentType)); }
		public static void GET_FORCED_PROP(Hash componentHash, int forcedPropIndex, Hash* nameHash, int* enumValue, int* anchorPoint) { Invoke(0xE1CA84EBF72E691D, V(componentHash), V(forcedPropIndex), V(nameHash), V(enumValue), V(anchorPoint)); }
		// Full list of restriction tags by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedApparelRestrictionTags.json
		// 
		// componentId/last parameter seems to be unused.
		public static bool DOES_SHOP_PED_APPAREL_HAVE_RESTRICTION_TAG(Hash componentHash, Hash restrictionTagHash, int componentId) { return Invoke<bool>(0x341DE7ED1D2A1BFD, V(componentHash), V(restrictionTagHash), V(componentId)); }
		public static bool DOES_CURRENT_PED_COMPONENT_HAVE_RESTRICTION_TAG(Ped ped, int componentId, Hash restrictionTagHash) { return Invoke<bool>(0x7796B21B76221BC5, V(ped), V(componentId), V(restrictionTagHash)); }
		public static bool DOES_CURRENT_PED_PROP_HAVE_RESTRICTION_TAG(Ped ped, int componentId, Hash restrictionTagHash) { return Invoke<bool>(0xD726BAB4554DA580, V(ped), V(componentId), V(restrictionTagHash)); }
		// characters
		// 
		// 0: Michael
		// 1: Franklin
		// 2: Trevor
		// 3: MPMale
		// 4: MPFemale
		public static int SETUP_SHOP_PED_OUTFIT_QUERY(int character, bool p1) { return Invoke<int>(0xF3FBE2D50A6A8C28, V(character), V(p1)); }
		// outfitIndex: from 0 to SETUP_SHOP_PED_OUTFIT_QUERY(characterIndex, false) - 1.
		// See https://git.io/JtcB8 for example and outfit struct.
		public static void GET_SHOP_PED_QUERY_OUTFIT(int outfitIndex, Any* outfit) { Invoke(0x6D793F03A631FE56, V(outfitIndex), V(outfit)); }
		public static void GET_SHOP_PED_OUTFIT(Any p0, Any* p1) { Invoke(0xB7952076E444979D, V(p0), V(p1)); }
		public static int GET_SHOP_PED_OUTFIT_LOCATE(Any p0) { return Invoke<int>(0x073CA26B079F956E, V(p0)); }
		// See https://git.io/JtcBH for example and structs.
		public static bool GET_SHOP_PED_OUTFIT_PROP_VARIANT(Hash outfitHash, int variantIndex, Any* outPropVariant) { return Invoke<bool>(0xA9F9C2E0FDE11CBB, V(outfitHash), V(variantIndex), V(outPropVariant)); }
		// See https://git.io/JtcBH for example and structs.
		public static bool GET_SHOP_PED_OUTFIT_COMPONENT_VARIANT(Hash outfitHash, int variantIndex, Any* outComponentVariant) { return Invoke<bool>(0x19F2A026EDF0013F, V(outfitHash), V(variantIndex), V(outComponentVariant)); }
		public static int GET_NUM_DLC_VEHICLES() { return Invoke<int>(0xA7A866D21CD2329B); }
		// dlcVehicleIndex is 0 to GET_NUM_DLC_VEHICLS() - 1
		public static Hash GET_DLC_VEHICLE_MODEL(int dlcVehicleIndex) { return Invoke<Hash>(0xECC01B7C5763333C, V(dlcVehicleIndex)); }
		// dlcVehicleIndex takes a number from 0 - GET_NUM_DLC_VEHICLES() - 1.
		// outData is a struct of 3 8-byte items.
		// The Second item in the struct *(Hash *)(outData + 1) is the vehicle hash.
		public static bool GET_DLC_VEHICLE_DATA(int dlcVehicleIndex, Any* outData) { return Invoke<bool>(0x33468EDC08E371F6, V(dlcVehicleIndex), V(outData)); }
		public static int GET_DLC_VEHICLE_FLAGS(int dlcVehicleIndex) { return Invoke<int>(0x5549EE11FA22FCF2, V(dlcVehicleIndex)); }
		// Returns the total number of DLC weapons.
		public static int GET_NUM_DLC_WEAPONS() { return Invoke<int>(0xEE47635F352DA367); }
		// Returns the total number of DLC weapons that are available in SP (availableInSP field in shop_weapon.meta).
		public static int GET_NUM_DLC_WEAPONS_SP() { return Invoke<int>(0x4160B65AE085B5A9); }
		// 
		// dlcWeaponIndex takes a number from 0 - GET_NUM_DLC_WEAPONS() - 1.
		// struct DlcWeaponData
		// {
		// int emptyCheck; //use DLC1::IS_CONTENT_ITEM_LOCKED on this
		// int padding1;
		// int weaponHash;
		// int padding2;
		// int unk;
		// int padding3;
		// int weaponCost;
		// int padding4;
		// int ammoCost;
		// int padding5;
		// int ammoType;
		// int padding6;
		// int defaultClipSize;
		// int padding7;
		// char nameLabel[64];
		// char descLabel[64];
		// char desc2Label[64]; // usually "the" + name
		// char upperCaseNameLabel[64];
		// };
		public static bool GET_DLC_WEAPON_DATA(int dlcWeaponIndex, Any* outData) { return Invoke<bool>(0x79923CD21BECE14E, V(dlcWeaponIndex), V(outData)); }
		// Same as GET_DLC_WEAPON_DATA but only works for DLC weapons that are available in SP.
		public static bool GET_DLC_WEAPON_DATA_SP(int dlcWeaponIndex, Any* outData) { return Invoke<bool>(0x310836EE7129BA33, V(dlcWeaponIndex), V(outData)); }
		// Returns the total number of DLC weapon components.
		public static int GET_NUM_DLC_WEAPON_COMPONENTS(int dlcWeaponIndex) { return Invoke<int>(0x405425358A7D61FE, V(dlcWeaponIndex)); }
		// Returns the total number of DLC weapon components that are available in SP.
		public static int GET_NUM_DLC_WEAPON_COMPONENTS_SP(int dlcWeaponIndex) { return Invoke<int>(0xAD2A7A6DFF55841B, V(dlcWeaponIndex)); }
		// p0 seems to be the weapon index
		// p1 seems to be the weapon component index
		// struct DlcComponentData{
		// int attachBone;
		// int padding1;
		// int bActiveByDefault;
		// int padding2;
		// int unk;
		// int padding3;
		// int componentHash;
		// int padding4;
		// int unk2;
		// int padding5;
		// int componentCost;
		// int padding6;
		// char nameLabel[64];
		// char descLabel[64];
		// };
		// 
		public static bool GET_DLC_WEAPON_COMPONENT_DATA(int dlcWeaponIndex, int dlcWeapCompIndex, Any* ComponentDataPtr) { return Invoke<bool>(0x6CF598A2957C2BF8, V(dlcWeaponIndex), V(dlcWeapCompIndex), V(ComponentDataPtr)); }
		// Same as GET_DLC_WEAPON_COMPONENT_DATA but only works for DLC components that are available in SP.
		public static bool GET_DLC_WEAPON_COMPONENT_DATA_SP(int dlcWeaponIndex, int dlcWeapCompIndex, Any* ComponentDataPtr) { return Invoke<bool>(0x31D5E073B6F93CDC, V(dlcWeaponIndex), V(dlcWeapCompIndex), V(ComponentDataPtr)); }
		public static bool IS_CONTENT_ITEM_LOCKED(Hash itemHash) { return Invoke<bool>(0xD4D7B033C3AA243C, V(itemHash)); }
		public static bool IS_DLC_VEHICLE_MOD(Hash hash) { return Invoke<bool>(0x0564B9FF9631B82C, V(hash)); }
		public static Hash GET_DLC_VEHICLE_MOD_LOCK_HASH(Hash hash) { return Invoke<Hash>(0xC098810437312FFF, V(hash)); }
		// From fm_deathmatch_creator and fm_race_creator:
		// 
		// FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
		// FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));
		public static void EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(Hash hash) { Invoke(0x6BEDF5769AC2DC07, V(hash)); }
		// From fm_deathmatch_creator and fm_race_creator:
		// 
		// FILES::REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP_SP"));
		// FILES::EXECUTE_CONTENT_CHANGESET_GROUP_FOR_ALL(joaat("GROUP_MAP"));
		public static void REVERT_CONTENT_CHANGESET_GROUP_FOR_ALL(Hash hash) { Invoke(0x3C1978285B036B25, V(hash)); }




		// Starts a fire:
		// 
		// xyz: Location of fire
		// maxChildren: The max amount of times a fire can spread to other objects. Must be 25 or less, or the function will do nothing.
		// isGasFire: Whether or not the fire is powered by gasoline.
		public static FireId START_SCRIPT_FIRE(float X, float Y, float Z, int maxChildren, bool isGasFire) { return Invoke<FireId>(0x6B83617E04503888, V(X), V(Y), V(Z), V(maxChildren), V(isGasFire)); }
		public static void REMOVE_SCRIPT_FIRE(FireId fireHandle) { Invoke(0x7FF548385680673F, V(fireHandle)); }
		public static FireId START_ENTITY_FIRE(Entity entity) { return Invoke<FireId>(0xF6A9D9708F6F23DF, V(entity)); }
		public static void STOP_ENTITY_FIRE(Entity entity) { Invoke(0x7F0DD2EBBB651AFF, V(entity)); }
		public static bool IS_ENTITY_ON_FIRE(Entity entity) { return Invoke<bool>(0x28D3FED7190D3A0B, V(entity)); }
		public static int GET_NUMBER_OF_FIRES_IN_RANGE(float x, float y, float z, float radius) { return Invoke<int>(0x50CAD495A460B305, V(x), V(y), V(z), V(radius)); }
		public static void SET_FLAMMABILITY_MULTIPLIER(float p0) { Invoke(0x8F390AC4155099BA, V(p0)); }
		public static void STOP_FIRE_IN_RANGE(float x, float y, float z, float radius) { Invoke(0x056A8A219B8E829F, V(x), V(y), V(z), V(radius)); }
		// Returns TRUE if it found something. FALSE if not.
		public static bool GET_CLOSEST_FIRE_POS(Vector3* outPosition, float x, float y, float z) { return Invoke<bool>(0x352A9F6BCF90081F, V(outPosition), V(x), V(y), V(z)); }
		// bool isAudible = If explosion makes a sound.
		// bool isInvisible = If the explosion is invisible or not.
		// 
		// explosionType: https://alloc8or.re/gta5/doc/enums/eExplosionTag.txt
		public static void ADD_EXPLOSION(float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake, bool noDamage) { Invoke(0xE3AD2BDBAEE269AC, V(x), V(y), V(z), V(explosionType), V(damageScale), V(isAudible), V(isInvisible), V(cameraShake), V(noDamage)); }
		// isAudible: If explosion makes a sound.
		// isInvisible: If the explosion is invisible or not.
		// explosionType: See ADD_EXPLOSION.
		public static void ADD_OWNED_EXPLOSION(Ped ped, float x, float y, float z, int explosionType, float damageScale, bool isAudible, bool isInvisible, float cameraShake) { Invoke(0x172AA1B624FA1013, V(ped), V(x), V(y), V(z), V(explosionType), V(damageScale), V(isAudible), V(isInvisible), V(cameraShake)); }
		// isAudible: If explosion makes a sound.
		// isInvisible: If the explosion is invisible or not.
		// explosionType: See ADD_EXPLOSION.
		public static void ADD_EXPLOSION_WITH_USER_VFX(float x, float y, float z, int explosionType, Hash explosionFx, float damageScale, bool isAudible, bool isInvisible, float cameraShake) { Invoke(0x36DD3FE58B5E5212, V(x), V(y), V(z), V(explosionType), V(explosionFx), V(damageScale), V(isAudible), V(isInvisible), V(cameraShake)); }
		// explosionType: See ADD_EXPLOSION.
		public static bool IS_EXPLOSION_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<bool>(0x2E2EBA0EE7CED0E0, V(explosionType), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// explosionType: See ADD_EXPLOSION.
		public static bool IS_EXPLOSION_ACTIVE_IN_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<bool>(0x6070104B699B2EF4, V(explosionType), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// explosionType: See ADD_EXPLOSION.
		public static bool IS_EXPLOSION_IN_SPHERE(int explosionType, float x, float y, float z, float radius) { return Invoke<bool>(0xAB0F816885B0E483, V(explosionType), V(x), V(y), V(z), V(radius)); }
		// explosionType: See ADD_EXPLOSION.
		public static Entity GET_OWNER_OF_EXPLOSION_IN_SPHERE(int explosionType, float x, float y, float z, float radius) { return Invoke<Entity>(0xB3CD51E3DB86F176, V(explosionType), V(x), V(y), V(z), V(radius)); }
		// explosionType: See ADD_EXPLOSION, -1 for any explosion type
		// 
		public static bool IS_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float width) { return Invoke<bool>(0xA079A6C51525DC4B, V(explosionType), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width)); }
		// Returns a handle to the first entity within the a circle spawned inside the 2 points from a radius.
		// 
		// explosionType: See ADD_EXPLOSION.
		public static Entity GET_OWNER_OF_EXPLOSION_IN_ANGLED_AREA(int explosionType, float x1, float y1, float z1, float x2, float y2, float z2, float radius) { return Invoke<Entity>(0x14BA4BA137AF6CEC, V(explosionType), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(radius)); }




		// NOTE: Debugging functions are not present in the retail version of the game.
		public static void SET_DEBUG_LINES_AND_SPHERES_DRAWING_ACTIVE(bool enabled) { Invoke(0x175B6BFC15CDD0C5, V(enabled)); }
		public static void DRAW_DEBUG_LINE(float x1, float y1, float z1, float x2, float y2, float z2, int r, int g, int b, int alpha) { Invoke(0x7FDFADE676AA3CB0, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(r), V(g), V(b), V(alpha)); }
		// NOTE: Debugging functions are not present in the retail version of the game.
		public static void DRAW_DEBUG_LINE_WITH_TWO_COLOURS(float x1, float y1, float z1, float x2, float y2, float z2, int r1, int g1, int b1, int r2, int g2, int b2, int alpha1, int alpha2) { Invoke(0xD8B9A8AC5608FF94, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(r1), V(g1), V(b1), V(r2), V(g2), V(b2), V(alpha1), V(alpha2)); }
		// NOTE: Debugging functions are not present in the retail version of the game.
		public static void DRAW_DEBUG_SPHERE(float x, float y, float z, float radius, int red, int green, int blue, int alpha) { Invoke(0xAAD68E1AB39DA632, V(x), V(y), V(z), V(radius), V(red), V(green), V(blue), V(alpha)); }
		public static void DRAW_DEBUG_BOX(float x1, float y1, float z1, float x2, float y2, float z2, int r, int g, int b, int alpha) { Invoke(0x083A2CA4F2E573BD, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(r), V(g), V(b), V(alpha)); }
		// NOTE: Debugging functions are not present in the retail version of the game.
		public static void DRAW_DEBUG_CROSS(float x, float y, float z, float size, int red, int green, int blue, int alpha) { Invoke(0x73B1189623049839, V(x), V(y), V(z), V(size), V(red), V(green), V(blue), V(alpha)); }
		// NOTE: Debugging functions are not present in the retail version of the game.
		public static void DRAW_DEBUG_TEXT(string text, float x, float y, float z, int red, int green, int blue, int alpha) { Invoke(0x3903E216620488E8, V(text), V(x), V(y), V(z), V(red), V(green), V(blue), V(alpha)); }
		// NOTE: Debugging functions are not present in the retail version of the game.
		public static void DRAW_DEBUG_TEXT_2D(string text, float x, float y, float z, int red, int green, int blue, int alpha) { Invoke(0xA3BB2E9555C05A8F, V(text), V(x), V(y), V(z), V(red), V(green), V(blue), V(alpha)); }
		// Draws a depth-tested line from one point to another.
		// ----------------
		// x1, y1, z1 : Coordinates for the first point
		// x2, y2, z2 : Coordinates for the second point
		// r, g, b, alpha : Color with RGBA-Values
		// I recommend using a predefined function to call this.
		// [VB.NET]
		// public static Sub DrawLine(from As Vector3, [to] As Vector3, col As Color)
		//     [Function].Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, [to].X, [to].Y, [to].Z, col.R, col.G, col.B, col.A)
		// End Sub
		// 
		// [C#]
		// public static void DrawLine(Vector3 from, Vector3 to, Color col)
		// {
		//     Function.Call(Hash.DRAW_LINE, from.X, from.Y, from.Z, to.X, to.Y, to.Z, col.R, col.G, col.B, col.A);
		// }
		public static void DRAW_LINE(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha) { Invoke(0x6B7256074AE34680, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(red), V(green), V(blue), V(alpha)); }
		// x/y/z - Location of a vertex (in world coords), presumably.
		// ----------------
		// x1, y1, z1     : Coordinates for the first point
		// x2, y2, z2     : Coordinates for the second point
		// x3, y3, z3     : Coordinates for the third point
		// r, g, b, alpha : Color with RGBA-Values
		// 
		// Keep in mind that only one side of the drawn triangle is visible: It's the side, in which the vector-product of the vectors heads to: (b-a)x(c-a) Or (b-a)x(c-b).
		// But be aware: The function seems to work somehow differently. I have trouble having them drawn in rotated orientation. Try it yourself and if you somehow succeed, please edit this and post your solution.
		// I recommend using a predefined function to call this.
		// [VB.NET]
		// public static Sub DrawPoly(a As Vector3, b As Vector3, c As Vector3, col As Color)
		//     [Function].Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A)
		// End Sub
		// 
		// [C#]
		// public static void DrawPoly(Vector3 a, Vector3 b, Vector3 c, Color col)
		// {
		//     Function.Call(Hash.DRAW_POLY, a.X, a.Y, a.Z, b.X, b.Y, b.Z, c.X, c.Y, c.Z, col.R, col.G, col.B, col.A);
		// }
		// BTW: Intersecting triangles are not supported: They overlap in the order they were called.
		public static void DRAW_POLY(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha) { Invoke(0xAC26716048436851, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(x3), V(y3), V(z3), V(red), V(green), V(blue), V(alpha)); }
		// Used for drawling Deadline trailing lights, see deadline.ytd
		// 
		// p15 through p23 are values that appear to be related to illiumation, scaling, and rotation; more testing required.
		// For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
		public static void DRAW_TEXTURED_POLY(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, int red, int green, int blue, int alpha, string textureDict, string textureName, float u1, float v1, float w1, float u2, float v2, float w2, float u3, float v3, float w3) { Invoke(0x29280002282F1928, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(x3), V(y3), V(z3), V(red), V(green), V(blue), V(alpha), V(textureDict), V(textureName), V(u1), V(v1), V(w1), V(u2), V(v2), V(w2), V(u3), V(v3), V(w3)); }
		// Used for drawling Deadline trailing lights, see deadline.ytd
		// 
		// Each vertex has its own colour that is blended/illuminated on the texture. Additionally, the R, G, and B components are floats that are int-casted internally.
		// For UVW mapping (u,v,w parameters), reference your favourite internet resource for more details.
		public static void DRAW_TEXTURED_POLY_WITH_THREE_COLOURS(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float red1, float green1, float blue1, int alpha1, float red2, float green2, float blue2, int alpha2, float red3, float green3, float blue3, int alpha3, string textureDict, string textureName, float u1, float v1, float w1, float u2, float v2, float w2, float u3, float v3, float w3) { Invoke(0x736D7AA1B750856B, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(x3), V(y3), V(z3), V(red1), V(green1), V(blue1), V(alpha1), V(red2), V(green2), V(blue2), V(alpha2), V(red3), V(green3), V(blue3), V(alpha3), V(textureDict), V(textureName), V(u1), V(v1), V(w1), V(u2), V(v2), V(w2), V(u3), V(v3), V(w3)); }
		// x,y,z = start pos
		// x2,y2,z2 = end pos
		// 
		// Draw's a 3D Box between the two x,y,z coords.
		// --------------
		// Keep in mind that the edges of the box do only align to the worlds base1-vectors. Therefore something like rotation cannot be applied. That means this function is pretty much useless, unless you want a static unicolor box somewhere.
		// I recommend using a predefined function to call this.
		// [VB.NET]
		// public static Sub DrawBox(a As Vector3, b As Vector3, col As Color)
		//     [Function].Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A)
		// End Sub
		// 
		// [C#]
		// public static void DrawBox(Vector3 a, Vector3 b, Color col)
		// {
		//     Function.Call(Hash.DRAW_BOX,a.X, a.Y, a.Z,b.X, b.Y, b.Z,col.R, col.G, col.B, col.A);
		// }
		public static void DRAW_BOX(float x1, float y1, float z1, float x2, float y2, float z2, int red, int green, int blue, int alpha) { Invoke(0xD3A9971CADAC7252, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(red), V(green), V(blue), V(alpha)); }
		public static void SET_BACKFACECULLING(bool toggle) { Invoke(0x23BA6B0C2AD7B0D3, V(toggle)); }
		public static void SET_DEPTHWRITING(bool toggle) { Invoke(0xC5C8F970D4EDFF71, V(toggle)); }
		public static bool BEGIN_TAKE_MISSION_CREATOR_PHOTO() { return Invoke<bool>(0x1DD2139A9A20DCE8); }
		public static int GET_STATUS_OF_TAKE_MISSION_CREATOR_PHOTO() { return Invoke<int>(0x90A78ECAA4E78453); }
		public static void FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO() { Invoke(0x0A46AF8A78DC5E0A); }
		public static bool LOAD_MISSION_CREATOR_PHOTO(Any* p0, Any p1, Any p2, Any p3) { return Invoke<bool>(0x4862437A486F91B0, V(p0), V(p1), V(p2), V(p3)); }
		public static int GET_STATUS_OF_LOAD_MISSION_CREATOR_PHOTO(Any* p0) { return Invoke<int>(0x1670F8D05056F257, V(p0)); }
		public static bool BEGIN_CREATE_MISSION_CREATOR_PHOTO_PREVIEW() { return Invoke<bool>(0x7FA5D82B8F58EC06); }
		public static int GET_STATUS_OF_CREATE_MISSION_CREATOR_PHOTO_PREVIEW() { return Invoke<int>(0x5B0316762AFD4A64); }
		public static void FREE_MEMORY_FOR_MISSION_CREATOR_PHOTO_PREVIEW() { Invoke(0x346EF3ECAAAB149E); }
		public static bool BEGIN_TAKE_HIGH_QUALITY_PHOTO() { return Invoke<bool>(0xA67C35C56EB1BD9D); }
		public static int GET_STATUS_OF_TAKE_HIGH_QUALITY_PHOTO() { return Invoke<int>(0x0D6CA79EEEBD8CA3); }
		public static void FREE_MEMORY_FOR_HIGH_QUALITY_PHOTO() { Invoke(0xD801CC02177FA3F1); }
		public static void SET_TAKEN_PHOTO_IS_MUGSHOT(bool toggle) { Invoke(0x1BBC135A4D25EDDE, V(toggle)); }
		public static void SET_ARENA_THEME_AND_VARIATION_FOR_TAKEN_PHOTO(Any p0, int p1) { Invoke(0xF3F776ADA161E47D, V(p0), V(p1)); }
		public static void SET_ON_ISLAND_X_FOR_TAKEN_PHOTO(Any p0) { Invoke(0xADD6627C4D325458, V(p0)); }
		// 1 match in 1 script. cellphone_Controller->
		// p0 is -1 in scripts.
		public static bool SAVE_HIGH_QUALITY_PHOTO(int unused) { return Invoke<bool>(0x3DEC726C25A11BAC, V(unused)); }
		public static int GET_STATUS_OF_SAVE_HIGH_QUALITY_PHOTO() { return Invoke<int>(0x0C0C4E81E1AC60A0); }
		public static bool BEGIN_CREATE_LOW_QUALITY_COPY_OF_PHOTO(Any p0) { return Invoke<bool>(0x759650634F07B6B4, V(p0)); }
		public static int GET_STATUS_OF_CREATE_LOW_QUALITY_COPY_OF_PHOTO(int p0) { return Invoke<int>(0xCB82A0BF0E3E3265, V(p0)); }
		public static void FREE_MEMORY_FOR_LOW_QUALITY_PHOTO() { Invoke(0x6A12D88881435DCA); }
		public static void DRAW_LOW_QUALITY_PHOTO_TO_PHONE(bool p0, bool p1) { Invoke(0x1072F115DAB0717E, V(p0), V(p1)); }
		// This function is hard-coded to always return 0.
		public static int GET_MAXIMUM_NUMBER_OF_PHOTOS() { return Invoke<int>(0x34D23450F028B0BF); }
		// This function is hard-coded to always return 96.
		public static int GET_MAXIMUM_NUMBER_OF_CLOUD_PHOTOS() { return Invoke<int>(0xDC54A7AF8B3A14EF); }
		public static int GET_CURRENT_NUMBER_OF_CLOUD_PHOTOS() { return Invoke<int>(0x473151EBC762C6DA); }
		// 2 matches across 2 scripts. Only showed in appcamera & appmedia. Both were 0.
		public static bool QUEUE_OPERATION_TO_CREATE_SORTED_LIST_OF_PHOTOS(Any p0) { return Invoke<bool>(0x2A893980E96B659A, V(p0)); }
		// 3 matches across 3 scripts. First 2 were 0, 3rd was 1. Possibly a bool.
		// appcamera, appmedia, and cellphone_Controller->
		public static int GET_STATUS_OF_SORTED_LIST_OPERATION(Any p0) { return Invoke<int>(0xF5BED327CEA362B1, V(p0)); }
		public static void CLEAR_STATUS_OF_SORTED_LIST_OPERATION() { Invoke(0x4AF92ACD3141D96C); }
		// This function is hard-coded to always return 0.
		public static bool DOES_THIS_PHOTO_SLOT_CONTAIN_A_VALID_PHOTO(Any p0) { return Invoke<bool>(0xE791DF1F73ED2C8B, V(p0)); }
		// This function is hard-coded to always return 0.
		public static bool LOAD_HIGH_QUALITY_PHOTO(Any p0) { return Invoke<bool>(0xEC72C258667BE5EA, V(p0)); }
		// Hardcoded to always return 2.
		public static int GET_LOAD_HIGH_QUALITY_PHOTO_STATUS(int p0) { return Invoke<int>(0x40AFB081F8ADD4EE, V(p0)); }
		public static void DRAW_LIGHT_WITH_RANGEEX(float x, float y, float z, int r, int g, int b, float range, float intensity, float shadow) { Invoke(0xF49E9A9716A04595, V(x), V(y), V(z), V(r), V(g), V(b), V(range), V(intensity), V(shadow)); }
		public static void DRAW_LIGHT_WITH_RANGE(float posX, float posY, float posZ, int colorR, int colorG, int colorB, float range, float intensity) { Invoke(0xF2A1B2771A01DBD4, V(posX), V(posY), V(posZ), V(colorR), V(colorG), V(colorB), V(range), V(intensity)); }
		// Parameters:
		// * pos - coordinate where the spotlight is located
		// * dir - the direction vector the spotlight should aim at from its current position
		// * r,g,b - color of the spotlight
		// * distance - the maximum distance the light can reach
		// * brightness - the brightness of the light
		// * roundness - "smoothness" of the circle edge
		// * radius - the radius size of the spotlight
		// * falloff - the falloff size of the light's edge (example: www.i.imgur.com/DemAWeO.jpg)
		// 
		// Example in C# (spotlight aims at the closest vehicle):
		// Vector3 myPos = Game.Player.Character.Position;
		// Vehicle nearest = World.GetClosestVehicle(myPos , 1000f);
		// Vector3 destinationCoords = nearest.Position;
		// Vector3 dirVector = destinationCoords - myPos;
		// dirVector.Normalize();
		// Function.Call(Hash.DRAW_SPOT_LIGHT, pos.X, pos.Y, pos.Z, dirVector.X, dirVector.Y, dirVector.Z, 255, 255, 255, 100.0f, 1f, 0.0f, 13.0f, 1f);
		public static void DRAW_SPOT_LIGHT(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float hardness, float radius, float falloff) { Invoke(0xD0F64B265C8C8B33, V(posX), V(posY), V(posZ), V(dirX), V(dirY), V(dirZ), V(colorR), V(colorG), V(colorB), V(distance), V(brightness), V(hardness), V(radius), V(falloff)); }
		public static void DRAW_SHADOWED_SPOT_LIGHT(float posX, float posY, float posZ, float dirX, float dirY, float dirZ, int colorR, int colorG, int colorB, float distance, float brightness, float roundness, float radius, float falloff, int shadowId) { Invoke(0x5BCA583A583194DB, V(posX), V(posY), V(posZ), V(dirX), V(dirY), V(dirZ), V(colorR), V(colorG), V(colorB), V(distance), V(brightness), V(roundness), V(radius), V(falloff), V(shadowId)); }
		public static void FADE_UP_PED_LIGHT(float p0) { Invoke(0xC9B18B4619F48F7B, V(p0)); }
		public static void UPDATE_LIGHTS_ON_ENTITY(Entity entity) { Invoke(0xDEADC0DEDEADC0DE, V(entity)); }
		public static void SET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE(Any p0) { Invoke(0x9641588DAB93B4B5, V(p0)); }
		public static float GET_LIGHT_OVERRIDE_MAX_INTENSITY_SCALE() { return Invoke<float>(0x393BD2275CEB7793); }
		// enum MarkerTypes
		// {
		//     MarkerTypeUpsideDownCone = 0,
		//  MarkerTypeVerticalCylinder = 1,
		//    MarkerTypeThickChevronUp = 2,
		//  MarkerTypeThinChevronUp = 3,
		//   MarkerTypeCheckeredFlagRect = 4,
		//   MarkerTypeCheckeredFlagCircle = 5,
		//     MarkerTypeVerticleCircle = 6,
		//  MarkerTypePlaneModel = 7,
		//  MarkerTypeLostMCDark = 8,
		//  MarkerTypeLostMCLight = 9,
		//     MarkerTypeNumber0 = 10,
		//    MarkerTypeNumber1 = 11,
		//    MarkerTypeNumber2 = 12,
		//    MarkerTypeNumber3 = 13,
		//    MarkerTypeNumber4 = 14,
		//    MarkerTypeNumber5 = 15,
		//    MarkerTypeNumber6 = 16,
		//    MarkerTypeNumber7 = 17,
		//    MarkerTypeNumber8 = 18,
		//    MarkerTypeNumber9 = 19,
		//    MarkerTypeChevronUpx1 = 20,
		//    MarkerTypeChevronUpx2 = 21,
		//    MarkerTypeChevronUpx3 = 22,
		//    MarkerTypeHorizontalCircleFat = 23,
		//    MarkerTypeReplayIcon = 24,
		//     MarkerTypeHorizontalCircleSkinny = 25,
		//     MarkerTypeHorizontalCircleSkinny_Arrow = 26,
		//   MarkerTypeHorizontalSplitArrowCircle = 27,
		//     MarkerTypeDebugSphere = 28,
		//    MarkerTypeDallorSign = 29,
		//     MarkerTypeHorizontalBars = 30,
		//     MarkerTypeWolfHead = 31
		// };
		// 
		// dirX/Y/Z represent a heading on each axis in which the marker should face, alternatively you can rotate each axis independently with rotX/Y/Z (and set dirX/Y/Z all to 0).
		// 
		// faceCamera - Rotates only the y-axis (the heading) towards the camera
		// 
		// p19 - no effect, default value in script is 2
		// 
		// rotate - Rotates only on the y-axis (the heading)
		// 
		// textureDict - Name of texture dictionary to load texture from (e.g. "GolfPutting")
		// 
		// textureName - Name of texture inside dictionary to load (e.g. "PuttingMarker")
		// 
		// drawOnEnts - Draws the marker onto any entities that intersect it
		// 
		// basically what he said, except textureDict and textureName are totally not string, or if so, then they are always set to 0/NULL/nullptr in every script I checked, eg:
		// 
		// bj.c: graphics::draw_marker(6, vParam0, 0f, 0f, 1f, 0f, 0f, 0f, 4f, 4f, 4f, 240, 200, 80, iVar1, 0, 0, 2, 0, 0, 0, false);
		// 
		// his is what I used to draw an amber downward pointing chevron "V", has to be redrawn every frame.  The 180 is for 180 degrees rotation around the Y axis, the 50 is alpha, assuming max is 100, but it will accept 255.
		// 
		// GRAPHICS::DRAW_MARKER(2, v.x, v.y, v.z + 2, 0, 0, 0, 0, 180, 0, 2, 2, 2, 255, 128, 0, 50, 0, 1, 1, 0, 0, 0, 0);
		// 
		// 
		public static void DRAW_MARKER(int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, int p19, bool rotate, string textureDict, string textureName, bool drawOnEnts) { Invoke(V(0x28477EC23D892089), V(type), V(posX), V(posY), V(posZ), V(dirX), V(dirY), V(dirZ), V(rotX), V(rotY), V(rotZ), V(scaleX), V(scaleY), V(scaleZ), V(red), V(green), V(blue), V(alpha), V(bobUpAndDown), V(faceCamera), V(p19), V(rotate), V(textureDict), V(textureName), V(drawOnEnts)); }
		public static void DRAW_MARKER_EX(int type, float posX, float posY, float posZ, float dirX, float dirY, float dirZ, float rotX, float rotY, float rotZ, float scaleX, float scaleY, float scaleZ, int red, int green, int blue, int alpha, bool bobUpAndDown, bool faceCamera, Any p19, bool rotate, string textureDict, string textureName, bool drawOnEnts, bool p24, bool p25) { Invoke(0xE82728F0DE75D13A, V(type), V(posX), V(posY), V(posZ), V(dirX), V(dirY), V(dirZ), V(rotX), V(rotY), V(rotZ), V(scaleX), V(scaleY), V(scaleZ), V(red), V(green), V(blue), V(alpha), V(bobUpAndDown), V(faceCamera), V(p19), V(rotate), V(textureDict), V(textureName), V(drawOnEnts), V(p24), V(p25)); }
		// Draws a 3D sphere, typically seen in the GTA:O freemode evt "Penned In".
		// Example https://imgur.com/nCbtS4H
		// 
		// alpha - The alpha for the sphere. Goes from 0.0 to 1.0.
		public static void DRAW_MARKER_SPHERE(float x, float y, float z, float radius, int red, int green, int blue, float alpha) { Invoke(0x799017F9E3B10112, V(x), V(y), V(z), V(radius), V(red), V(green), V(blue), V(alpha)); }
		// Creates a checkpoint. Returns the handle of the checkpoint.
		// 
		// 20/03/17 : Attention, checkpoints are already handled by the game itself, so you must not loop it like markers.
		// 
		// Parameters:
		// * type - The type of checkpoint to create. See below for a list of checkpoint types.
		// * pos1 - The position of the checkpoint.
		// * pos2 - The position of the next checkpoint to point to.
		// * radius - The radius of the checkpoint.
		// * color - The color of the checkpoint.
		// * reserved - Special parameter, see below for details. Usually set to 0 in the scripts.
		// 
		// Checkpoint types:
		// 0-4---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
		// 5-9---------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
		// 10-14-------Ring: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker
		// 15-19-------1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker      
		// 20-24-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 
		// 25-29-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker    
		// 30-34-------Cylinder: 1 arrow, 2 arrow, 3 arrows, CycleArrow, Checker 
		// 35-38-------Ring: Airplane Up, Left, Right, UpsideDown
		// 39----------?
		// 40----------Ring: just a ring
		// 41----------?
		// 42-44-------Cylinder w/ number (uses 'reserved' parameter)
		// 45-47-------Cylinder no arrow or number
		// 
		// If using type 42-44, reserved sets number / number and shape to display
		// 
		// 0-99------------Just numbers (0-99)
		// 100-109-----------------Arrow (0-9)
		// 110-119------------Two arrows (0-9)
		// 120-129----------Three arrows (0-9)
		// 130-139----------------Circle (0-9)
		// 140-149------------CycleArrow (0-9)
		// 150-159----------------Circle (0-9)
		// 160-169----Circle  w/ pointer (0-9)
		// 170-179-------Perforated ring (0-9)
		// 180-189----------------Sphere (0-9)
		public static int CREATE_CHECKPOINT(int type, float posX1, float posY1, float posZ1, float posX2, float posY2, float posZ2, float diameter, int red, int green, int blue, int alpha, int reserved) { return Invoke<int>(0x0134F0835AB6BFCB, V(type), V(posX1), V(posY1), V(posZ1), V(posX2), V(posY2), V(posZ2), V(diameter), V(red), V(green), V(blue), V(alpha), V(reserved)); }
		public static void SET_CHECKPOINT_INSIDE_CYLINDER_HEIGHT_SCALE(int checkpoint, float scale) { Invoke(0x4B5B4DA5D79F1943, V(checkpoint), V(scale)); }
		public static void SET_CHECKPOINT_INSIDE_CYLINDER_SCALE(int checkpoint, float scale) { Invoke(0x44621483FF966526, V(checkpoint), V(scale)); }
		// Sets the cylinder height of the checkpoint.
		// 
		// Parameters:
		// * nearHeight - The height of the checkpoint when inside of the radius.
		// * farHeight - The height of the checkpoint when outside of the radius.
		// * radius - The radius of the checkpoint.
		public static void SET_CHECKPOINT_CYLINDER_HEIGHT(int checkpoint, float nearHeight, float farHeight, float radius) { Invoke(0x2707AAE9D9297D89, V(checkpoint), V(nearHeight), V(farHeight), V(radius)); }
		// Sets the checkpoint color.
		public static void SET_CHECKPOINT_RGBA(int checkpoint, int red, int green, int blue, int alpha) { Invoke(0x7167371E8AD747F7, V(checkpoint), V(red), V(green), V(blue), V(alpha)); }
		// Sets the checkpoint icon color.
		public static void SET_CHECKPOINT_RGBA2(int checkpoint, int red, int green, int blue, int alpha) { Invoke(0xB9EA40907C680580, V(checkpoint), V(red), V(green), V(blue), V(alpha)); }
		// This does not move an existing checkpoint... so wtf.
		public static void SET_CHECKPOINT_CLIPPLANE_WITH_POS_NORM(int checkpoint, float posX, float posY, float posZ, float unkX, float unkY, float unkZ) { Invoke(0xF51D36185993515D, V(checkpoint), V(posX), V(posY), V(posZ), V(unkX), V(unkY), V(unkZ)); }
		public static void SET_CHECKPOINT_FORCE_OLD_ARROW_POINTING(int checkpoint) { Invoke(0xFCF6788FC4860CD4, V(checkpoint)); }
		// Unknown. Called after creating a checkpoint (type: 51) in the creators.
		public static void SET_CHECKPOINT_DECAL_ROT_ALIGNED_TO_CAMERA_ROT(int checkpoint) { Invoke(0x615D3925E87A3B26, V(checkpoint)); }
		public static void SET_CHECKPOINT_FORCE_DIRECTION(int checkpoint) { Invoke(0xDB1EA9411C8911EC, V(checkpoint)); }
		public static void SET_CHECKPOINT_DIRECTION(int checkpoint, float posX, float posY, float posZ) { Invoke(0x3C788E7F6438754D, V(checkpoint), V(posX), V(posY), V(posZ)); }
		public static void DELETE_CHECKPOINT(int checkpoint) { Invoke(0xF5ED37F54CD4D52E, V(checkpoint)); }
		public static void DONT_RENDER_IN_GAME_UI(bool p0) { Invoke(0x22A249A53034450A, V(p0)); }
		public static void FORCE_RENDER_IN_GAME_UI(bool toggle) { Invoke(0xDC459CFA0CCE245B, V(toggle)); }
		// This function can requests texture dictonaries from following RPFs:
		// scaleform_generic.rpf
		// scaleform_minigames.rpf
		// scaleform_minimap.rpf
		// scaleform_web.rpf
		// 
		// last param isnt a toggle
		public static void REQUEST_STREAMED_TEXTURE_DICT(string textureDict, bool p1) { Invoke(0xDFA2EF8E04127DD5, V(textureDict), V(p1)); }
		public static bool HAS_STREAMED_TEXTURE_DICT_LOADED(string textureDict) { return Invoke<bool>(0x0145F696AAAAD2E4, V(textureDict)); }
		public static void SET_STREAMED_TEXTURE_DICT_AS_NO_LONGER_NEEDED(string textureDict) { Invoke(0xBE2CACCF5A8AA805, V(textureDict)); }
		// Draws a rectangle on the screen.
		// 
		// -x: The relative X point of the center of the rectangle. (0.0-1.0, 0.0 is the left edge of the screen, 1.0 is the right edge of the screen)
		// 
		// -y: The relative Y point of the center of the rectangle. (0.0-1.0, 0.0 is the top edge of the screen, 1.0 is the bottom edge of the screen)
		// 
		// -width: The relative width of the rectangle. (0.0-1.0, 1.0 means the whole screen width)
		// 
		// -height: The relative height of the rectangle. (0.0-1.0, 1.0 means the whole screen height)
		// 
		// -R: Red part of the color. (0-255)
		// 
		// -G: Green part of the color. (0-255)
		// 
		// -B: Blue part of the color. (0-255)
		// 
		// -A: Alpha part of the color. (0-255, 0 means totally transparent, 255 means totally opaque)
		// 
		// The total number of rectangles to be drawn in one frame is apparently limited to 399.
		// 
		public static void DRAW_RECT(float x, float y, float width, float height, int r, int g, int b, int a) { Invoke(0x3A618A217E5154F0, V(x), V(y), V(width), V(height), V(r), V(g), V(b), V(a)); }
		// Sets a flag defining whether or not script draw commands should continue being drawn behind the pause menu. This is usually used for TV channels and other draw commands that are used with a world render target.
		public static void SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(bool toggle) { Invoke(0xC6372ECD45D73BCD, V(toggle)); }
		// Sets the draw order for script draw commands.
		// 
		// Examples from decompiled scripts:
		// GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(7);
		// GRAPHICS::DRAW_RECT(0.5, 0.5, 3.0, 3.0, v_4, v_5, v_6, a_0._f172, 0);
		// 
		// GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(1);
		// GRAPHICS::DRAW_RECT(0.5, 0.5, 1.5, 1.5, 0, 0, 0, 255, 0);
		public static void SET_SCRIPT_GFX_DRAW_ORDER(int drawOrder) { Invoke(0x61BB1D9B3A95D802, V(drawOrder)); }
		// horizontalAlign: The horizontal alignment. This can be 67 ('C'), 76 ('L'), or 82 ('R').
		// verticalAlign: The vertical alignment. This can be 67 ('C'), 66 ('B'), or 84 ('T').
		// 
		// This function anchors script draws to a side of the safe zone. This needs to be called to make the interface independent of the player's safe zone configuration.
		// 
		// These values are equivalent to alignX and alignY in common:/data/ui/frontend.xml, which can be used as a baseline for default alignment.
		// 
		// Using any other value (including 0) will result in the safe zone not being taken into account for this draw. The canonical value for this is 'I' (73).
		// 
		// For example, you can use SET_SCRIPT_GFX_ALIGN(0, 84) to only scale on the Y axis (to the top), but not change the X axis.
		// 
		// To reset the value, use RESET_SCRIPT_GFX_ALIGN.
		public static void SET_SCRIPT_GFX_ALIGN(int horizontalAlign, int verticalAlign) { Invoke(0xB8A850F20A067EB6, V(horizontalAlign), V(verticalAlign)); }
		// This function resets the alignment set using SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS to the default values ('I', 'I'; 0, 0, 0, 0).
		// This should be used after having used the aforementioned functions in order to not affect any other scripts attempting to draw.
		public static void RESET_SCRIPT_GFX_ALIGN() { Invoke(0xE3A3DB414A373DAB); }
		// Sets the draw offset/calculated size for SET_SCRIPT_GFX_ALIGN. If using any alignment other than left/top, the game expects the width/height to be configured using this native in order to get a proper starting position for the draw command.
		public static void SET_SCRIPT_GFX_ALIGN_PARAMS(float x, float y, float w, float h) { Invoke(0xF5A2C681787E579D, V(x), V(y), V(w), V(h)); }
		// Calculates the effective X/Y fractions when applying the values set by SET_SCRIPT_GFX_ALIGN and SET_SCRIPT_GFX_ALIGN_PARAMS
		public static void GET_SCRIPT_GFX_ALIGN_POSITION(float x, float y, float* calculatedX, float* calculatedY) { Invoke(0x6DD8F5AA635EB4B2, V(x), V(y), V(calculatedX), V(calculatedY)); }
		// Gets the scale of safe zone. if the safe zone size scale is max, it will return 1.0.
		public static float GET_SAFE_ZONE_SIZE() { return Invoke<float>(0xBAF107B6BB2C97F0); }
		// Draws a 2D sprite on the screen.
		// 
		// Parameters:
		// textureDict - Name of texture dictionary to load texture from (e.g. "CommonMenu", "MPWeaponsCommon", etc.)
		// 
		// textureName - Name of texture to load from texture dictionary (e.g. "last_team_standing_icon", "tennis_icon", etc.)
		// 
		// screenX/Y - Screen offset (0.5 = center)
		// scaleX/Y - Texture scaling. Negative values can be used to flip the texture on that axis. (0.5 = half)
		// 
		// heading - Texture rotation in degrees (default = 0.0) positive is clockwise, measured in degrees
		// 
		// red,green,blue - Sprite color (default = 255/255/255)
		// 
		// alpha - opacity level
		public static void DRAW_SPRITE(string textureDict, string textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, bool p11, Any p12) { Invoke(0xE7FFAE5EBF23D890, V(textureDict), V(textureName), V(screenX), V(screenY), V(width), V(height), V(heading), V(red), V(green), V(blue), V(alpha), V(p11), V(p12)); }
		// Used in arcade games and Beam hack minigame in Doomsday Heist. I will most certainly dive into this to try replicate arcade games.
		// x position must be between 0.0 and 1.0 (1.0 being the most right side of the screen)
		// y position must be between 0.0 and 1.0 (1.0 being the most bottom side of the screen)
		// width 0.0 - 1.0 is the reasonable amount generally
		// height 0.0 - 1.0 is the reasonable amount generally
		// p6 almost always 0.0
		// p11 seems to be unknown but almost always 0 int
		public static void DRAW_SPRITE_ARX(string textureDict, string textureName, float x, float y, float width, float height, float p6, int red, int green, int blue, int alpha, Any p11, Any p12) { Invoke(0x2D3B147AFAD49DE0, V(textureDict), V(textureName), V(x), V(y), V(width), V(height), V(p6), V(red), V(green), V(blue), V(alpha), V(p11), V(p12)); }
		// Similar to _DRAW_SPRITE, but seems to be some kind of "interactive" sprite, at least used by render targets.
		// These seem to be the only dicts ever requested by this native:
		// 
		// prop_screen_biker_laptop
		// Prop_Screen_GR_Disruption
		// Prop_Screen_TaleOfUs
		// prop_screen_nightclub
		// Prop_Screen_IE_Adhawk
		// prop_screen_sm_free_trade_shipping
		// prop_screen_hacker_truck
		// MPDesktop
		// Prop_Screen_Nightclub
		// And a few others
		// 
		public static void DRAW_SPRITE_NAMED_RENDERTARGET(string textureDict, string textureName, float screenX, float screenY, float width, float height, float heading, int red, int green, int blue, int alpha, Any p11) { Invoke(0x2BC54A8188768488, V(textureDict), V(textureName), V(screenX), V(screenY), V(width), V(height), V(heading), V(red), V(green), V(blue), V(alpha), V(p11)); }
		// Similar to DRAW_SPRITE, but allows to specify the texture coordinates used to draw the sprite.
		// 
		// u1, v1 - texture coordinates for the top-left corner
		// u2, v2 - texture coordinates for the bottom-right corner
		public static void DRAW_SPRITE_ARX_WITH_UV(string textureDict, string textureName, float x, float y, float width, float height, float u1, float v1, float u2, float v2, float heading, int red, int green, int blue, int alpha, Any p15) { Invoke(V(0x95812F9B26074726), V(textureDict), V(textureName), V(x), V(y), V(width), V(height), V(u1), V(v1), V(u2), V(v2), V(heading), V(red), V(green), V(blue), V(alpha), V(p15)); }
		// Example:
		// GRAPHICS::ADD_ENTITY_ICON(a_0, "MP_Arrow");
		// 
		// I tried this and nothing happened...
		public static int ADD_ENTITY_ICON(Entity entity, string icon) { return Invoke<int>(0x9CD43EEE12BF4DD0, V(entity), V(icon)); }
		public static void SET_ENTITY_ICON_VISIBILITY(Entity entity, bool toggle) { Invoke(0xE0E8BEECCA96BA31, V(entity), V(toggle)); }
		public static void SET_ENTITY_ICON_COLOR(Entity entity, int red, int green, int blue, int alpha) { Invoke(0x1D5F595CCAE2E238, V(entity), V(red), V(green), V(blue), V(alpha)); }
		// Sets the on-screen drawing origin for draw-functions (which is normally x=0,y=0 in the upper left corner of the screen) to a world coordinate.
		// From now on, the screen coordinate which displays the given world coordinate on the screen is seen as x=0,y=0.
		// 
		// Example in C#:
		// Vector3 boneCoord = somePed.GetBoneCoord(Bone.SKEL_Head);
		// Function.Call(Hash.SET_DRAW_ORIGIN, boneCoord.X, boneCoord.Y, boneCoord.Z, 0);
		// Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, -0.015, 0.013, 0.013, 0.0, 255, 0, 0, 200);
		// Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, -0.015, 0.013, 0.013, 90.0, 255, 0, 0, 200);
		// Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", -0.01, 0.015, 0.013, 0.013, 270.0, 255, 0, 0, 200);
		// Function.Call(Hash.DRAW_SPRITE, "helicopterhud", "hud_corner", 0.01, 0.015, 0.013, 0.013, 180.0, 255, 0, 0, 200);
		// Function.Call(Hash.CLEAR_DRAW_ORIGIN);
		// 
		// Result: www11.pic-upload.de/19.06.15/bkqohvil2uao.jpg
		// If the pedestrian starts walking around now, the sprites are always around her head, no matter where the head is displayed on the screen.
		// 
		// This function also effects the drawing of texts and other UI-elements.
		// The effect can be reset by calling GRAPHICS::CLEAR_DRAW_ORIGIN().
		public static void SET_DRAW_ORIGIN(float x, float y, float z, bool p3) { Invoke(0xAA0008F3BBB8F416, V(x), V(y), V(z), V(p3)); }
		// Resets the screen's draw-origin which was changed by the function GRAPHICS::SET_DRAW_ORIGIN(...) back to x=0,y=0.
		// 
		// See GRAPHICS::SET_DRAW_ORIGIN(...) for further information.
		public static void CLEAR_DRAW_ORIGIN() { Invoke(0xFF0B610F6BE0D7AF); }
		public static int SET_BINK_MOVIE(string name) { return Invoke<int>(0x338D9F609FD632DB, V(name)); }
		public static void PLAY_BINK_MOVIE(int binkMovie) { Invoke(0x70D2CC8A542A973C, V(binkMovie)); }
		public static void STOP_BINK_MOVIE(int binkMovie) { Invoke(0x63606A61DE68898A, V(binkMovie)); }
		public static void RELEASE_BINK_MOVIE(int binkMovie) { Invoke(0x04D950EEFA4EED8C, V(binkMovie)); }
		public static void DRAW_BINK_MOVIE(int binkMovie, float p1, float p2, float p3, float p4, float p5, int r, int g, int b, int a) { Invoke(0x7118E83EEB9F7238, V(binkMovie), V(p1), V(p2), V(p3), V(p4), V(p5), V(r), V(g), V(b), V(a)); }
		// In percentage: 0.0 - 100.0
		public static void SET_BINK_MOVIE_TIME(int binkMovie, float progress) { Invoke(0x0CB6B3446855B57A, V(binkMovie), V(progress)); }
		// In percentage: 0.0 - 100.0
		public static float GET_BINK_MOVIE_TIME(int binkMovie) { return Invoke<float>(0x8E17DDD6B9D5BF29, V(binkMovie)); }
		// binkMovie: Is return value from _SET_BINK_MOVIE. Has something to do with bink volume? (audRequestedSettings::SetVolumeCurveScale)
		public static void SET_BINK_MOVIE_VOLUME(int binkMovie, float value) { Invoke(0xAFF33B1178172223, V(binkMovie), V(value)); }
		// Might be more appropriate in AUDIO?
		public static void ATTACH_TV_AUDIO_TO_ENTITY(Entity entity) { Invoke(0x845BAD77CC770633, V(entity)); }
		public static void SET_BINK_MOVIE_AUDIO_FRONTEND(int binkMovie, bool p1) { Invoke(0xF816F2933752322D, V(binkMovie), V(p1)); }
		// Probably changes tvs from being a 3d audio to being "global" audio
		public static void SET_TV_AUDIO_FRONTEND(bool toggle) { Invoke(0x113D2C5DC57E1774, V(toggle)); }
		public static void SET_BINK_SHOULD_SKIP(int binkMovie, bool bShouldSkip) { Invoke(0x6805D58CAA427B72, V(binkMovie), V(bShouldSkip)); }
		public static int LOAD_MOVIE_MESH_SET(string movieMeshSetName) { return Invoke<int>(0xB66064452270E8F1, V(movieMeshSetName)); }
		public static void RELEASE_MOVIE_MESH_SET(int movieMeshSet) { Invoke(0xEB119AA014E89183, V(movieMeshSet)); }
		public static int QUERY_MOVIE_MESH_SET_STATE(Any p0) { return Invoke<int>(0x9B6E70C5CEEF4EEB, V(p0)); }
		// int screenresx,screenresy;
		// GET_SCREEN_RESOLUTION(&screenresx,&screenresy);
		public static void GET_SCREEN_RESOLUTION(int* x, int* y) { Invoke(0x888D57E407E63624, V(x), V(y)); }
		// Returns current screen resolution.
		public static void GET_ACTUAL_SCREEN_RESOLUTION(int* x, int* y) { Invoke(0x873C9F3104101DD3, V(x), V(y)); }
		public static float GET_ASPECT_RATIO(bool b) { return Invoke<float>(0xF1307EF624A80D87, V(b)); }
		public static float GET_SCREEN_ASPECT_RATIO() { return Invoke<float>(0xB2EBE8CBC58B90E9); }
		// Setting Aspect Ratio Manually in game will return:
		// 
		// false - for Narrow format Aspect Ratios (3:2, 4:3, 5:4, etc. )
		// true - for Wide format Aspect Ratios (5:3, 16:9, 16:10, etc. )
		// 
		// Setting Aspect Ratio to "Auto" in game will return "false" or "true" based on the actual set Resolution Ratio.
		public static bool GET_IS_WIDESCREEN() { return Invoke<bool>(0x30CF4BDA4FCB1905); }
		// false = Any resolution < 1280x720
		// true = Any resolution >= 1280x720
		public static bool GET_IS_HIDEF() { return Invoke<bool>(0x84ED31191CC5D2C9); }
		public static void ADJUST_NEXT_POS_SIZE_AS_NORMALIZED_16_9() { Invoke(0xEFABC7722293DA7C); }
		// Enables Night Vision.
		// 
		// Example:
		// C#: Function.Call(Hash.SET_NIGHTVISION, true);
		// C++: GRAPHICS::SET_NIGHTVISION(true);
		// 
		// bool toggle:
		// true = turns night vision on for your player.
		// false = turns night vision off for your player.
		public static void SET_NIGHTVISION(bool toggle) { Invoke(0x18F621F7A5B1F85D, V(toggle)); }
		public static bool GET_REQUESTINGNIGHTVISION() { return Invoke<bool>(0x35FB78DC42B7BD21); }
		public static bool GET_USINGNIGHTVISION() { return Invoke<bool>(0x2202A3F42C8E5F79); }
		public static void SET_EXPOSURETWEAK(bool toggle) { Invoke(0xEF398BEEE4EF45F9, V(toggle)); }
		public static void FORCE_EXPOSURE_READBACK(bool toggle) { Invoke(0x814AF7DCAACC597B, V(toggle)); }
		public static void OVERRIDE_NIGHTVISION_LIGHT_RANGE(float p0) { Invoke(0x43FA7CBE20DAB219, V(p0)); }
		public static void SET_NOISEOVERIDE(bool toggle) { Invoke(0xE787BF1C5CF823C9, V(toggle)); }
		public static void SET_NOISINESSOVERIDE(float value) { Invoke(0xCB6A7C3BB17A0C67, V(value)); }
		// Convert a world coordinate into its relative screen coordinate.  (WorldToScreen)
		// 
		// Returns a boolean; whether or not the operation was successful. It will return false if the coordinates given are not visible to the rendering camera.
		// 
		// 
		// For .NET users...
		// 
		// VB:
		// public static Shared Function World3DToScreen2d(pos as vector3) As Vector2
		// 
		//         Dim x2dp, y2dp As New Native.OutputArgument
		// 
		//         Native.Function.Call(Of Boolean)(Native.Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.x, pos.y, pos.z, x2dp, y2dp)
		//         Return New Vector2(x2dp.GetResult(Of Single), y2dp.GetResult(Of Single))
		//       
		//     End Function
		// 
		// C#:
		// Vector2 World3DToScreen2d(Vector3 pos)
		//     {
		//         var x2dp = new OutputArgument();
		//         var y2dp = new OutputArgument();
		// 
		//         Function.Call<bool>(Hash.GET_SCREEN_COORD_FROM_WORLD_COORD , pos.X, pos.Y, pos.Z, x2dp, y2dp);
		//         return new Vector2(x2dp.GetResult<float>(), y2dp.GetResult<float>());
		//     }
		// //USE VERY SMALL VALUES FOR THE SCALE OF RECTS/TEXT because it is dramatically larger on screen than in 3D, e.g '0.05' small.
		// 
		// Used to be called _WORLD3D_TO_SCREEN2D
		// 
		// I thought we lost you from the scene forever. It does seem however that calling SET_DRAW_ORIGIN then your natives, then ending it. Seems to work better for certain things such as keeping boxes around people for a predator missile e.g.
		public static bool GET_SCREEN_COORD_FROM_WORLD_COORD(float worldX, float worldY, float worldZ, float* screenX, float* screenY) { return Invoke<bool>(0x34E82F05DF2974F5, V(worldX), V(worldY), V(worldZ), V(screenX), V(screenY)); }
		// Returns the texture resolution of the passed texture dict+name.
		// 
		// Note: Most texture resolutions are doubled compared to the console version of the game.
		public static Vector3 GET_TEXTURE_RESOLUTION(string textureDict, string textureName) { return Invoke<Vector3>(0x35736EE65BD00C11, V(textureDict), V(textureName)); }
		// Overriding ped badge texture to a passed texture. It's synced between players (even custom textures!), don't forget to request used dict on *all* clients to make it sync properly. Can be removed by passing empty strings.
		public static bool OVERRIDE_PED_CREW_LOGO_TEXTURE(Ped ped, string txd, string txn) { return Invoke<bool>(0x95EB5E34F821BABE, V(ped), V(txd), V(txn)); }
		public static void SET_DISTANCE_BLUR_STRENGTH_OVERRIDE(float p0) { Invoke(0xE2892E7E55D7073A, V(p0)); }
		// Purpose of p0 and p1 unknown.
		public static void SET_FLASH(float p0, float p1, float fadeIn, float duration, float fadeOut) { Invoke(0x0AB84296FED9CFC6, V(p0), V(p1), V(fadeIn), V(duration), V(fadeOut)); }
		public static void DISABLE_OCCLUSION_THIS_FRAME() { Invoke(0x3669F1B198DCAA4F); }
		// Does not affect weapons, particles, fire/explosions, flashlights or the sun.
		// When set to true, all emissive textures (including ped components that have light effects), street lights, building lights, vehicle lights, etc will all be turned off.
		// 
		// Used in Humane Labs Heist for EMP.
		// 
		// state: True turns off all artificial light sources in the map: buildings, street lights, car lights, etc. False turns them back on.
		public static void SET_ARTIFICIAL_LIGHTS_STATE(bool state) { Invoke(0x1268615ACE24D504, V(state)); }
		// If "blackout" is enabled, this native allows you to ignore "blackout" for vehicles.
		public static void SET_ARTIFICIAL_VEHICLE_LIGHTS_STATE(bool toggle) { Invoke(0xE2B187C0939B3D32, V(toggle)); }
		public static void DISABLE_HDTEX_THIS_FRAME() { Invoke(0xC35A6D07C93802B2); }
		// Creates a tracked point, useful for checking the visibility of a 3D point on screen.
		public static int CREATE_TRACKED_POINT() { return Invoke<int>(0xE2C9439ED45DEA60); }
		public static void SET_TRACKED_POINT_INFO(int point, float x, float y, float z, float radius) { Invoke(0x164ECBB3CF750CB0, V(point), V(x), V(y), V(z), V(radius)); }
		public static bool IS_TRACKED_POINT_VISIBLE(int point) { return Invoke<bool>(0xC45CCDAAC9221CA8, V(point)); }
		public static void DESTROY_TRACKED_POINT(int point) { Invoke(0xB25DC90BAD56CA42, V(point)); }
		// This function is hard-coded to always return 0.
		public static int SET_GRASS_CULL_SPHERE(float p0, float p1, float p2, float p3) { return Invoke<int>(0xBE197EAA669238F4, V(p0), V(p1), V(p2), V(p3)); }
		// This native does absolutely nothing, just a nullsub
		public static void REMOVE_GRASS_CULL_SPHERE(int handle) { Invoke(0x61F95E5BB3E0A8C6, V(handle)); }
		public static void PROCGRASS_ENABLE_CULLSPHERE(int handle, float x, float y, float z, float scale) { Invoke(0xAE51BC858F32BA66, V(handle), V(x), V(y), V(z), V(scale)); }
		public static void PROCGRASS_DISABLE_CULLSPHERE(int handle) { Invoke(0x649C97D52332341A, V(handle)); }
		public static bool PROCGRASS_IS_CULLSPHERE_ENABLED(int handle) { return Invoke<bool>(0x2C42340F916C5930, V(handle)); }
		public static void PROCGRASS_ENABLE_AMBSCALESCAN() { Invoke(0x14FC5833464340A8); }
		public static void PROCGRASS_DISABLE_AMBSCALESCAN() { Invoke(0x0218BA067D249DEA); }
		public static void DISABLE_PROCOBJ_CREATION() { Invoke(0x1612C45F9E3E0D44); }
		public static void ENABLE_PROCOBJ_CREATION() { Invoke(0x5DEBD9C4DC995692); }
		public static void GRASSBATCH_ENABLE_FLATTENING_EXT_IN_SPHERE(float x, float y, float z, Any p3, float p4, float p5, float p6, float scale) { Invoke(0xAAE9BE70EC7C69AB, V(x), V(y), V(z), V(p3), V(p4), V(p5), V(p6), V(scale)); }
		// Wraps 0xAAE9BE70EC7C69AB with FLT_MAX as p7, Jenkins: 0x73E96210?
		public static void GRASSBATCH_ENABLE_FLATTENING_IN_SPHERE(float x, float y, float z, float radius, float p4, float p5, float p6) { Invoke(0x6D955F6A9E0295B1, V(x), V(y), V(z), V(radius), V(p4), V(p5), V(p6)); }
		public static void GRASSBATCH_DISABLE_FLATTENING() { Invoke(0x302C91AB2D477F7E); }
		public static void CASCADE_SHADOWS_INIT_SESSION() { Invoke(0x03FC694AE06C5A20); }
		public static void CASCADE_SHADOWS_SET_CASCADE_BOUNDS(Any p0, bool p1, float p2, float p3, float p4, float p5, bool p6, float p7) { Invoke(0xD2936CAB8B58FCBD, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7)); }
		public static void CASCADE_SHADOWS_SET_CASCADE_BOUNDS_SCALE(float p0) { Invoke(0x5F0F3F56635809EF, V(p0)); }
		public static void CASCADE_SHADOWS_SET_ENTITY_TRACKER_SCALE(float p0) { Invoke(0x5E9DAF5A20F15908, V(p0)); }
		public static void CASCADE_SHADOWS_SET_SPLIT_Z_EXP_WEIGHT(float p0) { Invoke(0x36F6626459D91457, V(p0)); }
		public static void CASCADE_SHADOWS_SET_BOUND_POSITION(Any p0) { Invoke(0x259BA6D4E6F808F1, V(p0)); }
		// When this is set to ON, shadows only draw as you get nearer.
		// 
		// When OFF, they draw from a further distance.
		public static void CASCADE_SHADOWS_ENABLE_ENTITY_TRACKER(bool toggle) { Invoke(0x80ECBC0C856D3B0B, V(toggle)); }
		public static void CASCADE_SHADOWS_SET_SCREEN_SIZE_CHECK_ENABLED(bool p0) { Invoke(0x25FC3E33A31AD0C9, V(p0)); }
		// Possible values:
		// "CSM_ST_POINT"
		// "CSM_ST_LINEAR"
		// "CSM_ST_TWOTAP"
		// "CSM_ST_BOX3x3"
		// "CSM_ST_BOX4x4"
		// "CSM_ST_DITHER2_LINEAR"
		// "CSM_ST_CUBIC"
		// "CSM_ST_DITHER4"
		// "CSM_ST_DITHER16"
		// "CSM_ST_SOFT16"
		// "CSM_ST_DITHER16_RPDB"
		// "CSM_ST_POISSON16_RPDB_GNORM"
		// "CSM_ST_HIGHRES_BOX4x4"
		// "CSM_ST_CLOUDS_SIMPLE"
		// "CSM_ST_CLOUDS_LINEAR"
		// "CSM_ST_CLOUDS_TWOTAP"
		// "CSM_ST_CLOUDS_BOX3x3"
		// "CSM_ST_CLOUDS_BOX4x4"
		// "CSM_ST_CLOUDS_DITHER2_LINEAR"
		// "CSM_ST_CLOUDS_SOFT16"
		// "CSM_ST_CLOUDS_DITHER16_RPDB"
		// "CSM_ST_CLOUDS_POISSON16_RPDB_GNORM"
		public static void CASCADE_SHADOWS_SET_SHADOW_SAMPLE_TYPE(string type) { Invoke(0xB11D94BC55F41932, V(type)); }
		public static void CASCADE_SHADOWS_CLEAR_SHADOW_SAMPLE_TYPE() { Invoke(0x27CB772218215325); }
		public static void CASCADE_SHADOWS_SET_AIRCRAFT_MODE(bool p0) { Invoke(0x6DDBF9DFFC4AC080, V(p0)); }
		public static void CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_MODE(bool p0) { Invoke(0xD39D13C9FEBF0511, V(p0)); }
		public static void CASCADE_SHADOWS_SET_DYNAMIC_DEPTH_VALUE(float p0) { Invoke(0x02AC28F3A01FA04A, V(p0)); }
		public static void CASCADE_SHADOWS_ENABLE_FREEZER(bool p0) { Invoke(0x0AE73D8DF3A762B2, V(p0)); }
		public static void WATER_REFLECTION_SET_SCRIPT_OBJECT_VISIBILITY(Any p0) { Invoke(0xCA465D9CC0D231BA, V(p0)); }
		public static void GOLF_TRAIL_SET_ENABLED(bool toggle) { Invoke(0xA51C4B86B71652AE, V(toggle)); }
		// p8 seems to always be false.
		public static void GOLF_TRAIL_SET_PATH(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, bool p8) { Invoke(0x312342E1A4874F3F, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		public static void GOLF_TRAIL_SET_RADIUS(float p0, float p1, float p2) { Invoke(0x2485D34E50A22E84, V(p0), V(p1), V(p2)); }
		public static void GOLF_TRAIL_SET_COLOUR(int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11) { Invoke(0x12995F2E53FFA601, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10), V(p11)); }
		public static void GOLF_TRAIL_SET_TESSELLATION(int p0, int p1) { Invoke(0xDBAA5EC848BA2D46, V(p0), V(p1)); }
		public static void GOLF_TRAIL_SET_FIXED_CONTROL_POINT_ENABLE(bool p0) { Invoke(0xC0416B061F2B7E5E, V(p0)); }
		// 12 matches across 4 scripts. All 4 scripts were job creators.
		// 
		// type ranged from 0 - 2.
		// p4 was always 0.2f. Likely scale.
		// assuming p5 - p8 is RGBA, the graphic is always yellow (255, 255, 0, 255).
		// 
		// Tested but noticed nothing.
		public static void GOLF_TRAIL_SET_FIXED_CONTROL_POINT(int type, float xPos, float yPos, float zPos, float p4, int red, int green, int blue, int alpha) { Invoke(0xB1BB03742917A5D6, V(type), V(xPos), V(yPos), V(zPos), V(p4), V(red), V(green), V(blue), V(alpha)); }
		// Only appeared in Golf & Golf_mp. Parameters were all ptrs
		public static void GOLF_TRAIL_SET_SHADER_PARAMS(float p0, float p1, float p2, float p3, float p4) { Invoke(0x9CFDD90B2B844BF7, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void GOLF_TRAIL_SET_FACING(bool p0) { Invoke(0x06F761EA47C1D3ED, V(p0)); }
		public static float GOLF_TRAIL_GET_MAX_HEIGHT() { return Invoke<float>(0xA4819F5E23E2FFAD); }
		public static Vector3 GOLF_TRAIL_GET_VISUAL_CONTROL_POINT(int p0) { return Invoke<Vector3>(0xA4664972A9B8F8BA, V(p0)); }
		// Toggles Heatvision on/off.
		public static void SET_SEETHROUGH(bool toggle) { Invoke(0x7E08924259E08CE0, V(toggle)); }
		public static bool GET_USINGSEETHROUGH() { return Invoke<bool>(0x44B80ABAB9D80BD3); }
		public static void SEETHROUGH_RESET() { Invoke(0x70A64C0234EF522C); }
		public static void SEETHROUGH_SET_FADE_STARTDISTANCE(float distance) { Invoke(0xA78DE25577300BA1, V(distance)); }
		public static void SEETHROUGH_SET_FADE_ENDDISTANCE(float distance) { Invoke(0x9D75795B9DC6EBBF, V(distance)); }
		public static float SEETHROUGH_GET_MAX_THICKNESS() { return Invoke<float>(0x43DBAE39626CE83F); }
		// 0.0 = you will not be able to see people behind the walls. 50.0 and more = you will see everyone through the walls. More value is "better" view. See https://gfycat.com/FirmFlippantGourami
		// min: 1.0
		// max: 10000.0
		public static void SEETHROUGH_SET_MAX_THICKNESS(float thickness) { Invoke(0x0C8FAC83902A62DF, V(thickness)); }
		public static void SEETHROUGH_SET_NOISE_MIN(float amount) { Invoke(0xFF5992E1C9E65D05, V(amount)); }
		public static void SEETHROUGH_SET_NOISE_MAX(float amount) { Invoke(0xFEBFBFDFB66039DE, V(amount)); }
		public static void SEETHROUGH_SET_HILIGHT_INTENSITY(float intensity) { Invoke(0x19E50EB6E33E1D28, V(intensity)); }
		public static void SEETHROUGH_SET_HIGHLIGHT_NOISE(float noise) { Invoke(0x1636D7FC127B10D2, V(noise)); }
		// min: 0.0
		// max: 0.75
		public static void SEETHROUGH_SET_HEATSCALE(int index, float heatScale) { Invoke(0xD7D0B00177485411, V(index), V(heatScale)); }
		public static void SEETHROUGH_SET_COLOR_NEAR(int red, int green, int blue) { Invoke(0x1086127B3A63505E, V(red), V(green), V(blue)); }
		// Setter for GET_MOTIONBLUR_MAX_VEL_SCALER
		public static void SET_MOTIONBLUR_MAX_VEL_SCALER(float p0) { Invoke(0xB3C641F3630BF6DA, V(p0)); }
		// Getter for SET_MOTIONBLUR_MAX_VEL_SCALER
		public static float GET_MOTIONBLUR_MAX_VEL_SCALER() { return Invoke<float>(0xE59343E9E96529E7); }
		public static void SET_FORCE_MOTIONBLUR(bool toggle) { Invoke(0x6A51F78772175A51, V(toggle)); }
		public static void TOGGLE_PLAYER_DAMAGE_OVERLAY(bool toggle) { Invoke(0xE63D7C6EECECB66B, V(toggle)); }
		// Sets an value related to timecycles.
		public static void RESET_ADAPTATION(int p0) { Invoke(0xE3E2C1B4C59DBC77, V(p0)); }
		// time in ms to transition to fully blurred screen
		public static bool TRIGGER_SCREENBLUR_FADE_IN(float transitionTime) { return Invoke<bool>(0xA328A24AAA6B7FDC, V(transitionTime)); }
		// time in ms to transition from fully blurred to normal
		public static bool TRIGGER_SCREENBLUR_FADE_OUT(float transitionTime) { return Invoke<bool>(0xEFACC8AEF94430D5, V(transitionTime)); }
		public static void DISABLE_SCREENBLUR_FADE() { Invoke(0xDE81239437E8C5A8); }
		public static float GET_SCREENBLUR_FADE_CURRENT_TIME() { return Invoke<float>(0x5CCABFFCA31DDE33); }
		// Returns whether screen transition to blur/from blur is running.
		public static bool IS_SCREENBLUR_FADE_RUNNING() { return Invoke<bool>(0x7B226C785A52A0A9); }
		public static void TOGGLE_PAUSED_RENDERPHASES(bool toggle) { Invoke(0xDFC252D8A3E15AB7, V(toggle)); }
		public static bool GET_TOGGLE_PAUSED_RENDERPHASES_STATUS() { return Invoke<bool>(0xEB3DAC2C86001E5E); }
		public static void RESET_PAUSED_RENDERPHASES() { Invoke(0xE1C8709406F2C41C); }
		public static void GRAB_PAUSEMENU_OWNERSHIP() { Invoke(0x851CD923176EBA7C); }
		public static void SET_HIDOF_OVERRIDE(bool p0, bool p1, float nearplaneOut, float nearplaneIn, float farplaneOut, float farplaneIn) { Invoke(0xBA3D65906822BED5, V(p0), V(p1), V(nearplaneOut), V(nearplaneIn), V(farplaneOut), V(farplaneIn)); }
		public static void SET_LOCK_ADAPTIVE_DOF_DISTANCE(bool p0) { Invoke(0xB569F41F3E7E83A4, V(p0)); }
		public static bool PHONEPHOTOEDITOR_TOGGLE(bool p0) { return Invoke<bool>(0x7AC24EAB6D74118D, V(p0)); }
		public static bool PHONEPHOTOEDITOR_IS_ACTIVE() { return Invoke<bool>(0xBCEDB009461DA156); }
		public static bool PHONEPHOTOEDITOR_SET_FRAME_TXD(string textureDict, bool p1) { return Invoke<bool>(0x27FEB5254759CDE3, V(textureDict), V(p1)); }
		// GRAPHICS::START_PARTICLE_FX_NON_LOOPED_AT_COORD("scr_paleto_roof_impact", -140.8576f, 6420.789f, 41.1391f, 0f, 0f, 267.3957f, 0x3F800000, 0, 0, 0);
		// 
		// Axis - Invert Axis Flags
		// 
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		// 
		// 
		// -------------------------------------------------------------------
		// C#
		// 
		// Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, = you are calling this function.
		// 
		// char *effectname = This is an in-game effect name, for e.g. "scr_fbi4_trucks_crash" is used to give the effects when truck crashes etc
		// 
		// float x, y, z pos = this one is Simple, you just have to declare, where do you want this effect to take place at, so declare the ordinates
		// 
		// float xrot, yrot, zrot = Again simple? just mention the value in case if you want the effect to rotate.
		// 
		// float scale = is declare the scale of the effect, this may vary as per the effects for e.g 1.0f
		// 
		// bool xaxis, yaxis, zaxis = To bool the axis values.
		// 
		// example:
		// Function.Call<int>(Hash.START_PARTICLE_FX_NON_LOOPED_AT_COORD, "scr_fbi4_trucks_crash", GTA.Game.Player.Character.Position.X, GTA.Game.Player.Character.Position.Y, GTA.Game.Player.Character.Position.Z + 4f, 0, 0, 0, 5.5f, 0, 0, 0);
		public static bool START_PARTICLE_FX_NON_LOOPED_AT_COORD(string effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis) { return Invoke<bool>(0x25129531F77B9ED3, V(effectName), V(xPos), V(yPos), V(zPos), V(xRot), V(yRot), V(zRot), V(scale), V(xAxis), V(yAxis), V(zAxis)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_AT_COORD(string effectName, float xPos, float yPos, float zPos, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11) { return Invoke<bool>(0xF56B8137DF10135D, V(effectName), V(xPos), V(yPos), V(zPos), V(xRot), V(yRot), V(zRot), V(scale), V(xAxis), V(yAxis), V(zAxis), V(p11)); }
		// GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE("scr_sh_bong_smoke", PLAYER::PLAYER_PED_ID(), -0.025f, 0.13f, 0f, 0f, 0f, 0f, 31086, 0x3F800000, 0, 0, 0);
		// 
		// Axis - Invert Axis Flags
		// 
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static bool START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(string effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ) { return Invoke<bool>(0x0E7E72961BA18619, V(effectName), V(ped), V(offsetX), V(offsetY), V(offsetZ), V(rotX), V(rotY), V(rotZ), V(boneIndex), V(scale), V(axisX), V(axisY), V(axisZ)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_PED_BONE(string effectName, Ped ped, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ) { return Invoke<bool>(0xA41B6A43642AC2CF, V(effectName), V(ped), V(offsetX), V(offsetY), V(offsetZ), V(rotX), V(rotY), V(rotZ), V(boneIndex), V(scale), V(axisX), V(axisY), V(axisZ)); }
		// Starts a particle effect on an entity for example your player.
		// 
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		// 
		// Example:
		// C#:
		// Function.Call(Hash.REQUEST_NAMED_PTFX_ASSET, "scr_rcbarry2");                     Function.Call(Hash.USE_PARTICLE_FX_ASSET, "scr_rcbarry2");                             Function.Call(Hash.START_PARTICLE_FX_NON_LOOPED_ON_ENTITY, "scr_clown_appears", Game.Player.Character, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 1.0, false, false, false);
		// 
		// Internally this calls the same function as GRAPHICS::START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE
		// however it uses -1 for the specified bone index, so it should be possible to start a non looped fx on an entity bone using that native
		// 
		// -can confirm START_PARTICLE_FX_NON_LOOPED_ON_PED_BONE does NOT work on vehicle bones.
		public static bool START_PARTICLE_FX_NON_LOOPED_ON_ENTITY(string effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ) { return Invoke<bool>(0x0D53A3B8DA0809D2, V(effectName), V(entity), V(offsetX), V(offsetY), V(offsetZ), V(rotX), V(rotY), V(rotZ), V(scale), V(axisX), V(axisY), V(axisZ)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static bool START_NETWORKED_PARTICLE_FX_NON_LOOPED_ON_ENTITY(string effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, float scale, bool axisX, bool axisY, bool axisZ) { return Invoke<bool>(0xC95EB1DB6E92113D, V(effectName), V(entity), V(offsetX), V(offsetY), V(offsetZ), V(rotX), V(rotY), V(rotZ), V(scale), V(axisX), V(axisY), V(axisZ)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static bool START_PARTICLE_FX_NON_LOOPED_ON_ENTITY_BONE(string effectName, Entity entity, float offsetX, float offsetY, float offsetZ, float rotX, float rotY, float rotZ, int boneIndex, float scale, bool axisX, bool axisY, bool axisZ) { return Invoke<bool>(0x02B1F2A72E0F5325, V(effectName), V(entity), V(offsetX), V(offsetY), V(offsetZ), V(rotX), V(rotY), V(rotZ), V(boneIndex), V(scale), V(axisX), V(axisY), V(axisZ)); }
		// only works on some fx's, not networked
		public static void SET_PARTICLE_FX_NON_LOOPED_COLOUR(float r, float g, float b) { Invoke(0x26143A59EF48B262, V(r), V(g), V(b)); }
		// Usage example for C#:
		// 
		// Function.Call(Hash.SET_PARTICLE_FX_NON_LOOPED_ALPHA, new InputArgument[] { 0.1f });
		// 
		// Note: the argument alpha ranges from 0.0f-1.0f !
		public static void SET_PARTICLE_FX_NON_LOOPED_ALPHA(float alpha) { Invoke(0x77168D722C58B2FC, V(alpha)); }
		public static void SET_PARTICLE_FX_NON_LOOPED_SCALE(float scale) { Invoke(0xB7EF5850C39FABCA, V(scale)); }
		public static void SET_PARTICLE_FX_NON_LOOPED_EMITTER_SIZE(float p0, float p1, float scale) { Invoke(0x1E2E01C00837D26E, V(p0), V(p1), V(scale)); }
		// Used only once in the scripts (taxi_clowncar)
		public static void SET_PARTICLE_FX_FORCE_VEHICLE_INTERIOR(bool toggle) { Invoke(0x8CDE909A0370BB3A, V(toggle)); }
		// GRAPHICS::START_PARTICLE_FX_LOOPED_AT_COORD("scr_fbi_falling_debris", 93.7743f, -749.4572f, 70.86904f, 0f, 0f, 0f, 0x3F800000, 0, 0, 0, 0)
		// 
		// 
		// p11 seems to be always 0
		// 
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static int START_PARTICLE_FX_LOOPED_AT_COORD(string effectName, float x, float y, float z, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, bool p11) { return Invoke<int>(0xE184F4F0DC5910E7, V(effectName), V(x), V(y), V(z), V(xRot), V(yRot), V(zRot), V(scale), V(xAxis), V(yAxis), V(zAxis), V(p11)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static int START_PARTICLE_FX_LOOPED_ON_PED_BONE(string effectName, Ped ped, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis) { return Invoke<int>(0xF28DA9F38CD1787C, V(effectName), V(ped), V(xOffset), V(yOffset), V(zOffset), V(xRot), V(yRot), V(zRot), V(boneIndex), V(scale), V(xAxis), V(yAxis), V(zAxis)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static int START_PARTICLE_FX_LOOPED_ON_ENTITY(string effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis) { return Invoke<int>(0x1AE42C1660FD6517, V(effectName), V(entity), V(xOffset), V(yOffset), V(zOffset), V(xRot), V(yRot), V(zRot), V(scale), V(xAxis), V(yAxis), V(zAxis)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static int START_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(string effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis) { return Invoke<int>(0xC6EB449E33977F0B, V(effectName), V(entity), V(xOffset), V(yOffset), V(zOffset), V(xRot), V(yRot), V(zRot), V(boneIndex), V(scale), V(xAxis), V(yAxis), V(zAxis)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY(string effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, float scale, bool xAxis, bool yAxis, bool zAxis, float r, float g, float b, float a) { return Invoke<int>(V(0x6F60E89A7B64EE1D), V(effectName), V(entity), V(xOffset), V(yOffset), V(zOffset), V(xRot), V(yRot), V(zRot), V(scale), V(xAxis), V(yAxis), V(zAxis), V(r), V(g), V(b), V(a)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static int START_NETWORKED_PARTICLE_FX_LOOPED_ON_ENTITY_BONE(string effectName, Entity entity, float xOffset, float yOffset, float zOffset, float xRot, float yRot, float zRot, int boneIndex, float scale, bool xAxis, bool yAxis, bool zAxis, float r, float g, float b, float a) { return Invoke<int>(V(0xDDE23F30CC5A0F03), V(effectName), V(entity), V(xOffset), V(yOffset), V(zOffset), V(xRot), V(yRot), V(zRot), V(boneIndex), V(scale), V(xAxis), V(yAxis), V(zAxis), V(r), V(g), V(b), V(a)); }
		// p1 is always 0 in the native scripts
		public static void STOP_PARTICLE_FX_LOOPED(int ptfxHandle, bool p1) { Invoke(0x8F75998877616996, V(ptfxHandle), V(p1)); }
		public static void REMOVE_PARTICLE_FX(int ptfxHandle, bool p1) { Invoke(0xC401503DFE8D53CF, V(ptfxHandle), V(p1)); }
		public static void REMOVE_PARTICLE_FX_FROM_ENTITY(Entity entity) { Invoke(0xB8FEAEEBCC127425, V(entity)); }
		public static void REMOVE_PARTICLE_FX_IN_RANGE(float X, float Y, float Z, float radius) { Invoke(0xDD19FA1C6D657305, V(X), V(Y), V(Z), V(radius)); }
		public static void FORCE_PARTICLE_FX_IN_VEHICLE_INTERIOR(Any p0, Any p1) { Invoke(0xBA0127DA25FD54C9, V(p0), V(p1)); }
		public static bool DOES_PARTICLE_FX_LOOPED_EXIST(int ptfxHandle) { return Invoke<bool>(0x74AFEF0D2E1E409B, V(ptfxHandle)); }
		public static void SET_PARTICLE_FX_LOOPED_OFFSETS(int ptfxHandle, float x, float y, float z, float rotX, float rotY, float rotZ) { Invoke(0xF7DDEBEC43483C43, V(ptfxHandle), V(x), V(y), V(z), V(rotX), V(rotY), V(rotZ)); }
		public static void SET_PARTICLE_FX_LOOPED_EVOLUTION(int ptfxHandle, string propertyName, float amount, bool noNetwork) { Invoke(0x5F0C4B5B1C393BE2, V(ptfxHandle), V(propertyName), V(amount), V(noNetwork)); }
		// only works on some fx's
		// 
		// p4 = 0
		public static void SET_PARTICLE_FX_LOOPED_COLOUR(int ptfxHandle, float r, float g, float b, bool p4) { Invoke(0x7F8F65877F88783B, V(ptfxHandle), V(r), V(g), V(b), V(p4)); }
		public static void SET_PARTICLE_FX_LOOPED_ALPHA(int ptfxHandle, float alpha) { Invoke(0x726845132380142E, V(ptfxHandle), V(alpha)); }
		public static void SET_PARTICLE_FX_LOOPED_SCALE(int ptfxHandle, float scale) { Invoke(0xB44250AAA456492D, V(ptfxHandle), V(scale)); }
		public static void SET_PARTICLE_FX_LOOPED_FAR_CLIP_DIST(int ptfxHandle, float range) { Invoke(0xDCB194B85EF7B541, V(ptfxHandle), V(range)); }
		public static void _SET_PARTICLE_FX_LOOPED_CAMERA_BIAS(int ptfxHandle, float p1) { Invoke(0x4100BF0346A8D2C3, V(ptfxHandle), V(p1)); }
		public static void SET_PARTICLE_FX_CAM_INSIDE_VEHICLE(bool p0) { Invoke(0xEEC4047028426510, V(p0)); }
		public static void SET_PARTICLE_FX_CAM_INSIDE_NONPLAYER_VEHICLE(Vehicle vehicle, bool p1) { Invoke(0xACEE6F360FC1F6B6, V(vehicle), V(p1)); }
		public static void SET_PARTICLE_FX_SHOOTOUT_BOAT(Any p0) { Invoke(0x96EF97DAEB89BEF5, V(p0)); }
		public static void CLEAR_PARTICLE_FX_SHOOTOUT_BOAT() { Invoke(0x2A251AA48B2B46DB); }
		public static void SET_PARTICLE_FX_BLOOD_SCALE(Any p0) { Invoke(0x908311265D42A820, V(p0)); }
		public static void DISABLE_IN_WATER_PTFX(bool toggle) { Invoke(0xCFD16F0DB5A3535C, V(toggle)); }
		public static void DISABLE_DOWNWASH_PTFX(bool toggle) { Invoke(0x5F6DF3D92271E8A1, V(toggle)); }
		public static void SET_PARTICLE_FX_SLIPSTREAM_LODRANGE_SCALE(float scale) { Invoke(0x2B40A97646381508, V(scale)); }
		// Creates cartoon effect when Michel smokes the weed
		public static void ENABLE_CLOWN_BLOOD_VFX(bool toggle) { Invoke(0xD821490579791273, V(toggle)); }
		// Creates a motion-blur sort of effect, this native does not seem to work, however by using the `START_SCREEN_EFFECT` native with `DrugsMichaelAliensFight` as the effect parameter, you should be able to get the effect.
		public static void ENABLE_ALIEN_BLOOD_VFX(bool toggle) { Invoke(0x9DCE1F0F78260875, V(toggle)); }
		public static void SET_PARTICLE_FX_BULLET_IMPACT_SCALE(float scale) { Invoke(0x27E32866E9A5C416, V(scale)); }
		public static void SET_PARTICLE_FX_BULLET_IMPACT_LODRANGE_SCALE(float p0) { Invoke(0xBB90E12CAC1DAB25, V(p0)); }
		public static void SET_PARTICLE_FX_BULLET_TRACE_NO_ANGLE_REJECT(bool p0) { Invoke(0xCA4AE345A153D573, V(p0)); }
		public static void SET_PARTICLE_FX_BANG_SCRAPE_LODRANGE_SCALE(float p0) { Invoke(0x54E22EA2C1956A8D, V(p0)); }
		public static void SET_PARTICLE_FX_FOOT_LODRANGE_SCALE(float p0) { Invoke(0x949F397A288B28B3, V(p0)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static void SET_PARTICLE_FX_FOOT_OVERRIDE_NAME(string p0) { Invoke(0xBA3D194057C79A7B, V(p0)); }
		public static void SET_SKIDMARK_RANGE_SCALE(float scale) { Invoke(0x5DBF05DB5926D089, V(scale)); }
		public static void SET_PTFX_FORCE_VEHICLE_INTERIOR_FLAG(Any p0) { Invoke(0xC6730E0D14E50703, V(p0)); }
		public static void REGISTER_POSTFX_BULLET_IMPACT(float weaponWorldPosX, float weaponWorldPosY, float weaponWorldPosZ, float intensity) { Invoke(0x170911F37F646F29, V(weaponWorldPosX), V(weaponWorldPosY), V(weaponWorldPosZ), V(intensity)); }
		public static void FORCE_POSTFX_BULLET_IMPACTS_AFTER_HUD(bool p0) { Invoke(0x9B079E5221D984D3, V(p0)); }
		// From the b678d decompiled scripts:
		// 
		//  GRAPHICS::USE_PARTICLE_FX_ASSET("FM_Mission_Controler");
		//  GRAPHICS::USE_PARTICLE_FX_ASSET("scr_apartment_mp");
		//  GRAPHICS::USE_PARTICLE_FX_ASSET("scr_indep_fireworks");
		//  GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_cig_plane");
		//  GRAPHICS::USE_PARTICLE_FX_ASSET("scr_mp_creator");
		//  GRAPHICS::USE_PARTICLE_FX_ASSET("scr_ornate_heist");
		//  GRAPHICS::USE_PARTICLE_FX_ASSET("scr_prison_break_heist_station");
		// 
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static void USE_PARTICLE_FX_ASSET(string name) { Invoke(0x6C38AF3693A69A91, V(name)); }
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static void SET_PARTICLE_FX_OVERRIDE(string oldAsset, string newAsset) { Invoke(0xEA1E2D93F6F75ED9, V(oldAsset), V(newAsset)); }
		// Resets the effect of SET_PARTICLE_FX_OVERRIDE
		// 
		// Full list of particle effect dictionaries and effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/particleEffectsCompact.json
		public static void RESET_PARTICLE_FX_OVERRIDE(string name) { Invoke(0x89C8553DD3274AAE, V(name)); }
		// Returns ptfxHandle
		// effectName: scr_sv_drag_burnout
		public static int _START_VEHICLE_PARTICLE_FX_LOOPED(Vehicle vehicle, string effectName, bool frontBack, bool leftRight, bool localOnly) { return Invoke<int>(0xDF269BE2909E181A, V(vehicle), V(effectName), V(frontBack), V(leftRight), V(localOnly)); }
		public static void SET_WEATHER_PTFX_USE_OVERRIDE_SETTINGS(bool p0) { Invoke(0xA46B73FAA3460AE1, V(p0)); }
		public static void SET_WEATHER_PTFX_OVERRIDE_CURR_LEVEL(float p0) { Invoke(0xF78B803082D4386F, V(p0)); }
		public static void WASH_DECALS_IN_RANGE(float x, float y, float z, float range, float p4) { Invoke(0x9C30613D50A6ADEF, V(x), V(y), V(z), V(range), V(p4)); }
		public static void WASH_DECALS_FROM_VEHICLE(Vehicle vehicle, float p1) { Invoke(0x5B712761429DBC14, V(vehicle), V(p1)); }
		// Fades nearby decals within the range specified
		public static void FADE_DECALS_IN_RANGE(float x, float y, float z, float p3, float p4) { Invoke(0xD77EDADB0420E6E0, V(x), V(y), V(z), V(p3), V(p4)); }
		// Removes all decals in range from a position, it includes the bullet holes, blood pools, petrol...
		public static void REMOVE_DECALS_IN_RANGE(float x, float y, float z, float range) { Invoke(0x5D6B2D4830A67C62, V(x), V(y), V(z), V(range)); }
		public static void REMOVE_DECALS_FROM_OBJECT(Obj obj) { Invoke(0xCCF71CBDDF5B6CB9, V(obj)); }
		public static void REMOVE_DECALS_FROM_OBJECT_FACING(Obj obj, float x, float y, float z) { Invoke(0xA6F6F70FDC6D144C, V(obj), V(x), V(y), V(z)); }
		public static void REMOVE_DECALS_FROM_VEHICLE(Vehicle vehicle) { Invoke(0xE91F1B65F2B48D57, V(vehicle)); }
		// decal types:
		// 
		// public static enum DecalTypes
		// {
		//     splatters_blood = 1010,
		//     splatters_blood_dir = 1015,
		//     splatters_blood_mist = 1017,
		//     splatters_mud = 1020,
		//     splatters_paint = 1030,
		//     splatters_water = 1040,
		//     splatters_water_hydrant = 1050,
		//     splatters_blood2 = 1110,
		//     weapImpact_metal = 4010,
		//     weapImpact_concrete = 4020,
		//     weapImpact_mattress = 4030,
		//     weapImpact_mud = 4032,
		//     weapImpact_wood = 4050,
		//     weapImpact_sand = 4053,
		//     weapImpact_cardboard = 4040,
		//     weapImpact_melee_glass = 4100,
		//     weapImpact_glass_blood = 4102,
		//     weapImpact_glass_blood2 = 4104,
		//     weapImpact_shotgun_paper = 4200,
		//     weapImpact_shotgun_mattress,
		//     weapImpact_shotgun_metal,
		//     weapImpact_shotgun_wood,
		//     weapImpact_shotgun_dirt,
		//     weapImpact_shotgun_tvscreen,
		//     weapImpact_shotgun_tvscreen2,
		//     weapImpact_shotgun_tvscreen3,
		//     weapImpact_melee_concrete = 4310,
		//     weapImpact_melee_wood = 4312,
		//     weapImpact_melee_metal = 4314,
		//     burn1 = 4421,
		//     burn2,
		//     burn3,
		//     burn4,
		//     burn5,
		//     bang_concrete_bang = 5000,
		//     bang_concrete_bang2,
		//     bang_bullet_bang,
		//     bang_bullet_bang2 = 5004,
		//     bang_glass = 5031,
		//     bang_glass2,
		//     solidPool_water = 9000,
		//     solidPool_blood,
		//     solidPool_oil,
		//     solidPool_petrol,
		//     solidPool_mud,
		//     porousPool_water,
		//     porousPool_blood,
		//     porousPool_oil,
		//     porousPool_petrol,
		//     porousPool_mud,
		//     porousPool_water_ped_drip,
		//     liquidTrail_water = 9050
		// }
		public static int ADD_DECAL(int decalType, float posX, float posY, float posZ, float p4, float p5, float p6, float p7, float p8, float p9, float width, float height, float rCoef, float gCoef, float bCoef, float opacity, float timeout, bool p17, bool p18, bool p19) { return Invoke<int>(V(0xB302244A1839BDAD), V(decalType), V(posX), V(posY), V(posZ), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(width), V(height), V(rCoef), V(gCoef), V(bCoef), V(opacity), V(timeout), V(p17), V(p18), V(p19)); }
		public static int ADD_PETROL_DECAL(float x, float y, float z, float groundLvl, float width, float transparency) { return Invoke<int>(0x4F5212C7AD880DF8, V(x), V(y), V(z), V(groundLvl), V(width), V(transparency)); }
		public static int ADD_OIL_DECAL(float x, float y, float z, float groundLvl, float width, float transparency) { return Invoke<int>(0x126D7F89FE859A5E, V(x), V(y), V(z), V(groundLvl), V(width), V(transparency)); }
		public static void START_PETROL_TRAIL_DECALS(float p0) { Invoke(0x99AC7F0D8B9C893D, V(p0)); }
		public static void ADD_PETROL_TRAIL_DECAL_INFO(float x, float y, float z, float p3) { Invoke(0x967278682CB6967A, V(x), V(y), V(z), V(p3)); }
		public static void END_PETROL_TRAIL_DECALS() { Invoke(0x0A123435A26C36CD); }
		public static void REMOVE_DECAL(int decal) { Invoke(0xED3F346429CCD659, V(decal)); }
		public static bool IS_DECAL_ALIVE(int decal) { return Invoke<bool>(0xC694D74949CAFD0C, V(decal)); }
		public static float GET_DECAL_WASH_LEVEL(int decal) { return Invoke<float>(0x323F647679A09103, V(decal)); }
		public static void SET_DISABLE_PETROL_DECALS_IGNITING_THIS_FRAME() { Invoke(0xD9454B5752C857DC); }
		public static void SET_DISABLE_PETROL_DECALS_RECYCLING_THIS_FRAME() { Invoke(0x27CFB1B1E078CB2D); }
		public static void SET_DISABLE_DECAL_RENDERING_THIS_FRAME() { Invoke(0x4B5CFC83122DF602); }
		public static bool GET_IS_PETROL_DECAL_IN_RANGE(float xCoord, float yCoord, float zCoord, float radius) { return Invoke<bool>(0x2F09F7976C512404, V(xCoord), V(yCoord), V(zCoord), V(radius)); }
		public static void PATCH_DECAL_DIFFUSE_MAP(int decalType, string textureDict, string textureName) { Invoke(0x8A35C742130C6080, V(decalType), V(textureDict), V(textureName)); }
		public static void UNPATCH_DECAL_DIFFUSE_MAP(int decalType) { Invoke(0xB7ED70C49521A61D, V(decalType)); }
		public static void MOVE_VEHICLE_DECALS(Any p0, Any p1) { Invoke(0x84C8D7C2D30D3280, V(p0), V(p1)); }
		// boneIndex is always chassis_dummy in the scripts. The x/y/z params are location relative to the chassis bone.
		public static bool ADD_VEHICLE_CREW_EMBLEM(Vehicle vehicle, Ped ped, int boneIndex, float x1, float x2, float x3, float y1, float y2, float y3, float z1, float z2, float z3, float scale, Any p13, int alpha) { return Invoke<bool>(V(0x428BDCB9DA58DA53), V(vehicle), V(ped), V(boneIndex), V(x1), V(x2), V(x3), V(y1), V(y2), V(y3), V(z1), V(z2), V(z3), V(scale), V(p13), V(alpha)); }
		public static bool ABORT_VEHICLE_CREW_EMBLEM_REQUEST(int* p0) { return Invoke<bool>(0x82ACC484FFA3B05F, V(p0)); }
		public static void REMOVE_VEHICLE_CREW_EMBLEM(Vehicle vehicle, int p1) { Invoke(0xD2300034310557E4, V(vehicle), V(p1)); }
		public static int GET_VEHICLE_CREW_EMBLEM_REQUEST_STATE(Vehicle vehicle, int p1) { return Invoke<int>(0xFE26117A5841B2FF, V(vehicle), V(p1)); }
		public static bool DOES_VEHICLE_HAVE_CREW_EMBLEM(Vehicle vehicle, int p1) { return Invoke<bool>(0x060D935D3981A275, V(vehicle), V(p1)); }
		public static void DISABLE_COMPOSITE_SHOTGUN_DECALS(bool toggle) { Invoke(0x0E4299C549F0D1F1, V(toggle)); }
		public static void DISABLE_SCUFF_DECALS(bool toggle) { Invoke(0x02369D5C8A51FDCF, V(toggle)); }
		public static void SET_DECAL_BULLET_IMPACT_RANGE_SCALE(float p0) { Invoke(0x46D1A61A21F566FC, V(p0)); }
		public static void OVERRIDE_INTERIOR_SMOKE_NAME(string name) { Invoke(0x2A2A52824DB96700, V(name)); }
		public static void OVERRIDE_INTERIOR_SMOKE_LEVEL(float level) { Invoke(0x1600FD8CF72EBC12, V(level)); }
		public static void OVERRIDE_INTERIOR_SMOKE_END() { Invoke(0xEFB55E7C25D3B3BE); }
		// Used with 'NG_filmnoir_BW{01,02}' timecycles and the "NOIR_FILTER_SOUNDS" audioref.
		public static void REGISTER_NOIR_LENS_EFFECT() { Invoke(0xA44FF770DFBC5DAE); }
		public static void DISABLE_VEHICLE_DISTANTLIGHTS(bool toggle) { Invoke(0xC9F98AC1884E73A2, V(toggle)); }
		public static void RENDER_SHADOWED_LIGHTS_WITH_NO_SHADOWS(bool p0) { Invoke(0x03300B57FCAC6DDB, V(p0)); }
		public static void REQUEST_EARLY_LIGHT_CHECK() { Invoke(0x98EDF76A7271E4F2); }
		// Forces footstep tracks on all surfaces.
		public static void USE_SNOW_FOOT_VFX_WHEN_UNSHELTERED(bool toggle) { Invoke(0xAEEDAD1420C65CC0, V(toggle)); }
		public static void _FORCE_ALLOW_SNOW_FOOT_VFX_ON_ICE(bool toggle) { Invoke(0xA342A3763B3AFB6C, V(toggle)); }
		// Forces vehicle trails on all surfaces.
		public static void USE_SNOW_WHEEL_VFX_WHEN_UNSHELTERED(bool toggle) { Invoke(0x4CC7F0FEA5283FE0, V(toggle)); }
		public static void DISABLE_REGION_VFX(Any p0) { Invoke(0xEFD97FF47B745B8D, V(p0)); }
		public static void _FORCE_GROUND_SNOW_PASS(bool toggle) { Invoke(0x6E9EF3A33C8899F8, V(toggle)); }
		// Only one match in the scripts:
		// 
		// GRAPHICS::PRESET_INTERIOR_AMBIENT_CACHE("int_carrier_hanger");
		public static void PRESET_INTERIOR_AMBIENT_CACHE(string timecycleModifierName) { Invoke(0xD7021272EB0A451E, V(timecycleModifierName)); }
		// Loads the specified timecycle modifier. Modifiers are defined separately in another file (e.g. "timecycle_mods_1.xml")
		// 
		// Parameters:
		// modifierName - The modifier to load (e.g. "V_FIB_IT3", "scanline_cam", etc.)
		// 
		// Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
		public static void SET_TIMECYCLE_MODIFIER(string modifierName) { Invoke(0x2C933ABF17A1DF41, V(modifierName)); }
		public static void SET_TIMECYCLE_MODIFIER_STRENGTH(float strength) { Invoke(0x82E7FFCD5B2326B3, V(strength)); }
		// Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
		public static void SET_TRANSITION_TIMECYCLE_MODIFIER(string modifierName, float transition) { Invoke(0x3BCF567485E1971C, V(modifierName), V(transition)); }
		public static void SET_TRANSITION_OUT_OF_TIMECYCLE_MODIFIER(float strength) { Invoke(0x1CBA05AE7BD7EE05, V(strength)); }
		public static void CLEAR_TIMECYCLE_MODIFIER() { Invoke(0x0F07E7745A236711); }
		// Only use for this in the PC scripts is:
		// 
		// if (GRAPHICS::GET_TIMECYCLE_MODIFIER_INDEX() != -1)
		public static int GET_TIMECYCLE_MODIFIER_INDEX() { return Invoke<int>(0xFDF3D97C674AFB66); }
		public static int GET_TIMECYCLE_TRANSITION_MODIFIER_INDEX() { return Invoke<int>(0x459FD2C8D0AB78BC); }
		public static bool GET_IS_TIMECYCLE_TRANSITIONING_OUT() { return Invoke<bool>(0x98D18905BF723B99); }
		public static void PUSH_TIMECYCLE_MODIFIER() { Invoke(0x58F735290861E6B4); }
		public static void POP_TIMECYCLE_MODIFIER() { Invoke(0x3C8938D7D872211E); }
		public static void SET_CURRENT_PLAYER_TCMODIFIER(string modifierName) { Invoke(0xBBF327DED94E4DEB, V(modifierName)); }
		public static void SET_PLAYER_TCMODIFIER_TRANSITION(float value) { Invoke(0xBDEB86F4D5809204, V(value)); }
		public static void SET_NEXT_PLAYER_TCMODIFIER(string modifierName) { Invoke(0xBF59707B3E5ED531, V(modifierName)); }
		public static void ADD_TCMODIFIER_OVERRIDE(string modifierName1, string modifierName2) { Invoke(0x1A8E2C8B9CF4549C, V(modifierName1), V(modifierName2)); }
		public static void CLEAR_ALL_TCMODIFIER_OVERRIDES(string p0) { Invoke(0x15E33297C3E8DC60, V(p0)); }
		// Full list of timecycle modifiers by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/timecycleModifiers.json
		public static void SET_EXTRA_TCMODIFIER(string modifierName) { Invoke(0x5096FD9CCB49056D, V(modifierName)); }
		// Clears the secondary timecycle modifier usually set with _SET_EXTRA_TIMECYCLE_MODIFIER
		public static void CLEAR_EXTRA_TCMODIFIER() { Invoke(0x92CCC17A7A2285DA); }
		// See GET_TIMECYCLE_MODIFIER_INDEX for use, works the same just for the secondary timecycle modifier.
		// Returns an integer representing the Timecycle modifier
		public static int GET_EXTRA_TCMODIFIER() { return Invoke<int>(0xBB0527EC6341496D); }
		// The same as SET_TIMECYCLE_MODIFIER_STRENGTH but for the secondary timecycle modifier.
		public static void ENABLE_MOON_CYCLE_OVERRIDE(float strength) { Invoke(0x2C328AF17210F009, V(strength)); }
		// Resets the extra timecycle modifier strength normally set with 0x2C328AF17210F009
		public static void DISABLE_MOON_CYCLE_OVERRIDE() { Invoke(0x2BF72AD5B41AA739); }
		public static int REQUEST_SCALEFORM_MOVIE(string scaleformName) { return Invoke<int>(0x11FE353CF9733E6F, V(scaleformName)); }
		// Another REQUEST_SCALEFORM_MOVIE equivalent.
		public static int REQUEST_SCALEFORM_MOVIE_WITH_IGNORE_SUPER_WIDESCREEN(string scaleformName) { return Invoke<int>(0x65E7E78842E74CDB, V(scaleformName)); }
		public static int REQUEST_SCALEFORM_MOVIE_INSTANCE(string scaleformName) { return Invoke<int>(0xC514489CFB8AF806, V(scaleformName)); }
		// Similar to REQUEST_SCALEFORM_MOVIE, but seems to be some kind of "interactive" scaleform movie?
		// 
		// These seem to be the only scaleforms ever requested by this native:
		// "breaking_news"
		// "desktop_pc"
		// "ECG_MONITOR"
		// "Hacking_PC"
		// "TEETH_PULLING"
		// 
		// Note: Unless this hash is out-of-order, this native is next-gen only.
		// 
		public static int REQUEST_SCALEFORM_MOVIE_SKIP_RENDER_WHILE_PAUSED(string scaleformName) { return Invoke<int>(0xBD06C611BB9048C2, V(scaleformName)); }
		public static bool HAS_SCALEFORM_MOVIE_LOADED(int scaleformHandle) { return Invoke<bool>(0x85F01B8D5B90570E, V(scaleformHandle)); }
		public static bool _HAS_SCALEFORM_MOVIE_NAMED_LOADED(int* scaleformHandle, string scaleformName) { return Invoke<bool>(0x9743BCCF7CD6E1F6, V(scaleformHandle), V(scaleformName)); }
		// val is 1-20 (0 will return false)
		public static bool IS_ACTIVE_SCALEFORM_MOVIE_DELETING(int val) { return Invoke<bool>(0x2FCB133CA50A49EB, V(val)); }
		// val is 1-20. Return is related to INSTRUCTIONAL_BUTTONS, COLOUR_SWITCHER_02, etc?
		public static bool IS_SCALEFORM_MOVIE_DELETING(int val) { return Invoke<bool>(0x86255B1FC929E33E, V(val)); }
		// Only values used in the scripts are:
		// 
		// "heist_mp"
		// "heistmap_mp"
		// "instructional_buttons"
		// "heist_pre"
		public static bool HAS_SCALEFORM_MOVIE_FILENAME_LOADED(string scaleformName) { return Invoke<bool>(0x0C1C5D756FB5F337, V(scaleformName)); }
		public static bool HAS_SCALEFORM_CONTAINER_MOVIE_LOADED_INTO_PARENT(int scaleformHandle) { return Invoke<bool>(0x8217150E1217EBFD, V(scaleformHandle)); }
		public static void SET_SCALEFORM_MOVIE_AS_NO_LONGER_NEEDED(int* scaleformHandle) { Invoke(0x1D132D614DD86811, V(scaleformHandle)); }
		public static void _SET_SCALEFORM_MOVIE_NAMED_AS_NO_LONGER_NEEDED(int scaleformHandle, string scaleformName) { Invoke(0x2FDFB1B04C76E9C3, V(scaleformHandle), V(scaleformName)); }
		public static void SET_SCALEFORM_MOVIE_TO_USE_SYSTEM_TIME(int scaleform, bool toggle) { Invoke(0x6D8EB211944DCE08, V(scaleform), V(toggle)); }
		public static void SET_SCALEFORM_MOVIE_TO_USE_LARGE_RT(int scaleformHandle, bool toggle) { Invoke(0x32F34FF7F617643B, V(scaleformHandle), V(toggle)); }
		// This native is used in some casino scripts to fit the scaleform in the rendertarget.
		public static void SET_SCALEFORM_MOVIE_TO_USE_SUPER_LARGE_RT(int scaleformHandle, bool toggle) { Invoke(0xE6A9F00D4240B519, V(scaleformHandle), V(toggle)); }
		public static void DRAW_SCALEFORM_MOVIE(int scaleformHandle, float x, float y, float width, float height, int red, int green, int blue, int alpha, int p9) { Invoke(0x54972ADAF0294A93, V(scaleformHandle), V(x), V(y), V(width), V(height), V(red), V(green), V(blue), V(alpha), V(p9)); }
		// unk is not used so no need
		public static void DRAW_SCALEFORM_MOVIE_FULLSCREEN(int scaleform, int red, int green, int blue, int alpha, int p5) { Invoke(0x0DF606929C105BE1, V(scaleform), V(red), V(green), V(blue), V(alpha), V(p5)); }
		public static void DRAW_SCALEFORM_MOVIE_FULLSCREEN_MASKED(int scaleform1, int scaleform2, int red, int green, int blue, int alpha) { Invoke(0xCF537FDE4FBD4CE5, V(scaleform1), V(scaleform2), V(red), V(green), V(blue), V(alpha)); }
		public static void DRAW_SCALEFORM_MOVIE_3D(int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, int rotationOrder) { Invoke(0x87D51D72255D4E78, V(scaleform), V(posX), V(posY), V(posZ), V(rotX), V(rotY), V(rotZ), V(p7), V(p8), V(p9), V(scaleX), V(scaleY), V(scaleZ), V(rotationOrder)); }
		public static void DRAW_SCALEFORM_MOVIE_3D_SOLID(int scaleform, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float p7, float p8, float p9, float scaleX, float scaleY, float scaleZ, int rotationOrder) { Invoke(0x1CE592FDC749D6F5, V(scaleform), V(posX), V(posY), V(posZ), V(rotX), V(rotY), V(rotZ), V(p7), V(p8), V(p9), V(scaleX), V(scaleY), V(scaleZ), V(rotationOrder)); }
		// Calls the Scaleform function.
		public static void CALL_SCALEFORM_MOVIE_METHOD(int scaleform, string method) { Invoke(0xFBD96D87AC96D533, V(scaleform), V(method)); }
		// Calls the Scaleform function and passes the parameters as floats.
		// 
		// The number of parameters passed to the function varies, so the end of the parameter list is represented by -1.0.
		public static void CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER(int scaleform, string methodName, float param1, float param2, float param3, float param4, float param5) { Invoke(0xD0837058AE2E4BEE, V(scaleform), V(methodName), V(param1), V(param2), V(param3), V(param4), V(param5)); }
		// Calls the Scaleform function and passes the parameters as strings.
		// 
		// The number of parameters passed to the function varies, so the end of the parameter list is represented by 0 (NULL).
		public static void CALL_SCALEFORM_MOVIE_METHOD_WITH_STRING(int scaleform, string methodName, string param1, string param2, string param3, string param4, string param5) { Invoke(0x51BC1ED3CC44E8F7, V(scaleform), V(methodName), V(param1), V(param2), V(param3), V(param4), V(param5)); }
		// Calls the Scaleform function and passes both float and string parameters (in their respective order).
		// 
		// The number of parameters passed to the function varies, so the end of the float parameters is represented by -1.0, and the end of the string parameters is represented by 0 (NULL).
		// 
		// NOTE: The order of parameters in the function prototype is important! All float parameters must come first, followed by the string parameters.
		// 
		// Examples:
		// // function MY_FUNCTION(floatParam1, floatParam2, stringParam)
		// GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION", 10.0, 20.0, -1.0, -1.0, -1.0, "string param", 0, 0, 0, 0);
		// 
		// // function MY_FUNCTION_2(floatParam, stringParam1, stringParam2)
		// GRAPHICS::CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(scaleform, "MY_FUNCTION_2", 10.0, -1.0, -1.0, -1.0, -1.0, "string param #1", "string param #2", 0, 0, 0);
		public static void CALL_SCALEFORM_MOVIE_METHOD_WITH_NUMBER_AND_STRING(int scaleform, string methodName, float floatParam1, float floatParam2, float floatParam3, float floatParam4, float floatParam5, string stringParam1, string stringParam2, string stringParam3, string stringParam4, string stringParam5) { Invoke(0xEF662D8D57E290B1, V(scaleform), V(methodName), V(floatParam1), V(floatParam2), V(floatParam3), V(floatParam4), V(floatParam5), V(stringParam1), V(stringParam2), V(stringParam3), V(stringParam4), V(stringParam5)); }
		// Pushes a function from the Hud component Scaleform onto the stack. Same behavior as GRAPHICS::BEGIN_SCALEFORM_MOVIE_METHOD, just a hud component id instead of a Scaleform.
		// 
		// Known components:
		// 19 - MP_RANK_BAR
		// 20 - HUD_DIRECTOR_MODE
		// 
		// This native requires more research - all information can be found inside of 'hud.gfx'. Using a decompiler, the different components are located under "scripts\__Packages\com\rockstargames\gtav\hud\hudComponents" and "scripts\__Packages\com\rockstargames\gtav\Multiplayer".
		public static bool BEGIN_SCALEFORM_SCRIPT_HUD_MOVIE_METHOD(int hudComponent, string methodName) { return Invoke<bool>(0x98C494FD5BDFBFD5, V(hudComponent), V(methodName)); }
		// Push a function from the Scaleform onto the stack
		// 
		public static bool BEGIN_SCALEFORM_MOVIE_METHOD(int scaleform, string methodName) { return Invoke<bool>(0xF6E48914C7A8694E, V(scaleform), V(methodName)); }
		// Starts frontend (pause menu) scaleform movie methods.
		// This can be used when you want to make custom frontend menus, and customize things like images or text in the menus etc.
		// Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER` for header scaleform functions.
		public static bool BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND(string methodName) { return Invoke<bool>(0xAB58C27C2E6123C6, V(methodName)); }
		// Starts frontend (pause menu) scaleform movie methods for header options.
		// Use `BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND` to customize the content inside the frontend menus.
		public static bool BEGIN_SCALEFORM_MOVIE_METHOD_ON_FRONTEND_HEADER(string methodName) { return Invoke<bool>(0xB9449845F73F5E9C, V(methodName)); }
		// Pops and calls the Scaleform function on the stack
		public static void END_SCALEFORM_MOVIE_METHOD() { Invoke(0xC6796A8FFA375E53); }
		public static int END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE() { return Invoke<int>(0xC50AA39A577AF886); }
		// methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
		// Returns true if the return value of a scaleform function is ready to be collected (using GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING or GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT).
		public static bool IS_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_READY(int methodReturn) { return Invoke<bool>(0x768FF8961BA904D6, V(methodReturn)); }
		// methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
		// Used to get a return value from a scaleform function. Returns an int in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING returns a string.
		public static int GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT(int methodReturn) { return Invoke<int>(0x2DE7EFA66B906036, V(methodReturn)); }
		// methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
		public static bool GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_BOOL(int methodReturn) { return Invoke<bool>(0xD80A80346A45D761, V(methodReturn)); }
		// methodReturn: The return value of this native: END_SCALEFORM_MOVIE_METHOD_RETURN_VALUE
		// Used to get a return value from a scaleform function. Returns a string in the same way GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_INT returns an int.
		public static byte* GET_SCALEFORM_MOVIE_METHOD_RETURN_VALUE_STRING(int methodReturn) { return PInvoke<byte>(0xE1E258829A885245, V(methodReturn)); }
		// Pushes an integer for the Scaleform function onto the stack.
		public static void SCALEFORM_MOVIE_METHOD_ADD_PARAM_INT(int value) { Invoke(0xC3D0841A0CC546A6, V(value)); }
		// Pushes a float for the Scaleform function onto the stack.
		public static void SCALEFORM_MOVIE_METHOD_ADD_PARAM_FLOAT(float value) { Invoke(0xD69736AAE04DB51A, V(value)); }
		// Pushes a boolean for the Scaleform function onto the stack.
		public static void SCALEFORM_MOVIE_METHOD_ADD_PARAM_BOOL(bool value) { Invoke(0xC58424BA936EB458, V(value)); }
		// Called prior to adding a text component to the UI. After doing so, GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING is called.
		// 
		// Examples:
		// GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("NUMBER");
		// HUD::ADD_TEXT_COMPONENT_INTEGER(MISC::ABSI(a_1));
		// GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
		// 
		// GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRING");
		// HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(a_2);
		// GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
		// 
		// GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM2");
		// HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
		// HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_4);
		// GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
		// 
		// GRAPHICS::BEGIN_TEXT_COMMAND_SCALEFORM_STRING("STRTNM1");
		// HUD::ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(v_3);
		// GRAPHICS::END_TEXT_COMMAND_SCALEFORM_STRING();
		public static void BEGIN_TEXT_COMMAND_SCALEFORM_STRING(string componentType) { Invoke(0x80338406F3475E55, V(componentType)); }
		public static void END_TEXT_COMMAND_SCALEFORM_STRING() { Invoke(0x362E2D3FE93A9959); }
		// Same as END_TEXT_COMMAND_SCALEFORM_STRING but does not perform HTML conversion for text tokens.
		// 
		// END_TEXT_COMMAND_VIA_SPECIAL_MODIFIABLE_STRING?
		public static void END_TEXT_COMMAND_UNPARSED_SCALEFORM_STRING() { Invoke(0xAE4E8157D9ECF087); }
		// Same as SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING
		// Both SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING / _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 works, but _SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING_2 is usually used for "name" (organisation, players..).
		public static void SCALEFORM_MOVIE_METHOD_ADD_PARAM_LITERAL_STRING(string str) { Invoke(0x77FE3402004CD1B0, V(str)); }
		public static void SCALEFORM_MOVIE_METHOD_ADD_PARAM_TEXTURE_NAME_STRING(string str) { Invoke(0xBA7148484BD90365, V(str)); }
		public static void SCALEFORM_MOVIE_METHOD_ADD_PARAM_PLAYER_NAME_STRING(string str) { Invoke(0xE83A3E3557A56640, V(str)); }
		public static bool DOES_LATEST_BRIEF_STRING_EXIST(int p0) { return Invoke<bool>(0x5E657EF1099EDD65, V(p0)); }
		public static void SCALEFORM_MOVIE_METHOD_ADD_PARAM_LATEST_BRIEF_STRING(int value) { Invoke(0xEC52C631A1831C03, V(value)); }
		public static void REQUEST_SCALEFORM_SCRIPT_HUD_MOVIE(int hudComponent) { Invoke(0x9304881D6F6537EA, V(hudComponent)); }
		public static bool HAS_SCALEFORM_SCRIPT_HUD_MOVIE_LOADED(int hudComponent) { return Invoke<bool>(0xDF6E5987D2B4D140, V(hudComponent)); }
		public static void REMOVE_SCALEFORM_SCRIPT_HUD_MOVIE(int hudComponent) { Invoke(0xF44A5456AC3F4F97, V(hudComponent)); }
		public static bool PASS_KEYBOARD_INPUT_TO_SCALEFORM(int scaleformHandle) { return Invoke<bool>(0xD1C7CB175E012964, V(scaleformHandle)); }
		public static void SET_TV_CHANNEL(int channel) { Invoke(0xBAABBB23EB6E484E, V(channel)); }
		public static int GET_TV_CHANNEL() { return Invoke<int>(0xFC1E275A90D39995); }
		public static void SET_TV_VOLUME(float volume) { Invoke(0x2982BF73F66E9DDC, V(volume)); }
		public static float GET_TV_VOLUME() { return Invoke<float>(0x2170813D3DD8661B); }
		// All calls to this native are preceded by calls to GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER and GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU, respectively.
		// 
		// "act_cinema.ysc", line 1483:
		// HUD::SET_HUD_COMPONENT_POSITION(15, 0.0, -0.0375);
		// HUD::SET_TEXT_RENDER_ID(l_AE);
		// GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
		// GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
		// if (GRAPHICS::IS_TVSHOW_CURRENTLY_PLAYING(${movie_arthouse})) {
		//     GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 0.7375, 1.0, 0.0, 255, 255, 255, 255);
		// } else { 
		//     GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
		// }
		// 
		// "am_mp_property_int.ysc", line 102545:
		// if (ENTITY::DOES_ENTITY_EXIST(a_2._f3)) {
		//     if (HUD::IS_NAMED_RENDERTARGET_LINKED(ENTITY::GET_ENTITY_MODEL(a_2._f3))) {
		//         HUD::SET_TEXT_RENDER_ID(a_2._f1);
		//         GRAPHICS::SET_SCRIPT_GFX_DRAW_ORDER(4);
		//         GRAPHICS::SET_SCRIPT_GFX_DRAW_BEHIND_PAUSEMENU(1);
		//         GRAPHICS::DRAW_TV_CHANNEL(0.5, 0.5, 1.0, 1.0, 0.0, 255, 255, 255, 255);
		//         if (GRAPHICS::GET_TV_CHANNEL() == -1) {
		//             sub_a8fa5(a_2, 1);
		//         } else { 
		//             sub_a8fa5(a_2, 1);
		//             GRAPHICS::ATTACH_TV_AUDIO_TO_ENTITY(a_2._f3);
		//         }
		//         HUD::SET_TEXT_RENDER_ID(HUD::GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID());
		//     }
		// }
		// 
		public static void DRAW_TV_CHANNEL(float xPos, float yPos, float xScale, float yScale, float rotation, int red, int green, int blue, int alpha) { Invoke(0xFDDC2B4ED3C69DF0, V(xPos), V(yPos), V(xScale), V(yScale), V(rotation), V(red), V(green), V(blue), V(alpha)); }
		// Loads specified video sequence into the TV Channel
		// TV_Channel ranges from 0-2
		// VideoSequence can be any of the following:
		// "PL_STD_CNT" CNT Standard Channel
		// "PL_STD_WZL" Weazel Standard Channel
		// "PL_LO_CNT"
		// "PL_LO_WZL"
		// "PL_SP_WORKOUT"
		// "PL_SP_INV" - Jay Norris Assassination Mission Fail
		// "PL_SP_INV_EXP" - Jay Norris Assassination Mission Success
		// "PL_LO_RS" - Righteous Slaughter Ad
		// "PL_LO_RS_CUTSCENE" - Righteous Slaughter Cut-scene
		// "PL_SP_PLSH1_INTRO"
		// "PL_LES1_FAME_OR_SHAME"
		// "PL_STD_WZL_FOS_EP2"
		// "PL_MP_WEAZEL" - Weazel Logo on loop
		// "PL_MP_CCTV" - Generic CCTV loop
		// 
		// Restart:
		// 0=video sequence continues as normal
		// 1=sequence restarts from beginning every time that channel is selected
		// 
		// 
		// The above playlists work as intended, and are commonly used, but there are many more playlists, as seen in `tvplaylists.xml`. A pastebin below outlines all playlists, they will be surronded by the name tag I.E. (<Name>PL_STD_CNT</Name> = PL_STD_CNT).
		// https://pastebin.com/zUzGB6h7
		public static void SET_TV_CHANNEL_PLAYLIST(int tvChannel, string playlistName, bool restart) { Invoke(0xF7B38B8305F1FE8B, V(tvChannel), V(playlistName), V(restart)); }
		public static void SET_TV_CHANNEL_PLAYLIST_AT_HOUR(int tvChannel, string playlistName, int hour) { Invoke(0x2201C576FACAEBE8, V(tvChannel), V(playlistName), V(hour)); }
		public static void _SET_TV_CHANNEL_PLAYLIST_DIRTY(int tvChannel, bool p1) { Invoke(0xEE831F15A8D0D94A, V(tvChannel), V(p1)); }
		public static void CLEAR_TV_CHANNEL_PLAYLIST(int tvChannel) { Invoke(0xBEB3D46BB7F043C0, V(tvChannel)); }
		public static bool IS_PLAYLIST_ON_CHANNEL(int tvChannel, Any p1) { return Invoke<bool>(0x1F710BFF7DAE6261, V(tvChannel), V(p1)); }
		public static bool IS_TVSHOW_CURRENTLY_PLAYING(Hash videoCliphash) { return Invoke<bool>(0x0AD973CA1E077B60, V(videoCliphash)); }
		public static void ENABLE_MOVIE_KEYFRAME_WAIT(bool toggle) { Invoke(0x74C180030FDE4B69, V(toggle)); }
		public static void SET_TV_PLAYER_WATCHING_THIS_FRAME(Any p0) { Invoke(0xD1C55B110E4DF534, V(p0)); }
		public static Hash GET_CURRENT_TV_CLIP_NAMEHASH() { return Invoke<Hash>(0x30432A0118736E00); }
		public static void ENABLE_MOVIE_SUBTITLES(bool toggle) { Invoke(0x873FA65C778AD970, V(toggle)); }
		public static bool UI3DSCENE_IS_AVAILABLE() { return Invoke<bool>(0xD3A10FC7FD8D98CD); }
		// All presets can be found in common\data\ui\uiscenes.meta
		public static bool UI3DSCENE_PUSH_PRESET(string presetName) { return Invoke<bool>(0xF1CEA8A4198D8E9A, V(presetName)); }
		// It's called after UI3DSCENE_IS_AVAILABLE and UI3DSCENE_PUSH_PRESET
		// 
		// presetName was always "CELEBRATION_WINNER"
		// All presets can be found in common\data\ui\uiscenes.meta
		public static bool UI3DSCENE_ASSIGN_PED_TO_SLOT(string presetName, Ped ped, int slot, float posX, float posY, float posZ) { return Invoke<bool>(0x98C4FE6EC34154CA, V(presetName), V(ped), V(slot), V(posX), V(posY), V(posZ)); }
		public static void UI3DSCENE_CLEAR_PATCHED_DATA() { Invoke(0x7A42B2E236E71415); }
		public static void UI3DSCENE_MAKE_PUSHED_PRESET_PERSISTENT(bool toggle) { Invoke(0x108BE26959A9D9BB, V(toggle)); }
		// This native enables/disables the gold putting grid display (https://i.imgur.com/TC6cku6.png).
		// This requires these two natives to be called as well to configure the grid: `TERRAINGRID_SET_PARAMS` and `TERRAINGRID_SET_COLOURS`.
		public static void TERRAINGRID_ACTIVATE(bool toggle) { Invoke(0xA356990E161C9E65, V(toggle)); }
		// This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_COLOURS`.
		// This native configures the location, size, rotation, normal height, and the difference ratio between min, normal and max.
		// 
		// All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
		// 
		// This native renders a box at the given position, with a special shader that renders a grid on world geometry behind it. This box does not have backface culling.
		// The forward args here are a direction vector, something similar to what's returned by GET_ENTITY_FORWARD_VECTOR.
		// normalHeight and heightDiff are used for positioning the color gradient of the grid, colors specified via TERRAINGRID_SET_COLOURS.
		// 
		// Example with box superimposed on the image to demonstrate: https://i.imgur.com/wdqskxd.jpg
		public static void TERRAINGRID_SET_PARAMS(float x, float y, float z, float forwardX, float forwardY, float forwardZ, float sizeX, float sizeY, float sizeZ, float gridScale, float glowIntensity, float normalHeight, float heightDiff) { Invoke(0x1C4FC5752BCD8E48, V(x), V(y), V(z), V(forwardX), V(forwardY), V(forwardZ), V(sizeX), V(sizeY), V(sizeZ), V(gridScale), V(glowIntensity), V(normalHeight), V(heightDiff)); }
		// This native is used along with these two natives: `TERRAINGRID_ACTIVATE` and `TERRAINGRID_SET_PARAMS`.
		// This native sets the colors for the golf putting grid. the 'min...' values are for the lower areas that the grid covers, the 'max...' values are for the higher areas that the grid covers, all remaining values are for the 'normal' ground height.
		// All those natives combined they will output something like this: https://i.imgur.com/TC6cku6.png
		public static void TERRAINGRID_SET_COLOURS(int lowR, int lowG, int lowB, int lowAlpha, int r, int g, int b, int alpha, int highR, int highG, int highB, int highAlpha) { Invoke(0x5CE62918F8D703C7, V(lowR), V(lowG), V(lowB), V(lowAlpha), V(r), V(g), V(b), V(alpha), V(highR), V(highG), V(highB), V(highAlpha)); }
		// duration - is how long to play the effect for in milliseconds. If 0, it plays the default length
		// if loop is true, the effect won't stop until you call ANIMPOSTFX_STOP on it. (only loopable effects)
		// 
		// Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
		public static void ANIMPOSTFX_PLAY(string effectName, int duration, bool looped) { Invoke(0x2206BF9A37B7F724, V(effectName), V(duration), V(looped)); }
		// See ANIMPOSTFX_PLAY
		// 
		// Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
		public static void ANIMPOSTFX_STOP(string effectName) { Invoke(0x068E835A1D0DC0E3, V(effectName)); }
		// See ANIMPOSTFX_PLAY
		// 
		// Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
		public static float ANIMPOSTFX_GET_CURRENT_TIME(string effectName) { return Invoke<float>(0xE35B38A27E8E7179, V(effectName)); }
		// Returns whether the specified effect is active.
		// See ANIMPOSTFX_PLAY
		// 
		// Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
		public static bool ANIMPOSTFX_IS_RUNNING(string effectName) { return Invoke<bool>(0x36AD3E690DA5ACEB, V(effectName)); }
		// Stops ALL currently playing effects.
		public static void ANIMPOSTFX_STOP_ALL() { Invoke(0xB4EDDC19532BFB85); }
		// Stops the effect and sets a value (bool) in its data (+0x199) to false.
		// See ANIMPOSTFX_PLAY
		// 
		// Full list of animpostFX / screen effects by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animPostFxNamesCompact.json
		public static void ANIMPOSTFX_STOP_AND_FLUSH_REQUESTS(string effectName) { Invoke(0xD2209BE128B5418C, V(effectName)); }




		// Initializes the text entry for the the text next to a loading prompt. All natives for building UI texts can be used here
		// 
		// 
		// e.g
		// void StartLoadingMessage(char *text, int spinnerType = 3)
		//   {
		//      BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
		//        ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		//        END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
		//     }
		// /*OR*/
		//  void ShowLoadingMessage(char *text, int spinnerType = 3, int timeMs = 10000)
		//   {
		//      BEGIN_TEXT_COMMAND_BUSYSPINNER_ON("STRING");
		//        ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		//        END_TEXT_COMMAND_BUSYSPINNER_ON(spinnerType);
		//         WAIT(timeMs);
		//      BUSYSPINNER_OFF();
		//  }
		// 
		// 
		// These are some localized strings used in the loading spinner.
		// "PM_WAIT"                   = Please Wait
		// "CELEB_WPLYRS"              = Waiting For Players.
		// "CELL_SPINNER2"             = Scanning storage.
		// "ERROR_CHECKYACHTNAME" = Registering your yacht's name. Please wait.
		// "ERROR_CHECKPROFANITY"   = Checking your text for profanity. Please wait.
		// "FM_COR_AUTOD"                        = Just spinner no text
		// "FM_IHELP_WAT2"                        = Waiting for other players
		// "FM_JIP_WAITO"                            = Game options are being set
		// "FMMC_DOWNLOAD"                    = Downloading
		// "FMMC_PLYLOAD"                         = Loading
		// "FMMC_STARTTRAN"                    = Launching session
		// "HUD_QUITTING"                           =  Quiting session
		// "KILL_STRIP_IDM"                         = Waiting for to accept
		// "MP_SPINLOADING"                      = Loading
		public static void BEGIN_TEXT_COMMAND_BUSYSPINNER_ON(string str) { Invoke(0xABA17D7CE615ADBF, V(str)); }
		// enum eBusySpinnerType
		// {
		// 	BUSY_SPINNER_LEFT,
		// 	BUSY_SPINNER_LEFT_2,
		// 	BUSY_SPINNER_LEFT_3,
		// 	BUSY_SPINNER_SAVE,
		// 	BUSY_SPINNER_RIGHT,
		// };
		public static void END_TEXT_COMMAND_BUSYSPINNER_ON(int busySpinnerType) { Invoke(0xBD12F8228410D9B4, V(busySpinnerType)); }
		// Removes the loading prompt at the bottom right of the screen.
		public static void BUSYSPINNER_OFF() { Invoke(0x10D373323E5B9C0D); }
		public static void PRELOAD_BUSYSPINNER() { Invoke(0xC65AB383CD91DF98); }
		public static bool BUSYSPINNER_IS_ON() { return Invoke<bool>(0xD422FCC5F239A915); }
		public static bool BUSYSPINNER_IS_DISPLAYING() { return Invoke<bool>(0xB2A592B04648A9CB); }
		public static void DISABLE_PAUSEMENU_SPINNER(bool p0) { Invoke(0x9245E81072704B8A, V(p0)); }
		// Shows the cursor on screen for one frame.
		public static void SET_MOUSE_CURSOR_THIS_FRAME() { Invoke(0xAAE7CE1D63167423); }
		// Changes the mouse cursor's sprite. 
		// 1 = Normal
		// 6 = Left Arrow
		// 7 = Right Arrow
		public static void SET_MOUSE_CURSOR_STYLE(int spriteId) { Invoke(0x8DB8CFFD58B62552, V(spriteId)); }
		// Shows/hides the frontend cursor on the pause menu or similar menus.
		// Clicking off and then on the game window will show it again.
		public static void SET_MOUSE_CURSOR_VISIBLE(bool toggle) { Invoke(0x98215325A695E78A, V(toggle)); }
		// Returns TRUE if mouse is hovering above instructional buttons. Works with all buttons gfx, such as popup_warning, pause_menu_instructional_buttons, instructional_buttons, etc. Note: You have to call TOGGLE_MOUSE_BUTTONS on the scaleform if you want this native to work.
		public static bool IS_MOUSE_ROLLED_OVER_INSTRUCTIONAL_BUTTONS() { return Invoke<bool>(0x3D9ACB1EB139E702); }
		public static bool GET_MOUSE_EVENT(int scaleformHandle, Any* p1, Any* p2, Any* p3) { return Invoke<bool>(0x632B2940C67F4EA9, V(scaleformHandle), V(p1), V(p2), V(p3)); }
		public static void THEFEED_ONLY_SHOW_TOOLTIPS(bool toggle) { Invoke(0x6F1554B0CC2089FA, V(toggle)); }
		public static void THEFEED_SET_SCRIPTED_MENU_HEIGHT(float pos) { Invoke(0x55598D21339CB998, V(pos)); }
		// Stops loading screen tips shown by invoking `THEFEED_SHOW`
		public static void THEFEED_HIDE() { Invoke(0x32888337579A5970); }
		// Once called each frame hides all above radar notifications.
		public static void THEFEED_HIDE_THIS_FRAME() { Invoke(0x25F87B30C382FCA7); }
		// Displays loading screen tips, requires `THEFEED_AUTO_POST_GAMETIPS_ON` to be called beforehand.
		public static void THEFEED_SHOW() { Invoke(0x15CFA549788D35EF); }
		public static void THEFEED_FLUSH_QUEUE() { Invoke(0xA8FDB297A8D25FBA); }
		// Removes a notification instantly instead of waiting for it to disappear
		public static void THEFEED_REMOVE_ITEM(int notificationId) { Invoke(0xBE4390CB40B3E627, V(notificationId)); }
		public static void THEFEED_FORCE_RENDER_ON() { Invoke(0xA13C11E1B5C06BFC); }
		// Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `0xADED7F5748ACAFE6` to display those again.
		public static void THEFEED_FORCE_RENDER_OFF() { Invoke(0x583049884A2EEE3C); }
		public static void THEFEED_PAUSE() { Invoke(0xFDB423997FA30340); }
		public static void THEFEED_RESUME() { Invoke(0xE1CD1E48E025E661); }
		public static bool THEFEED_IS_PAUSED() { return Invoke<bool>(0xA9CBFD40B3FA3010); }
		public static void THEFEED_REPORT_LOGO_ON() { Invoke(0xD4438C0564490E63); }
		public static void THEFEED_REPORT_LOGO_OFF() { Invoke(0xB695E2CD0A2DA9EE); }
		// Returns the handle for the notification currently displayed on the screen. Name may be a hash collision, but describes the function accurately.
		public static int THEFEED_GET_LAST_SHOWN_PHONE_ACTIVATABLE_FEED_ID() { return Invoke<int>(0x82352748437638CA); }
		// Enables loading screen tips to be be shown (`THEFEED_SHOW`), blocks other kinds of notifications from being displayed (at least from current script). Call `THEFEED_AUTO_POST_GAMETIPS_OFF` to display those again.
		public static void THEFEED_AUTO_POST_GAMETIPS_ON() { Invoke(0x56C8B608CFD49854); }
		// Displays "normal" notifications again after calling `THEFEED_AUTO_POST_GAMETIPS_ON` (those that were drawn before calling this native too), though those will have a weird offset and stay on screen forever (tested with notifications created from same script).
		public static void THEFEED_AUTO_POST_GAMETIPS_OFF() { Invoke(0xADED7F5748ACAFE6); }
		// From the decompiled scripts:
		// HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(6);
		// HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(184);
		// HUD::THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(190);
		// 
		// sets background color for the next notification
		// 6 = red
		// 184 = green
		// 190 = yellow
		// 
		// Here is a list of some colors that can be used: https://gyazo.com/68bd384455fceb0a85a8729e48216e15
		public static void THEFEED_SET_BACKGROUND_COLOR_FOR_NEXT_POST(int hudColorIndex) { Invoke(0x92F0DA1E27DB96DC, V(hudColorIndex)); }
		public static void THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE(int red, int green, int blue, int alpha) { Invoke(0x17430B918701C342, V(red), V(green), V(blue), V(alpha)); }
		// Related to notification color flashing, setting count to 0 invalidates a `THEFEED_SET_RGBA_PARAMETER_FOR_NEXT_MESSAGE` call for the target notification.
		public static void THEFEED_SET_FLASH_DURATION_PARAMETER_FOR_NEXT_MESSAGE(int count) { Invoke(0x17AD8C9706BDD88A, V(count)); }
		public static void THEFEED_SET_VIBRATE_PARAMETER_FOR_NEXT_MESSAGE(bool toggle) { Invoke(0x4A0C7C9BB10ABB36, V(toggle)); }
		public static void THEFEED_RESET_ALL_PARAMETERS() { Invoke(0xFDD85225B2DEA55E); }
		// Requires manual management of game stream handles (i.e., 0xBE4390CB40B3E627).
		public static void THEFEED_FREEZE_NEXT_POST() { Invoke(0xFDEC055AB549E328); }
		public static void THEFEED_CLEAR_FROZEN_POST() { Invoke(0x80FE4F3AB4E1B62A); }
		public static void THEFEED_SET_SNAP_FEED_ITEM_POSITIONS(bool p0) { Invoke(0xBAE4F9B97CD43B30, V(p0)); }
		// Used in the native scripts to reference "GET_PEDHEADSHOT_TXD_STRING" and "CHAR_DEFAULT".
		public static void THEFEED_UPDATE_ITEM_TEXTURE(string txdString1, string txnString1, string txdString2, string txnString2) { Invoke(0x317EBA71D7543F52, V(txdString1), V(txnString1), V(txdString2), V(txnString2)); }
		// Declares the entry type of a notification, for example "STRING".
		// 
		// int ShowNotification(char *text)
		// {
		// 	BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
		// 	ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		// 	return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
		// }
		public static void BEGIN_TEXT_COMMAND_THEFEED_POST(string text) { Invoke(0x202709F4C58A0424, V(text)); }
		// List of picture names: https://pastebin.com/XdpJVbHz
		// Example result: https://i.imgur.com/SdEZ22m.png
		public static int END_TEXT_COMMAND_THEFEED_POST_STATS(string statTitle, int iconEnum, bool stepVal, int barValue, bool isImportant, string pictureTextureDict, string pictureTextureName) { return Invoke<int>(0x2B7E9A4EAAA93C89, V(statTitle), V(iconEnum), V(stepVal), V(barValue), V(isImportant), V(pictureTextureDict), V(pictureTextureName)); }
		// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
		// 
		// List of picNames: https://pastebin.com/XdpJVbHz
		// 
		// 
		// flash is a bool for fading in.
		// iconTypes:
		// 1 : Chat Box
		// 2 : Email
		// 3 : Add Friend Request
		// 4 : Nothing
		// 5 : Nothing
		// 6 : Nothing
		// 7 : Right Jumping Arrow
		// 8 : RP Icon
		// 9 : $ Icon
		// 
		// "sender" is the very top header. This can be any old string.
		// "subject" is the header under the sender.
		public static int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT(string txdName, string textureName, bool flash, int iconType, string sender, string subject) { return Invoke<int>(0x1CCD9A37359072CF, V(txdName), V(textureName), V(flash), V(iconType), V(sender), V(subject)); }
		// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
		// 
		// Needs more research.
		// 
		// Only one type of usage in the scripts:
		// 
		// HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL("CHAR_ACTING_UP", "CHAR_ACTING_UP", 0, 0, "DI_FEED_CHAR", a_0);
		public static int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_SUBTITLE_LABEL(string txdName, string textureName, bool flash, int iconType, string sender, string subject) { return Invoke<int>(0xC6F580E4C94926AC, V(txdName), V(textureName), V(flash), V(iconType), V(sender), V(subject)); }
		// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
		// 
		// NOTE: 'duration' is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
		// 
		// Example, only occurrence in the scripts:
		// v_8 = HUD::END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 0, 0, &v_9, "", a_5);
		public static int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_TU(string txdName, string textureName, bool flash, int iconType, string sender, string subject, float duration) { return Invoke<int>(0x1E6611149DB3DB6B, V(txdName), V(textureName), V(flash), V(iconType), V(sender), V(subject), V(duration)); }
		// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
		// 
		// List of picNames https://pastebin.com/XdpJVbHz
		// 
		// flash is a bool for fading in.
		// iconTypes:
		// 1 : Chat Box
		// 2 : Email
		// 3 : Add Friend Request
		// 4 : Nothing
		// 5 : Nothing
		// 6 : Nothing
		// 7 : Right Jumping Arrow
		// 8 : RP Icon
		// 9 : $ Icon
		// 
		// "sender" is the very top header. This can be any old string.
		// "subject" is the header under the sender.
		// "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
		// "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
		public static int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG(string txdName, string textureName, bool flash, int iconType, string sender, string subject, float duration, string clanTag) { return Invoke<int>(0x5CBF7BADE20DB93E, V(txdName), V(textureName), V(flash), V(iconType), V(sender), V(subject), V(duration), V(clanTag)); }
		// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
		// 
		// List of picNames:  https://pastebin.com/XdpJVbHz
		// 
		// flash is a bool for fading in.
		// iconTypes:
		// 1 : Chat Box
		// 2 : Email
		// 3 : Add Friend Request
		// 4 : Nothing
		// 5 : Nothing
		// 6 : Nothing
		// 7 : Right Jumping Arrow
		// 8 : RP Icon
		// 9 : $ Icon
		// 
		// "sender" is the very top header. This can be any old string.
		// "subject" is the header under the sender.
		// "duration" is a multiplier, so 1.0 is normal, 2.0 is twice as long (very slow), and 0.5 is half as long.
		// "clanTag" shows a crew tag in the "sender" header, after the text. You need to use 3 underscores as padding. Maximum length of this field seems to be 7. (e.g. "MK" becomes "___MK", "ACE" becomes "___ACE", etc.)
		// iconType2 is a mirror of iconType. It shows in the "subject" line, right under the original iconType.
		// 
		// 
		// int IconNotification(char *text, char *text2, char *Subject)
		// {
		//     BEGIN_TEXT_COMMAND_THEFEED_POST("STRING");
		//  ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		//    _SET_NOTIFICATION_MESSAGE_CLAN_TAG_2("CHAR_SOCIAL_CLUB", "CHAR_SOCIAL_CLUB", 1, 7, text2, Subject, 1.0f, "__EXAMPLE", 7);
		//    return END_TEXT_COMMAND_THEFEED_POST_TICKER(1, 1);
		// }
		public static int END_TEXT_COMMAND_THEFEED_POST_MESSAGETEXT_WITH_CREW_TAG_AND_ADDITIONAL_ICON(string txdName, string textureName, bool flash, int iconType1, string sender, string subject, float duration, string clanTag, int iconType2, int p9) { return Invoke<int>(0x531B84E7DA981FB6, V(txdName), V(textureName), V(flash), V(iconType1), V(sender), V(subject), V(duration), V(clanTag), V(iconType2), V(p9)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_TICKER(bool blink, bool p1) { return Invoke<int>(0x2ED7843F8F801023, V(blink), V(p1)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_TICKER_FORCED(bool blink, bool p1) { return Invoke<int>(0x44FA03975424A0EE, V(blink), V(p1)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_TICKER_WITH_TOKENS(bool blink, bool p1) { return Invoke<int>(0x378E809BF61EC840, V(blink), V(p1)); }
		// Shows an "award" notification above the minimap, example: https://i.imgur.com/e2DNaKX.png
		// Example:
		// 
		// HUD::BEGIN_TEXT_COMMAND_THEFEED_POST("HUNT");
		// HUD::END_TEXT_COMMAND_THEFEED_POST_AWARD("Hunting", "Hunting_Gold_128", 0, 109, "HUD_MED_UNLKED");
		public static int END_TEXT_COMMAND_THEFEED_POST_AWARD(string textureDict, string textureName, int rpBonus, int colorOverlay, string titleLabel) { return Invoke<int>(0xAA295B6F28BD587D, V(textureDict), V(textureName), V(rpBonus), V(colorOverlay), V(titleLabel)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_CREWTAG(bool p0, bool p1, int* p2, int p3, bool isLeader, bool unk0, int clanDesc, int R, int G, int B) { return Invoke<int>(0x97C9E4E7024A8F2C, V(p0), V(p1), V(p2), V(p3), V(isLeader), V(unk0), V(clanDesc), V(R), V(G), V(B)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_CREWTAG_WITH_GAME_NAME(bool p0, bool p1, int* p2, int p3, bool isLeader, bool unk0, int clanDesc, string playerName, int R, int G, int B) { return Invoke<int>(0x137BC35589E34E1E, V(p0), V(p1), V(p2), V(p3), V(isLeader), V(unk0), V(clanDesc), V(playerName), V(R), V(G), V(B)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_UNLOCK(string gxtLabel1, int p1, string gxtLabel2) { return Invoke<int>(0x33EE12743CCD6343, V(gxtLabel1), V(p1), V(gxtLabel2)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU(string gxtLabel1, int p1, string gxtLabel2, int p3) { return Invoke<int>(0xC8F3AAF93D0600BF, V(gxtLabel1), V(p1), V(gxtLabel2), V(p3)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_UNLOCK_TU_WITH_COLOR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { return Invoke<int>(0x7AE0589093A2E088, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_MPTICKER(bool blink, bool p1) { return Invoke<int>(0xF020C96915705B3A, V(blink), V(p1)); }
		public static int END_TEXT_COMMAND_THEFEED_POST_CREW_RANKUP_WITH_LITERAL_FLAG(string p0, string p1, string p2, bool p3, bool p4) { return Invoke<int>(0x8EFCCF6EC66D85E4, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		// This function can show pictures of every texture that can be requested by REQUEST_STREAMED_TEXTURE_DICT.
		// 
		// List of picNames: https://pastebin.com/XdpJVbHz
		// HUD colors and their values: https://pastebin.com/d9aHPbXN
		// 
		// Shows a deathmatch score above the minimap, example: https://i.imgur.com/YmoMklG.png
		public static int END_TEXT_COMMAND_THEFEED_POST_VERSUS_TU(string txdName1, string textureName1, int count1, string txdName2, string textureName2, int count2, int hudColor1, int hudColor2) { return Invoke<int>(0xB6871B0555B02996, V(txdName1), V(textureName1), V(count1), V(txdName2), V(textureName2), V(count2), V(hudColor1), V(hudColor2)); }
		// returns a notification handle, prints out a notification like below:
		// type range: 0 - 2
		// if you set type to 1, image goes from 0 - 39 - Xbox you can add text to
		// 
		// example: 
		// HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, 20, "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
		// - https://imgur.com/lGBPCz3
		public static int END_TEXT_COMMAND_THEFEED_POST_REPLAY(int type, int image, string text) { return Invoke<int>(0xD202B92CBF1D816F, V(type), V(image), V(text)); }
		// returns a notification handle, prints out a notification like below:
		// type range: 0 - 2
		// if you set type to 1, button accepts "~INPUT_SOMETHING~"
		// 
		// example:
		// HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1, "~INPUT_TALK~", "Who you trynna get crazy with, ese? Don't you know I'm LOCO?!");
		// - https://imgur.com/UPy0Ial
		// 
		// 
		// Examples from the scripts:
		// l_D1[1/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
		// l_D1[2/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_SAVE_REPLAY_CLIP~","");
		// l_D1[1/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING~","");
		// l_D1[2/*1*/]=HUD::END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(1,"~INPUT_REPLAY_START_STOP_RECORDING_SECONDARY~","");
		// 
		public static int END_TEXT_COMMAND_THEFEED_POST_REPLAY_INPUT(int type, string button, string text) { return Invoke<int>(0xDD6CB2CCE7C2735C, V(type), V(button), V(text)); }
		// void ShowSubtitle(const char *text)
		// {
		//   BEGIN_TEXT_COMMAND_PRINT("STRING");
		//  ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		//    END_TEXT_COMMAND_PRINT(2000, true);
		// }
		public static void BEGIN_TEXT_COMMAND_PRINT(string GxtEntry) { Invoke(0xB87A37EEB7FAA67D, V(GxtEntry)); }
		// Draws the subtitle at middle center of the screen.
		// 
		// int duration = time in milliseconds to show text on screen before disappearing
		// 
		// drawImmediately = If true, the text will be drawn immediately, if false, the text will be drawn after the previous subtitle has finished
		// 
		// Used to be known as _DRAW_SUBTITLE_TIMED
		public static void END_TEXT_COMMAND_PRINT(int duration, bool drawImmediately) { Invoke(0x9D77056A530643F6, V(duration), V(drawImmediately)); }
		// nothin doin. 
		// 
		// bool Message(string text)
		//    {
		//      BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED("STRING");
		//       ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		//        return END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED();
		//    }
		public static void BEGIN_TEXT_COMMAND_IS_MESSAGE_DISPLAYED(string text) { Invoke(0x853648FD1063A213, V(text)); }
		public static bool END_TEXT_COMMAND_IS_MESSAGE_DISPLAYED() { return Invoke<bool>(0x8A9BA1AB3E237613); }
		// The following were found in the decompiled script files:
		// STRING, TWOSTRINGS, NUMBER, PERCENTAGE, FO_TWO_NUM, ESMINDOLLA, ESDOLLA, MTPHPER_XPNO, AHD_DIST, CMOD_STAT_0, CMOD_STAT_1, CMOD_STAT_2, CMOD_STAT_3, DFLT_MNU_OPT, F3A_TRAFDEST, ES_HELP_SOC3
		// 
		// ESDOLLA - cash
		// ESMINDOLLA - cash (negative)
		// 
		// Used to be known as _SET_TEXT_ENTRY
		public static void BEGIN_TEXT_COMMAND_DISPLAY_TEXT(string text) { Invoke(0x25FBB336DF1804CB, V(text)); }
		// After applying the properties to the text (See HUD::SET_TEXT_), this will draw the text in the applied position. Also 0.0f < x, y < 1.0f, percentage of the axis.
		// 
		// Used to be known as _DRAW_TEXT
		public static void END_TEXT_COMMAND_DISPLAY_TEXT(float x, float y) { Invoke(0xCD015E5BB0D96A57, V(x), V(y)); }
		public static void BEGIN_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(string text) { Invoke(0x54CE8AC98E120CAB, V(text)); }
		public static float END_TEXT_COMMAND_GET_SCREEN_WIDTH_OF_DISPLAY_TEXT(bool p0) { return Invoke<float>(0x85F061DA64ED2F67, V(p0)); }
		// int GetLineCount(char *text, float x, float y)
		//     {
		//      BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING("STRING");
		//                 ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		//       return BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(x, y);
		//     }
		public static void BEGIN_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(string entry) { Invoke(0x521FB041D93DD0E4, V(entry)); }
		// Determines how many lines the text string will use when drawn on screen. 
		// Must use 0x521FB041D93DD0E4 for setting up
		public static int END_TEXT_COMMAND_GET_NUMBER_OF_LINES_FOR_STRING(float x, float y) { return Invoke<int>(0x9040DFB09BE75706, V(x), V(y)); }
		// Used to be known as _SET_TEXT_COMPONENT_FORMAT
		public static void BEGIN_TEXT_COMMAND_DISPLAY_HELP(string inputType) { Invoke(0x8509B634FBE7DA11, V(inputType)); }
		// shape goes from -1 to 50 (may be more).
		// p0 is always 0.
		// 
		// Example:
		// void FloatingHelpText(string text)
		// {
		//     BEGIN_TEXT_COMMAND_DISPLAY_HELP("STRING");
		//   ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(text);
		//    END_TEXT_COMMAND_DISPLAY_HELP (0, 0, 1, -1);
		// }
		// 
		// Image:
		// - imgbin.org/images/26209.jpg
		// 
		// more inputs/icons:
		// - https://pastebin.com/nqNYWMSB
		// 
		// Used to be known as _DISPLAY_HELP_TEXT_FROM_STRING_LABEL
		public static void END_TEXT_COMMAND_DISPLAY_HELP(int p0, bool loop, bool beep, int shape) { Invoke(0x238FFE5C7B0498A6, V(p0), V(loop), V(beep), V(shape)); }
		// bool IsContextActive(char *ctx)
		//     {
		//      BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(ctx);
		//      return END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(0);
		//   }
		public static void BEGIN_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(string labelName) { Invoke(0x0A24DA3A41B718F5, V(labelName)); }
		public static bool END_TEXT_COMMAND_IS_THIS_HELP_MESSAGE_BEING_DISPLAYED(int p0) { return Invoke<bool>(0x10BDDBFC529428DD, V(p0)); }
		// Starts a text command to change the name of a blip displayed in the pause menu.
		// This should be paired with `END_TEXT_COMMAND_SET_BLIP_NAME`, once adding all required text components.
		// Example:
		// 
		// HUD::BEGIN_TEXT_COMMAND_SET_BLIP_NAME("STRING");
		// HUD::ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME("Name");
		// HUD::END_TEXT_COMMAND_SET_BLIP_NAME(blip);
		public static void BEGIN_TEXT_COMMAND_SET_BLIP_NAME(string textLabel) { Invoke(0xF9113A30DE5C6670, V(textLabel)); }
		// Finalizes a text command started with BEGIN_TEXT_COMMAND_SET_BLIP_NAME, setting the name of the specified blip.
		public static void END_TEXT_COMMAND_SET_BLIP_NAME(Blip blip) { Invoke(0xBC38B49BCB83BC9B, V(blip)); }
		public static void BEGIN_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(string p0) { Invoke(0x23D69E0465570028, V(p0)); }
		public static void END_TEXT_COMMAND_ADD_DIRECTLY_TO_PREVIOUS_BRIEFS(bool p0) { Invoke(0xCFDBDF5AE59BA0F4, V(p0)); }
		// clears a print text command with this text
		public static void BEGIN_TEXT_COMMAND_CLEAR_PRINT(string text) { Invoke(0xE124FA80A759019C, V(text)); }
		public static void END_TEXT_COMMAND_CLEAR_PRINT() { Invoke(0xFCC75460ABA29378); }
		public static void BEGIN_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(string gxtEntry) { Invoke(0x8F9EE5687F8EECCD, V(gxtEntry)); }
		public static void END_TEXT_COMMAND_OVERRIDE_BUTTON_TEXT(int p0) { Invoke(0xA86911979638106F, V(p0)); }
		public static void ADD_TEXT_COMPONENT_INTEGER(int value) { Invoke(0x03B504CF259931BC, V(value)); }
		public static void ADD_TEXT_COMPONENT_FLOAT(float value, int decimalPlaces) { Invoke(0xE7DCB5B874BCD96E, V(value), V(decimalPlaces)); }
		public static void ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL(string labelName) { Invoke(0xC63CD5D2920ACBE7, V(labelName)); }
		// It adds the localized text of the specified GXT entry name. Eg. if the argument is GET_HASH_KEY("ES_HELP"), adds "Continue". Just uses a text labels hash key
		public static void ADD_TEXT_COMPONENT_SUBSTRING_TEXT_LABEL_HASH_KEY(Hash gxtEntryHash) { Invoke(0x17299B63C7683A2B, V(gxtEntryHash)); }
		public static void ADD_TEXT_COMPONENT_SUBSTRING_BLIP_NAME(Blip blip) { Invoke(0x80EAD8E2E1D5D52E, V(blip)); }
		public static void ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(string text) { Invoke(0x6C188BE134E074AA, V(text)); }
		public static void ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME(byte* text) { Invoke(0x6C188BE134E074AA, V(text)); }
		// Adds a timer (e.g. "00:00:00:000"). The appearance of the timer depends on the flags, which needs more research.
		public static void ADD_TEXT_COMPONENT_SUBSTRING_TIME(int timestamp, int flags) { Invoke(0x1115F16B8AB9E8BF, V(timestamp), V(flags)); }
		public static void ADD_TEXT_COMPONENT_FORMATTED_INTEGER(int value, bool commaSeparated) { Invoke(0x0E4C749FF9DE9CC4, V(value), V(commaSeparated)); }
		// p1 was always -1
		public static void ADD_TEXT_COMPONENT_SUBSTRING_PHONE_NUMBER(string p0, int p1) { Invoke(0x761B77454205A61D, V(p0), V(p1)); }
		// This native (along with ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY and ADD_TEXT_COMPONENT_SUBSTRING_PLAYER_NAME) do not actually filter anything. They simply add the provided text (as of 944)
		public static void ADD_TEXT_COMPONENT_SUBSTRING_WEBSITE(string website) { Invoke(0x94CF4AC034C9C986, V(website)); }
		public static void ADD_TEXT_COMPONENT_SUBSTRING_KEYBOARD_DISPLAY(string str) { Invoke(0x5F68520888E69014, V(str)); }
		public static void SET_COLOUR_OF_NEXT_TEXT_COMPONENT(int hudColor) { Invoke(0x39BBF623FC803EAC, V(hudColor)); }
		// Returns a substring of a specified length starting at a specified position.
		// 
		// Example:
		// // Get "STRING" text from "MY_STRING"
		// subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME("MY_STRING", 3, 6);
		public static byte* GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME(string text, int position, int length) { return PInvoke<byte>(0x169BD9382084C8C0, V(text), V(position), V(length)); }
		// Returns a substring of a specified length starting at a specified position. The result is guaranteed not to exceed the specified max length.
		// 
		// NOTE: The 'maxLength' parameter might actually be the size of the buffer that is returned. More research is needed. -CL69
		// 
		// Example:
		// // Condensed example of how Rockstar uses this function
		// strLen = HUD::GET_LENGTH_OF_LITERAL_STRING(MISC::GET_ONSCREEN_KEYBOARD_RESULT());
		// subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(MISC::GET_ONSCREEN_KEYBOARD_RESULT(), 0, strLen, 63);
		// 
		// --
		// 
		// "fm_race_creator.ysc", line 85115:
		// // parameters modified for clarity
		// bool sub_8e5aa(char *text, int length) {
		//     for (i = 0; i <= (length - 2); i += 1) {
		//         if (!MISC::ARE_STRINGS_EQUAL(HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(text, i, i + 1, 1), " ")) {
		//             return FALSE;
		//         }
		//     }
		//     return TRUE;
		// }
		public static byte* GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_WITH_BYTE_LIMIT(string text, int position, int length, int maxLength) { return PInvoke<byte>(0xB2798643312205C5, V(text), V(position), V(length), V(maxLength)); }
		// Returns a substring that is between two specified positions. The length of the string will be calculated using (endPosition - startPosition).
		// 
		// Example:
		// // Get "STRING" text from "MY_STRING"
		// subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 9);
		// // Overflows are possibly replaced with underscores (needs verification)
		// subStr = HUD::GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES("MY_STRING", 3, 10); // "STRING_"?
		public static byte* GET_CHARACTER_FROM_AUDIO_CONVERSATION_FILENAME_BYTES(string text, int startPosition, int endPosition) { return PInvoke<byte>(0xCE94AEBA5D82908A, V(text), V(startPosition), V(endPosition)); }
		// Gets a localized string literal from a label name. Can be used for output of e.g. VEHICLE::GET_LIVERY_NAME. To check if a GXT label can be localized with this, HUD::DOES_TEXT_LABEL_EXIST can be used.
		public static byte* GET_FILENAME_FOR_AUDIO_CONVERSATION(string labelName) { return PInvoke<byte>(0x7B5280EBA9840C72, V(labelName)); }
		public static void CLEAR_PRINTS() { Invoke(0xCC33FA791322B9D9); }
		public static void CLEAR_BRIEF() { Invoke(0x9D292F73ADBD9313); }
		public static void CLEAR_ALL_HELP_MESSAGES() { Invoke(0x6178F68A87A4D3A0); }
		// p0: found arguments in the b617d scripts: https://pastebin.com/X5akCN7z
		public static void CLEAR_THIS_PRINT(string p0) { Invoke(0xCF708001E1E536DD, V(p0)); }
		public static void CLEAR_SMALL_PRINTS() { Invoke(0x2CEA2839313C09AC); }
		public static bool DOES_TEXT_BLOCK_EXIST(string gxt) { return Invoke<bool>(0x1C7302E725259789, V(gxt)); }
		// Request a gxt into the passed slot.
		public static void REQUEST_ADDITIONAL_TEXT(string gxt, int slot) { Invoke(0x71A78003C8E71424, V(gxt), V(slot)); }
		public static void REQUEST_ADDITIONAL_TEXT_FOR_DLC(string gxt, int slot) { Invoke(0x6009F9F1AE90D8A6, V(gxt), V(slot)); }
		public static bool HAS_ADDITIONAL_TEXT_LOADED(int slot) { return Invoke<bool>(0x02245FE4BED318B8, V(slot)); }
		public static void CLEAR_ADDITIONAL_TEXT(int p0, bool p1) { Invoke(0x2A179DF17CCF04CD, V(p0), V(p1)); }
		public static bool IS_STREAMING_ADDITIONAL_TEXT(int p0) { return Invoke<bool>(0x8B6817B71B85EBF0, V(p0)); }
		// Checks if the specified gxt has loaded into the passed slot.
		public static bool HAS_THIS_ADDITIONAL_TEXT_LOADED(string gxt, int slot) { return Invoke<bool>(0xADBF060E2B30C5BC, V(gxt), V(slot)); }
		public static bool IS_MESSAGE_BEING_DISPLAYED() { return Invoke<bool>(0x7984C03AA5CC2F41); }
		// Checks if the passed gxt name exists in the game files.
		public static bool DOES_TEXT_LABEL_EXIST(string gxt) { return Invoke<bool>(0xAC09CA973C564252, V(gxt)); }
		public static byte* GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING(string str, int length) { return PInvoke<byte>(0x98C3CF913D895111, V(str), V(length)); }
		// Returns the string length of the string from the gxt string .
		public static int GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL(string gxt) { return Invoke<int>(0x801BD273D3A23F74, V(gxt)); }
		// Returns the length of the string passed (much like strlen).
		public static int GET_LENGTH_OF_LITERAL_STRING(string str) { return Invoke<int>(0xF030907CCBB8A9FD, V(str)); }
		public static int GET_LENGTH_OF_LITERAL_STRING_IN_BYTES(string str) { return Invoke<int>(0x43E4111189E54F0E, V(str)); }
		// This functions converts the hash of a street name into a readable string.
		// 
		// For how to get the hashes, see PATHFIND::GET_STREET_NAME_AT_COORD.
		public static byte* GET_STREET_NAME_FROM_HASH_KEY(Hash hash) { return PInvoke<byte>(0xD0EF8A959B8A4CB9, V(hash)); }
		public static bool IS_HUD_PREFERENCE_SWITCHED_ON() { return Invoke<bool>(0x1930DFA731813EC4); }
		public static bool IS_RADAR_PREFERENCE_SWITCHED_ON() { return Invoke<bool>(0x9EB6522EA68F22FE); }
		public static bool IS_SUBTITLE_PREFERENCE_SWITCHED_ON() { return Invoke<bool>(0xAD6DACA4BA53E0A4); }
		// If Hud should be displayed
		public static void DISPLAY_HUD(bool toggle) { Invoke(0xA6294919E56FF02A, V(toggle)); }
		// Enables drawing some hud components, such as help labels, this frame, when the player is dead.
		public static void DISPLAY_HUD_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME() { Invoke(0x7669F9E39DC17063); }
		public static void DISPLAY_HUD_WHEN_PAUSED_THIS_FRAME() { Invoke(0x402F9ED62087E898); }
		// If Minimap / Radar should be displayed.
		public static void DISPLAY_RADAR(bool toggle) { Invoke(0xA0EBB943C300E693, V(toggle)); }
		// Setter for GET_FAKE_SPECTATOR_MODE
		public static void SET_FAKE_SPECTATOR_MODE(bool toggle) { Invoke(0xCD74233600C4EA6B, V(toggle)); }
		// Getter for SET_FAKE_SPECTATOR_MODE
		public static bool GET_FAKE_SPECTATOR_MODE() { return Invoke<bool>(0xC2D2AD9EAAE265B8); }
		public static bool IS_HUD_HIDDEN() { return Invoke<bool>(0xA86478C6958735C5); }
		public static bool IS_RADAR_HIDDEN() { return Invoke<bool>(0x157F93B036700462); }
		public static bool IS_MINIMAP_RENDERING() { return Invoke<bool>(0xAF754F20EB5CD51A); }
		public static void USE_VEHICLE_TARGETING_RETICULE(Any p0) { Invoke(0x0C698D8F099174C7, V(p0)); }
		public static void _USE_VEHICLE_TARGETING_RETICULE_ON_VEHICLES(bool enable) { Invoke(0x1BC0EA2912708625, V(enable)); }
		public static void ADD_VALID_VEHICLE_HIT_HASH(Any p0) { Invoke(0xE4C3B169876D33D7, V(p0)); }
		public static void CLEAR_VALID_VEHICLE_HIT_HASHES() { Invoke(0xEB81A3DADD503187); }
		// Enable / disable showing route for the Blip-obj.
		public static void SET_BLIP_ROUTE(Blip blip, bool enabled) { Invoke(0x4F7D8A9BFB0B43E9, V(blip), V(enabled)); }
		public static void CLEAR_ALL_BLIP_ROUTES() { Invoke(0xD12882D3FF82BF11); }
		public static void SET_BLIP_ROUTE_COLOUR(Blip blip, int colour) { Invoke(0x837155CD2F63DA09, V(blip), V(colour)); }
		public static void SET_FORCE_SHOW_GPS(bool toggle) { Invoke(0x2790F4B17D098E26, V(toggle)); }
		public static void SET_USE_SET_DESTINATION_IN_PAUSE_MAP(bool toggle) { Invoke(0x6CDD58146A436083, V(toggle)); }
		public static void SET_BLOCK_WANTED_FLASH(bool disabled) { Invoke(0xD1942374085C8469, V(disabled)); }
		public static void ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS(bool p0) { Invoke(0x60296AF4BA14ABC5, V(p0)); }
		public static void FORCE_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS_LIST(int p0) { Invoke(0x57D760D55F54E071, V(p0)); }
		// zoom ranges from 0 to 90f in R* Scripts
		public static void SET_RADAR_ZOOM_PRECISE(float zoom) { Invoke(0xBD12C5EEE184C337, V(zoom)); }
		// zoomLevel ranges from 0 to 1400 in R* Scripts
		public static void SET_RADAR_ZOOM(int zoomLevel) { Invoke(0x096EF57A0C999BBA, V(zoomLevel)); }
		public static void SET_RADAR_ZOOM_TO_BLIP(Blip blip, float zoom) { Invoke(0xF98E4B3E56AFC7B1, V(blip), V(zoom)); }
		public static void SET_RADAR_ZOOM_TO_DISTANCE(float zoom) { Invoke(0xCB7CC0D58405AD41, V(zoom)); }
		// Does nothing (it's a nullsub).
		public static void UPDATE_RADAR_ZOOM_TO_BLIP() { Invoke(0xD2049635DEB9C375); }
		public static void GET_HUD_COLOUR(int hudColorIndex, int* r, int* g, int* b, int* a) { Invoke(0x7C9C91AB74A0360F, V(hudColorIndex), V(r), V(g), V(b), V(a)); }
		// Sets the color of HUD_COLOUR_SCRIPT_VARIABLE
		public static void SET_SCRIPT_VARIABLE_HUD_COLOUR(int r, int g, int b, int a) { Invoke(0xD68A5FF8A3A89874, V(r), V(g), V(b), V(a)); }
		// Sets the color of HUD_COLOUR_SCRIPT_VARIABLE_2
		public static void SET_SECOND_SCRIPT_VARIABLE_HUD_COLOUR(int r, int g, int b, int a) { Invoke(0x16A304E6CB2BFAB9, V(r), V(g), V(b), V(a)); }
		// makes hudColorIndex2 color into hudColorIndex color
		public static void REPLACE_HUD_COLOUR(int hudColorIndex, int hudColorIndex2) { Invoke(0x1CCC708F0F850613, V(hudColorIndex), V(hudColorIndex2)); }
		public static void REPLACE_HUD_COLOUR_WITH_RGBA(int hudColorIndex, int r, int g, int b, int a) { Invoke(0xF314CF4F0211894E, V(hudColorIndex), V(r), V(g), V(b), V(a)); }
		public static void SET_ABILITY_BAR_VISIBILITY(bool visible) { Invoke(0x1DFEDD15019315A9, V(visible)); }
		public static void SET_ALLOW_ABILITY_BAR(bool toggle) { Invoke(0x889329C80FE5963C, V(toggle)); }
		public static void FLASH_ABILITY_BAR(int millisecondsToFlash) { Invoke(0x02CFBA0C9E9275CE, V(millisecondsToFlash)); }
		public static void SET_ABILITY_BAR_VALUE(float p0, float p1) { Invoke(0x9969599CCFF5D85E, V(p0), V(p1)); }
		public static void FLASH_WANTED_DISPLAY(bool p0) { Invoke(0xA18AFB39081B6A1F, V(p0)); }
		public static void FORCE_OFF_WANTED_STAR_FLASH(bool toggle) { Invoke(0xBA8D65C1C65702E5, V(toggle)); }
		public static void SET_CUSTOM_MP_HUD_COLOR(int hudColorId) { Invoke(0x2ACCB195F3CCD9DE, V(hudColorId)); }
		// This gets the height of the FONT and not the total text. You need to get the number of lines your text uses, and get the height of a newline (I'm using a smaller value) to get the total text height.
		public static float GET_RENDERED_CHARACTER_HEIGHT(float size, int font) { return Invoke<float>(0xDB88A37483346780, V(size), V(font)); }
		// Size range : 0F to 1.0F
		// p0 is unknown and doesn't seem to have an effect, yet in the game scripts it changes to 1.0F sometimes.
		public static void SET_TEXT_SCALE(float scale, float size) { Invoke(0x07C837F9A01C34C9, V(scale), V(size)); }
		// colors you input not same as you think?
		// A: for some reason its R B G A
		public static void SET_TEXT_COLOR(int red, int green, int blue, int alpha) { Invoke(0xBE6B23FFA53FB442, V(red), V(green), V(blue), V(alpha)); }
		public static void SET_TEXT_CENTRE(bool align) { Invoke(0xC02F4DBFB51D988B, V(align)); }
		public static void SET_TEXT_RIGHT_JUSTIFY(bool toggle) { Invoke(0x6B3C4650BC8BEE47, V(toggle)); }
		// Types -
		// 0: Center-Justify
		// 1: Left-Justify
		// 2: Right-Justify
		// 
		// Right-Justify requires SET_TEXT_WRAP, otherwise it will draw to the far right of the screen
		public static void SET_TEXT_JUSTIFICATION(int justifyType) { Invoke(0x4E096588B13FFECA, V(justifyType)); }
		public static void SET_TEXT_LINE_HEIGHT_MULT(float lineHeightMult) { Invoke(0x9F4624F76E6953D1, V(lineHeightMult)); }
		// It sets the text in a specified box and wraps the text if it exceeds the boundries. Both values are for X axis. Useful when positioning text set to center or aligned to the right.
		// 
		// start - left boundry on screen position (0.0 - 1.0)
		// end - right boundry on screen position (0.0 - 1.0)
		public static void SET_TEXT_WRAP(float start, float end) { Invoke(0x63145D9C883A1A70, V(start), V(end)); }
		public static void SET_TEXT_LEADING(int p0) { Invoke(0xA50ABC31E3CDFAFF, V(p0)); }
		// This native does absolutely nothing, just a nullsub
		public static void SET_TEXT_PROPORTIONAL(bool p0) { Invoke(0x038C1F517D7FDCF8, V(p0)); }
		// fonts that mess up your text where made for number values/misc stuff
		public static void SET_TEXT_FONT(int fontType) { Invoke(0x66E0276CC5F6B9DA, V(fontType)); }
		public static void SET_TEXT_DROP_SHADOW() { Invoke(0x1CA3E9EAC9D93E5E); }
		// distance - shadow distance in pixels, both horizontal and vertical
		// r, g, b, a - color
		public static void SET_TEXT_DROPSHADOW(int distance, int r, int g, int b, int a) { Invoke(0x465C84BC39F1C351, V(distance), V(r), V(g), V(b), V(a)); }
		public static void SET_TEXT_OUTLINE() { Invoke(0x2513DFB0FB8400FE); }
		// This native does absolutely nothing, just a nullsub
		public static void SET_TEXT_EDGE(int p0, int r, int g, int b, int a) { Invoke(0x441603240D202FA6, V(p0), V(r), V(g), V(b), V(a)); }
		public static void SET_TEXT_RENDER_ID(int renderId) { Invoke(0x5F15302936E07111, V(renderId)); }
		// This function is hard-coded to always return 1.
		public static int GET_DEFAULT_SCRIPT_RENDERTARGET_RENDER_ID() { return Invoke<int>(0x52F0982D7FD156B6); }
		public static bool REGISTER_NAMED_RENDERTARGET(string name, bool p1) { return Invoke<bool>(0x57D9C12635E25CE3, V(name), V(p1)); }
		public static bool IS_NAMED_RENDERTARGET_REGISTERED(string name) { return Invoke<bool>(0x78DCDC15C9F116B4, V(name)); }
		public static bool RELEASE_NAMED_RENDERTARGET(string name) { return Invoke<bool>(0xE9F6FFE837354DD4, V(name)); }
		public static void LINK_NAMED_RENDERTARGET(Hash modelHash) { Invoke(0xF6C09E276AEB3F2D, V(modelHash)); }
		public static int GET_NAMED_RENDERTARGET_RENDER_ID(string name) { return Invoke<int>(0x1A6478B61C6BDC3B, V(name)); }
		public static bool IS_NAMED_RENDERTARGET_LINKED(Hash modelHash) { return Invoke<bool>(0x113750538FA31298, V(modelHash)); }
		public static void CLEAR_HELP(bool toggle) { Invoke(0x8DFCED7A656F8802, V(toggle)); }
		public static bool IS_HELP_MESSAGE_ON_SCREEN() { return Invoke<bool>(0xDAD37F45428801AE); }
		public static bool HAS_SCRIPT_HIDDEN_HELP_THIS_FRAME() { return Invoke<bool>(0x214CD562A939246A); }
		public static bool IS_HELP_MESSAGE_BEING_DISPLAYED() { return Invoke<bool>(0x4D79439A6B55AC67); }
		public static bool IS_HELP_MESSAGE_FADING_OUT() { return Invoke<bool>(0x327EDEEEAC55C369); }
		public static void SET_HELP_MESSAGE_STYLE(int style, int hudColor, int alpha, int p3, int p4) { Invoke(0xB9C362BABECDDC7A, V(style), V(hudColor), V(alpha), V(p3), V(p4)); }
		public static int GET_STANDARD_BLIP_ENUM_ID() { return Invoke<int>(0x4A9923385BDB9DAD); }
		public static int GET_WAYPOINT_BLIP_ENUM_ID() { return Invoke<int>(0x186E5D252FA50E7D); }
		public static int GET_NUMBER_OF_ACTIVE_BLIPS() { return Invoke<int>(0x9A3FF3DE163034E8); }
		public static Blip GET_NEXT_BLIP_INFO_ID(int blipSprite) { return Invoke<Blip>(0x14F96AA50D6FBEA7, V(blipSprite)); }
		public static Blip GET_FIRST_BLIP_INFO_ID(int blipSprite) { return Invoke<Blip>(0x1BEDE233E6CD2A1F, V(blipSprite)); }
		public static Blip GET_CLOSEST_BLIP_INFO_ID(int blipSprite) { return Invoke<Blip>(0xD484BF71050CA1EE, V(blipSprite)); }
		public static Vector3 GET_BLIP_INFO_ID_COORD(Blip blip) { return Invoke<Vector3>(0xFA7C7F0AADF25D09, V(blip)); }
		public static int GET_BLIP_INFO_ID_DISPLAY(Blip blip) { return Invoke<int>(0x1E314167F701DC3B, V(blip)); }
		// Returns a value based on what the blip is attached to
		// 1 - Vehicle
		// 2 - Ped
		// 3 - Object
		// 4 - Coord
		// 5 - unk
		// 6 - Pickup
		// 7 - Radius
		public static int GET_BLIP_INFO_ID_TYPE(Blip blip) { return Invoke<int>(0xBE9B0959FFD0779B, V(blip)); }
		public static Entity GET_BLIP_INFO_ID_ENTITY_INDEX(Blip blip) { return Invoke<Entity>(0x4BA4E2553AFEDC2C, V(blip)); }
		// This function is hard-coded to always return 0.
		public static Pickup GET_BLIP_INFO_ID_PICKUP_INDEX(Blip blip) { return Invoke<Pickup>(0x9B6786E4C03DD382, V(blip)); }
		// Returns the Blip handle of given Entity.
		public static Blip GET_BLIP_FROM_ENTITY(Entity entity) { return Invoke<Blip>(0xBC8DBDCA2436F7E8, V(entity)); }
		public static Blip ADD_BLIP_FOR_RADIUS(float posX, float posY, float posZ, float radius) { return Invoke<Blip>(0x46818D79B1F7499A, V(posX), V(posY), V(posZ), V(radius)); }
		// Adds a rectangular blip for the specified coordinates/area.
		// 
		// It is recommended to use SET_BLIP_ROTATION and SET_BLIP_COLOUR to make the blip not rotate along with the camera.
		// 
		// By default, the blip will show as a _regular_ blip with the specified color/sprite if it is outside of the minimap view.
		// 
		// Example image:
		// minimap https://w.wew.wtf/pdcjig.png
		// big map https://w.wew.wtf/zgcjcm.png
		// 
		// (Native name is _likely_ to actually be ADD_BLIP_FOR_AREA, but due to the usual reasons this can't be confirmed)
		public static Blip ADD_BLIP_FOR_AREA(float x, float y, float z, float width, float height) { return Invoke<Blip>(0xCE5D0E5E315DB238, V(x), V(y), V(z), V(width), V(height)); }
		// Returns red ( default ) blip attached to entity.
		// 
		// Example:
		// Blip blip; //Put this outside your case or option
		// blip = HUD::ADD_BLIP_FOR_ENTITY(YourPedOrBodyguardName);
		// HUD::SET_BLIP_AS_FRIENDLY(blip, true);
		public static Blip ADD_BLIP_FOR_ENTITY(Entity entity) { return Invoke<Blip>(0x5CDE92C702A8FCE7, V(entity)); }
		public static Blip ADD_BLIP_FOR_PICKUP(Pickup pickup) { return Invoke<Blip>(0xBE339365C863BD36, V(pickup)); }
		// Creates an orange ( default ) Blip-obj. Returns a Blip-obj which can then be modified.
		public static Blip ADD_BLIP_FOR_COORD(float x, float y, float z) { return Invoke<Blip>(0x5A039BB0BCA604B6, V(x), V(y), V(z)); }
		public static void TRIGGER_SONAR_BLIP(float posX, float posY, float posZ, float radius, int p4) { Invoke(0x72DD432F3CDFC0EE, V(posX), V(posY), V(posZ), V(radius), V(p4)); }
		public static void ALLOW_SONAR_BLIPS(bool toggle) { Invoke(0x60734CC207C9833C, V(toggle)); }
		public static void SET_BLIP_COORDS(Blip blip, float posX, float posY, float posZ) { Invoke(0xAE2AF67E9D9AF65D, V(blip), V(posX), V(posY), V(posZ)); }
		public static Vector3 GET_BLIP_COORDS(Blip blip) { return Invoke<Vector3>(0x586AFE3FF72D996E, V(blip)); }
		// Sets the displayed sprite for a specific blip..
		// 
		// You may have your own list, but since dev-c didn't show it I was bored and started looking through scripts and functions to get a presumable almost positive list of a majority of blip IDs
		// https://pastebin.com/Bpj9Sfft
		// 
		// Blips Images + IDs:
		// https://gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
		public static void SET_BLIP_SPRITE(Blip blip, int spriteId) { Invoke(0xDF735600A4696DAF, V(blip), V(spriteId)); }
		// Blips Images + IDs:
		// gtaxscripting.blogspot.com/2016/05/gta-v-blips-id-and-image.html
		public static int GET_BLIP_SPRITE(Blip blip) { return Invoke<int>(0x1FC877464A04FC4F, V(blip)); }
		public static void SET_COP_BLIP_SPRITE(int p0, float p1) { Invoke(0x9FCB3CBFB3EAD69A, V(p0), V(p1)); }
		public static void SET_COP_BLIP_SPRITE_AS_STANDARD() { Invoke(0xB7B873520C84C118); }
		// Doesn't work if the label text of gxtEntry is >= 80.
		public static void SET_BLIP_NAME_FROM_TEXT_FILE(Blip blip, string gxtEntry) { Invoke(0xEAA0FFE120D92784, V(blip), V(gxtEntry)); }
		public static void SET_BLIP_NAME_TO_PLAYER_NAME(Blip blip, Player player) { Invoke(0x127DE7B20C60A6A3, V(blip), V(player)); }
		// Sets alpha-channel for blip color.
		// 
		// Example:
		// 
		// Blip blip = HUD::ADD_BLIP_FOR_ENTITY(entity);
		// HUD::SET_BLIP_COLOUR(blip , 3);
		// HUD::SET_BLIP_ALPHA(blip , 64);
		// 
		public static void SET_BLIP_ALPHA(Blip blip, int alpha) { Invoke(0x45FF974EEE1C8734, V(blip), V(alpha)); }
		public static int GET_BLIP_ALPHA(Blip blip) { return Invoke<int>(0x970F608F0EE6C885, V(blip)); }
		public static void SET_BLIP_FADE(Blip blip, int opacity, int duration) { Invoke(0x2AEE8F8390D2298C, V(blip), V(opacity), V(duration)); }
		// Returns -1, 0, +1, depending on if the blip is fading out, doing nothing, or fading in respectively.
		public static int GET_BLIP_FADE_DIRECTION(Blip blip) { return Invoke<int>(0x2C173AE2BDB9385E, V(blip)); }
		// After some testing, looks like you need to use CEIL() on the rotation (vehicle/ped heading) before using it there.
		public static void SET_BLIP_ROTATION(Blip blip, int rotation) { Invoke(0xF87683CDF73C3F6E, V(blip), V(rotation)); }
		// Does not require whole number/integer rotations.
		public static void SET_BLIP_ROTATION_WITH_FLOAT(Blip blip, float heading) { Invoke(0xA8B6AFDAC320AC87, V(blip), V(heading)); }
		public static int GET_BLIP_ROTATION(Blip blip) { return Invoke<int>(0x003E92BA477F9D7F, V(blip)); }
		// Adds up after viewing multiple R* scripts. I believe that the duration is in miliseconds.
		public static void SET_BLIP_FLASH_TIMER(Blip blip, int duration) { Invoke(0xD3CD6FD297AE87CC, V(blip), V(duration)); }
		public static void SET_BLIP_FLASH_INTERVAL(Blip blip, Any p1) { Invoke(0xAA51DB313C010A7E, V(blip), V(p1)); }
		// https://gtaforums.com/topic/864881-all-blip-color-ids-pictured/
		public static void SET_BLIP_COLOUR(Blip blip, int color) { Invoke(0x03D7FB09E75D6B7E, V(blip), V(color)); }
		// Can be used to give blips any RGB colour with SET_BLIP_COLOUR(blip, 84).
		public static void SET_BLIP_SECONDARY_COLOUR(Blip blip, int r, int g, int b) { Invoke(0x14892474891E09EB, V(blip), V(r), V(g), V(b)); }
		public static int GET_BLIP_COLOUR(Blip blip) { return Invoke<int>(0xDF729E8D20CF7327, V(blip)); }
		public static int GET_BLIP_HUD_COLOUR(Blip blip) { return Invoke<int>(0x729B5F1EFBC0AAEE, V(blip)); }
		public static bool IS_BLIP_SHORT_RANGE(Blip blip) { return Invoke<bool>(0xDA5F8727EB75B926, V(blip)); }
		public static bool IS_BLIP_ON_MINIMAP(Blip blip) { return Invoke<bool>(0xE41CA53051197A27, V(blip)); }
		public static bool DOES_BLIP_HAVE_GPS_ROUTE(Blip blip) { return Invoke<bool>(0xDD2238F57B977751, V(blip)); }
		public static void SET_BLIP_HIDDEN_ON_LEGEND(Blip blip, bool toggle) { Invoke(0x54318C915D27E4CE, V(blip), V(toggle)); }
		public static void SET_BLIP_HIGH_DETAIL(Blip blip, bool toggle) { Invoke(0xE2590BC29220CEBB, V(blip), V(toggle)); }
		public static void SET_BLIP_AS_MISSION_CREATOR_BLIP(Blip blip, bool toggle) { Invoke(0x24AC0137444F9FD5, V(blip), V(toggle)); }
		public static bool IS_MISSION_CREATOR_BLIP(Blip blip) { return Invoke<bool>(0x26F49BF3381D933D, V(blip)); }
		public static Blip GET_NEW_SELECTED_MISSION_CREATOR_BLIP() { return Invoke<Blip>(0x5C90988E7C8E1AF4); }
		public static bool IS_HOVERING_OVER_MISSION_CREATOR_BLIP() { return Invoke<bool>(0x4167EFE0527D706E); }
		public static void SHOW_START_MISSION_INSTRUCTIONAL_BUTTON(bool toggle) { Invoke(0xF1A6C18B35BCADE6, V(toggle)); }
		public static void SHOW_CONTACT_INSTRUCTIONAL_BUTTON(bool toggle) { Invoke(0xC772A904CDE1186F, V(toggle)); }
		public static void _SHOW_PURCHASE_INSTRUCTIONAL_BUTTON(bool toggle) { Invoke(0xF6865E26067B708C, V(toggle)); }
		public static void RELOAD_MAP_MENU() { Invoke(0x2916A928514C9827); }
		public static void SET_BLIP_MARKER_LONG_DISTANCE(Any p0, Any p1) { Invoke(0xB552929B85FC27EC, V(p0), V(p1)); }
		public static void SET_BLIP_FLASHES(Blip blip, bool toggle) { Invoke(0xB14552383D39CE3E, V(blip), V(toggle)); }
		public static void SET_BLIP_FLASHES_ALTERNATE(Blip blip, bool toggle) { Invoke(0x2E8D9498C56DD0D1, V(blip), V(toggle)); }
		public static bool IS_BLIP_FLASHING(Blip blip) { return Invoke<bool>(0xA5E41FD83AD6CEF0, V(blip)); }
		// Sets whether or not the specified blip should only be displayed when nearby, or on the minimap.
		public static void SET_BLIP_AS_SHORT_RANGE(Blip blip, bool toggle) { Invoke(0xBE8BE4FE60E27B72, V(blip), V(toggle)); }
		public static void SET_BLIP_SCALE(Blip blip, float scale) { Invoke(0xD38744167B2FA257, V(blip), V(scale)); }
		// See https://imgur.com/a/lLkEsMN
		public static void SET_BLIP_SCALE_2D(Blip blip, float xScale, float yScale) { Invoke(0xCD6524439909C979, V(blip), V(xScale), V(yScale)); }
		// See this topic for more details : gtaforums.com/topic/717612-v-scriptnative-documentation-and-research/page-35?p=1069477935
		public static void SET_BLIP_PRIORITY(Blip blip, int priority) { Invoke(0xAE9FC9EF6A9FAC79, V(blip), V(priority)); }
		// Display Id behaviours:
		// 0 = Doesn't show up, ever, anywhere.
		// 1 = Doesn't show up, ever, anywhere.
		// 2 = Shows on both main map and minimap. (Selectable on map)
		// 3 = Shows on main map only. (Selectable on map)
		// 4 = Shows on main map only. (Selectable on map)
		// 5 = Shows on minimap only.
		// 6 = Shows on both main map and minimap. (Selectable on map)
		// 7 = Doesn't show up, ever, anywhere.
		// 8 = Shows on both main map and minimap. (Not selectable on map)
		// 9 = Shows on minimap only.
		// 10 = Shows on both main map and minimap. (Not selectable on map)
		// 
		// Anything higher than 10 seems to be exactly the same as 10.
		public static void SET_BLIP_DISPLAY(Blip blip, int displayId) { Invoke(0x9029B2F3DA924928, V(blip), V(displayId)); }
		// Example: https://i.imgur.com/skY6vAJ.png
		// 
		// Index:
		// 1 = No distance shown in legend
		// 2 = Distance shown in legend
		// 7 = "Other Players" category, also shows distance in legend
		// 10 = "Property" category
		// 11 = "Owned Property" category
		// 
		// Any other value behaves like index = 1, index wraps around after 255
		// Blips with categories 7, 10 or 11 will all show under the specific categories listing in the map legend, regardless of sprite or name.
		// Legend entries:
		// 7 = Other Players (BLIP_OTHPLYR)
		// 10 = Property (BLIP_PROPCAT)
		// 11 = Owned Property (BLIP_APARTCAT)
		// 
		// Category needs to be `7` in order for blip names to show on the expanded minimap when using DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS.
		public static void SET_BLIP_CATEGORY(Blip blip, int index) { Invoke(0x234CDD44D996FD9A, V(blip), V(index)); }
		// In the C++ SDK, this seems not to work-- the blip isn't removed immediately. I use it for saving cars.
		// 
		// E.g.:
		// 
		// Ped pped = PLAYER::PLAYER_PED_ID();
		// Vehicle v = PED::GET_VEHICLE_PED_IS_USING(pped);
		// Blip b = HUD::ADD_BLIP_FOR_ENTITY(v);
		// 
		// works fine.
		// But later attempting to delete it with:
		// 
		// Blip b = HUD::GET_BLIP_FROM_ENTITY(v);
		// if (HUD::DOES_BLIP_EXIST(b)) HUD::REMOVE_BLIP(&b);
		// 
		// doesn't work. And yes, doesn't work without the DOES_BLIP_EXIST check either. Also, if you attach multiple blips to the same thing (say, a vehicle), and that thing disappears, the blips randomly attach to other things (in my case, a vehicle).
		// 
		// Thus for me, HUD::REMOVE_BLIP(&b) only works if there's one blip, (in my case) the vehicle is marked as no longer needed, you drive away from it and it eventually despawns, AND there is only one blip attached to it. I never intentionally attach multiple blips but if the user saves the car, this adds a blip. Then if they delete it, it is supposed to remove the blip, but it doesn't. Then they can immediately save it again, causing another blip to re-appear.
		// -------------
		// 
		// Passing the address of the variable instead of the value works for me.
		// e.g.
		// int blip = HUD::ADD_BLIP_FOR_ENTITY(ped);
		// HUD::REMOVE_BLIP(&blip);
		// 
		// 
		// Remove blip will currently crash your game, just artificially remove the blip by setting the sprite to a id that is 'invisible'.
		public static void REMOVE_BLIP(Blip* blip) { Invoke(0x86A652570E5F25DD, V(blip)); }
		// false for enemy
		// true for friendly
		public static void SET_BLIP_AS_FRIENDLY(Blip blip, bool toggle) { Invoke(0x6F6F290102C02AB4, V(blip), V(toggle)); }
		public static void PULSE_BLIP(Blip blip) { Invoke(0x742D6FD43115AF73, V(blip)); }
		public static void SHOW_NUMBER_ON_BLIP(Blip blip, int number) { Invoke(0xA3C0B359DCB848B6, V(blip), V(number)); }
		public static void HIDE_NUMBER_ON_BLIP(Blip blip) { Invoke(0x532CFF637EF80148, V(blip)); }
		public static void SHOW_HEIGHT_ON_BLIP(Blip blip, bool toggle) { Invoke(0x75A16C3DA34F1245, V(blip), V(toggle)); }
		// Adds a green checkmark on top of a blip.
		public static void SHOW_TICK_ON_BLIP(Blip blip, bool toggle) { Invoke(0x74513EA3E505181E, V(blip), V(toggle)); }
		// Adds a orange checkmark on top of a given blip handle: https://imgur.com/a/aw5OTMF
		// _SHOW_FRIEND_INDICATOR_ON_BLIP* - _SHOW_HEADING_INDICATOR_ON_BLIP*
		public static void SHOW_GOLD_TICK_ON_BLIP(Blip blip, bool toggle) { Invoke(0xCAC2031EBF79B1A8, V(blip), V(toggle)); }
		public static void SHOW_FOR_SALE_ICON_ON_BLIP(Blip blip, bool toggle) { Invoke(0x19BD6E3C0E16A8FA, V(blip), V(toggle)); }
		// Adds the GTA: Online player heading indicator to a blip.
		public static void SHOW_HEADING_INDICATOR_ON_BLIP(Blip blip, bool toggle) { Invoke(0x5FBCA48327B914DF, V(blip), V(toggle)); }
		// Highlights a blip by a cyan color circle.
		// 
		// Color can be changed with SET_BLIP_SECONDARY_COLOUR
		public static void SHOW_OUTLINE_INDICATOR_ON_BLIP(Blip blip, bool toggle) { Invoke(0xB81656BC81FE24D1, V(blip), V(toggle)); }
		// Highlights a blip by a half cyan circle on the right side of the blip. https://i.imgur.com/FrV9M4e.png
		// .Indicating that that player is a friend (in GTA:O). This color can not be changed.
		// To toggle the left side (crew member indicator) of the half circle around the blip, use: `SHOW_CREW_INDICATOR_ON_BLIP`
		public static void SHOW_FRIEND_INDICATOR_ON_BLIP(Blip blip, bool toggle) { Invoke(0x23C3EB807312F01A, V(blip), V(toggle)); }
		// Enables or disables the blue half circle https://i.imgur.com/iZes9Ec.png around the specified blip on the left side of the blip. This is used to indicate that the player is in your crew in GTA:O. Color is changeable by using `SET_BLIP_SECONDARY_COLOUR`.
		public static void SHOW_CREW_INDICATOR_ON_BLIP(Blip blip, bool toggle) { Invoke(0xDCFB5D4DB8BF367E, V(blip), V(toggle)); }
		// Must be toggled before being queued for animation
		public static void SET_BLIP_EXTENDED_HEIGHT_THRESHOLD(Blip blip, bool toggle) { Invoke(0xC4278F70131BAA6D, V(blip), V(toggle)); }
		public static void SET_BLIP_SHORT_HEIGHT_THRESHOLD(Any p0, Any p1) { Invoke(0x4B5B620C9B59ED34, V(p0), V(p1)); }
		public static void SET_BLIP_USE_HEIGHT_INDICATOR_ON_EDGE(Blip blip, Any p1) { Invoke(0x2C9F302398E13141, V(blip), V(p1)); }
		// Makes a blip go small when off the minimap.
		public static void SET_BLIP_AS_MINIMAL_ON_EDGE(Blip blip, bool toggle) { Invoke(0x2B6D467DAB714E8D, V(blip), V(toggle)); }
		// Enabling this on a radius blip will make it outline only. See https://cdn.discordapp.com/attachments/553235301632573459/575132227935928330/unknown.png
		public static void SET_RADIUS_BLIP_EDGE(Blip blip, bool toggle) { Invoke(0x25615540D894B814, V(blip), V(toggle)); }
		public static bool DOES_BLIP_EXIST(Blip blip) { return Invoke<bool>(0xA6DB27D19ECBB7DA, V(blip)); }
		// This native removes the current waypoint from the map.
		// 
		// Example:
		// C#:
		// Function.Call(Hash.SET_WAYPOINT_OFF);
		// 
		// C++:
		// HUD::SET_WAYPOINT_OFF();
		public static void SET_WAYPOINT_OFF() { Invoke(0xA7E4E2D361C2627F); }
		public static void DELETE_WAYPOINTS_FROM_THIS_PLAYER() { Invoke(0xD8E694757BCEA8E9); }
		public static void REFRESH_WAYPOINT() { Invoke(0x81FA173F170560D1); }
		public static bool IS_WAYPOINT_ACTIVE() { return Invoke<bool>(0x1DD1F58F493F1DA5); }
		public static void SET_NEW_WAYPOINT(float x, float y) { Invoke(0xFE43368D2AA4F2FC, V(x), V(y)); }
		public static void SET_BLIP_BRIGHT(Blip blip, bool toggle) { Invoke(0xB203913733F27884, V(blip), V(toggle)); }
		// As of b2189, the third parameter sets the color of the cone (before b2189 it was ignored). Note that it uses HUD colors, not blip colors.
		public static void SET_BLIP_SHOW_CONE(Blip blip, bool toggle, int hudColorIndex) { Invoke(0x13127EC3665E8EE1, V(blip), V(toggle), V(hudColorIndex)); }
		// Interesting fact: A hash collision for this is RESET_JETPACK_MODEL_SETTINGS
		public static void REMOVE_COP_BLIP_FROM_PED(Ped ped) { Invoke(0xC594B315EDF2D4AF, V(ped)); }
		public static void SETUP_FAKE_CONE_DATA(Blip blip, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, int p8) { Invoke(0xF83D0FEBE75E62C9, V(blip), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		public static void REMOVE_FAKE_CONE_DATA(Blip blip) { Invoke(0x35A3CD97B2C0A6D2, V(blip)); }
		public static void CLEAR_FAKE_CONE_ARRAY() { Invoke(0x8410C5E0CD847B9D); }
		// Applies to new eBlipParams _BLIP_CHANGE_46* and _BLIP_CHANGE_47*
		public static void _SET_BLIP_GPS_ROUTE_DISPLAY_DISTANCE(Blip blip, int blipChangeParam46, bool blipChangeParam47) { Invoke(0x25D984CFB64ED6DE, V(blip), V(blipChangeParam46), V(blipChangeParam47)); }
		// This native is used to colorize certain map components like the army base1 at the top of the map.
		// p2 appears to be always -1. If p2 is -1 then native wouldn't change the color. See https://gfycat.com/SkinnyPinkChupacabra
		public static bool SET_MINIMAP_COMPONENT(int componentId, bool toggle, int overrideColor) { return Invoke<bool>(0x75A9A10948D1DEA6, V(componentId), V(toggle), V(overrideColor)); }
		public static void SET_MINIMAP_SONAR_SWEEP(bool toggle) { Invoke(0x6B50FC8749632EC1, V(toggle)); }
		public static void SHOW_ACCOUNT_PICKER() { Invoke(0x60E892BA4F5BDCA4); }
		public static Blip GET_MAIN_PLAYER_BLIP_ID() { return Invoke<Blip>(0xDCD4EC3F419D02FA); }
		public static void SET_PM_WARNINGSCREEN_ACTIVE(bool p0) { Invoke(0x41350B4FC28E3941, V(p0)); }
		public static void HIDE_LOADING_ON_FADE_THIS_FRAME() { Invoke(0x4B0311D3CDC4648F); }
		// List of interior hashes: https://pastebin.com/1FUyXNqY
		// Not for every interior zoom > 0 available.
		public static void SET_RADAR_AS_INTERIOR_THIS_FRAME(Hash interior, float x, float y, int z, int zoom) { Invoke(0x59E727A1C9D3E31A, V(interior), V(x), V(y), V(z), V(zoom)); }
		public static void SET_INSIDE_VERY_SMALL_INTERIOR(bool toggle) { Invoke(0x504DFE62A1692296, V(toggle)); }
		public static void SET_INSIDE_VERY_LARGE_INTERIOR(bool toggle) { Invoke(0x7EC8ABA5E74B3D7A, V(toggle)); }
		public static void SET_RADAR_AS_EXTERIOR_THIS_FRAME() { Invoke(0xE81B7D2A3DAB2D81); }
		// Sets the position of the arrow icon representing the player on both the minimap and world map.
		// 
		// Too bad this wouldn't work over the network (obviously not). Could spoof where we would be.
		public static void SET_FAKE_PAUSEMAP_PLAYER_POSITION_THIS_FRAME(float x, float y) { Invoke(0x77E2DD177910E1CF, V(x), V(y)); }
		// p2 maybe z float?
		public static void SET_FAKE_GPS_PLAYER_POSITION_THIS_FRAME(float x, float y, Any p2) { Invoke(0xA17784FCA9548D15, V(x), V(y), V(p2)); }
		public static bool IS_PAUSEMAP_IN_INTERIOR_MODE() { return Invoke<bool>(0x9049FE339D5F6F6F); }
		public static void HIDE_MINIMAP_EXTERIOR_MAP_THIS_FRAME() { Invoke(0x5FBAE526203990C9); }
		public static void HIDE_MINIMAP_INTERIOR_MAP_THIS_FRAME() { Invoke(0x20FE7FDFEEAD38C0); }
		// Toggles the Cayo Perico map.
		public static void SET_USE_ISLAND_MAP(bool toggle) { Invoke(0x5E1460624D194A38, V(toggle)); }
		public static void _SET_PAUSE_EXTERIOR_RENDERING_WHILE_IN_INTERIOR() { Invoke(0x35CCE12EAECB4A51); }
		// When calling this, the current frame will have the players "arrow icon" be focused on the dead center of the radar.
		public static void DONT_TILT_MINIMAP_THIS_FRAME() { Invoke(0x6D14BFDC33B34F55); }
		public static void DONT_ZOOM_MINIMAP_WHEN_RUNNING_THIS_FRAME() { Invoke(0x89DA85D949CE57A0); }
		public static void DONT_ZOOM_MINIMAP_WHEN_SNIPING_THIS_FRAME() { Invoke(0x55F5A5F07134DE60); }

		public static void SET_WIDESCREEN_FORMAT(Any p0) { Invoke(0xC3B07BA00A83B0F1, V(p0)); }
		public static void DISPLAY_AREA_NAME(bool toggle) { Invoke(0x276B6CE369C33678, V(toggle)); }
		// "DISPLAY_CASH(false);" makes the cash amount render on the screen when appropriate
		// "DISPLAY_CASH(true);" disables cash amount rendering
		public static void DISPLAY_CASH(bool toggle) { Invoke(0x96DEC8D5430208B7, V(toggle)); }
		// Related to displaying cash on the HUD
		// Always called before HUD::CHANGE_FAKE_MP_CASH in decompiled scripts
		public static void USE_FAKE_MP_CASH(bool toggle) { Invoke(0x170F541E1CADD1DE, V(toggle)); }
		// Displays cash change notifications on HUD.
		public static void CHANGE_FAKE_MP_CASH(int cash, int bank) { Invoke(0x0772DF77852C2E30, V(cash), V(bank)); }
		public static void DISPLAY_AMMO_THIS_FRAME(bool display) { Invoke(0xA5E78BA2B1331C55, V(display)); }
		// Displays the crosshair for this frame.
		public static void DISPLAY_SNIPER_SCOPE_THIS_FRAME() { Invoke(0x73115226F4814E62); }
		// Hides HUD and radar this frame and prohibits switching to other weapons (or accessing the weapon wheel)
		public static void HIDE_HUD_AND_RADAR_THIS_FRAME() { Invoke(0x719FF505F097FD20); }
		// Controls whether to display 'Cash'/'Bank' next to the money balance HUD in Multiplayer (https://i.imgur.com/MiYUtNl.png)
		public static void ALLOW_DISPLAY_OF_MULTIPLAYER_CASH_TEXT(bool allow) { Invoke(0xE67C6DFD386EA5E7, V(allow)); }
		public static void SET_MULTIPLAYER_WALLET_CASH() { Invoke(0xC2D15BEF167E27BC); }
		public static void REMOVE_MULTIPLAYER_WALLET_CASH() { Invoke(0x95CF81BD06EE1887); }
		public static void SET_MULTIPLAYER_BANK_CASH() { Invoke(0xDD21B55DF695CD0A); }
		public static void REMOVE_MULTIPLAYER_BANK_CASH() { Invoke(0xC7C6789AA1CFEDD0); }
		// This native does absolutely nothing, just a nullsub
		public static void SET_MULTIPLAYER_HUD_CASH(int p0, bool p1) { Invoke(0xFD1D220394BCB824, V(p0), V(p1)); }
		// Removes multiplayer cash hud each frame
		public static void REMOVE_MULTIPLAYER_HUD_CASH() { Invoke(0x968F270E39141ECA); }
		public static void HIDE_HELP_TEXT_THIS_FRAME() { Invoke(0xD46923FC481CA285); }
		public static bool IS_IME_IN_PROGRESS() { return Invoke<bool>(0x801879A9B4F4B2FB); }
		// The messages are localized strings.
		// Examples:
		// "No_bus_money"
		// "Enter_bus"
		// "Tour_help"
		// "LETTERS_HELP2"
		// "Dummy"
		// 
		// **The bool appears to always be false (if it even is a bool, as it's represented by a zero)**
		// --------
		// p1 doesn't seem to make a difference, regardless of the state it's in. 
		// 
		// 
		// picture of where on the screen this is displayed? 
		public static void DISPLAY_HELP_TEXT_THIS_FRAME(string message, bool p1) { Invoke(0x960C9FF8F616E41C, V(message), V(p1)); }
		// Forces the weapon wheel to show/hide.
		public static void HUD_FORCE_WEAPON_WHEEL(bool show) { Invoke(0xEB354E5376BC81A7, V(show)); }
		// Displays "blazer_wheels_up" and "blazer_wheels_down" "weapon" icons when switching between jetski and quadbike modes. Works only on vehicles using "VEHICLE_TYPE_AMPHIBIOUS_QUADBIKE" vehicle type. Needs to be called every time prior to switching modes, otherwise the icon will only appear when switching modes once.
		public static void HUD_FORCE_SPECIAL_VEHICLE_WEAPON_WHEEL() { Invoke(0x488043841BBE156F); }
		// Calling this each frame, stops the player from receiving a weapon via the weapon wheel.
		public static void HUD_SUPPRESS_WEAPON_WHEEL_RESULTS_THIS_FRAME() { Invoke(0x0AFC4AF510774B47); }
		// Returns the weapon hash to the selected/highlighted weapon in the wheel
		public static Hash HUD_GET_WEAPON_WHEEL_CURRENTLY_HIGHLIGHTED() { return Invoke<Hash>(0xA48931185F0536FE); }
		// Set the active slotIndex in the wheel weapon to the slot associated with the provided Weapon hash
		public static void HUD_SET_WEAPON_WHEEL_TOP_SLOT(Hash weaponHash) { Invoke(0x72C1056D678BB7D8, V(weaponHash)); }
		// Returns the weapon hash active in a specific weapon wheel slotList
		public static Hash HUD_GET_WEAPON_WHEEL_TOP_SLOT(int weaponTypeIndex) { return Invoke<Hash>(0xA13E93403F26C812, V(weaponTypeIndex)); }
		// Sets a global that disables many weapon input tasks (shooting, aiming, etc.). Does not work with vehicle weapons, only used in selector.ysc
		public static void HUD_SHOWING_CHARACTER_SWITCH_SELECTION(bool toggle) { Invoke(0x14C9FDCC41F81F63, V(toggle)); }
		// Only the script that originally called SET_GPS_FLAGS can set them again. Another script cannot set the flags, until the first script that called it has called CLEAR_GPS_FLAGS.
		// 
		// Doesn't seem like the flags are actually read by the game at all.
		public static void SET_GPS_FLAGS(int p0, float p1) { Invoke(0x5B440763A4C8D15B, V(p0), V(p1)); }
		// Clears the GPS flags. Only the script that originally called SET_GPS_FLAGS can clear them.
		// 
		// Doesn't seem like the flags are actually read by the game at all.
		public static void CLEAR_GPS_FLAGS() { Invoke(0x21986729D6A3A830); }
		public static void SET_RACE_TRACK_RENDER(bool toggle) { Invoke(0x1EAC5F91BCBC5073, V(toggle)); }
		// Does the same as SET_RACE_TRACK_RENDER(false);
		public static void CLEAR_GPS_RACE_TRACK() { Invoke(0x7AA5B4CE533C858B); }
		// Starts a new GPS custom-route, allowing you to plot lines on the map.
		// Lines are drawn directly between points.
		// The GPS custom route works like the GPS multi route, except it does not follow roads.
		// Example result: https://i.imgur.com/BDm5pzt.png
		// hudColor: The HUD color of the GPS path.
		// displayOnFoot: Draws the path regardless if the player is in a vehicle or not.
		// followPlayer: Draw the path partially between the previous and next point based on the players position between them. When false, the GPS appears to not disappear after the last leg is completed.
		public static void START_GPS_CUSTOM_ROUTE(int hudColor, bool displayOnFoot, bool followPlayer) { Invoke(0xDB34E8D56FC13B08, V(hudColor), V(displayOnFoot), V(followPlayer)); }
		public static void ADD_POINT_TO_GPS_CUSTOM_ROUTE(float x, float y, float z) { Invoke(0x311438A071DD9B1A, V(x), V(y), V(z)); }
		// radarThickness: The width of the GPS route on the radar
		// mapThickness: The width of the GPS route on the map
		public static void SET_GPS_CUSTOM_ROUTE_RENDER(bool toggle, int radarThickness, int mapThickness) { Invoke(0x900086F371220B6F, V(toggle), V(radarThickness), V(mapThickness)); }
		public static void CLEAR_GPS_CUSTOM_ROUTE() { Invoke(0xE6DE0561D9232A64); }
		// Starts a new GPS multi-route, allowing you to create custom GPS paths.
		// GPS functions like the waypoint, except it can contain multiple points it's forced to go through.
		// Once the player has passed a point, the GPS will no longer force its path through it.
		// 
		// Works independently from the player-placed waypoint and blip routes.
		// Example result: https://i.imgur.com/ZZHQatX.png
		// hudColor: The HUD color of the GPS path.
		// routeFromPlayer: Makes the GPS draw a path from the player to the next point, rather than the original path from the previous point.
		// displayOnFoot: Draws the GPS path regardless if the player is in a vehicle or not.
		public static void START_GPS_MULTI_ROUTE(int hudColor, bool routeFromPlayer, bool displayOnFoot) { Invoke(0x3D3D15AF7BCAAF83, V(hudColor), V(routeFromPlayer), V(displayOnFoot)); }
		public static void ADD_POINT_TO_GPS_MULTI_ROUTE(float x, float y, float z) { Invoke(0xA905192A6781C41B, V(x), V(y), V(z)); }
		public static void SET_GPS_MULTI_ROUTE_RENDER(bool toggle) { Invoke(0x3DDA37128DD1ACA8, V(toggle)); }
		// Does the same as SET_GPS_MULTI_ROUTE_RENDER(false);
		public static void CLEAR_GPS_MULTI_ROUTE() { Invoke(0x67EEDEA1B9BAFD94); }
		public static void CLEAR_GPS_PLAYER_WAYPOINT() { Invoke(0xFF4FB7C8CDFA3DA7); }
		public static void SET_GPS_FLASHES(bool toggle) { Invoke(0x320D0E0D936A0E9B, V(toggle)); }
		public static void SET_PLAYER_ICON_COLOUR(int color) { Invoke(0x7B21E0BB01E8224A, V(color)); }
		// adds a short flash to the Radar/Minimap
		// Usage: UI.FLASH_MINIMAP_DISPLAY
		public static void FLASH_MINIMAP_DISPLAY() { Invoke(0xF2DD778C22B15BDA); }
		public static void FLASH_MINIMAP_DISPLAY_WITH_COLOR(int hudColorIndex) { Invoke(0x6B1DE27EE78E6A19, V(hudColorIndex)); }
		public static void TOGGLE_STEALTH_RADAR(bool toggle) { Invoke(0x6AFDFB93754950C7, V(toggle)); }
		public static void SET_MINIMAP_IN_SPECTATOR_MODE(bool toggle, Ped ped) { Invoke(0x1A5CD7752DD28CD3, V(toggle), V(ped)); }
		public static void SET_MISSION_NAME(bool p0, string name) { Invoke(0x5F28ECF5FC84772F, V(p0), V(name)); }
		public static void SET_MISSION_NAME_FOR_UGC_MISSION(bool p0, string name) { Invoke(0xE45087D85F468BC2, V(p0), V(name)); }
		public static void SET_DESCRIPTION_FOR_UGC_MISSION_EIGHT_STRINGS(bool p0, string p1, string p2, string p3, string p4, string p5, string p6, string p7, string p8) { Invoke(0x817B86108EB94E51, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		public static void SET_MINIMAP_BLOCK_WAYPOINT(bool toggle) { Invoke(0x58FADDED207897DC, V(toggle)); }
		// Toggles the North Yankton map
		public static void SET_MINIMAP_IN_PROLOGUE(bool toggle) { Invoke(0x9133955F1A2DA957, V(toggle)); }
		// This native does absolutely nothing on PC master builds, just a nullsub.
		public static void SET_MINIMAP_BACKGROUND_HIDDEN(bool toggle) { Invoke(0xB09D42557C45EBA1, V(toggle)); }
		// If true, the entire map will be revealed.
		// 
		// FOW = Fog of War
		public static void SET_MINIMAP_HIDE_FOW(bool toggle) { Invoke(0xF8DEE0A5600CBB93, V(toggle)); }
		public static float GET_MINIMAP_FOW_DISCOVERY_RATIO() { return Invoke<float>(0xE0130B41D3CF4574); }
		public static bool GET_MINIMAP_FOW_COORDINATE_IS_REVEALED(float x, float y, float z) { return Invoke<bool>(0x6E31B91145873922, V(x), V(y), V(z)); }
		public static void SET_MINIMAP_FOW_DO_NOT_UPDATE(bool p0) { Invoke(0x62E849B7EB28E770, V(p0)); }
		// Up to eight coordinates may be revealed per frame
		public static void SET_MINIMAP_FOW_REVEAL_COORDINATE(float x, float y, float z) { Invoke(0x0923DBF87DFF735E, V(x), V(y), V(z)); }
		// Not much is known so far on what it does _exactly_.
		// All I know for sure is that it draws the specified hole ID on the pause menu map as well as on the mini-map/radar. This native also seems to change some other things related to the pause menu map's behaviour, for example: you can no longer set waypoints, the pause menu map starts up in a 'zoomed in' state. This native does not need to be executed every tick.
		// You need to center the minimap manually as well as change/lock it's zoom and angle in order for it to appear correctly on the minimap.
		// You'll also need to use the `GOLF` scaleform in order to get the correct minmap border to show up.
		// Use `0x35edd5b2e3ff01c0` to reset the map when you no longer want to display any golf holes (you still need to unlock zoom, position and angle of the radar manually after calling this).
		public static void SET_MINIMAP_GOLF_COURSE(int hole) { Invoke(0x71BDB63DBAF8DA59, V(hole)); }
		public static void SET_MINIMAP_GOLF_COURSE_OFF() { Invoke(0x35EDD5B2E3FF01C0); }
		// Locks the minimap to the specified angle in integer degrees.
		// 
		// angle: The angle in whole degrees. If less than 0 or greater than 360, unlocks the angle.
		public static void LOCK_MINIMAP_ANGLE(int angle) { Invoke(0x299FAEBB108AE05B, V(angle)); }
		public static void UNLOCK_MINIMAP_ANGLE() { Invoke(0x8183455E16C42E3A); }
		// Locks the minimap to the specified world position.
		public static void LOCK_MINIMAP_POSITION(float x, float y) { Invoke(0x1279E861A329E73F, V(x), V(y)); }
		public static void UNLOCK_MINIMAP_POSITION() { Invoke(0x3E93E06DB8EF1F30); }
		// Argument must be 0.0f or above 38.0f, or it will be ignored.
		public static void SET_FAKE_MINIMAP_MAX_ALTIMETER_HEIGHT(float altitude, bool p1, Any p2) { Invoke(0xD201F3FF917A506D, V(altitude), V(p1), V(p2)); }
		public static void SET_HEALTH_HUD_DISPLAY_VALUES(int health, int capacity, bool wasAdded) { Invoke(0x3F5CC444DCAAA8F2, V(health), V(capacity), V(wasAdded)); }
		public static void SET_MAX_HEALTH_HUD_DISPLAY(int maximumValue) { Invoke(0x975D66A0BC17064C, V(maximumValue)); }
		public static void SET_MAX_ARMOUR_HUD_DISPLAY(int maximumValue) { Invoke(0x06A320535F5F0248, V(maximumValue)); }
		// Toggles the big minimap state like in GTA:Online.
		public static void SET_BIGMAP_ACTIVE(bool toggleBigMap, bool showFullMap) { Invoke(0x231C8F89D0539D8F, V(toggleBigMap), V(showFullMap)); }
		// Full list of components below
		// 
		// HUD = 0;
		// HUD_WANTED_STARS = 1;
		// HUD_WEAPON_ICON = 2;
		// HUD_CASH = 3;
		// HUD_MP_CASH = 4;
		// HUD_MP_MESSAGE = 5;
		// HUD_VEHICLE_NAME = 6;
		// HUD_AREA_NAME = 7;
		// HUD_VEHICLE_CLASS = 8;
		// HUD_STREET_NAME = 9;
		// HUD_HELP_TEXT = 10;
		// HUD_FLOATING_HELP_TEXT_1 = 11;
		// HUD_FLOATING_HELP_TEXT_2 = 12;
		// HUD_CASH_CHANGE = 13;
		// HUD_RETICLE = 14;
		// HUD_SUBTITLE_TEXT = 15;
		// HUD_RADIO_STATIONS = 16;
		// HUD_SAVING_GAME = 17;
		// HUD_GAME_STREAM = 18;
		// HUD_WEAPON_WHEEL = 19;
		// HUD_WEAPON_WHEEL_STATS = 20;
		// MAX_HUD_COMPONENTS = 21;
		// MAX_HUD_WEAPONS = 22;
		// MAX_SCRIPTED_HUD_COMPONENTS = 141;
		public static bool IS_HUD_COMPONENT_ACTIVE(int id) { return Invoke<bool>(0xBC4C9EA5391ECC0D, V(id)); }
		public static bool IS_SCRIPTED_HUD_COMPONENT_ACTIVE(int id) { return Invoke<bool>(0xDD100EB17A94FF65, V(id)); }
		public static void HIDE_SCRIPTED_HUD_COMPONENT_THIS_FRAME(int id) { Invoke(0xE374C498D8BADC14, V(id)); }
		public static void SHOW_SCRIPTED_HUD_COMPONENT_THIS_FRAME(int id) { Invoke(0x4F38DCA127DAAEA2, V(id)); }
		public static bool IS_SCRIPTED_HUD_COMPONENT_HIDDEN_THIS_FRAME(int id) { return Invoke<bool>(0x09C0403ED9A751C2, V(id)); }
		// This function hides various HUD (Heads-up Display) components.
		// Listed below are the integers and the corresponding HUD component.
		// - 1 : WANTED_STARS
		// - 2 : WEAPON_ICON
		// - 3 : CASH
		// - 4 : MP_CASH
		// - 5 : MP_MESSAGE
		// - 6 : VEHICLE_NAME
		// - 7 : AREA_NAME
		// - 8 : VEHICLE_CLASS
		// - 9 : STREET_NAME
		// - 10 : HELP_TEXT
		// - 11 : FLOATING_HELP_TEXT_1
		// - 12 : FLOATING_HELP_TEXT_2
		// - 13 : CASH_CHANGE
		// - 14 : RETICLE
		// - 15 : SUBTITLE_TEXT
		// - 16 : RADIO_STATIONS
		// - 17 : SAVING_GAME
		// - 18 : GAME_STREAM
		// - 19 : WEAPON_WHEEL
		// - 20 : WEAPON_WHEEL_STATS
		// - 21 : HUD_COMPONENTS
		// - 22 : HUD_WEAPONS
		// 
		// These integers also work for the `SHOW_HUD_COMPONENT_THIS_FRAME` native, but instead shows the HUD Component.
		public static void HIDE_HUD_COMPONENT_THIS_FRAME(int id) { Invoke(0x6806C51AD12B83B8, V(id)); }
		// This function hides various HUD (Heads-up Display) components.
		// Listed below are the integers and the corresponding HUD component.
		// - 1 : WANTED_STARS
		// - 2 : WEAPON_ICON
		// - 3 : CASH
		// - 4 : MP_CASH
		// - 5 : MP_MESSAGE
		// - 6 : VEHICLE_NAME
		// - 7 : AREA_NAME
		// - 8 : VEHICLE_CLASS
		// - 9 : STREET_NAME
		// - 10 : HELP_TEXT
		// - 11 : FLOATING_HELP_TEXT_1
		// - 12 : FLOATING_HELP_TEXT_2
		// - 13 : CASH_CHANGE
		// - 14 : RETICLE
		// - 15 : SUBTITLE_TEXT
		// - 16 : RADIO_STATIONS
		// - 17 : SAVING_GAME
		// - 18 : GAME_STREAM
		// - 19 : WEAPON_WHEEL
		// - 20 : WEAPON_WHEEL_STATS
		// - 21 : HUD_COMPONENTS
		// - 22 : HUD_WEAPONS
		// 
		// These integers also work for the `HIDE_HUD_COMPONENT_THIS_FRAME` native, but instead hides the HUD Component.
		public static void SHOW_HUD_COMPONENT_THIS_FRAME(int id) { Invoke(0x0B4DF1FA60C0E664, V(id)); }
		// Hides area and vehicle name HUD components for one frame.
		public static void HIDE_STREET_AND_CAR_NAMES_THIS_FRAME() { Invoke(0xA4DEDE28B1814289); }
		public static void RESET_RETICULE_VALUES() { Invoke(0x12782CE0A636E9F0); }
		public static void RESET_HUD_COMPONENT_VALUES(int id) { Invoke(0x450930E616475D0D, V(id)); }
		public static void SET_HUD_COMPONENT_POSITION(int id, float x, float y) { Invoke(0xAABB1F56E2A17CED, V(id), V(x), V(y)); }
		public static Vector3 GET_HUD_COMPONENT_POSITION(int id) { return Invoke<Vector3>(0x223CA69A8C4417FD, V(id)); }
		// This native does absolutely nothing, just a nullsub
		public static void CLEAR_REMINDER_MESSAGE() { Invoke(0xB57D8DD645CFA2CF); }
		// World to relative screen coords, this world to screen will keep the text on screen. Was named _GET_SCREEN_COORD_FROM_WORLD_COORD, but this conflicts with 0x34E82F05DF2974F5. As that hash actually matches GET_SCREEN_COORD_FROM_WORLD_COORD that one supercedes and this one was renamed to _GET_2D_COORD_FROM_3D_COORD
		public static int GET_HUD_SCREEN_POSITION_FROM_WORLD_POSITION(float worldX, float worldY, float worldZ, float* screenX, float* screenY) { return Invoke<int>(0xF9904D11F1ACBEC3, V(worldX), V(worldY), V(worldZ), V(screenX), V(screenY)); }
		// Shows a menu for reporting UGC content.
		public static void OPEN_REPORTUGC_MENU() { Invoke(0x523A590C1A3CC0D3); }
		public static void FORCE_CLOSE_REPORTUGC_MENU() { Invoke(0xEE4C0E6DBC6F2C6F); }
		public static bool IS_REPORTUGC_MENU_OPEN() { return Invoke<bool>(0x9135584D09A3437E); }
		public static bool IS_FLOATING_HELP_TEXT_ON_SCREEN(int hudIndex) { return Invoke<bool>(0x2432784ACA090DA4, V(hudIndex)); }
		public static void SET_FLOATING_HELP_TEXT_SCREEN_POSITION(int hudIndex, float x, float y) { Invoke(0x7679CC1BCEBE3D4C, V(hudIndex), V(x), V(y)); }
		public static void SET_FLOATING_HELP_TEXT_WORLD_POSITION(int hudIndex, float x, float y, float z) { Invoke(0x784BA7E0ECEB4178, V(hudIndex), V(x), V(y), V(z)); }
		public static void SET_FLOATING_HELP_TEXT_TO_ENTITY(int hudIndex, Entity entity, float offsetX, float offsetY) { Invoke(0xB094BC1DB4018240, V(hudIndex), V(entity), V(offsetX), V(offsetY)); }
		public static void SET_FLOATING_HELP_TEXT_STYLE(int hudIndex, int p1, int p2, int p3, int p4, int p5) { Invoke(0x788E7FD431BD67F1, V(hudIndex), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void CLEAR_FLOATING_HELP(int hudIndex, bool p1) { Invoke(0x50085246ABD3FEFA, V(hudIndex), V(p1)); }
		// clanFlag: takes a number 0-5
		public static void CREATE_MP_GAMER_TAG_WITH_CREW_COLOR(Player player, string username, bool pointedClanTag, bool isRockstarClan, string clanTag, int clanFlag, int r, int g, int b) { Invoke(0x6DD05E9D83EFA4C9, V(player), V(username), V(pointedClanTag), V(isRockstarClan), V(clanTag), V(clanFlag), V(r), V(g), V(b)); }
		public static bool IS_MP_GAMER_TAG_MOVIE_ACTIVE() { return Invoke<bool>(0x6E0EB3EB47C8D7AA); }
		// clanFlag: takes a number 0-5
		public static int CREATE_FAKE_MP_GAMER_TAG(Ped ped, string username, bool pointedClanTag, bool isRockstarClan, string clanTag, int clanFlag) { return Invoke<int>(0xBFEFE3321A3F5015, V(ped), V(username), V(pointedClanTag), V(isRockstarClan), V(clanTag), V(clanFlag)); }
		public static void REMOVE_MP_GAMER_TAG(int gamerTagId) { Invoke(0x31698AA80E0223F8, V(gamerTagId)); }
		public static bool IS_MP_GAMER_TAG_ACTIVE(int gamerTagId) { return Invoke<bool>(0x4E929E7A5796FD26, V(gamerTagId)); }
		public static bool IS_MP_GAMER_TAG_FREE(int gamerTagId) { return Invoke<bool>(0x595B5178E412E199, V(gamerTagId)); }
		// enum eMpGamerTagComponent
		// {
		// 	MP_TAG_GAMER_NAME,
		// 	MP_TAG_CREW_TAG,
		// 	MP_TAG_HEALTH_ARMOUR,
		// 	MP_TAG_BIG_TEXT,
		// 	MP_TAG_AUDIO_ICON,
		// 	MP_TAG_USING_MENU,
		// 	MP_TAG_PASSIVE_MODE,
		// 	MP_TAG_WANTED_STARS,
		// 	MP_TAG_DRIVER,
		// 	MP_TAG_CO_DRIVER,
		// 	MP_TAG_TAGGED,
		// 	MP_TAG_GAMER_NAME_NEARBY,
		// 	MP_TAG_ARROW,
		// 	MP_TAG_PACKAGES,
		// 	MP_TAG_INV_IF_PED_FOLLOWING,
		// 	MP_TAG_RANK_TEXT,
		// 	MP_TAG_TYPING,
		// 	MP_TAG_BAG_LARGE,
		// 	MP_TAG_ARROW,
		// 	MP_TAG_GANG_CEO,
		// 	MP_TAG_GANG_BIKER,
		// 	MP_TAG_BIKER_ARROW,
		// 	MP_TAG_MC_ROLE_PRESIDENT,
		// 	MP_TAG_MC_ROLE_VICE_PRESIDENT,
		// 	MP_TAG_MC_ROLE_ROAD_CAPTAIN,
		// 	MP_TAG_MC_ROLE_SARGEANT,
		// 	MP_TAG_MC_ROLE_ENFORCER,
		// 	MP_TAG_MC_ROLE_PROSPECT,
		// 	MP_TAG_TRANSMITTER,
		// 	MP_TAG_BOMB
		// };
		public static void SET_MP_GAMER_TAG_VISIBILITY(int gamerTagId, int component, bool toggle, Any p3) { Invoke(0x63BB75ABEDC1F6A0, V(gamerTagId), V(component), V(toggle), V(p3)); }
		public static void SET_ALL_MP_GAMER_TAGS_VISIBILITY(int gamerTagId, bool toggle) { Invoke(0xEE76FF7E6A0166B0, V(gamerTagId), V(toggle)); }
		// Displays a bunch of icons above the players name, and level, and their name twice
		public static void SET_MP_GAMER_TAGS_SHOULD_USE_VEHICLE_HEALTH(int gamerTagId, bool toggle) { Invoke(0xA67F9C46D612B6F1, V(gamerTagId), V(toggle)); }
		public static void SET_MP_GAMER_TAGS_SHOULD_USE_POINTS_HEALTH(int gamerTagId, bool toggle) { Invoke(0xD29EC58C2F6B5014, V(gamerTagId), V(toggle)); }
		public static void SET_MP_GAMER_TAGS_POINT_HEALTH(int gamerTagId, int value, int maximumValue) { Invoke(0x1563FE35E9928E67, V(gamerTagId), V(value), V(maximumValue)); }
		// Sets a gamer tag's component colour
		// 
		// gamerTagId is obtained using for example CREATE_FAKE_MP_GAMER_TAG
		// Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
		public static void SET_MP_GAMER_TAG_COLOUR(int gamerTagId, int component, int hudColorIndex) { Invoke(0x613ED644950626AE, V(gamerTagId), V(component), V(hudColorIndex)); }
		// Ranges from 0 to 255. 0 is grey health bar, ~50 yellow, 200 purple.
		// Should be enabled as flag (2). Has 0 opacity by default.
		// 
		// - This was _SET_MP_GAMER_TAG_HEALTH_BAR_COLOR,
		// -> Rockstar use the EU spelling of 'color' so I hashed the same name with COLOUR and it came back as the correct hash, so it has been corrected above.
		public static void SET_MP_GAMER_TAG_HEALTH_BAR_COLOUR(int gamerTagId, int hudColorIndex) { Invoke(0x3158C77A7E888AB4, V(gamerTagId), V(hudColorIndex)); }
		// Sets flag's sprite transparency. 0-255.
		public static void SET_MP_GAMER_TAG_ALPHA(int gamerTagId, int component, int alpha) { Invoke(0xD48FE545CD46F857, V(gamerTagId), V(component), V(alpha)); }
		// displays wanted star above head
		public static void SET_MP_GAMER_TAG_WANTED_LEVEL(int gamerTagId, int wantedlvl) { Invoke(0xCF228E2AA03099C3, V(gamerTagId), V(wantedlvl)); }
		public static void SET_MP_GAMER_TAG_NUM_PACKAGES(int gamerTagId, int p1) { Invoke(0x9C16459B2324B2CF, V(gamerTagId), V(p1)); }
		public static void SET_MP_GAMER_TAG_NAME(int gamerTagId, string str) { Invoke(0xDEA2B8283BAA3944, V(gamerTagId), V(str)); }
		public static bool IS_UPDATING_MP_GAMER_TAG_NAME_AND_CREW_DETAILS(int gamerTagId) { return Invoke<bool>(0xEB709A36958ABE0D, V(gamerTagId)); }
		public static void SET_MP_GAMER_TAG_BIG_TEXT(int gamerTagId, string str) { Invoke(0x7B7723747CCB55B6, V(gamerTagId), V(str)); }
		public static int GET_CURRENT_WEBPAGE_ID() { return Invoke<int>(0x01A358D9128B7A86); }
		public static int GET_CURRENT_WEBSITE_ID() { return Invoke<int>(0x97D47996FC48CBAD); }
		// Returns the ActionScript flagValue.
		// ActionScript flags are global flags that scaleforms use
		// Flags found during testing
		// 0: Returns 1 if the web_browser keyboard is open, otherwise 0
		// 1: Returns 1 if the player has clicked back twice on the opening page, otherwise 0 (web_browser)
		// 2: Returns how many links the player has clicked in the web_browser scaleform, returns 0 when the browser gets closed
		// 9: Returns the current selection on the mobile phone scaleform
		// 
		// There are 20 flags in total.
		public static int GET_GLOBAL_ACTIONSCRIPT_FLAG(int flagIndex) { return Invoke<int>(0xE3B05614DCE1D014, V(flagIndex)); }
		public static void RESET_GLOBAL_ACTIONSCRIPT_FLAG(int flagIndex) { Invoke(0xB99C4E4D9499DF29, V(flagIndex)); }
		public static bool IS_WARNING_MESSAGE_READY_FOR_CONTROL() { return Invoke<bool>(0xAF42195A42C63BBA); }
		// You can only use text entries. No custom text.
		// 
		// Example: SET_WARNING_MESSAGE("t20", 3, "adder", false, -1, 0, 0, true);
		// errorCode: shows an error code at the bottom left if nonzero
		public static void SET_WARNING_MESSAGE(string titleMsg, int flags, string promptMsg, bool p3, int p4, string p5, string p6, bool showBackground, int errorCode) { Invoke(0x7B1776B3B53F8D74, V(titleMsg), V(flags), V(promptMsg), V(p3), V(p4), V(p5), V(p6), V(showBackground), V(errorCode)); }
		// Shows a warning message on screen with a header.
		// Note: You can only use text entries. No custom text. You can recreate this easily with scaleforms.
		// Example: https://i.imgur.com/ITJt8bJ.png
		public static void SET_WARNING_MESSAGE_WITH_HEADER(string entryHeader, string entryLine1, int instructionalKey, string entryLine2, bool p4, Any p5, Any* showBackground, Any* p7, bool p8, Any p9) { Invoke(0xDC38CC1E35B6A5D7, V(entryHeader), V(entryLine1), V(instructionalKey), V(entryLine2), V(p4), V(p5), V(showBackground), V(p7), V(p8), V(p9)); }
		// You can use this native for custom input, without having to use any scaleform-related natives.
		// The native must be called on tick.
		// The entryHeader must be a valid label.
		// For Single lines use JL_INVITE_N as entryLine1, JL_INVITE_ND for multiple.
		// Notes:
		// - additionalIntInfo: replaces first occurrence of ~1~ in provided label with an integer
		// - additionalTextInfoLine1: replaces first occurrence of ~a~ in provided label, with your custom text
		// - additionalTextInfoLine2: replaces second occurrence of ~a~ in provided label, with your custom text
		// - showBackground: shows black background of the warning screen
		// - errorCode: shows an error code at the bottom left if nonzero
		// Example of usage:
		// SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS("ALERT", "JL_INVITE_ND", 66, "", true, -1, -1, "Testing line 1", "Testing line 2", true, 0);
		// Screenshot:
		// https://imgur.com/a/IYA7vJ8
		public static void SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS(string entryHeader, string entryLine1, int instructionalKey, string entryLine2, bool p4, Any p5, Any additionalIntInfo, string additionalTextInfoLine1, string additionalTextInfoLine2, bool showBackground, int errorCode) { Invoke(0x701919482C74B5AB, V(entryHeader), V(entryLine1), V(instructionalKey), V(entryLine2), V(p4), V(p5), V(additionalIntInfo), V(additionalTextInfoLine1), V(additionalTextInfoLine2), V(showBackground), V(errorCode)); }
		public static void SET_WARNING_MESSAGE_WITH_HEADER_EXTENDED(string entryHeader, string entryLine1, int flags, string entryLine2, bool p4, Any p5, Any* p6, Any* p7, bool showBg, Any p9, Any p10) { Invoke(0x38B55259C2E078ED, V(entryHeader), V(entryLine1), V(flags), V(entryLine2), V(p4), V(p5), V(p6), V(p7), V(showBg), V(p9), V(p10)); }
		// labelTitle: Label of the alert's title.
		// labelMsg: Label of the alert's message.
		// p2: This is an enum, check the description for a list.
		// p3: This is an enum, check the description for a list.
		// labelMsg2: Label of another message line
		// p5: usually 0
		// p6: usually -1
		// p7: usually 0
		// p8: unknown label
		// p9: unknown label
		// background: Set to anything other than 0 or false (even any string) and it will draw a background. Setting it to 0 or false will draw no background.
		// errorCode: Error code, shown at the bottom left if set to value other than 0.
		// 
		// instructionalKey enum list:
		// Buttons = {
		//       Empty = 0,
		//       Select = 1, -- (RETURN)
		//       Ok = 2, -- (RETURN)
		//       Yes = 4, -- (RETURN)
		//       Back = 8, -- (ESC)
		//       Cancel = 16, -- (ESC)
		//       No = 32, -- (ESC)
		//       RetrySpace = 64, -- (SPACE)
		//       Restart = 128, -- (SPACE)
		//       Skip = 256, -- (SPACE)
		//       Quit = 512, -- (ESC)
		//       Adjust = 1024, -- (ARROWS)
		//       SpaceKey = 2048, -- (SPACE)
		//       Share = 4096, -- (SPACE)
		//       SignIn = 8192, -- (SPACE)
		//       Continue = 16384, -- (RETURN)
		//       AdjustLeftRight = 32768, -- (SCROLL L/R)
		//       AdjustUpDown = 65536, -- (SCROLL U/D)
		//       Overwrite = 131072, -- (SPACE)
		//       SocialClubSignup = 262144, -- (RETURN)
		//       Confirm = 524288, -- (RETURN)
		//       Queue = 1048576, -- (RETURN)
		//       RetryReturn = 2097152, -- (RETURN)
		//       BackEsc = 4194304, -- (ESC)
		//       SocialClub = 8388608, -- (RETURN)
		//       Spectate = 16777216, -- (SPACE)
		//       OkEsc = 33554432, -- (ESC)
		//       CancelTransfer = 67108864, -- (ESC)
		//       LoadingSpinner = 134217728,
		//       NoReturnToGTA = 268435456, -- (ESC)
		//       CancelEsc = 536870912, -- (ESC)
		// }
		// 
		// Alt = {
		//       Empty = 0,
		//       No = 1, -- (SPACE)
		//       Host = 2, -- (ESC)
		//       SearchForJob = 4, -- (RETURN)
		//       ReturnKey = 8, -- (TURN)
		//       Freemode = 16, -- (ESC)
		// }
		// 
		// Example: https://i.imgur.com/TvmNF4k.png
		public static void SET_WARNING_MESSAGE_WITH_HEADER_AND_SUBSTRING_FLAGS_EXTENDED(string labelTitle, string labelMessage, int p2, int p3, string labelMessage2, bool p5, int p6, int p7, string p8, string p9, bool background, int errorCode) { Invoke(0x15803FEC3B9A872B, V(labelTitle), V(labelMessage), V(p2), V(p3), V(labelMessage2), V(p5), V(p6), V(p7), V(p8), V(p9), V(background), V(errorCode)); }
		// Has to do with the confirmation overlay (E.g. confirm exit)
		public static Hash GET_WARNING_SCREEN_MESSAGE_HASH() { return Invoke<Hash>(0x81DF9ABA6C83DFF9); }
		// Some sort of list displayed in a warning message. Yet unknown how to prevent repeating.
		// Param names copied from the corresponding scaleform function "SET_LIST_ROW".
		// Example: https://i.imgur.com/arKvOYx.png
		public static bool SET_WARNING_MESSAGE_OPTION_ITEMS(int index, string name, int cash, int rp, int lvl, int colour) { return Invoke<bool>(0x0C5A80A9E096D529, V(index), V(name), V(cash), V(rp), V(lvl), V(colour)); }
		public static bool SET_WARNING_MESSAGE_OPTION_HIGHLIGHT(Any p0) { return Invoke<bool>(0xDAF87174BE7454FF, V(p0)); }
		public static void REMOVE_WARNING_MESSAGE_OPTION_ITEMS() { Invoke(0x6EF54AB721DC6242); }
		public static bool IS_WARNING_MESSAGE_ACTIVE() { return Invoke<bool>(0xE18B138FABC53103); }
		public static void CLEAR_DYNAMIC_PAUSE_MENU_ERROR_MESSAGE() { Invoke(0x7792424AA0EAC32E); }
		// If toggle is true, the map is shown in full screen
		// If toggle is false, the map is shown in normal mode
		public static void CUSTOM_MINIMAP_SET_ACTIVE(bool toggle) { Invoke(0x5354C5BA2EA868A4, V(toggle)); }
		// Sets the sprite of the next BLIP_GALLERY blip, values used in the native scripts: 143 (ObjectiveBlue), 144 (ObjectiveGreen), 145 (ObjectiveRed), 146 (ObjectiveYellow).
		public static void CUSTOM_MINIMAP_SET_BLIP_OBJECT(int spriteId) { Invoke(0x1EAE6DD17B7A5EFA, V(spriteId)); }
		// Add a BLIP_GALLERY at the specific coordinate. Used in fm_maintain_transition_players to display race track points.
		public static int CUSTOM_MINIMAP_CREATE_BLIP(float x, float y, float z) { return Invoke<int>(0x551DF99658DB6EE8, V(x), V(y), V(z)); }
		public static void CUSTOM_MINIMAP_CLEAR_BLIPS() { Invoke(0x2708FC083123F9FF); }
		// Doesn't actually return anything.
		public static bool FORCE_SONAR_BLIPS_THIS_FRAME() { return Invoke<bool>(0x1121BFA1A1A522A8); }
		public static Blip GET_NORTH_BLID_INDEX() { return Invoke<Blip>(0x3F0CF9CB7E589B88); }
		// Toggles whether or not name labels are shown on the expanded minimap next to player blips, like in GTA:O.
		// Doesn't need to be called every frame.
		// Preview: https://i.imgur.com/DfqKWfJ.png
		// 
		// Make sure to call SET_BLIP_CATEGORY with index 7 for this to work on the desired blip.
		public static void DISPLAY_PLAYER_NAME_TAGS_ON_BLIPS(bool toggle) { Invoke(0x82CEDC33687E1F50, V(toggle)); }
		// This native does absolutely nothing, just a nullsub
		public static void DRAW_FRONTEND_BACKGROUND_THIS_FRAME() { Invoke(0x211C4EF450086857); }
		public static void DRAW_HUD_OVER_FADE_THIS_FRAME() { Invoke(0xBF4F34A85CA2970C); }
		// Does stuff like this:
		// gyazo.com/7fcb78ea3520e3dbc5b2c0c0f3712617
		// 
		// Example:
		// int GetHash = GET_HASH_KEY("fe_menu_version_corona_lobby");
		// ACTIVATE_FRONTEND_MENU(GetHash, 0, -1);
		// 
		// bool p1 is a toggle to define the game in pause.
		// int p2 is unknown but -1 always works, not sure why though.
		// 
		// [30/03/2017] ins1de :
		// 
		// the int p2 is actually a component variable. When the pause menu is visible, it opens the tab related to it.
		// 
		// Example : Function.Call(Hash.ACTIVATE_FRONTEND_MENU,-1171018317, 0, 42);
		// Result : Opens the "Online" tab without pausing the menu, with -1 it opens the map.Below is a list of all known Frontend Menu Hashes.
		// - FE_MENU_VERSION_SP_PAUSE
		// - FE_MENU_VERSION_MP_PAUSE
		// - FE_MENU_VERSION_CREATOR_PAUSE
		// - FE_MENU_VERSION_CUTSCENE_PAUSE
		// - FE_MENU_VERSION_SAVEGAME
		// - FE_MENU_VERSION_PRE_LOBBY
		// - FE_MENU_VERSION_LOBBY
		// - FE_MENU_VERSION_MP_CHARACTER_SELECT
		// - FE_MENU_VERSION_MP_CHARACTER_CREATION
		// - FE_MENU_VERSION_EMPTY
		// - FE_MENU_VERSION_EMPTY_NO_BACKGROUND
		// - FE_MENU_VERSION_TEXT_SELECTION
		// - FE_MENU_VERSION_CORONA
		// - FE_MENU_VERSION_CORONA_LOBBY
		// - FE_MENU_VERSION_CORONA_JOINED_PLAYERS
		// - FE_MENU_VERSION_CORONA_INVITE_PLAYERS
		// - FE_MENU_VERSION_CORONA_INVITE_FRIENDS
		// - FE_MENU_VERSION_CORONA_INVITE_CREWS
		// - FE_MENU_VERSION_CORONA_INVITE_MATCHED_PLAYERS
		// - FE_MENU_VERSION_CORONA_INVITE_LAST_JOB_PLAYERS
		// - FE_MENU_VERSION_CORONA_RACE
		// - FE_MENU_VERSION_CORONA_BETTING
		// - FE_MENU_VERSION_JOINING_SCREEN
		// - FE_MENU_VERSION_LANDING_MENU
		// - FE_MENU_VERSION_LANDING_KEYMAPPING_MENU
		public static void ACTIVATE_FRONTEND_MENU(Hash menuhash, bool togglePause, int component) { Invoke(0xEF01D36B9C9D0C7B, V(menuhash), V(togglePause), V(component)); }
		// Before using this native click the native above and look at the decription.
		// 
		// Example:
		// int GetHash = Function.Call<int>(Hash.GET_HASH_KEY, "fe_menu_version_corona_lobby");
		// Function.Call(Hash.ACTIVATE_FRONTEND_MENU, GetHash, 0, -1);
		// Function.Call(Hash.RESTART_FRONTEND_MENU(GetHash, -1);
		// 
		// This native refreshes the frontend menu.
		// 
		// p1 = Hash of Menu
		// p2 = Unknown but always works with -1.
		public static void RESTART_FRONTEND_MENU(Hash menuHash, int p1) { Invoke(0x10706DC6AD2D49C0, V(menuHash), V(p1)); }
		// if (HUD::GET_CURRENT_FRONTEND_MENU_VERSION() == joaat("fe_menu_version_empty_no_background"))
		public static Hash GET_CURRENT_FRONTEND_MENU_VERSION() { return Invoke<Hash>(0x2309595AD6145265); }
		public static void SET_PAUSE_MENU_ACTIVE(bool toggle) { Invoke(0xDF47FC56C71569CF, V(toggle)); }
		public static void DISABLE_FRONTEND_THIS_FRAME() { Invoke(0x6D3465A73092F0E6); }
		public static void SUPPRESS_FRONTEND_RENDERING_THIS_FRAME() { Invoke(0xBA751764F0821256); }
		// Allows opening the pause menu this frame, when the player is dead.
		public static void ALLOW_PAUSE_WHEN_NOT_IN_STATE_OF_PLAY_THIS_FRAME() { Invoke(0xCC3FDDED67BCFC63); }
		public static void SET_FRONTEND_ACTIVE(bool active) { Invoke(0x745711A75AB09277, V(active)); }
		public static bool IS_PAUSE_MENU_ACTIVE() { return Invoke<bool>(0xB0034A223497FFCB); }
		public static bool IS_STORE_PENDING_NETWORK_SHUTDOWN_TO_OPEN() { return Invoke<bool>(0x2F057596F2BD0061); }
		// Returns:
		// 
		// 0
		// 5
		// 10
		// 15
		// 20
		// 25
		// 30
		// 35
		// 
		public static int GET_PAUSE_MENU_STATE() { return Invoke<int>(0x272ACD84970869C5); }
		public static Vector3 GET_PAUSE_MENU_POSITION() { return Invoke<Vector3>(0x5BFF36D6ED83E0AE); }
		public static bool IS_PAUSE_MENU_RESTARTING() { return Invoke<bool>(0x1C491717107431C7); }
		// Not present in retail version of the game, actual definiton seems to be
		// _LOG_DEBUG_INFO(string category, string debugText);
		public static void FORCE_SCRIPTED_GFX_WHEN_FRONTEND_ACTIVE(string p0) { Invoke(0x2162C446DFDF38FD, V(p0)); }
		public static void PAUSE_MENUCEPTION_GO_DEEPER(int page) { Invoke(0x77F16B447824DA6C, V(page)); }
		public static void PAUSE_MENUCEPTION_THE_KICK() { Invoke(0xCDCA26E80FAECB8F); }
		public static void PAUSE_TOGGLE_FULLSCREEN_MAP(Any p0) { Invoke(0x2DE6C5E2E996F178, V(p0)); }
		// Activates the specified frontend menu context.
		// pausemenu.xml defines some specific menu options using 'context'. Context is basically a 'condition'. 
		// The `*ALL*` part of the context means that whatever is being defined, will be active when any or all of those conditions after `*ALL*` are met.
		// The `*NONE*` part of the context section means that whatever is being defined, will NOT be active if any or all of the conditions after `*NONE*` are met.
		// This basically allows you to hide certain menu sections, or things like instructional buttons.
		public static void PAUSE_MENU_ACTIVATE_CONTEXT(Hash contextHash) { Invoke(0xDD564BDD0472C936, V(contextHash)); }
		public static void PAUSE_MENU_DEACTIVATE_CONTEXT(Hash contextHash) { Invoke(0x444D8CF241EC25C5, V(contextHash)); }
		public static bool PAUSE_MENU_IS_CONTEXT_ACTIVE(Hash contextHash) { return Invoke<bool>(0x84698AB38D0C6636, V(contextHash)); }
		public static bool PAUSE_MENU_IS_CONTEXT_MENU_ACTIVE() { return Invoke<bool>(0x2A25ADC48F87841F); }
		public static int PAUSE_MENU_GET_HAIR_COLOUR_INDEX() { return Invoke<int>(0xDE03620F8703A9DF); }
		public static int PAUSE_MENU_GET_MOUSE_HOVER_INDEX() { return Invoke<int>(0x359AF31A4B52F5ED); }
		public static int PAUSE_MENU_GET_MOUSE_HOVER_UNIQUE_ID() { return Invoke<int>(0x13C4B962653A5280); }
		public static bool PAUSE_MENU_GET_MOUSE_CLICK_EVENT(Any* p0, Any* p1, Any* p2) { return Invoke<bool>(0xC8E1071177A23BE5, V(p0), V(p1), V(p2)); }
		public static void PAUSE_MENU_REDRAW_INSTRUCTIONAL_BUTTONS(int p0) { Invoke(0x4895BDEA16E7C080, V(p0)); }
		public static void PAUSE_MENU_SET_BUSY_SPINNER(bool p0, int position, int spinnerIndex) { Invoke(0xC78E239AC5B2DDB9, V(p0), V(position), V(spinnerIndex)); }
		public static void PAUSE_MENU_SET_WARN_ON_TAB_CHANGE(bool p0) { Invoke(0xF06EBB91A81E09E3, V(p0)); }
		public static bool IS_FRONTEND_READY_FOR_CONTROL() { return Invoke<bool>(0x3BAB9A4E4F2FF5C7); }
		// Disables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard. Not sure about Controller-> Does not disable mouse controls. No need to call this every tick.
		// 
		// To enable the keys again, use `0x14621BB1DF14E2B2`.
		public static void TAKE_CONTROL_OF_FRONTEND() { Invoke(0xEC9264727EEC0F28); }
		// Enables frontend (works in custom frontends, not sure about regular pause menu) navigation keys on keyboard if they were disabled using the native below.
		// To disable the keys, use `0xEC9264727EEC0F28`
		public static void RELEASE_CONTROL_OF_FRONTEND() { Invoke(0x14621BB1DF14E2B2); }
		public static bool CODE_WANTS_SCRIPT_TO_TAKE_CONTROL() { return Invoke<bool>(0x66E7CB63C97B7D20); }
		public static int GET_SCREEN_CODE_WANTS_SCRIPT_TO_CONTROL() { return Invoke<int>(0x593FEAE1F73392D4); }
		public static bool IS_NAVIGATING_MENU_CONTENT() { return Invoke<bool>(0x4E3CD0EF8A489541); }
		public static bool HAS_MENU_TRIGGER_EVENT_OCCURRED() { return Invoke<bool>(0xF284AC67940C6812); }
		public static bool HAS_MENU_LAYOUT_CHANGED_EVENT_OCCURRED() { return Invoke<bool>(0x2E22FEFA0100275E); }
		public static void SET_SAVEGAME_LIST_UNIQUE_ID(Any p0) { Invoke(0x0CF54F20DE43879C, V(p0)); }
		public static void GET_MENU_TRIGGER_EVENT_DETAILS(int* lastItemMenuId, int* selectedItemUniqueId) { Invoke(0x36C1451A88A09630, V(lastItemMenuId), V(selectedItemUniqueId)); }
		// lastItemMenuId: this is the menuID of the last selected item minus 1000 (lastItem.menuID - 1000)
		// selectedItemMenuId: same as lastItemMenuId except for the currently selected menu item
		// selectedItemUniqueId: this is uniqueID of the currently selected menu item
		// 
		// when the pausemenu is closed:
		// lastItemMenuId = -1
		// selectedItemMenuId = -1
		// selectedItemUniqueId = 0
		// 
		// when the header gains focus:
		// lastItemMenuId updates as normal or 0 if the pausemenu was just opened
		// selectedItemMenuId becomes a unique id for the pausemenu page that focus was taken from (?) or 0 if the pausemenu was just opened
		// selectedItemUniqueId = -1
		// 
		// when focus is moved from the header to a pausemenu page:
		// lastItemMenuId becomes a unique id for the pausemenu page that focus was moved to (?)
		// selectedItemMenuId = -1
		// selectedItemUniqueId updates as normal
		public static void GET_MENU_LAYOUT_CHANGED_EVENT_DETAILS(int* lastItemMenuId, int* selectedItemMenuId, int* selectedItemUniqueId) { Invoke(0x7E17BE53E1AAABAF, V(lastItemMenuId), V(selectedItemMenuId), V(selectedItemUniqueId)); }
		public static bool GET_PM_PLAYER_CREW_COLOR(int* r, int* g, int* b) { return Invoke<bool>(0xA238192F33110615, V(r), V(g), V(b)); }
		public static bool GET_MENU_PED_INT_STAT(Any p0, Any* p1) { return Invoke<bool>(0xEF4CED81CEBEDC6D, V(p0), V(p1)); }
		public static bool GET_CHARACTER_MENU_PED_INT_STAT(Any p0, Any* p1, Any p2) { return Invoke<bool>(0xCA6B2F7CE32AB653, V(p0), V(p1), V(p2)); }
		public static bool GET_MENU_PED_MASKED_INT_STAT(Hash statHash, int* outValue, int mask, bool p3) { return Invoke<bool>(0x90A6526CF0381030, V(statHash), V(outValue), V(mask), V(p3)); }
		public static bool GET_CHARACTER_MENU_PED_MASKED_INT_STAT(Hash statHash, Any* outValue, int p2, int mask, bool p4) { return Invoke<bool>(0x24A49BEAF468DC90, V(statHash), V(outValue), V(p2), V(mask), V(p4)); }
		public static bool GET_MENU_PED_FLOAT_STAT(Hash statHash, float* outValue) { return Invoke<bool>(0x5FBD7095FE7AE57F, V(statHash), V(outValue)); }
		public static bool GET_CHARACTER_MENU_PED_FLOAT_STAT(float statHash, float* outValue, bool p2) { return Invoke<bool>(0x8F08017F9D7C47BD, V(statHash), V(outValue), V(p2)); }
		// p0 was always 0xAE2602A3.
		public static bool GET_MENU_PED_BOOL_STAT(Hash statHash, bool* outValue) { return Invoke<bool>(0x052991E59076E4E4, V(statHash), V(outValue)); }
		public static void CLEAR_PED_IN_PAUSE_MENU() { Invoke(0x5E62BE5DC58E9E06); }
		// p1 is either 1 or 2 in the PC scripts.
		public static void GIVE_PED_TO_PAUSE_MENU(Ped ped, int p1) { Invoke(0xAC0BFBDC3BE00E14, V(ped), V(p1)); }
		// Toggles the light state for the pause menu ped in frontend menus.
		// 
		// This is used by R* in combination with `SET_PAUSE_MENU_PED_SLEEP_STATE` to toggle the "offline" or "online" state in the "friends" tab of the pause menu in GTA Online.
		// 
		// 
		// Example:
		// Lights On: https://vespura.com/hi/i/2019-04-01_16-09_540ee_1015.png
		// Lights Off: https://vespura.com/hi/i/2019-04-01_16-10_8b5e7_1016.png
		public static void SET_PAUSE_MENU_PED_LIGHTING(bool state) { Invoke(0x3CA6050692BC61B0, V(state)); }
		// Toggles the pause menu ped sleep state for frontend menus.
		// 
		// Example: https://vespura.com/hi/i/2019-04-01_15-51_8ed38_1014.gif
		// 
		// `state` 0 will make the ped slowly fall asleep, 1 will slowly wake the ped up.
		public static void SET_PAUSE_MENU_PED_SLEEP_STATE(bool state) { Invoke(0xECF128344E9FF9F1, V(state)); }
		public static void OPEN_ONLINE_POLICIES_MENU() { Invoke(0x805D7CBB36FD6C4C); }
		public static bool ARE_ONLINE_POLICIES_UP_TO_DATE() { return Invoke<bool>(0xF13FE2A80C05C561); }
		// Returns the same as IS_SOCIAL_CLUB_ACTIVE
		public static bool IS_ONLINE_POLICIES_MENU_ACTIVE() { return Invoke<bool>(0x6F72CD94F7B5B68C); }
		// Uses the `SOCIAL_CLUB2` scaleform.
		// menu: GALLERY, MISSIONS, CREWS, MIGRATE, PLAYLISTS, JOBS
		public static void OPEN_SOCIAL_CLUB_MENU(Hash menu) { Invoke(0x75D3691713C3B05A, V(menu)); }
		public static void CLOSE_SOCIAL_CLUB_MENU() { Invoke(0xD2B32BE3FC1626C6); }
		// HUD::SET_SOCIAL_CLUB_TOUR("Gallery");
		// HUD::SET_SOCIAL_CLUB_TOUR("Missions");
		// HUD::SET_SOCIAL_CLUB_TOUR("General");
		// HUD::SET_SOCIAL_CLUB_TOUR("Playlists");
		public static void SET_SOCIAL_CLUB_TOUR(string name) { Invoke(0x9E778248D6685FE0, V(name)); }
		public static bool IS_SOCIAL_CLUB_ACTIVE() { return Invoke<bool>(0xC406BE343FC4B9AF); }
		public static void SET_TEXT_INPUT_BOX_ENABLED(bool p0) { Invoke(0x1185A8087587322C, V(p0)); }
		public static void FORCE_CLOSE_TEXT_INPUT_BOX() { Invoke(0x8817605C2BA76200); }
		public static void SET_ALLOW_COMMA_ON_TEXT_INPUT(Any p0) { Invoke(0x577599CCED639CA2, V(p0)); }
		public static void OVERRIDE_MP_TEXT_CHAT_TEAM_STRING(Hash gxtEntryHash) { Invoke(0x6A1738B4323FE2D9, V(gxtEntryHash)); }
		// Returns whether or not the text chat (MULTIPLAYER_CHAT Scaleform component) is active.
		public static bool IS_MP_TEXT_CHAT_TYPING() { return Invoke<bool>(0xB118AF58B5F332A1); }
		public static void CLOSE_MP_TEXT_CHAT() { Invoke(0x1AC8F4AD40E22127); }
		public static void MP_TEXT_CHAT_IS_TEAM_JOB(Any p0) { Invoke(0x7C226D5346D4D10A, V(p0)); }
		public static void OVERRIDE_MP_TEXT_CHAT_COLOR(int p0, int hudColor) { Invoke(0xF47E567B3630DD12, V(p0), V(hudColor)); }
		// Hides the chat history, closes the input box and makes it unable to be opened unless called again with FALSE.
		public static void MP_TEXT_CHAT_DISABLE(bool toggle) { Invoke(0x1DB21A44B09E8BA3, V(toggle)); }
		public static void FLAG_PLAYER_CONTEXT_IN_TOURNAMENT(bool toggle) { Invoke(0xCEF214315D276FD1, V(toggle)); }
		// This native turns on the AI blip on the specified ped. It also disappears automatically when the ped is too far or if the ped is dead. You don't need to control it with other natives.
		// 
		// See gtaforums.com/topic/884370-native-research-ai-blips for further information.
		public static void SET_PED_HAS_AI_BLIP(Ped ped, bool hasCone) { Invoke(0xD30C50DF888D58B5, V(ped), V(hasCone)); }
		// color: see SET_BLIP_COLOUR
		public static void SET_PED_HAS_AI_BLIP_WITH_COLOUR(Ped ped, bool hasCone, int color) { Invoke(0xB13DCB4C6FAAD238, V(ped), V(hasCone), V(color)); }
		public static bool DOES_PED_HAVE_AI_BLIP(Ped ped) { return Invoke<bool>(0x15B8ECF844EE67ED, V(ped)); }
		public static void SET_PED_AI_BLIP_GANG_ID(Ped ped, int gangId) { Invoke(0xE52B8E7F85D39A08, V(ped), V(gangId)); }
		public static void SET_PED_AI_BLIP_HAS_CONE(Ped ped, bool toggle) { Invoke(0x3EED80DFF7325CAA, V(ped), V(toggle)); }
		public static void SET_PED_AI_BLIP_FORCED_ON(Ped ped, bool toggle) { Invoke(0x0C4BBF625CA98C4E, V(ped), V(toggle)); }
		public static void SET_PED_AI_BLIP_NOTICE_RANGE(Ped ped, float range) { Invoke(0x97C65887D4B37FA9, V(ped), V(range)); }
		public static void SET_PED_AI_BLIP_SPRITE(Ped ped, int spriteId) { Invoke(0xFCFACD0DB9D7A57D, V(ped), V(spriteId)); }
		public static Blip GET_AI_PED_PED_BLIP_INDEX(Ped ped) { return Invoke<Blip>(0x7CD934010E115C2C, V(ped)); }
		// Returns the current AI BLIP for the specified ped
		public static Blip GET_AI_PED_VEHICLE_BLIP_INDEX(Ped ped) { return Invoke<Blip>(0x56176892826A4FE8, V(ped)); }
		public static bool HAS_DIRECTOR_MODE_BEEN_LAUNCHED_BY_CODE() { return Invoke<bool>(0xA277800A9EAE340E); }
		public static void SET_DIRECTOR_MODE_LAUNCHED_BY_SCRIPT() { Invoke(0x2632482FD6B9AB87); }
		// If toggle is true, hides special ability bar / character name in the pause menu
		// If toggle is false, shows special ability bar / character name in the pause menu
		public static void SET_PLAYER_IS_IN_DIRECTOR_MODE(bool toggle) { Invoke(0x808519373FD336A3, V(toggle)); }
		public static void SET_DIRECTOR_MODE_AVAILABLE(bool toggle) { Invoke(0x04655F9D075D0AE5, V(toggle)); }
		public static void HIDE_HUDMARKERS_THIS_FRAME() { Invoke(0x243296A510B562B6); }




		public static float GET_INTERIOR_HEADING(Interior interior) { return Invoke<float>(0xF49B58631D9E22D9, V(interior)); }
		public static void GET_INTERIOR_LOCATION_AND_NAMEHASH(Interior interior, Vector3* position, Hash* nameHash) { Invoke(0x252BDC06B73FA6EA, V(interior), V(position), V(nameHash)); }

		// Returns the group ID of the specified interior.
		// 0 = default
		// 1 = subway station, subway tracks, sewers
		// 3 = train tunnel under mirror park
		// 5 = tunnel near del perro
		// 6 = train tunnel near chilliad
		// 7 = train tunnel near josiah
		// 8 = train tunnel in sandy shores
		// 9 = braddock tunnel (near chilliad)
		// 12 = tunnel under fort zancudo
		// 14 = train tunnel under cypress flats
		// 18 = rockford plaza parking garage
		// 19 = arcadius parking garage
		// 20 = union depository parking garage
		// 21 = fib parking garage
		public static int GET_INTERIOR_GROUP_ID(Interior interior) { return Invoke<int>(0xE4A84ABF135EF91A, V(interior)); }
		public static Vector3 GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS(Interior interior, float x, float y, float z) { return Invoke<Vector3>(0x9E3B3E6D66F6E22F, V(interior), V(x), V(y), V(z)); }
		public static bool IS_INTERIOR_SCENE() { return Invoke<bool>(0xBC72B5D7A1CBD54D); }
		public static bool IS_VALID_INTERIOR(Interior interior) { return Invoke<bool>(0x26B0E73D7EAAF4D3, V(interior)); }
		public static void CLEAR_ROOM_FOR_ENTITY(Entity entity) { Invoke(0xB365FC0C4E27FFA7, V(entity)); }
		public static void FORCE_ROOM_FOR_ENTITY(Entity entity, Interior interior, Hash roomHashKey) { Invoke(0x52923C4710DD9907, V(entity), V(interior), V(roomHashKey)); }
		// Gets the room hash key from the room that the specified entity is in. Each room in every interior has a unique key. Returns 0 if the entity is outside.
		public static Hash GET_ROOM_KEY_FROM_ENTITY(Entity entity) { return Invoke<Hash>(0x47C2A06D4F5F424B, V(entity)); }
		// Seems to do the exact same as INTERIOR::GET_ROOM_KEY_FROM_ENTITY
		public static Hash GET_KEY_FOR_ENTITY_IN_ROOM(Entity entity) { return Invoke<Hash>(0x399685DB942336BC, V(entity)); }
		// Returns the handle of the interior that the entity is in. Returns 0 if outside.
		public static Interior GET_INTERIOR_FROM_ENTITY(Entity entity) { return Invoke<Interior>(0x2107BA504071A6BB, V(entity)); }
		public static void RETAIN_ENTITY_IN_INTERIOR(Entity entity, Interior interior) { Invoke(0x82EBB79E258FA2B7, V(entity), V(interior)); }
		// Immediately removes entity from an interior. Like sets entity to `limbo` room.
		public static void CLEAR_INTERIOR_STATE_OF_ENTITY(Entity entity) { Invoke(0x85D5422B2039A70D, V(entity)); }
		public static void FORCE_ACTIVATING_TRACKING_ON_ENTITY(Any p0, Any p1) { Invoke(0x38C1CB1CB119A016, V(p0), V(p1)); }
		public static void FORCE_ROOM_FOR_GAME_VIEWPORT(int interiorID, Hash roomHashKey) { Invoke(0x920D853F3E17F1DA, V(interiorID), V(roomHashKey)); }
		// Example of use (carmod_shop)
		// INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME("V_CarModRoom");
		public static void SET_ROOM_FOR_GAME_VIEWPORT_BY_NAME(string roomName) { Invoke(0xAF348AFCB575A441, V(roomName)); }
		// Usage: INTERIOR::SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(INTERIOR::GET_KEY_FOR_ENTITY_IN_ROOM(PLAYER::PLAYER_PED_ID()));
		public static void SET_ROOM_FOR_GAME_VIEWPORT_BY_KEY(Hash roomHashKey) { Invoke(0x405DC2AEF6AF95B9, V(roomHashKey)); }
		public static Hash GET_ROOM_KEY_FOR_GAME_VIEWPORT() { return Invoke<Hash>(0xA6575914D2A0B450); }
		public static void CLEAR_ROOM_FOR_GAME_VIEWPORT() { Invoke(0x23B59D8912F94246); }
		// Returns the current interior id from gameplay camera
		public static Interior GET_INTERIOR_FROM_PRIMARY_VIEW() { return Invoke<Interior>(0xE7D267EC6CA966C3); }

		// Returns interior ID from specified coordinates. If coordinates are outside, then it returns 0.
		// 
		// Example for VB.NET
		// Dim interiorID As Integer = Native.Function.Call(Of Integer)(Hash.GET_INTERIOR_AT_COORDS, X, Y, Z)
		public static Interior GET_INTERIOR_AT_COORDS(float x, float y, float z) { return Invoke<Interior>(0xB0F7F8663821D9C3, V(x), V(y), V(z)); }
		public static void ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME(Pickup pickup, string roomName) { Invoke(0x3F6167F351168730, V(pickup), V(roomName)); }
		public static void PIN_INTERIOR_IN_MEMORY(Interior interior) { Invoke(0x2CA429C029CCF247, V(interior)); }
		// Does something similar to INTERIOR::DISABLE_INTERIOR.
		// 
		// You don't fall through the floor but everything is invisible inside and looks the same as when INTERIOR::DISABLE_INTERIOR is used. Peds behaves normally inside. 
		public static void UNPIN_INTERIOR(Interior interior) { Invoke(0x261CCE7EED010641, V(interior)); }
		public static bool IS_INTERIOR_READY(Interior interior) { return Invoke<bool>(0x6726BDCCC1932F0E, V(interior)); }
		// Only used once in the entire game scripts.
		// Does not actually return anything.
		public static bool SET_INTERIOR_IN_USE(Interior interior) { return Invoke<bool>(0x4C2330E61D3DEB56, V(interior)); }
		// Returns the interior ID representing the requested interior at that location (if found?). The supplied interior string is not the same as the one used to load the interior.
		// 
		// Use: INTERIOR::UNPIN_INTERIOR(INTERIOR::GET_INTERIOR_AT_COORDS_WITH_TYPE(x, y, z, interior))
		// 
		// Interior types include: "V_Michael", "V_Franklins", "V_Franklinshouse", etc.. you can find them in the scripts.
		// 
		// Not a very useful native as you could just use GET_INTERIOR_AT_COORDS instead and get the same result, without even having to specify the interior type.
		public static Interior GET_INTERIOR_AT_COORDS_WITH_TYPE(float x, float y, float z, string interiorType) { return Invoke<Interior>(0x05B7A89BD78797FC, V(x), V(y), V(z), V(interiorType)); }
		// Hashed version of GET_INTERIOR_AT_COORDS_WITH_TYPE
		public static Interior GET_INTERIOR_AT_COORDS_WITH_TYPEHASH(float x, float y, float z, Hash typeHash) { return Invoke<Interior>(0xF0F77ADB9F67E79D, V(x), V(y), V(z), V(typeHash)); }
		public static void ACTIVATE_INTERIOR_GROUPS_USING_CAMERA() { Invoke(0x483ACA1176CA93F1); }
		// Returns true if the collision at the specified coords is marked as being outside (false if there's an interior)
		public static bool IS_COLLISION_MARKED_OUTSIDE(float x, float y, float z) { return Invoke<bool>(0xEEA5AC2EDA7C33E8, V(x), V(y), V(z)); }
		public static Interior GET_INTERIOR_FROM_COLLISION(float x, float y, float z) { return Invoke<Interior>(0xEC4CF9FCB29A4424, V(x), V(y), V(z)); }
		public static void ENABLE_STADIUM_PROBES_THIS_FRAME(bool toggle) { Invoke(0x7ECDF98587E92DEC, V(toggle)); }
		// More info: http://gtaforums.com/topic/836367-adding-props-to-interiors/
		// 
		// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
		public static void ACTIVATE_INTERIOR_ENTITY_SET(Interior interior, string entitySetName) { Invoke(0x55E86AF2712B36A1, V(interior), V(entitySetName)); }
		// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
		public static void DEACTIVATE_INTERIOR_ENTITY_SET(Interior interior, string entitySetName) { Invoke(0x420BD37289EEE162, V(interior), V(entitySetName)); }
		// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
		public static bool IS_INTERIOR_ENTITY_SET_ACTIVE(Interior interior, string entitySetName) { return Invoke<bool>(0x35F7DD45E8C0A16D, V(interior), V(entitySetName)); }
		// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
		public static void SET_INTERIOR_ENTITY_SET_TINT_INDEX(Interior interior, string entitySetName, int color) { Invoke(0xC1F1920BAF281317, V(interior), V(entitySetName), V(color)); }
		public static void REFRESH_INTERIOR(Interior interior) { Invoke(0x41F37C3427C75AE0, V(interior)); }
		// This is the native that is used to hide the exterior of GTA Online apartment buildings when you are inside an apartment.
		// 
		// More info: http://gtaforums.com/topic/836301-hiding-gta-online-apartment-exteriors/
		public static void ENABLE_EXTERIOR_CULL_MODEL_THIS_FRAME(Hash mapObjectHash) { Invoke(0xA97F257D0151A6AB, V(mapObjectHash)); }
		public static void ENABLE_SHADOW_CULL_MODEL_THIS_FRAME(Hash mapObjectHash) { Invoke(0x50C375537449F369, V(mapObjectHash)); }
		// Example: 
		// This removes the interior from the strip club and when trying to walk inside the player just falls:
		// 
		// INTERIOR::DISABLE_INTERIOR(118018, true);
		public static void DISABLE_INTERIOR(Interior interior, bool toggle) { Invoke(0x6170941419D7D8EC, V(interior), V(toggle)); }
		public static bool IS_INTERIOR_DISABLED(Interior interior) { return Invoke<bool>(0xBC5115A5A939DD15, V(interior)); }
		// Does something similar to INTERIOR::DISABLE_INTERIOR
		public static void CAP_INTERIOR(Interior interior, bool toggle) { Invoke(0xD9175F941610DB54, V(interior), V(toggle)); }
		public static bool IS_INTERIOR_CAPPED(Interior interior) { return Invoke<bool>(0x92BAC8ACF88CEC26, V(interior)); }
		public static void DISABLE_METRO_SYSTEM(bool toggle) { Invoke(0x9E6542F0CE8E70A3, V(toggle)); }
		// Jenkins hash _might_ be 0xFC227584.
		public static void SET_IS_EXTERIOR_ONLY(Entity entity, bool toggle) { Invoke(0x7241CCB7D020DB69, V(entity), V(toggle)); }




		public static ScrHandle CREATE_ITEMSET(bool p0) { return Invoke<ScrHandle>(0x35AD299F50D91B24, V(p0)); }
		public static void DESTROY_ITEMSET(ScrHandle itemset) { Invoke(0xDE18220B1C183EDA, V(itemset)); }
		public static bool IS_ITEMSET_VALID(ScrHandle itemset) { return Invoke<bool>(0xB1B1EA596344DFAB, V(itemset)); }
		public static bool ADD_TO_ITEMSET(ScrHandle item, ScrHandle itemset) { return Invoke<bool>(0xE3945201F14637DD, V(item), V(itemset)); }
		public static void REMOVE_FROM_ITEMSET(ScrHandle item, ScrHandle itemset) { Invoke(0x25E68244B0177686, V(item), V(itemset)); }
		public static int GET_ITEMSET_SIZE(ScrHandle itemset) { return Invoke<int>(0xD9127E83ABF7C631, V(itemset)); }
		public static ScrHandle GET_INDEXED_ITEM_IN_ITEMSET(int index, ScrHandle itemset) { return Invoke<ScrHandle>(0x7A197E2521EE2BAB, V(index), V(itemset)); }
		public static bool IS_IN_ITEMSET(ScrHandle item, ScrHandle itemset) { return Invoke<bool>(0x2D0FC594D1E9C107, V(item), V(itemset)); }
		public static void CLEAN_ITEMSET(ScrHandle itemset) { Invoke(0x41BC0D722FC04221, V(itemset)); }




		// This function is hard-coded to always return 0.
		public static bool LOBBY_AUTO_MULTIPLAYER_MENU() { return Invoke<bool>(0xF2CA003F167E21D2); }
		public static bool LOBBY_AUTO_MULTIPLAYER_FREEMODE() { return Invoke<bool>(0xEF7D17BC6C85264C); }
		public static void LOBBY_SET_AUTO_MULTIPLAYER(bool toggle) { Invoke(0xB0C56BD3D808D863, V(toggle)); }
		public static bool LOBBY_AUTO_MULTIPLAYER_EVENT() { return Invoke<bool>(0x8AA464D4E0F6ACCD); }
		public static void LOBBY_SET_AUTO_MULTIPLAYER_EVENT(bool toggle) { Invoke(0xFC309E94546FCDB5, V(toggle)); }
		public static bool LOBBY_AUTO_MULTIPLAYER_RANDOM_JOB() { return Invoke<bool>(0xC6DC823253FBB366); }
		public static void LOBBY_SET_AUTO_MP_RANDOM_JOB(bool toggle) { Invoke(0xC7E7181C09F33B69, V(toggle)); }
		public static void SHUTDOWN_SESSION_CLEARS_AUTO_MULTIPLAYER(bool toggle) { Invoke(0xFA1E0E893D915215, V(toggle)); }




		// Same return values as GET_CURRENT_LANGUAGE
		public static int LOCALIZATION_GET_SYSTEM_LANGUAGE() { return Invoke<int>(0x497420E022796B3F); }
		// 0 = american (en-US)
		// 1 = french (fr-FR)
		// 2 = german (de-DE)
		// 3 = italian (it-IT)
		// 4 = spanish (es-ES)
		// 5 = brazilian (pt-BR)
		// 6 = polish (pl-PL)
		// 7 = russian (ru-RU)
		// 8 = korean (ko-KR)
		// 9 = chinesetrad (zh-TW)
		// 10 = japanese (ja-JP)
		// 11 = mexican (es-MX)
		// 12 = chinesesimp (zh-CN)
		public static int GET_CURRENT_LANGUAGE() { return Invoke<int>(0x2BDD44CC428A7EAE); }
		// Possible return values: 0, 1, 2
		public static int LOCALIZATION_GET_SYSTEM_DATE_TYPE() { return Invoke<int>(0xA8AE43AEC1A61314); }




		public static int GET_ALLOCATED_STACK_SIZE() { return Invoke<int>(0x8B3CA62B1EF19B62); }
		public static int GET_NUMBER_OF_FREE_STACKS_OF_THIS_SIZE(int stackSize) { return Invoke<int>(0xFEAD16FC8F9DFC0F, V(stackSize)); }
		public static void SET_RANDOM_SEED(int seed) { Invoke(0x444D98F98C11F3EC, V(seed)); }
		// Maximum value is 1.
		// At a value of 0 the game will still run at a minimum time scale.
		// 
		// Slow Motion 1: 0.6
		// Slow Motion 2: 0.4
		// Slow Motion 3: 0.2
		public static void SET_TIME_SCALE(float timeScale) { Invoke(0x1D408577D440E81E, V(timeScale)); }
		// If true, the player can't save the game. 
		// 
		// 
		// If the parameter is true, sets the mission flag to true, if the parameter is false, the function does nothing at all.
		// 
		// ^ also, if the mission flag is already set, the function does nothing at all
		public static void SET_MISSION_FLAG(bool toggle) { Invoke(0xC4301E5121A0ED73, V(toggle)); }
		public static bool GET_MISSION_FLAG() { return Invoke<bool>(0xA33CDCCDA663159E); }
		// If the parameter is true, sets the random evt flag to true, if the parameter is false, the function does nothing at all.
		// Does nothing if the mission flag is set.
		public static void SET_RANDOM_EVENT_FLAG(bool toggle) { Invoke(0x971927086CFD2158, V(toggle)); }
		public static bool GET_RANDOM_EVENT_FLAG() { return Invoke<bool>(0xD2D57F1D764117B1); }
		// Returns pointer to an empty string.
		public static byte* GET_CONTENT_TO_LOAD() { return PInvoke<byte>(0x24DA7D7667FD7B09); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		public static void ACTIVITY_FEED_CREATE(string p0, string p1) { Invoke(0x4DCDF92BF64236CD, V(p0), V(p1)); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		public static void ACTIVITY_FEED_ADD_SUBSTRING_TO_CAPTION(string p0) { Invoke(0x31125FD509D9043F, V(p0)); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		public static void ACTIVITY_FEED_ADD_LITERAL_SUBSTRING_TO_CAPTION(string p0) { Invoke(0xEBD3205A207939ED, V(p0)); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		public static void ACTIVITY_FEED_ADD_INT_TO_CAPTION(Any p0) { Invoke(0x97E7E2C04245115B, V(p0)); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		public static void ACTIVITY_FEED_LARGE_IMAGE_URL(string p0) { Invoke(0x916CA67D26FD1E37, V(p0)); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		public static void ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE(string p0, string p1) { Invoke(0xEB078CA2B5E82ADD, V(p0), V(p1)); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		public static void ACTIVITY_FEED_ACTION_START_WITH_COMMAND_LINE_ADD(string p0) { Invoke(0x703CC7F60CBB2B57, V(p0)); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		public static void ACTIVITY_FEED_POST() { Invoke(0x8951EB9C6906D3C8); }
		// Does nothing (it's a nullsub). Seems to be PS4 specific.
		// 
		// Used only once in the scripts (ingamehud) with p0 = "AF_GAMEMODE"
		public static void ACTIVITY_FEED_ONLINE_PLAYED_WITH_POST(string p0) { Invoke(0xBA4B8D83BDC75551, V(p0)); }
		// Hardcoded to return false.
		public static bool HAS_RESUMED_FROM_SUSPEND() { return Invoke<bool>(0xE8B9C0EC9E183F35); }
		// Sets GtaThread+0x14A
		public static void SET_SCRIPT_HIGH_PRIO(bool toggle) { Invoke(0x65D2EBB47E1CEC21, V(toggle)); }
		// Sets bit 3 in GtaThread+0x150
		public static void SET_THIS_IS_A_TRIGGER_SCRIPT(bool toggle) { Invoke(0x6F2135B6129620C1, V(toggle)); }
		public static void INFORM_CODE_OF_CONTENT_ID_OF_CURRENT_UGC_MISSION(string p0) { Invoke(0x8D74E26F54B4E5C3, V(p0)); }
		public static bool GET_BASE_ELEMENT_LOCATION_FROM_METADATA_BLOCK(Any* p0, Any* p1, Any p2, bool p3) { return Invoke<bool>(0xB335F761606DB47C, V(p0), V(p1), V(p2), V(p3)); }
		// Returns current weather name hash
		public static Hash GET_PREV_WEATHER_TYPE_HASH_NAME() { return Invoke<Hash>(0x564B884A05EC45A3); }
		// Returns weather name hash
		public static Hash GET_NEXT_WEATHER_TYPE_HASH_NAME() { return Invoke<Hash>(0x711327CD09C8F162); }
		public static bool IS_PREV_WEATHER_TYPE(string weatherType) { return Invoke<bool>(0x44F28F86433B10A9, V(weatherType)); }
		public static bool IS_NEXT_WEATHER_TYPE(string weatherType) { return Invoke<bool>(0x2FAA3A30BEC0F25D, V(weatherType)); }
		// The following weatherTypes are used in the scripts:
		// "CLEAR"
		// "EXTRASUNNY"
		// "CLOUDS"
		// "OVERCAST"
		// "RAIN"
		// "CLEARING"
		// "THUNDER"
		// "SMOG"
		// "FOGGY"
		// "XMAS"
		// "SNOW"
		// "SNOWLIGHT"
		// "BLIZZARD"
		// "HALLOWEEN"
		// "NEUTRAL"
		public static void SET_WEATHER_TYPE_PERSIST(string weatherType) { Invoke(0x704983DF373B198F, V(weatherType)); }
		// The following weatherTypes are used in the scripts:
		// "CLEAR"
		// "EXTRASUNNY"
		// "CLOUDS"
		// "OVERCAST"
		// "RAIN"
		// "CLEARING"
		// "THUNDER"
		// "SMOG"
		// "FOGGY"
		// "XMAS"
		// "SNOW"
		// "SNOWLIGHT"
		// "BLIZZARD"
		// "HALLOWEEN"
		// "NEUTRAL"
		public static void SET_WEATHER_TYPE_NOW_PERSIST(string weatherType) { Invoke(0xED712CA327900C8A, V(weatherType)); }
		// The following weatherTypes are used in the scripts:
		// "CLEAR"
		// "EXTRASUNNY"
		// "CLOUDS"
		// "OVERCAST"
		// "RAIN"
		// "CLEARING"
		// "THUNDER"
		// "SMOG"
		// "FOGGY"
		// "XMAS"
		// "SNOW"
		// "SNOWLIGHT"
		// "BLIZZARD"
		// "HALLOWEEN"
		// "NEUTRAL"
		public static void SET_WEATHER_TYPE_NOW(string weatherType) { Invoke(0x29B487C359E19889, V(weatherType)); }
		public static void SET_WEATHER_TYPE_OVERTIME_PERSIST(string weatherType, float time) { Invoke(0xFB5045B7C42B75BF, V(weatherType), V(time)); }
		public static void SET_RANDOM_WEATHER_TYPE() { Invoke(0x8B05F884CF7E8020); }
		public static void CLEAR_WEATHER_TYPE_PERSIST() { Invoke(0xCCC39339BEF76CF5); }
		public static void CLEAR_WEATHER_TYPE_NOW_PERSIST_NETWORK(int milliseconds) { Invoke(0x0CF97F497FE7D048, V(milliseconds)); }
		public static void GET_CURR_WEATHER_STATE(Hash* weatherType1, Hash* weatherType2, float* percentWeather2) { Invoke(0xF3BBE884A14BB413, V(weatherType1), V(weatherType2), V(percentWeather2)); }
		// Mixes two weather types. If percentWeather2 is set to 0.0f, then the weather will be entirely of weatherType1, if it is set to 1.0f it will be entirely of weatherType2. If it's set somewhere in between, there will be a mixture of weather behaviors. To test, try this in the RPH console, and change the float to different values between 0 and 1:
		// 
		// execute "NativeFunction.Natives.x578C752848ECFA0C(Game.GetHashKey(""RAIN""), Game.GetHashKey(""SMOG""), 0.50f);
		// 
		// Note that unlike most of the other weather natives, this native takes the hash of the weather name, not the plain string. These are the weather names and their hashes:
		// 
		// CLEAR  0x36A83D84
		// EXTRASUNNY  0x97AA0A79
		// CLOUDS  0x30FDAF5C
		// OVERCAST    0xBB898D2D
		// RAIN    0x54A69840
		// CLEARING    0x6DB1A50D
		// THUNDER 0xB677829F
		// SMOG    0x10DCF4B5
		// FOGGY   0xAE737644
		// XMAS    0xAAC9C895
		// SNOWLIGHT   0x23FB812B
		// BLIZZARD    0x27EA2814
		// 
		// 
		// 
		// 
		// 
		// /* OLD INVALID INFO BELOW */
		// Not tested. Based purely on disassembly. Instantly sets the weather to sourceWeather, then transitions to targetWeather over the specified transitionTime in seconds.
		// 
		// If an invalid hash is specified for sourceWeather, the current weather type will be used.
		// If an invalid hash is specified for targetWeather, the next weather type will be used.
		// If an invalid hash is specified for both sourceWeather and targetWeather, the function just changes the transition time of the current transition.
		public static void SET_CURR_WEATHER_STATE(Hash weatherType1, Hash weatherType2, float percentWeather2) { Invoke(0x578C752848ECFA0C, V(weatherType1), V(weatherType2), V(percentWeather2)); }
		// Appears to have an optional bool parameter that is unused in the scripts.
		// 
		// If you pass true, something will be set to zero.
		public static void SET_OVERRIDE_WEATHER(string weatherType) { Invoke(0xA43D5C6FE51ADBEF, V(weatherType)); }
		// Identical to SET_OVERRIDE_WEATHER but has an additional bool param that sets some weather var to 0 if true
		public static void SET_OVERRIDE_WEATHEREX(string weatherType, bool p1) { Invoke(0x1178E104409FE58C, V(weatherType), V(p1)); }
		public static void CLEAR_OVERRIDE_WEATHER() { Invoke(0x338D2E3477711050); }
		public static void WATER_OVERRIDE_SET_SHOREWAVEAMPLITUDE(float amplitude) { Invoke(0xB8F87EAD7533B176, V(amplitude)); }
		public static void WATER_OVERRIDE_SET_SHOREWAVEMINAMPLITUDE(float minAmplitude) { Invoke(0xC3EAD29AB273ECE8, V(minAmplitude)); }
		public static void WATER_OVERRIDE_SET_SHOREWAVEMAXAMPLITUDE(float maxAmplitude) { Invoke(0xA7A1127490312C36, V(maxAmplitude)); }
		public static void WATER_OVERRIDE_SET_OCEANNOISEMINAMPLITUDE(float minAmplitude) { Invoke(0x31727907B2C43C55, V(minAmplitude)); }
		public static void WATER_OVERRIDE_SET_OCEANWAVEAMPLITUDE(float amplitude) { Invoke(0x405591EC8FD9096D, V(amplitude)); }
		public static void WATER_OVERRIDE_SET_OCEANWAVEMINAMPLITUDE(float minAmplitude) { Invoke(0xF751B16FB32ABC1D, V(minAmplitude)); }
		public static void WATER_OVERRIDE_SET_OCEANWAVEMAXAMPLITUDE(float maxAmplitude) { Invoke(0xB3E6360DDE733E82, V(maxAmplitude)); }
		public static void WATER_OVERRIDE_SET_RIPPLEBUMPINESS(float bumpiness) { Invoke(0x7C9C0B1EEB1F9072, V(bumpiness)); }
		public static void WATER_OVERRIDE_SET_RIPPLEMINBUMPINESS(float minBumpiness) { Invoke(0x6216B116083A7CB4, V(minBumpiness)); }
		public static void WATER_OVERRIDE_SET_RIPPLEMAXBUMPINESS(float maxBumpiness) { Invoke(0x9F5E6BB6B34540DA, V(maxBumpiness)); }
		public static void WATER_OVERRIDE_SET_RIPPLEDISTURB(float disturb) { Invoke(0xB9854DFDE0D833D6, V(disturb)); }
		// This seems to edit the water wave, intensity around your current location.
		// 
		// 0.0f = Normal
		// 1.0f = So Calm and Smooth, a boat will stay still.
		// 3.0f = Really Intense.
		public static void WATER_OVERRIDE_SET_STRENGTH(float strength) { Invoke(0xC54A08C85AE4D410, V(strength)); }
		public static void WATER_OVERRIDE_FADE_IN(float p0) { Invoke(0xA8434F1DFF41D6E7, V(p0)); }
		public static void WATER_OVERRIDE_FADE_OUT(float p0) { Invoke(0xC3C221ADDDE31A11, V(p0)); }
		// Sets the the normalized wind speed value. The wind speed clamps always at 12.0, SET_WIND sets the wind in a percentage, 0.0 is 0 and 1.0 is 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
		public static void SET_WIND(float speed) { Invoke(0xAC3A74E8384A9919, V(speed)); }
		// Using this native will set the absolute wind speed value. The wind speed clamps to a range of 0.0- 12.0. Setting this value to a negative number resumes the random wind speed changes provided by the game.
		public static void SET_WIND_SPEED(float speed) { Invoke(0xEE09ECEDBABE47FC, V(speed)); }
		public static float GET_WIND_SPEED() { return Invoke<float>(0xA8CF1CC0AFCD3F12); }
		// The wind direction in radians
		// 180 degrees (PI), wind will blow from the south. Setting this value to a negative number resumes the random wind direction changes provided by the game.
		public static void SET_WIND_DIRECTION(float direction) { Invoke(0xEB0F4468467B4528, V(direction)); }
		public static Vector3 GET_WIND_DIRECTION() { return Invoke<Vector3>(0x1F400FEF721170DA); }
		// With an `intensity` higher than `0.5f`, only the creation of puddles gets faster, rain and rain sound won't increase after that.
		// With an `intensity` of `0.0f` rain and rain sounds are disabled and there won't be any new puddles.
		// To use the rain intensity of the current weather, call this native with `-1f` as `intensity`.
		public static void SET_RAIN(float intensity) { Invoke(0x643E26EA6E024D92, V(intensity)); }
		public static float GET_RAIN_LEVEL() { return Invoke<float>(0x96695E368AD855F3); }
		public static void SET_SNOW(float level) { Invoke(0x7F06937B0CDCBC1A, V(level)); }
		public static float GET_SNOW_LEVEL() { return Invoke<float>(0xC5868A966E5BE3AE); }
		// creates single lightning+thunder at random position
		public static void FORCE_LIGHTNING_FLASH() { Invoke(0xF6062E089251C898); }
		public static void SET_CLOUD_SETTINGS_OVERRIDE(string p0) { Invoke(0x02DEAAC8F8EA7FE7, V(p0)); }
		public static void PRELOAD_CLOUD_HAT(string name) { Invoke(0x11B56FBBF7224868, V(name)); }
		// The following cloudhats are useable:
		// altostratus
		// Cirrus
		// cirrocumulus
		// Clear 01
		// Cloudy 01
		// Contrails
		// Horizon
		// horizonband1
		// horizonband2
		// horizonband3
		// horsey
		// Nimbus
		// Puffs
		// RAIN
		// Snowy 01
		// Stormy 01
		// stratoscumulus
		// Stripey
		// shower
		// Wispy
		// 
		public static void LOAD_CLOUD_HAT(string name, float transitionTime) { Invoke(0xFC4842A34657BFCB, V(name), V(transitionTime)); }
		public static void UNLOAD_CLOUD_HAT(string name, float p1) { Invoke(0xA74802FB8D0B7814, V(name), V(p1)); }
		public static void UNLOAD_ALL_CLOUD_HATS() { Invoke(0x957E790EA1727B64); }
		public static void SET_CLOUDS_ALPHA(float opacity) { Invoke(0xF36199225D6D8C86, V(opacity)); }
		public static float GET_CLOUDS_ALPHA() { return Invoke<float>(0x20AC25E781AE4A84); }
		public static int GET_GAME_TIMER() { return Invoke<int>(0x9CD27B0045628463); }
		public static float GET_FRAME_TIME() { return Invoke<float>(0x15C40837039FFAF7); }
		public static float GET_SYSTEM_TIME_STEP() { return Invoke<float>(0xE599A503B3837E1B); }
		public static int GET_FRAME_COUNT() { return Invoke<int>(0xFC8202EFC642E6F2); }
		public static float GET_RANDOM_FLOAT_IN_RANGE(float startRange, float endRange) { return Invoke<float>(0x313CE5879CEB6FCD, V(startRange), V(endRange)); }
		public static int GET_RANDOM_INT_IN_RANGE(int startRange, int endRange) { return Invoke<int>(0xD53343AA4FB7DD28, V(startRange), V(endRange)); }
		public static int GET_RANDOM_MWC_INT_IN_RANGE(int startRange, int endRange) { return Invoke<int>(0xF2D49816A804D134, V(startRange), V(endRange)); }
		// Gets the ground elevation at the specified position. Note that if the specified position is below ground level, the function will output zero!
		// 
		// x: Position on the X-axis to get ground elevation at.
		// y: Position on the Y-axis to get ground elevation at.
		// z: Position on the Z-axis to get ground elevation at.
		// groundZ: The ground elevation at the specified position.
		// ignoreWater: Nearly always 0, very rarely 1 in the scripts: https://gfycat.com/NiftyTatteredCricket
		// 
		// Bear in mind this native can only calculate the elevation when the coordinates are within the client's render distance.
		public static bool GET_GROUND_Z_FOR_3D_COORD(float x, float y, float z, float* groundZ, bool ignoreWater, bool p5) { return Invoke<bool>(0xC906A7DAB05C8D2B, V(x), V(y), V(z), V(groundZ), V(ignoreWater), V(p5)); }
		public static bool GET_GROUND_Z_AND_NORMAL_FOR_3D_COORD(float x, float y, float z, float* groundZ, Vector3* normal) { return Invoke<bool>(0x8BDC7BFC57A81E76, V(x), V(y), V(z), V(groundZ), V(normal)); }
		public static bool GET_GROUND_Z_EXCLUDING_OBJECTS_FOR_3D_COORD(float x, float y, float z, float* groundZ, bool p4, bool p5) { return Invoke<bool>(0x9E82F0F362881B29, V(x), V(y), V(z), V(groundZ), V(p4), V(p5)); }
		public static float ASIN(float p0) { return Invoke<float>(0xC843060B5765DCE7, V(p0)); }
		public static float ACOS(float p0) { return Invoke<float>(0x1D08B970013C34B6, V(p0)); }
		public static float TAN(float p0) { return Invoke<float>(0x632106CC96E82E91, V(p0)); }
		public static float ATAN(float p0) { return Invoke<float>(0xA9D1795CD5043663, V(p0)); }
		public static float ATAN2(float p0, float p1) { return Invoke<float>(0x8927CBF9D22261A4, V(p0), V(p1)); }
		// Returns the distance between two three-dimensional points, optionally ignoring the Z values.
		// If useZ is false, only the 2D plane (X-Y) will be considered for calculating the distance.
		// 
		// Consider using this faster native instead: SYSTEM::VDIST - DVIST always takes in consideration the 3D coordinates.
		public static float GET_DISTANCE_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, bool useZ) { return Invoke<float>(0xF1B760881820C952, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(useZ)); }
		public static float GET_ANGLE_BETWEEN_2D_VECTORS(float x1, float y1, float x2, float y2) { return Invoke<float>(0x186FC4BE848E1C92, V(x1), V(y1), V(x2), V(y2)); }
		// dx = x1 - x2
		// dy = y1 - y2
		public static float GET_HEADING_FROM_VECTOR_2D(float dx, float dy) { return Invoke<float>(0x2FFB6B224F4B2926, V(dx), V(dy)); }
		// returns a float between 0.0 and 1.0, clamp: sets whether the product should be clamped between the given coordinates
		public static float GET_RATIO_OF_CLOSEST_POINT_ON_LINE(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, bool clamp) { return Invoke<float>(0x7F8F6405F4777AF6, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(x3), V(y3), V(z3), V(clamp)); }
		// clamp: sets whether the product should be clamped between the given coordinates
		public static Vector3 GET_CLOSEST_POINT_ON_LINE(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, bool clamp) { return Invoke<Vector3>(0x21C235BC64831E5A, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(x3), V(y3), V(z3), V(clamp)); }
		public static bool GET_LINE_PLANE_INTERSECTION(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float* p12) { return Invoke<bool>(0xF56DFB7B61BE7276, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10), V(p11), V(p12)); }
		public static bool GET_POINT_AREA_OVERLAP(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12, Any p13) { return Invoke<bool>(0xA0AD167E4B39D9A2, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10), V(p11), V(p12), V(p13)); }
		// This sets bit [offset] of [address] to on.
		// 
		// The offsets used are different bits to be toggled on and off, typically there is only one address used in a script.
		// 
		// Example:
		// MISC::SET_BIT(&bitAddress, 1);
		// 
		// To check if this bit has been enabled:
		// MISC::IS_BIT_SET(bitAddress, 1); // will return 1 afterwards
		// 
		// Please note, this method may assign a value to [address] when used.
		public static void SET_BIT(int* address, int offset) { Invoke(0x933D6A9EEC1BACD0, V(address), V(offset)); }
		// This sets bit [offset] of [address] to off.
		// 
		// Example:
		// MISC::CLEAR_BIT(&bitAddress, 1);
		// 
		// To check if this bit has been enabled:
		// MISC::IS_BIT_SET(bitAddress, 1); // will return 0 afterwards
		public static void CLEAR_BIT(int* address, int offset) { Invoke(0xE80492A9AC099A93, V(address), V(offset)); }
		// This native converts its past string to hash. It is hashed using jenkins one at a time method.
		public static Hash GET_HASH_KEY(string str) { return Invoke<Hash>(0xD24D37CC275948CC, V(str)); }
		// This native always come right before SET_ENTITY_QUATERNION where its final 4 parameters are SLERP_NEAR_QUATERNION p9 to p12
		public static void SLERP_NEAR_QUATERNION(float t, float x, float y, float z, float w, float x1, float y1, float z1, float w1, float* outX, float* outY, float* outZ, float* outW) { Invoke(0xF2F6A2FA49278625, V(t), V(x), V(y), V(z), V(w), V(x1), V(y1), V(z1), V(w1), V(outX), V(outY), V(outZ), V(outW)); }
		public static bool IS_AREA_OCCUPIED(float p0, float p1, float p2, float p3, float p4, float p5, bool p6, bool p7, bool p8, bool p9, bool p10, Any p11, bool p12) { return Invoke<bool>(0xA61B4DF533DCB56E, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10), V(p11), V(p12)); }
		public static bool IS_AREA_OCCUPIED_SLOW(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10, Any p11, Any p12) { return Invoke<bool>(0x39455BF4F4F55186, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10), V(p11), V(p12)); }
		// `range`: The range, seems to not be very accurate during testing.
		// `p4`: Unknown, when set to true it seems to always return true no matter what I try.
		// `checkVehicle`: Check for any vehicles in that area.
		// `checkPeds`: Check for any peds in that area.
		// `ignoreEntity`: This entity will be ignored if it's in the area. Set to 0 if you don't want to exclude any entities.
		// The bool parameters that are documented have not been confirmed. They are just documented from what I've found during testing. They may not work as expected in all cases.
		// 
		// Returns true if there is anything in that location matching the provided parameters.
		public static bool IS_POSITION_OCCUPIED(float x, float y, float z, float range, bool p4, bool checkVehicles, bool checkPeds, bool p7, bool p8, Entity ignoreEntity, bool p10) { return Invoke<bool>(0xADCDE75E1C60F32D, V(x), V(y), V(z), V(range), V(p4), V(checkVehicles), V(checkPeds), V(p7), V(p8), V(ignoreEntity), V(p10)); }
		public static bool IS_POINT_OBSCURED_BY_A_MISSION_ENTITY(float p0, float p1, float p2, float p3, float p4, float p5, Any p6) { return Invoke<bool>(0xE54E209C35FFA18D, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		// Example: CLEAR_AREA(0, 0, 0, 30, true, false, false, false);
		public static void CLEAR_AREA(float X, float Y, float Z, float radius, bool p4, bool ignoreCopCars, bool ignoreObjects, bool p7) { Invoke(0xA56F01F3765B93A0, V(X), V(Y), V(Z), V(radius), V(p4), V(ignoreCopCars), V(ignoreObjects), V(p7)); }
		// MISC::CLEAR_AREA_LEAVE_VEHICLE_HEALTH(x, y, z, radius, false, false, false, false); seem to make all objects go away, peds, vehicles etc. All booleans set to true doesn't seem to change anything. 
		public static void CLEAR_AREA_LEAVE_VEHICLE_HEALTH(float x, float y, float z, float radius, bool p4, bool p5, bool p6, bool p7) { Invoke(0x957838AAF91BD12D, V(x), V(y), V(z), V(radius), V(p4), V(p5), V(p6), V(p7)); }
		// Example:
		// CLEAR_AREA_OF_VEHICLES(0.0f, 0.0f, 0.0f, 10000.0f, false, false, false, false, false, false);
		public static void CLEAR_AREA_OF_VEHICLES(float x, float y, float z, float radius, bool p4, bool p5, bool p6, bool p7, bool p8, bool p9, Any p10) { Invoke(0x01C7B9B38428AEB6, V(x), V(y), V(z), V(radius), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10)); }
		public static void CLEAR_ANGLED_AREA_OF_VEHICLES(float x1, float y1, float z1, float x2, float y2, float z2, float width, bool p7, bool p8, bool p9, bool p10, bool p11, Any p12, Any p13) { Invoke(0x11DB3500F042A8AA, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(p7), V(p8), V(p9), V(p10), V(p11), V(p12), V(p13)); }
		// I looked through the PC scripts that this site provides you with a link to find. It shows the last param mainly uses, (0, 2, 6, 16, and 17) so I am going to assume it is a type of flag. 
		public static void CLEAR_AREA_OF_OBJECTS(float x, float y, float z, float radius, int flags) { Invoke(0xDD9B9B385AAC7F5B, V(x), V(y), V(z), V(radius), V(flags)); }
		// Example:       CLEAR_AREA_OF_PEDS(0, 0, 0, 10000, 1);
		public static void CLEAR_AREA_OF_PEDS(float x, float y, float z, float radius, int flags) { Invoke(0xBE31FD6CE464AC59, V(x), V(y), V(z), V(radius), V(flags)); }
		// flags appears to always be 0
		public static void CLEAR_AREA_OF_COPS(float x, float y, float z, float radius, int flags) { Invoke(0x04F8FC8FCF58F88D, V(x), V(y), V(z), V(radius), V(flags)); }
		// flags is usually 0 in the scripts.
		public static void CLEAR_AREA_OF_PROJECTILES(float x, float y, float z, float radius, int flags) { Invoke(0x0A1CB9094635D1A6, V(x), V(y), V(z), V(radius), V(flags)); }
		// Possibly used to clear scenario points.
		public static void CLEAR_SCENARIO_SPAWN_HISTORY() { Invoke(0x7EC6F9A478A6A512); }
		// ignoreVehicle - bypasses vehicle check of the local player (it will not open if you are in a vehicle and this is set to false)
		public static void SET_SAVE_MENU_ACTIVE(bool ignoreVehicle) { Invoke(0xC9BF75D28165FF77, V(ignoreVehicle)); }
		public static int GET_STATUS_OF_MANUAL_SAVE() { return Invoke<int>(0x397BAA01068BAA96); }
		public static void SET_CREDITS_ACTIVE(bool toggle) { Invoke(0xB938B7E6D3C0620C, V(toggle)); }
		public static void SET_CREDITS_FADE_OUT_WITH_SCREEN(bool toggle) { Invoke(0xB51B9AB9EF81868C, V(toggle)); }
		public static bool HAVE_CREDITS_REACHED_END() { return Invoke<bool>(0x075F1D57402C93BA); }
		public static bool ARE_CREDITS_RUNNING() { return Invoke<bool>(0xD19C0826DC20CF1C); }
		public static void TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME(string scriptName) { Invoke(0x9DC711BC69C548DF, V(scriptName)); }
		public static void NETWORK_SET_SCRIPT_IS_SAFE_FOR_NETWORK_GAME() { Invoke(0x9243BAC96D64C050); }
		// Returns the index of the newly created hospital spawn point.
		// 
		// p3 might be radius?
		public static int ADD_HOSPITAL_RESTART(float x, float y, float z, float p3, Any p4) { return Invoke<int>(0x1F464EF988465A81, V(x), V(y), V(z), V(p3), V(p4)); }
		// The game by default has 5 hospital respawn points. Disabling them all will cause the player to respawn at the last position they were.
		public static void DISABLE_HOSPITAL_RESTART(int hospitalIndex, bool toggle) { Invoke(0xC8535819C450EBA8, V(hospitalIndex), V(toggle)); }
		public static int ADD_POLICE_RESTART(float p0, float p1, float p2, float p3, Any p4) { return Invoke<int>(0x452736765B31FC4B, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		// Disables the spawn point at the police house on the specified index.
		// 
		// policeIndex: The police house index.
		// toggle: true to enable the spawn point, false to disable.
		// 
		// - Nacorpio
		public static void DISABLE_POLICE_RESTART(int policeIndex, bool toggle) { Invoke(0x23285DED6EBD7EA3, V(policeIndex), V(toggle)); }
		public static void SET_RESTART_COORD_OVERRIDE(float x, float y, float z, float heading) { Invoke(0x706B5EDCAA7FA663, V(x), V(y), V(z), V(heading)); }
		public static void CLEAR_RESTART_COORD_OVERRIDE() { Invoke(0xA2716D40842EAF79); }
		public static void PAUSE_DEATH_ARREST_RESTART(bool toggle) { Invoke(0x2C2B3493FBF51C71, V(toggle)); }
		public static void IGNORE_NEXT_RESTART(bool toggle) { Invoke(0x21FFB63D8C615361, V(toggle)); }
		// Sets whether the game should fade out after the player dies.
		public static void SET_FADE_OUT_AFTER_DEATH(bool toggle) { Invoke(0x4A18E01DF2C87B86, V(toggle)); }
		// Sets whether the game should fade out after the player is arrested.
		public static void SET_FADE_OUT_AFTER_ARREST(bool toggle) { Invoke(0x1E0B4DC0D990A4E7, V(toggle)); }
		// Sets whether the game should fade in after the player dies or is arrested.
		public static void SET_FADE_IN_AFTER_DEATH_ARREST(bool toggle) { Invoke(0xDA66D2796BA33F12, V(toggle)); }
		public static void SET_FADE_IN_AFTER_LOAD(bool toggle) { Invoke(0xF3D78F59DFE18D79, V(toggle)); }
		// returns savehouseHandle
		public static int REGISTER_SAVE_HOUSE(float x, float y, float z, float p3, string p4, Any p5, Any p6) { return Invoke<int>(0xC0714D0A7EEECA54, V(x), V(y), V(z), V(p3), V(p4), V(p5), V(p6)); }
		public static void SET_SAVE_HOUSE(int savehouseHandle, bool p1, bool p2) { Invoke(0x4F548CABEAE553BC, V(savehouseHandle), V(p1), V(p2)); }
		public static bool OVERRIDE_SAVE_HOUSE(bool p0, float p1, float p2, float p3, float p4, bool p5, float p6, float p7) { return Invoke<bool>(0x1162EA8AE9D24EEA, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7)); }
		public static bool GET_SAVE_HOUSE_DETAILS_AFTER_SUCCESSFUL_LOAD(Vector3* p0, float* p1, bool* fadeInAfterLoad, bool* p3) { return Invoke<bool>(0xA4A0065E39C9F25C, V(p0), V(p1), V(fadeInAfterLoad), V(p3)); }
		public static void DO_AUTO_SAVE() { Invoke(0x50EEAAD86232EE55); }
		// Returns true if profile setting 208 is equal to 0.
		public static bool GET_IS_AUTO_SAVE_OFF() { return Invoke<bool>(0x6E04F06094C87047); }
		public static bool IS_AUTO_SAVE_IN_PROGRESS() { return Invoke<bool>(0x69240733738C19A0); }
		public static bool HAS_CODE_REQUESTED_AUTOSAVE() { return Invoke<bool>(0x2107A3773771186D); }
		public static void CLEAR_CODE_REQUESTED_AUTOSAVE() { Invoke(0x06462A961E94B67C); }
		public static void BEGIN_REPLAY_STATS(Any p0, Any p1) { Invoke(0xE0E500246FF73D66, V(p0), V(p1)); }
		public static void ADD_REPLAY_STAT_VALUE(Any value) { Invoke(0x69FE6DC87BD2A5E9, V(value)); }
		public static void END_REPLAY_STATS() { Invoke(0xA23E821FBDF8A5F2); }
		public static bool HAVE_REPLAY_STATS_BEEN_STORED() { return Invoke<bool>(0xD642319C54AADEB6); }
		public static int GET_REPLAY_STAT_MISSION_ID() { return Invoke<int>(0x5B1F2E327B6B6FE1); }
		public static int GET_REPLAY_STAT_MISSION_TYPE() { return Invoke<int>(0x2B626A0150E4D449); }
		public static int GET_REPLAY_STAT_COUNT() { return Invoke<int>(0xDC9274A7EF6B2867); }
		public static int GET_REPLAY_STAT_AT_INDEX(int index) { return Invoke<int>(0x8098C8D6597AAE18, V(index)); }
		public static void CLEAR_REPLAY_STATS() { Invoke(0x1B1AB132A16FDA55); }
		public static bool QUEUE_MISSION_REPEAT_LOAD() { return Invoke<bool>(0x72DE52178C291CB5); }
		// Shows the screen which is visible before you redo a mission? The game will make a restoration point where you will cameback when the mission is over.
		// Returns 1 if the message isn't currently on screen
		public static bool QUEUE_MISSION_REPEAT_SAVE() { return Invoke<bool>(0x44A0BDC559B35F6E); }
		public static bool QUEUE_MISSION_REPEAT_SAVE_FOR_BENCHMARK_TEST() { return Invoke<bool>(0xEB2104E905C6F2E9); }
		public static int GET_STATUS_OF_MISSION_REPEAT_SAVE() { return Invoke<int>(0x2B5E102E4A42F2BF); }
		public static bool IS_MEMORY_CARD_IN_USE() { return Invoke<bool>(0x8A75CE2956274ADD); }
		public static void SHOOT_SINGLE_BULLET_BETWEEN_COORDS(float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, Hash weaponHash, Ped ownerPed, bool isAudible, bool isInvisible, float speed) { Invoke(0x867654CBC7606F2C, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(damage), V(p7), V(weaponHash), V(ownerPed), V(isAudible), V(isInvisible), V(speed)); }
		// entity - entity to ignore
		public static void SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY(float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, Hash weaponHash, Ped ownerPed, bool isAudible, bool isInvisible, float speed, Entity entity, Any p14) { Invoke(V(0xE3A7742E0B7A2F8B), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(damage), V(p7), V(weaponHash), V(ownerPed), V(isAudible), V(isInvisible), V(speed), V(entity), V(p14)); }
		// entity - entity to ignore
		// targetEntity - entity to home in on, if the weapon hash provided supports homing
		public static void SHOOT_SINGLE_BULLET_BETWEEN_COORDS_IGNORE_ENTITY_NEW(float x1, float y1, float z1, float x2, float y2, float z2, int damage, bool p7, Hash weaponHash, Ped ownerPed, bool isAudible, bool isInvisible, float speed, Entity entity, bool p14, bool p15, Entity targetEntity, bool p17, Any p18, Any p19, Any p20) { Invoke(V(0xBFE5756E7407064A), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(damage), V(p7), V(weaponHash), V(ownerPed), V(isAudible), V(isInvisible), V(speed), V(entity), V(p14), V(p15), V(targetEntity), V(p17), V(p18), V(p19), V(p20)); }
		// Gets the dimensions of a model.
		// 
		// Calculate (maximum - minimum) to get the size, in which case, Y will be how long the model is.
		// 
		// Example from the scripts: MISC::GET_MODEL_DIMENSIONS(ENTITY::GET_ENTITY_MODEL(PLAYER::PLAYER_PED_ID()), &v_1A, &v_17);
		public static void GET_MODEL_DIMENSIONS(Hash modelHash, Vector3* minimum, Vector3* maximum) { Invoke(0x03E8D3D5F549087A, V(modelHash), V(minimum), V(maximum)); }
		// Sets a visually fake wanted level on the user interface. Used by Rockstar's scripts to "override" regular wanted levels and make custom ones while the real wanted level and multipliers are still in effect.
		// 
		// Max is 6, anything above this makes it just 6. Also the mini-map gets the red & blue flashing effect.
		public static void SET_FAKE_WANTED_LEVEL(int fakeWantedLevel) { Invoke(0x1454F2448DE30163, V(fakeWantedLevel)); }
		public static int GET_FAKE_WANTED_LEVEL() { return Invoke<int>(0x4C9296CBCD1B971E); }
		public static void USING_MISSION_CREATOR(bool toggle) { Invoke(0xF14878FC50BEC6EE, V(toggle)); }
		public static void ALLOW_MISSION_CREATOR_WARP(bool toggle) { Invoke(0xDEA36202FC3382DF, V(toggle)); }
		public static void SET_MINIGAME_IN_PROGRESS(bool toggle) { Invoke(0x19E00D7322C6F85B, V(toggle)); }
		public static bool IS_MINIGAME_IN_PROGRESS() { return Invoke<bool>(0x2B4A15E44DE0F478); }
		public static bool IS_THIS_A_MINIGAME_SCRIPT() { return Invoke<bool>(0x7B30F65D7B710098); }
		// This function is hard-coded to always return 0.
		public static bool IS_SNIPER_INVERTED() { return Invoke<bool>(0x61A23B7EDA9BDA24); }
		// Returns true if the game is using the metric measurement system (profile setting 227), false if imperial is used.
		public static bool SHOULD_USE_METRIC_MEASUREMENTS() { return Invoke<bool>(0xD3D15555431AB793); }
		public static int GET_PROFILE_SETTING(int profileSetting) { return Invoke<int>(0xC488FF2356EA7791, V(profileSetting)); }
		public static bool ARE_STRINGS_EQUAL(string string1, string string2) { return Invoke<bool>(0x0C515FAB3FF9EA92, V(string1), V(string2)); }
		// Compares two strings up to a specified number of characters.
		// 
		// Parameters:
		// str1 - string to be compared.
		// str2 - string to be compared.
		// matchCase - Comparison will be case-sensitive.
		// maxLength - Maximum number of characters to compare. A value of -1 indicates an infinite length.
		// 
		// Returns:
		// A value indicating the relationship between the strings:
		// <0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'A' < 'B', so result = -1)
		// 0 - The contents of both strings are equal.
		// >0 - The first non-matching character in 'str1' is less than the one in 'str2'. (e.g. 'B' > 'A', so result = 1)
		// 
		// Examples:
		// MISC::COMPARE_STRINGS("STRING", "string", false, -1); // 0; equal
		// MISC::COMPARE_STRINGS("TESTING", "test", false, 4); // 0; equal
		// MISC::COMPARE_STRINGS("R2D2", "R2xx", false, 2); // 0; equal
		// MISC::COMPARE_STRINGS("foo", "bar", false, -1); // 4; 'f' > 'b'
		// MISC::COMPARE_STRINGS("A", "A", true, 1); // 0; equal
		// 
		// When comparing case-sensitive strings, lower-case characters are greater than upper-case characters:
		// MISC::COMPARE_STRINGS("A", "a", true, 1); // -1; 'A' < 'a'
		// MISC::COMPARE_STRINGS("a", "A", true, 1); // 1; 'a' > 'A'
		public static int COMPARE_STRINGS(string str1, string str2, bool matchCase, int maxLength) { return Invoke<int>(0x1E34710ECD4AB0EB, V(str1), V(str2), V(matchCase), V(maxLength)); }
		public static int ABSI(int value) { return Invoke<int>(0xF0D31AD191A74F87, V(value)); }
		public static float ABSF(float value) { return Invoke<float>(0x73D57CFFDD12C355, V(value)); }
		// Determines whether there is a sniper bullet within the specified coordinates. The coordinates form an axis-aligned bounding box.
		public static bool IS_SNIPER_BULLET_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<bool>(0xFEFCF11B01287125, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// Determines whether there is a projectile within the specified coordinates. The coordinates form a rectangle.
		// 
		// - Nacorpio
		// 
		// 
		// ownedByPlayer = only projectiles fired by the player will be detected.
		public static bool IS_PROJECTILE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool ownedByPlayer) { return Invoke<bool>(0x5270A8FBC098C3F8, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(ownedByPlayer)); }
		// Determines whether there is a projectile of a specific type within the specified coordinates. The coordinates form a axis-aligned bounding box.
		public static bool IS_PROJECTILE_TYPE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, int type, bool ownedByPlayer) { return Invoke<bool>(0x2E0DC353342C4A6D, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(type), V(ownedByPlayer)); }
		// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
		public static bool IS_PROJECTILE_TYPE_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, Any p7, bool ownedByPlayer) { return Invoke<bool>(0xF0BC12401061DEA0, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(p7), V(ownedByPlayer)); }
		public static bool IS_PROJECTILE_TYPE_WITHIN_DISTANCE(float x, float y, float z, Hash projectileHash, float radius, bool ownedByPlayer) { return Invoke<bool>(0x34318593248C8FB2, V(x), V(y), V(z), V(projectileHash), V(radius), V(ownedByPlayer)); }
		public static bool GET_COORDS_OF_PROJECTILE_TYPE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, Hash projectileHash, Vector3* projectilePos, bool ownedByPlayer) { return Invoke<bool>(0x8D7A43EC6A5FEA45, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(projectileHash), V(projectilePos), V(ownedByPlayer)); }
		public static bool GET_COORDS_OF_PROJECTILE_TYPE_IN_ANGLED_AREA(float vecAngledAreaPoint1X, float vecAngledAreaPoint1Y, float vecAngledAreaPoint1Z, float vecAngledAreaPoint2X, float vecAngledAreaPoint2Y, float vecAngledAreaPoint2Z, float distanceOfOppositeFace, Hash weaponType, Vector3* positionOut, bool bIsPlayer) { return Invoke<bool>(0x3DA8C28346B62CED, V(vecAngledAreaPoint1X), V(vecAngledAreaPoint1Y), V(vecAngledAreaPoint1Z), V(vecAngledAreaPoint2X), V(vecAngledAreaPoint2Y), V(vecAngledAreaPoint2Z), V(distanceOfOppositeFace), V(weaponType), V(positionOut), V(bIsPlayer)); }
		public static bool GET_COORDS_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(Ped ped, Hash weaponHash, float distance, Vector3* outCoords, bool p4) { return Invoke<bool>(0xDFB4138EEFED7B81, V(ped), V(weaponHash), V(distance), V(outCoords), V(p4)); }
		public static bool GET_PROJECTILE_OF_PROJECTILE_TYPE_WITHIN_DISTANCE(Ped ped, Hash weaponHash, float distance, Vector3* outCoords, Obj* outProjectile, bool p5) { return Invoke<bool>(0x82FDE6A57EE4EE44, V(ped), V(weaponHash), V(distance), V(outCoords), V(outProjectile), V(p5)); }
		// For projectiles, see: IS_PROJECTILE_TYPE_IN_ANGLED_AREA
		// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
		// Returns True if a bullet, as maintained by a pool within CWeaponManager, has been fired into the defined angled area.
		public static bool IS_BULLET_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, bool ownedByPlayer) { return Invoke<bool>(0x1A8B5F3C01E2B477, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(ownedByPlayer)); }
		public static bool IS_BULLET_IN_AREA(float x, float y, float z, float radius, bool ownedByPlayer) { return Invoke<bool>(0x3F2023999AD51C1F, V(x), V(y), V(z), V(radius), V(ownedByPlayer)); }
		public static bool IS_BULLET_IN_BOX(float x1, float y1, float z1, float x2, float y2, float z2, bool ownedByPlayer) { return Invoke<bool>(0xDE0F6D7450D37351, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(ownedByPlayer)); }
		// p3 - possibly radius?
		public static bool HAS_BULLET_IMPACTED_IN_AREA(float x, float y, float z, float p3, bool p4, bool p5) { return Invoke<bool>(0x9870ACFB89A90995, V(x), V(y), V(z), V(p3), V(p4), V(p5)); }
		public static bool HAS_BULLET_IMPACTED_IN_BOX(float p0, float p1, float p2, float p3, float p4, float p5, bool p6, bool p7) { return Invoke<bool>(0xDC8C5D7CFEAB8394, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7)); }
		// PS4
		public static bool IS_ORBIS_VERSION() { return Invoke<bool>(0xA72BC0B675B1519E); }
		// XBOX ONE
		public static bool IS_DURANGO_VERSION() { return Invoke<bool>(0x4D982ADB1978442D); }
		public static bool IS_XBOX360_VERSION() { return Invoke<bool>(0xF6201B4DAF662A9D); }
		public static bool IS_PS3_VERSION() { return Invoke<bool>(0xCCA1072C29D096C2); }
		public static bool IS_PC_VERSION() { return Invoke<bool>(0x48AF36444B965238); }
		public static bool IS_STEAM_VERSION() { return Invoke<bool>(0x0A27B2B6282F7169); }
		// Used to block some of the prostitute stuff due to laws in Australia.
		public static bool IS_AUSSIE_VERSION() { return Invoke<bool>(0x9F1935CA1F724008); }
		public static bool IS_JAPANESE_VERSION() { return Invoke<bool>(0xB8C0BB75D8A77DB3); }
		public static bool IS_XBOX_PLATFORM() { return Invoke<bool>(0x138679CA01E21F53); }
		// Xbox Series (Scarlett) version...
		public static bool IS_SCARLETT_VERSION() { return Invoke<bool>(0xC545AB1CF97ABB34); }
		public static bool IS_SCE_PLATFORM() { return Invoke<bool>(0xF911E695C1EB8518); }
		// PS5 (Prospero) version...
		public static bool IS_PROSPERO_VERSION() { return Invoke<bool>(0x807ABE1AB65C24D2); }
		public static bool IS_STRING_NULL(string str) { return Invoke<bool>(0xF22B6C47C6EAB066, V(str)); }
		public static bool IS_STRING_NULL_OR_EMPTY(string str) { return Invoke<bool>(0xCA042B6957743895, V(str)); }
		// Returns false if it's a null or empty string or if the string is too long. outInteger will be set to -999 in that case.
		// 
		// If all checks have passed successfully, the return value will be set to whatever strtol(string, 0i64, 10); returns.
		public static bool STRING_TO_INT(string str, int* outInteger) { return Invoke<bool>(0x5A5F40FE637EB584, V(str), V(outInteger)); }
		public static void SET_BITS_IN_RANGE(int* var1, int rangeStart, int rangeEnd, int p3) { Invoke(0x8EF07E15701D61ED, V(var1), V(rangeStart), V(rangeEnd), V(p3)); }
		public static int GET_BITS_IN_RANGE(int var1, int rangeStart, int rangeEnd) { return Invoke<int>(0x53158863FCC0893A, V(var1), V(rangeStart), V(rangeEnd)); }
		// See description of `ADD_STUNT_JUMP_ANGLED` for detailed info. The only difference really is this one does not have the radius (or angle, not sure) floats parameters for entry and landing zones.
		public static int ADD_STUNT_JUMP(float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3, float x4, float y4, float z4, float camX, float camY, float camZ, int p15, int p16, int p17) { return Invoke<int>(V(0x1A992DA297A4630C), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(x3), V(y3), V(z3), V(x4), V(y4), V(z4), V(camX), V(camY), V(camZ), V(p15), V(p16), V(p17)); }
		// Creates a new stunt jump.
		// 
		// The radius1 and radius2 might actually not be a radius at all, but that's what it seems to me testing them in-game. But they may be 'angle' floats instead, considering this native is named ADD_STUNT_JUMP_**ANGLED**.
		// 
		// Info about the specific 'parameter sections':
		// 
		// 
		// **x1, y1, z1, x2, y2, z2 and radius1:**
		// 
		// First coordinates are for the jump entry area, and the radius that will be checked around that area. So if you're not exactly within the coordinates, but you are within the outter radius limit then it will still register as entering the stunt jump. Note as mentioned above, the radius is just a guess, I'm not really sure about it's exact purpose.
		// 
		// 
		// **x3, y3, z3, x4, y4, z4 and radius2:**
		// 
		// Next part is the landing area, again starting with the left bottom (nearest to the stunt jump entry zone) coordinate, and the second one being the top right furthest away part of the landing area. Followed by another (most likely) radius float, this is usually slightly larger than the entry zone 'radius' float value, just because you have quite a lot of places where you can land (I'm guessing).
		// 
		// 
		// **camX, camY and camZ:**
		// 
		// The final coordinate in this native is the Camera position. Rotation and zoom/FOV is managed by the game itself, you just need to provide the camera location.
		// 
		// 
		// **unk1, unk2 and unk3:**
		// 
		// Not sure what these are for, but they're always `150, 0, 0` in decompiled scripts.
		// 
		// Here is a list of almost all of the stunt jumps from GTA V (taken from decompiled scripts): https://pastebin.com/EW1jBPkY
		public static int ADD_STUNT_JUMP_ANGLED(float x1, float y1, float z1, float x2, float y2, float z2, float radius1, float x3, float y3, float z3, float x4, float y4, float z4, float radius2, float camX, float camY, float camZ, int p17, int p18, int p19) { return Invoke<int>(V(0xBBE5D803A5360CBF), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(radius1), V(x3), V(y3), V(z3), V(x4), V(y4), V(z4), V(radius2), V(camX), V(camY), V(camZ), V(p17), V(p18), V(p19)); }
		// Toggles some stunt jump stuff.
		public static void TOGGLE_SHOW_OPTIONAL_STUNT_JUMP_CAMERA(bool toggle) { Invoke(0xFB80AB299D2EE1BD, V(toggle)); }
		public static void DELETE_STUNT_JUMP(int p0) { Invoke(0xDC518000E39DAE1F, V(p0)); }
		public static void ENABLE_STUNT_JUMP_SET(int p0) { Invoke(0xE369A5783B866016, V(p0)); }
		public static void DISABLE_STUNT_JUMP_SET(int p0) { Invoke(0xA5272EBEDD4747F6, V(p0)); }
		public static void SET_STUNT_JUMPS_CAN_TRIGGER(bool toggle) { Invoke(0xD79185689F8FD5DF, V(toggle)); }
		public static bool IS_STUNT_JUMP_IN_PROGRESS() { return Invoke<bool>(0x7A3F19700A4D0525); }
		public static bool IS_STUNT_JUMP_MESSAGE_SHOWING() { return Invoke<bool>(0x2272B0A1343129F4); }
		public static int GET_NUM_SUCCESSFUL_STUNT_JUMPS() { return Invoke<int>(0x996DD1E1E02F1008); }
		public static int GET_TOTAL_SUCCESSFUL_STUNT_JUMPS() { return Invoke<int>(0x6856EC3D35C81EA4); }
		public static void CANCEL_STUNT_JUMP() { Invoke(0xE6B7B0ACD4E4B75E); }
		// Make sure to call this from the correct thread if you're using multiple threads because all other threads except the one which is calling SET_GAME_PAUSED will be paused which means you will lose control and the game remains in paused mode until you exit GTA5.exe
		public static void SET_GAME_PAUSED(bool toggle) { Invoke(0x577D1284D6873711, V(toggle)); }
		public static void SET_THIS_SCRIPT_CAN_BE_PAUSED(bool toggle) { Invoke(0xAA391C728106F7AF, V(toggle)); }
		public static void SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT(bool toggle) { Invoke(0xB98236CAAECEF897, V(toggle)); }
		// This native appears on the cheat_controller script and tracks a combination of buttons, which may be used to toggle cheats in-game. Credits to ThreeSocks for the info. The hash contains the combination, while the "amount" represents the amount of buttons used in a combination. The following page can be used to make a button combination: gta5offset.com/ts/hash/
		// 
		// INT_SCORES_SCORTED was a hash collision
		public static bool HAS_CHEAT_WITH_HASH_BEEN_ACTIVATED(Hash hash, int amount) { return Invoke<bool>(0x071E2A839DE82D90, V(hash), V(amount)); }
		// Get inputted "Cheat code", for example:
		// 
		// while (TRUE)
		// {
		//     if (MISC::HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(${fugitive}))
		//     {
		//        // Do something.
		//     }
		//     SYSTEM::WAIT(0);
		// }
		// 
		// Calling this will also set the last saved string hash to zero.
		// 
		public static bool HAS_PC_CHEAT_WITH_HASH_BEEN_ACTIVATED(Hash hash) { return Invoke<bool>(0x557E43C447E700A8, V(hash)); }
		public static void OVERRIDE_FREEZE_FLAGS(bool p0) { Invoke(0xFA3FFB0EEBC288A3, V(p0)); }
		// Formerly known as _LOWER_MAP_PROP_DENSITY and wrongly due to idiots as _ENABLE_MP_DLC_MAPS.
		// Sets the maximum prop density and changes a loading screen flag from 'loading story mode' to 'loading GTA Online'. Does not touch DLC map data at all.
		// 
		// In fact, I doubt this changes the flag whatsoever, that's the OTHER native idiots use together with this that does so, this one only causes a loading screen to show as it reloads map data.
		public static void SET_INSTANCE_PRIORITY_MODE(int p0) { Invoke(0x9BAE5AD2508DF078, V(p0)); }
		// Sets an unknown flag used by CScene in determining which entities from CMapData scene nodes to draw, similar to SET_INSTANCE_PRIORITY_MODE.
		public static void SET_INSTANCE_PRIORITY_HINT(int flag) { Invoke(0xC5F0A8EBD3F361CE, V(flag)); }
		// This function is hard-coded to always return 0.
		public static bool IS_FRONTEND_FADING() { return Invoke<bool>(0x7EA2B6AF97ECA6ED); }
		// spawns a few distant/out-of-sight peds, vehicles, animals etc each time it is called
		public static void POPULATE_NOW() { Invoke(0x7472BB270D7B4F3E); }
		public static int GET_INDEX_OF_CURRENT_LEVEL() { return Invoke<int>(0xCBAD6729F7B1F4FC); }
		// level can be from 0 to 3
		// 0: 9.8 - normal
		// 1: 2.4 - low
		// 2: 0.1 - very low
		// 3: 0.0 - off
		public static void SET_GRAVITY_LEVEL(int level) { Invoke(0x740E14FAD5842351, V(level)); }
		public static void START_SAVE_DATA(Any* p0, Any p1, bool p2) { Invoke(0xA9575F812C6A7997, V(p0), V(p1), V(p2)); }
		public static void STOP_SAVE_DATA() { Invoke(0x74E20C9145FB66FD); }
		public static int GET_SIZE_OF_SAVE_DATA(bool p0) { return Invoke<int>(0xA09F896CE912481F, V(p0)); }
		public static void REGISTER_INT_TO_SAVE(Any* p0, string name) { Invoke(0x34C9EE5986258415, V(p0), V(name)); }
		public static void REGISTER_INT64_TO_SAVE(Any* p0, string name) { Invoke(0xA735353C77334EA0, V(p0), V(name)); }
		public static void REGISTER_ENUM_TO_SAVE(Any* p0, string name) { Invoke(0x10C2FA78D0E128A1, V(p0), V(name)); }
		public static void REGISTER_FLOAT_TO_SAVE(Any* p0, string name) { Invoke(0x7CAEC29ECB5DFEBB, V(p0), V(name)); }
		public static void REGISTER_BOOL_TO_SAVE(Any* p0, string name) { Invoke(0xC8F4131414C835A1, V(p0), V(name)); }
		public static void REGISTER_TEXT_LABEL_TO_SAVE(Any* p0, string name) { Invoke(0xEDB1232C5BEAE62F, V(p0), V(name)); }
		// MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1, "tlPlateText");
		// MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f1C, "tlPlateText_pending");
		// MISC::REGISTER_TEXT_LABEL_15_TO_SAVE(&a_0._f10B, "tlCarAppPlateText");
		public static void REGISTER_TEXT_LABEL_15_TO_SAVE(Any* p0, string name) { Invoke(0x6F7794F28C6B2535, V(p0), V(name)); }
		// Only found 3 times in decompiled scripts.
		// 
		// MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(a_0, "Movie_Name_For_This_Player");
		// MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._fB, "Ringtone_For_This_Player");
		// MISC::REGISTER_TEXT_LABEL_23_TO_SAVE(&a_0._f1EC4._f12[v_A/*6*/], &v_13); // where v_13 is "MPATMLOGSCRS0" thru "MPATMLOGSCRS15"
		public static void REGISTER_TEXT_LABEL_23_TO_SAVE(Any* p0, string name) { Invoke(0x48F069265A0E4BEC, V(p0), V(name)); }
		// Only found 2 times in decompiled scripts.
		// 
		// MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f1F5A._f6[0/*8*/], "TEMPSTAT_LABEL"); // gets saved in a struct called "g_SaveData_STRING_ScriptSaves"
		// MISC::REGISTER_TEXT_LABEL_31_TO_SAVE(&a_0._f4B4[v_1A/*8*/], &v_5); // where v_5 is "Name0" thru "Name9", gets saved in a struct called "OUTFIT_Name"
		public static void REGISTER_TEXT_LABEL_31_TO_SAVE(Any* p0, string name) { Invoke(0x8269816F6CFD40F8, V(p0), V(name)); }
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "Thumb_label");
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f10, "Photo_label");
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(a_0, "GXTlabel");
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f21, "StringComp");
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f43, "SecondStringComp");
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f53, "ThirdStringComp");
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f32, "SenderStringComp");
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f726[v_1A/*16*/], &v_20); // where v_20 is "LastJobTL_0_1" thru "LastJobTL_2_1", gets saved in a struct called "LAST_JobGamer_TL"
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f4B, "PAID_PLAYER");
		// MISC::REGISTER_TEXT_LABEL_63_TO_SAVE(&a_0._f5B, "RADIO_STATION");
		public static void REGISTER_TEXT_LABEL_63_TO_SAVE(Any* p0, string name) { Invoke(0xFAA457EF263E8763, V(p0), V(name)); }
		public static void START_SAVE_STRUCT_WITH_SIZE(Any* p0, int size, string structName) { Invoke(0xBF737600CDDBEADD, V(p0), V(size), V(structName)); }
		public static void STOP_SAVE_STRUCT() { Invoke(0xEB1774DF12BB9F12); }
		public static void START_SAVE_ARRAY_WITH_SIZE(Any* p0, int size, string arrayName) { Invoke(0x60FE567DF1B1AF9D, V(p0), V(size), V(arrayName)); }
		public static void STOP_SAVE_ARRAY() { Invoke(0x04456F95153C6BE4); }
		public static void COPY_SCRIPT_STRUCT(Any* dst, Any* src, int size) { Invoke(0x213AEB2B90CBA7AC, V(dst), V(src), V(size)); }
		// https://alloc8or.re/gta5/doc/enums/DispatchType.txt
		public static void ENABLE_DISPATCH_SERVICE(int dispatchService, bool toggle) { Invoke(0xDC0F817884CDD856, V(dispatchService), V(toggle)); }
		public static void BLOCK_DISPATCH_SERVICE_RESOURCE_CREATION(int dispatchService, bool toggle) { Invoke(0x9B2BD3773123EA2F, V(dispatchService), V(toggle)); }
		public static int GET_NUMBER_RESOURCES_ALLOCATED_TO_WANTED_LEVEL(int dispatchService) { return Invoke<int>(0xEB4A0C2D56441717, V(dispatchService)); }
		// As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. 
		// 
		// Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
		// 
		// Side Note 2: I say it breaks as if you call this proper,
		// if(CREATE_INCIDENT) etc it will return false if you do as I said above.
		// =====================================================
		public static bool CREATE_INCIDENT(int dispatchService, float x, float y, float z, int numUnits, float radius, int* outIncidentID, Any p7, Any p8) { return Invoke<bool>(0x3F892CAF67444AE7, V(dispatchService), V(x), V(y), V(z), V(numUnits), V(radius), V(outIncidentID), V(p7), V(p8)); }
		// As for the 'police' incident, it will call police cars to you, but unlike PedsInCavalcades & Merryweather they won't start shooting at you unless you shoot first or shoot at them. The top 2 however seem to cancel theirselves if there is noone dead around you or a fire. I only figured them out as I found out the 3rd param is definately the amountOfPeople and they called incident 3 in scripts with 4 people (which the firetruck has) and incident 5 with 2 people (which the ambulence has). The 4 param I cant say is radius, but for the pedsInCavalcades and Merryweather R* uses 0.0f and for the top 3 (Emergency Services) they use 3.0f. 
		// 
		// Side Note: It seems calling the pedsInCavalcades or Merryweather then removing it seems to break you from calling the EmergencyEvents and I also believe pedsInCavalcades. (The V cavalcades of course not IV).
		// 
		// Side Note 2: I say it breaks as if you call this proper,
		// if(CREATE_INCIDENT) etc it will return false if you do as I said above.
		// =====================================================
		public static bool CREATE_INCIDENT_WITH_ENTITY(int dispatchService, Ped ped, int numUnits, float radius, int* outIncidentID, Any p5, Any p6) { return Invoke<bool>(0x05983472F0494E60, V(dispatchService), V(ped), V(numUnits), V(radius), V(outIncidentID), V(p5), V(p6)); }
		// Delete an incident with a given id.
		// 
		// =======================================================
		// Correction, I have change this to int, instead of int*
		// as it doesn't use a pointer to the createdIncident.
		// If you try it you will crash (or) freeze.
		// =======================================================
		public static void DELETE_INCIDENT(int incidentId) { Invoke(0x556C1AA270D5A207, V(incidentId)); }
		// =======================================================
		// Correction, I have change this to int, instead of int*
		// as it doesn't use a pointer to the createdIncident.
		// If you try it you will crash (or) freeze.
		// =======================================================
		public static bool IS_INCIDENT_VALID(int incidentId) { return Invoke<bool>(0xC8BC6461E629BEAA, V(incidentId)); }
		public static void SET_INCIDENT_REQUESTED_UNITS(int incidentId, int dispatchService, int numUnits) { Invoke(0xB08B85D860E7BA3C, V(incidentId), V(dispatchService), V(numUnits)); }
		public static void SET_IDEAL_SPAWN_DISTANCE_FOR_INCIDENT(int incidentId, float p1) { Invoke(0xD261BA3E7E998072, V(incidentId), V(p1)); }
		// Finds a position ahead of the player by predicting the players next actions.
		// The positions match path finding node positions.
		// When roads diverge, the position may rapidly change between two or more positions. This is due to the engine not being certain of which path the player will take.
		public static bool FIND_SPAWN_POINT_IN_DIRECTION(float posX, float posY, float posZ, float fwdVecX, float fwdVecY, float fwdVecZ, float distance, Vector3* spawnPoint) { return Invoke<bool>(0x6874E2190B0C1972, V(posX), V(posY), V(posZ), V(fwdVecX), V(fwdVecY), V(fwdVecZ), V(distance), V(spawnPoint)); }
		public static int ADD_POP_MULTIPLIER_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float p6, float p7, bool p8, bool p9) { return Invoke<int>(0x67F6413D3220E18D, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p6), V(p7), V(p8), V(p9)); }
		public static bool DOES_POP_MULTIPLIER_AREA_EXIST(int id) { return Invoke<bool>(0x1327E2FE9746BAEE, V(id)); }
		public static void REMOVE_POP_MULTIPLIER_AREA(int id, bool p1) { Invoke(0xB129E447A2EDA4BF, V(id), V(p1)); }
		public static bool IS_POP_MULTIPLIER_AREA_NETWORKED(int id) { return Invoke<bool>(0x1312F4B242609CE3, V(id)); }
		// This native is adding a zone, where you can change density settings. For example, you can add a zone on 0.0, 0.0, 0.0 with radius 900.0 and vehicleMultiplier 0.0, and you will not see any new population vehicle spawned in a radius of 900.0 from 0.0, 0.0, 0.0. Returns the id. You can have only 15 zones at the same time. You can remove zone using REMOVE_POP_MULTIPLIER_SPHERE
		public static int ADD_POP_MULTIPLIER_SPHERE(float x, float y, float z, float radius, float pedMultiplier, float vehicleMultiplier, bool p6, bool p7) { return Invoke<int>(0x32C7A7E8C43A1F80, V(x), V(y), V(z), V(radius), V(pedMultiplier), V(vehicleMultiplier), V(p6), V(p7)); }
		public static bool DOES_POP_MULTIPLIER_SPHERE_EXIST(int id) { return Invoke<bool>(0x171BAFB3C60389F4, V(id)); }

		// Removes population multiplier sphere
		public static void REMOVE_POP_MULTIPLIER_SPHERE(int id, bool p1) { Invoke(0xE6869BECDD8F2403, V(id), V(p1)); }
		// Makes the ped jump around like they're in a tennis match
		public static void ENABLE_TENNIS_MODE(Ped ped, bool toggle, bool p2) { Invoke(0x28A04B411933F8A6, V(ped), V(toggle), V(p2)); }
		public static bool IS_TENNIS_MODE(Ped ped) { return Invoke<bool>(0x5D5479D115290C3F, V(ped)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void PLAY_TENNIS_SWING_ANIM(Ped ped, string animDict, string animName, float p3, float p4, bool p5) { Invoke(0xE266ED23311F24D4, V(ped), V(animDict), V(animName), V(p3), V(p4), V(p5)); }
		public static bool GET_TENNIS_SWING_ANIM_COMPLETE(Ped ped) { return Invoke<bool>(0x17DF68D720AA77F8, V(ped)); }
		public static bool GET_TENNIS_SWING_ANIM_CAN_BE_INTERRUPTED(Ped ped) { return Invoke<bool>(0x19BFED045C647C49, V(ped)); }
		public static bool GET_TENNIS_SWING_ANIM_SWUNG(Ped ped) { return Invoke<bool>(0xE95B0C7D5BA3B96B, V(ped)); }
		public static void PLAY_TENNIS_DIVE_ANIM(Ped ped, int p1, float p2, float p3, float p4, bool p5) { Invoke(0x8FA9C42FC5D7C64B, V(ped), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		// From the scripts:
		// 
		// MISC::SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(sub_aa49(a_0), "ForcedStopDirection", v_E);
		// 
		// Related to tennis mode.
		public static void SET_TENNIS_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, string p1, float p2) { Invoke(0x54F157E0336A3822, V(ped), V(p1), V(p2)); }
		public static void RESET_DISPATCH_SPAWN_LOCATION() { Invoke(0x5896F2BD5683A4E1); }
		public static void SET_DISPATCH_SPAWN_LOCATION(float x, float y, float z) { Invoke(0xD10F442036302D50, V(x), V(y), V(z)); }
		public static void RESET_DISPATCH_IDEAL_SPAWN_DISTANCE() { Invoke(0x77A84429DD9F0A15); }
		public static void SET_DISPATCH_IDEAL_SPAWN_DISTANCE(float distance) { Invoke(0x6FE601A64180D423, V(distance)); }
		public static void RESET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(Any p0) { Invoke(0xEB2DB0CAD13154B3, V(p0)); }
		public static void SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS(Any p0, float p1) { Invoke(0x44F7CBC1BEB3327D, V(p0), V(p1)); }
		public static void SET_DISPATCH_TIME_BETWEEN_SPAWN_ATTEMPTS_MULTIPLIER(Any p0, float p1) { Invoke(0x48838ED9937A15D1, V(p0), V(p1)); }
		// To remove, see: REMOVE_DISPATCH_SPAWN_BLOCKING_AREA
		// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
		public static int ADD_DISPATCH_SPAWN_ANGLED_BLOCKING_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width) { return Invoke<int>(0x918C7B2D2FF3928B, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width)); }
		public static int ADD_DISPATCH_SPAWN_SPHERE_BLOCKING_AREA(float x1, float y1, float x2, float y2) { return Invoke<int>(0x2D4259F1FEB81DA9, V(x1), V(y1), V(x2), V(y2)); }
		public static void REMOVE_DISPATCH_SPAWN_BLOCKING_AREA(int p0) { Invoke(0x264AC28B01B353A5, V(p0)); }
		public static void RESET_DISPATCH_SPAWN_BLOCKING_AREAS() { Invoke(0xAC7BFD5C1D83EA75); }
		public static void RESET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN() { Invoke(0xD9F692D349249528); }
		public static void SET_WANTED_RESPONSE_NUM_PEDS_TO_SPAWN(int p0, int p1) { Invoke(0xE532EC1A63231B4F, V(p0), V(p1)); }
		public static void ADD_TACTICAL_NAV_MESH_POINT(float x, float y, float z) { Invoke(0xB8721407EE9C3FF6, V(x), V(y), V(z)); }
		public static void CLEAR_TACTICAL_NAV_MESH_POINTS() { Invoke(0xB3CD58CCA6CDA852); }
		// Activates (usused?) riot mode. All NPCs are being hostile to each other (including player). Also the game will give weapons (pistols, smgs) to random NPCs.
		public static void SET_RIOT_MODE_ENABLED(bool toggle) { Invoke(0x2587A48BC88DFADF, V(toggle)); }
		public static void DISPLAY_ONSCREEN_KEYBOARD_WITH_LONGER_INITIAL_STRING(int p0, string windowTitle, Any* p2, string defaultText, string defaultConcat1, string defaultConcat2, string defaultConcat3, string defaultConcat4, string defaultConcat5, string defaultConcat6, string defaultConcat7, int maxInputLength) { Invoke(0xCA78CFA0366592FE, V(p0), V(windowTitle), V(p2), V(defaultText), V(defaultConcat1), V(defaultConcat2), V(defaultConcat3), V(defaultConcat4), V(defaultConcat5), V(defaultConcat6), V(defaultConcat7), V(maxInputLength)); }
		// sfink: note, p0 is set to 6 for PC platform in at least 1 script, or to `unk::_get_ui_language_id() == 0` otherwise.
		// 
		// NOTE: windowTitle uses text labels, and an invalid value will display nothing.
		// 
		// www.gtaforums.com/topic/788343-vrel-script-hook-v/?p=1067380474
		// 
		// windowTitle's
		// -----------------
		// CELL_EMAIL_BOD  =   "Enter your Eyefind message"
		// CELL_EMAIL_BODE =   "Message too long. Try again"
		// CELL_EMAIL_BODF    =   "Forbidden message. Try again"
		// CELL_EMAIL_SOD    =   "Enter your Eyefind subject"
		// CELL_EMAIL_SODE =   "Subject too long. Try again"
		// CELL_EMAIL_SODF    =   "Forbidden text. Try again"
		// CELL_EMASH_BOD   =   "Enter your Eyefind message"
		// CELL_EMASH_BODE =   "Message too long. Try again"
		// CELL_EMASH_BODF    =   "Forbidden message. Try again"
		// CELL_EMASH_SOD    =   "Enter your Eyefind subject"
		// CELL_EMASH_SODE =   "Subject too long. Try again"
		// CELL_EMASH_SODF    =   "Forbidden Text. Try again"
		// FMMC_KEY_TIP10   =   "Enter Synopsis"
		// FMMC_KEY_TIP12  =   "Enter Custom Team Name"
		// FMMC_KEY_TIP12F =   "Forbidden Text. Try again"
		// FMMC_KEY_TIP12N  =   "Custom Team Name"
		// FMMC_KEY_TIP8 =   "Enter Message"
		// FMMC_KEY_TIP8F   =   "Forbidden Text. Try again"
		// FMMC_KEY_TIP8FS  =   "Invalid Message. Try again"
		// FMMC_KEY_TIP8S  =   "Enter Message"
		// FMMC_KEY_TIP9    =   "Enter Outfit Name"
		// FMMC_KEY_TIP9F   =   "Invalid Outfit Name. Try again"
		// FMMC_KEY_TIP9N  =   "Outfit Name"
		// PM_NAME_CHALL  =   "Enter Challenge Name"
		public static void DISPLAY_ONSCREEN_KEYBOARD(int p0, string windowTitle, string p2, string defaultText, string defaultConcat1, string defaultConcat2, string defaultConcat3, int maxInputLength) { Invoke(0x00DC833F2568DBF6, V(p0), V(windowTitle), V(p2), V(defaultText), V(defaultConcat1), V(defaultConcat2), V(defaultConcat3), V(maxInputLength)); }
		// Returns the current status of the onscreen keyboard, and updates the output.
		// 
		// Status Codes:
		// 
		// -1: Keyboard isn't active
		// 0: User still editing
		// 1: User has finished editing
		// 2: User has canceled editing
		public static int UPDATE_ONSCREEN_KEYBOARD() { return Invoke<int>(0x0CF2B696BBF945AE); }
		// Returns NULL unless UPDATE_ONSCREEN_KEYBOARD() returns 1 in the same tick.
		public static byte* GET_ONSCREEN_KEYBOARD_RESULT() { return PInvoke<byte>(0x8362B09B91893647); }
		// DO NOT use this as it doesn't clean up the text input box properly and your script will get stuck in the UPDATE_ONSCREEN_KEYBOARD() loop.
		// Use FORCE_CLOSE_TEXT_INPUT_BOX instead.
		public static void CANCEL_ONSCREEN_KEYBOARD() { Invoke(0x58A39BE597CE99CD); }
		// p0 was always 2 in R* scripts.
		// Called before calling DISPLAY_ONSCREEN_KEYBOARD if the input needs to be saved.
		public static void NEXT_ONSCREEN_KEYBOARD_RESULT_WILL_DISPLAY_USING_THESE_FONTS(int p0) { Invoke(0x3ED1438C1F5C6612, V(p0)); }
		// Appears to remove stealth kill action from memory
		public static void ACTION_MANAGER_ENABLE_ACTION(Hash hash, bool enable) { Invoke(0xA6A12939F16D85BE, V(hash), V(enable)); }
		// GET_GAME_TIMER() / 1000
		public static int GET_REAL_WORLD_TIME() { return Invoke<int>(0x3F60413F5DF65748); }
		public static void SUPRESS_RANDOM_EVENT_THIS_FRAME(int eventType, bool suppress) { Invoke(0x1EAE0A6E978894A2, V(eventType), V(suppress)); }
		public static void SET_EXPLOSIVE_AMMO_THIS_FRAME(Player player) { Invoke(0xA66C71C98D5F2CFB, V(player)); }
		public static void SET_FIRE_AMMO_THIS_FRAME(Player player) { Invoke(0x11879CDD803D30F4, V(player)); }
		public static void SET_EXPLOSIVE_MELEE_THIS_FRAME(Player player) { Invoke(0xFF1BED81BFDC0FE0, V(player)); }
		public static void SET_SUPER_JUMP_THIS_FRAME(Player player) { Invoke(0x57FFF03E423A4C0B, V(player)); }
		public static void SET_BEAST_JUMP_THIS_FRAME(Player player) { Invoke(0x438822C279B73B93, V(player)); }
		public static void SET_FORCED_JUMP_THIS_FRAME(Player player) { Invoke(0xA1183BCFEE0F93D1, V(player)); }
		public static bool HAS_GAME_INSTALLED_THIS_SESSION() { return Invoke<bool>(0x6FDDF453C0C756EC); }
		public static void SET_TICKER_JOHNMARSTON_IS_DONE() { Invoke(0xFB00CA71DA386228); }
		public static bool ARE_PROFILE_SETTINGS_VALID() { return Invoke<bool>(0x5AA3BEFA29F03AD4); }
		public static void PREVENT_ARREST_STATE_THIS_FRAME() { Invoke(0xE3D969D2785FFB5E); }
		// Sets the localplayer playerinfo state back to playing (State 0)
		// 
		// States are:
		// -1: "Invalid"
		// 0: "Playing"
		// 1: "Died"
		// 2: "Arrested"
		// 3: "Failed Mission"
		// 4: "Left Game"
		// 5: "Respawn"
		// 6: "In MP Cutscene"
		public static void FORCE_GAME_STATE_PLAYING() { Invoke(0xC0AA53F866B3134D); }
		public static void SCRIPT_RACE_INIT(int p0, int p1, Any p2, Any p3) { Invoke(0x0A60017F841A54F2, V(p0), V(p1), V(p2), V(p3)); }
		public static void SCRIPT_RACE_SHUTDOWN() { Invoke(0x1FF6BF9A63E5757F); }
		public static void SCRIPT_RACE_PLAYER_HIT_CHECKPOINT(Player player, Any p1, Any p2, Any p3) { Invoke(0x1BB299305C3E8C13, V(player), V(p1), V(p2), V(p3)); }
		public static bool SCRIPT_RACE_GET_PLAYER_SPLIT_TIME(Player player, int* p1, int* p2) { return Invoke<bool>(0x8EF5573A1F801A5C, V(player), V(p1), V(p2)); }
		public static void START_END_USER_BENCHMARK() { Invoke(0x92790862E36C2ADA); }
		public static void STOP_END_USER_BENCHMARK() { Invoke(0xC7DB36C24634F52B); }
		public static void RESET_END_USER_BENCHMARK() { Invoke(0x437138B6A830166A); }
		// Saves the benchmark recording to %USERPROFILE%\Documents\Rockstar Games\GTA V\Benchmarks and submits some metrics.
		public static void SAVE_END_USER_BENCHMARK() { Invoke(0x37DEB0AA183FB6D8); }
		// Returns true if the current frontend menu is FE_MENU_VERSION_SP_PAUSE
		public static bool UI_STARTED_END_USER_BENCHMARK() { return Invoke<bool>(0xEA2F2061875EED90); }
		// Returns true if the current frontend menu is FE_MENU_VERSION_LANDING_MENU
		public static bool LANDING_SCREEN_STARTED_END_USER_BENCHMARK() { return Invoke<bool>(0x3BBBD13E5041A79E); }
		// Returns true if command line option '-benchmark' is set.
		public static bool IS_COMMANDLINE_END_USER_BENCHMARK() { return Invoke<bool>(0xA049A5BE0F04F2F8); }
		// Returns value of the '-benchmarkIterations' command line option.
		public static int GET_BENCHMARK_ITERATIONS() { return Invoke<int>(0x4750FC27570311EC); }
		// Returns value of the '-benchmarkPass' command line option.
		public static int GET_BENCHMARK_PASS() { return Invoke<int>(0x1B2366C3F2A5C8DF); }
		// In singleplayer it does exactly what the name implies. In FiveM / GTA:Online it shows `Disconnecting from GTA Online` HUD and then quits the game.
		public static void RESTART_GAME() { Invoke(0xE574A662ACAEFBB1); }
		// Exits the game and downloads a fresh social club update on next restart.
		public static void QUIT_GAME() { Invoke(0xEB6891F03362FB12); }
		// Hardcoded to always return true.
		public static bool HAS_ASYNC_INSTALL_FINISHED() { return Invoke<bool>(0x14832BF2ABA53FC5); }
		public static void CLEANUP_ASYNC_INSTALL() { Invoke(0xC79AE21974B01FB2); }
		// aka "constrained"
		public static bool PLM_IS_IN_CONSTRAINED_MODE() { return Invoke<bool>(0x684A41975F077262); }
		// Returns duration of how long the game has been in power-saving mode (aka "constrained") in milliseconds.
		public static int PLM_GET_CONSTRAINED_DURATION_MS() { return Invoke<int>(0xABB2FA71C83A1B72); }
		// If toggle is true, the ped's head is shown in the pause menu
		// If toggle is false, the ped's head is not shown in the pause menu
		public static void SET_PLAYER_IS_IN_ANIMAL_FORM(bool toggle) { Invoke(0x4EBB7E87AA0DBED4, V(toggle)); }
		// Although we don't have a jenkins hash for this one, the name is 100% confirmed.
		public static bool GET_IS_PLAYER_IN_ANIMAL_FORM() { return Invoke<bool>(0x9689123E3F213AA5); }
		public static void SET_PLAYER_IS_REPEATING_A_MISSION(bool toggle) { Invoke(0x9D8D44ADBBA61EF2, V(toggle)); }
		// Does nothing (it's a nullsub).
		public static void DISABLE_SCREEN_DIMMING_THIS_FRAME() { Invoke(0x23227DF0B2115469); }
		public static float GET_CITY_DENSITY() { return Invoke<float>(0xD10282B6E3751BA0); }
		public static void USE_ACTIVE_CAMERA_FOR_TIMESLICING_CENTRE() { Invoke(0x693478ACBD7F18E7); }
		public static void SET_CONTENT_ID_INDEX(Hash contentId, int index) { Invoke(0x4B82FA6F2D624634, V(contentId), V(index)); }
		public static int GET_CONTENT_ID_INDEX(Hash contentId) { return Invoke<int>(0xECF041186C5A94DC, V(contentId)); }
		public static void _SET_CONTENT_PROP_TYPE(Hash model, int type) { Invoke(0xBA4583AF4C678A9B, V(model), V(type)); }
		// Returns prop type for given model hash
		public static int _GET_CONTENT_PROP_TYPE(Hash model) { return Invoke<int>(0x8BAF8AD59F47AAFC, V(model)); }




		// Creates a mobile phone of the specified type.
		// 
		// Possible phone types:
		// 
		// 0 - Default phone / Michael's phone
		// 1 - Trevor's phone
		// 2 - Franklin's phone
		// 3 - Unused police phone
		// 4 - Prologue phone
		// 
		// Higher values may crash your game.
		public static void CREATE_MOBILE_PHONE(int phoneType) { Invoke(0xA4E8E696C532FBC7, V(phoneType)); }
		// Destroys the currently active mobile phone.
		public static void DESTROY_MOBILE_PHONE() { Invoke(0x3BC861DF703E5097); }
		// The minimum/default is 500.0f. If you plan to make it bigger set it's position as well. Also this seems to need to be called in a loop as when you close the phone the scale is reset. If not in a loop you'd need to call it everytime before you re-open the phone.
		public static void SET_MOBILE_PHONE_SCALE(float scale) { Invoke(0xCBDD322A73D6D932, V(scale)); }
		// Last parameter is unknown and always zero.
		public static void SET_MOBILE_PHONE_ROTATION(float rotX, float rotY, float rotZ, Any p3) { Invoke(0xBB779C0CA917E865, V(rotX), V(rotY), V(rotZ), V(p3)); }
		public static void GET_MOBILE_PHONE_ROTATION(Vector3* rotation, Vehicle p1) { Invoke(0x1CEFB61F193070AE, V(rotation), V(p1)); }
		public static void SET_MOBILE_PHONE_POSITION(float posX, float posY, float posZ) { Invoke(0x693A5C6D6734085B, V(posX), V(posY), V(posZ)); }
		public static void GET_MOBILE_PHONE_POSITION(Vector3* position) { Invoke(0x584FDFDA48805B86, V(position)); }
		// If bool Toggle = true so the mobile is hide to screen.
		// If bool Toggle = false so the mobile is show to screen.
		public static void SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN(bool toggle) { Invoke(0xF511F759238A5122, V(toggle)); }
		// This one is weird and seems to return a TRUE state regardless of whether the phone is visible on screen or tucked away.
		// 
		// 
		// I can confirm the above. This function is hard-coded to always return 1.
		public static bool CAN_PHONE_BE_SEEN_ON_SCREEN() { return Invoke<bool>(0xC4E2813898C97A4B); }
		public static void SET_MOBILE_PHONE_DOF_STATE(bool toggle) { Invoke(0x375A706A5C2FD084, V(toggle)); }
		// For move the finger of player, the value of int goes 1 at 5.
		public static void CELL_SET_INPUT(int direction) { Invoke(0x95C9E72F3D7DEC9B, V(direction)); }
		// if the bool "Toggle" is "true" so the phone is lean.
		// if the bool "Toggle" is "false" so the phone is not lean.
		public static void CELL_HORIZONTAL_MODE_TOGGLE(bool toggle) { Invoke(0x44E44169EF70138E, V(toggle)); }
		public static void CELL_CAM_ACTIVATE(bool p0, bool p1) { Invoke(0xFDE8F069C542D126, V(p0), V(p1)); }
		public static void CELL_CAM_ACTIVATE_SELFIE_MODE(bool toggle) { Invoke(0x015C49A93E3E086E, V(toggle)); }
		public static void CELL_CAM_ACTIVATE_SHALLOW_DOF_MODE(bool toggle) { Invoke(0xA2CCBE62CD4C91A4, V(toggle)); }
		public static void CELL_CAM_SET_SELFIE_MODE_SIDE_OFFSET_SCALING(float p0) { Invoke(0x1B0B4AEED5B9B41C, V(p0)); }
		public static void CELL_CAM_SET_SELFIE_MODE_HORZ_PAN_OFFSET(float horizontalPan) { Invoke(0x53F4892D18EC90A4, V(horizontalPan)); }
		public static void CELL_CAM_SET_SELFIE_MODE_VERT_PAN_OFFSET(float vertPan) { Invoke(0x3117D84EFA60F77B, V(vertPan)); }
		public static void CELL_CAM_SET_SELFIE_MODE_ROLL_OFFSET(float roll) { Invoke(0x15E69E2802C24B8D, V(roll)); }
		public static void CELL_CAM_SET_SELFIE_MODE_DISTANCE_SCALING(float distanceScaling) { Invoke(0xAC2890471901861C, V(distanceScaling)); }
		public static void CELL_CAM_SET_SELFIE_MODE_HEAD_YAW_OFFSET(float yaw) { Invoke(0xD6ADE981781FCA09, V(yaw)); }
		public static void CELL_CAM_SET_SELFIE_MODE_HEAD_ROLL_OFFSET(float roll) { Invoke(0xF1E22DC13F5EEBAD, V(roll)); }
		public static void CELL_CAM_SET_SELFIE_MODE_HEAD_PITCH_OFFSET(float pitch) { Invoke(0x466DA42C89865553, V(pitch)); }
		public static bool CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK(Entity entity) { return Invoke<bool>(0x439E9BC95B7E7FBE, V(entity)); }
		public static void GET_MOBILE_PHONE_RENDER_ID(int* renderId) { Invoke(0xB4A53E05F68B6FA1, V(renderId)); }




		public static void NETWORK_INITIALIZE_CASH(int wallet, int bank) { Invoke(0x3DA5ECD1A56CBA6D, V(wallet), V(bank)); }
		// Note the 2nd parameters are always 1, 0. I have a feeling it deals with your money, wallet, bank. So when you delete the character it of course wipes the wallet cash at that time. So if that was the case, it would be eg, NETWORK_DELETE_CHARACTER(characterIndex, deleteWalletCash, deleteBankCash);
		public static void NETWORK_DELETE_CHARACTER(int characterSlot, bool p1, bool p2) { Invoke(0x05A50AF38947EB8D, V(characterSlot), V(p1), V(p2)); }
		public static void NETWORK_MANUAL_DELETE_CHARACTER(int characterSlot) { Invoke(0x821418C727FCACD7, V(characterSlot)); }
		public static bool NETWORK_GET_PLAYER_IS_HIGH_EARNER() { return Invoke<bool>(0xFB2456B2040A6A67); }
		public static void NETWORK_CLEAR_CHARACTER_WALLET(int characterSlot) { Invoke(0xA921DED15FDF28F5, V(characterSlot)); }
		public static void NETWORK_GIVE_PLAYER_JOBSHARE_CASH(int amount, Any* gamerHandle) { Invoke(0xFB18DF9CB95E0105, V(amount), V(gamerHandle)); }
		public static void NETWORK_RECEIVE_PLAYER_JOBSHARE_CASH(int value, Any* gamerHandle) { Invoke(0x56A3B51944C50598, V(value), V(gamerHandle)); }
		public static bool NETWORK_CAN_SHARE_JOB_CASH() { return Invoke<bool>(0x1C2473301B1C66BA); }
		// index
		// -------
		// See function sub_1005 in am_boat_taxi.ysc
		// 
		// context
		// ----------
		// "BACKUP_VAGOS"
		// "BACKUP_LOST"
		// "BACKUP_FAMILIES"
		// "HIRE_MUGGER"
		// "HIRE_MERCENARY"
		// "BUY_CARDROPOFF"
		// "HELI_PICKUP"
		// "BOAT_PICKUP"
		// "CLEAR_WANTED"
		// "HEAD_2_HEAD"
		// "CHALLENGE"
		// "SHARE_LAST_JOB"
		// "DEFAULT"
		// 
		// reason
		// ---------
		// "NOTREACHTARGET"
		// "TARGET_ESCAPE"
		// "DELIVERY_FAIL"
		// "NOT_USED"
		// "TEAM_QUIT"
		// "SERVER_ERROR"
		// "RECEIVE_LJ_L"
		// "CHALLENGE_PLAYER_LEFT"
		// "DEFAULT"
		// 
		// unk
		// -----
		// Unknown bool value
		// 
		// 
		public static void NETWORK_REFUND_CASH(int index, string context, string reason, bool p3) { Invoke(0xF9C812CD7C46E817, V(index), V(context), V(reason), V(p3)); }
		public static void NETWORK_DEDUCT_CASH(int amount, string p1, string p2, bool p3, bool p4, bool p5) { Invoke(0x18B7AE224B087E26, V(amount), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static bool NETWORK_MONEY_CAN_BET(int amount, bool p1, bool p2) { return Invoke<bool>(0x81404F3DC124FE5B, V(amount), V(p1), V(p2)); }
		public static bool NETWORK_CAN_BET(int amount) { return Invoke<bool>(0x3A54E33660DED67F, V(amount)); }
		// GTAO_CASINO_HOUSE
		// GTAO_CASINO_INSIDETRACK
		// GTAO_CASINO_LUCKYWHEEL
		// GTAO_CASINO_BLACKJACK
		// GTAO_CASINO_ROULETTE
		// GTAO_CASINO_SLOTS
		// GTAO_CASINO_PURCHASE_CHIPS
		// 
		// NETWORK_C*
		public static bool NETWORK_CASINO_CAN_BET(Hash hash) { return Invoke<bool>(0x158C16F5E4CF41F8, V(hash)); }
		public static bool NETWORK_CASINO_CAN_BET_PVC() { return Invoke<bool>(0x394DCDB9E836B7A9); }
		public static bool NETWORK_CASINO_CAN_BET_AMOUNT(Any p0) { return Invoke<bool>(0xF62F6D9528358FE4, V(p0)); }
		public static bool NETWORK_CASINO_CAN_BUY_CHIPS_PVC() { return Invoke<bool>(0x8968D4D8C6C40C11); }
		public static bool NETWORK_CASINO_BUY_CHIPS(int p0, int p1) { return Invoke<bool>(0x3BD101471C7F9EEC, V(p0), V(p1)); }
		public static bool NETWORK_CASINO_SELL_CHIPS(int p0, int p1) { return Invoke<bool>(0xED44897CB336F480, V(p0), V(p1)); }
		// Does nothing (it's a nullsub).
		public static void NETWORK_DEFER_CASH_TRANSACTIONS_UNTIL_SHOP_SAVE() { Invoke(0xCD0F5B5D932AE473); }
		public static bool CAN_PAY_AMOUNT_TO_BOSS(int p0, int p1, int amount, int* p3) { return Invoke<bool>(0x9777734DAD16992F, V(p0), V(p1), V(amount), V(p3)); }
		public static void NETWORK_EARN_FROM_PICKUP(int amount) { Invoke(0xED1517D3AF17C698, V(amount)); }
		public static void NETWORK_EARN_FROM_CASHING_OUT(int amount) { Invoke(0x718FBBF67414FA36, V(amount)); }
		public static void NETWORK_EARN_FROM_GANGATTACK_PICKUP(int amount) { Invoke(0xA03D4ACE0A3284CE, V(amount)); }
		public static void NETWORK_EARN_ASSASSINATE_TARGET_KILLED(int amount) { Invoke(0xFA700D8A9905F78A, V(amount)); }
		// For the money bags that drop a max of $40,000. Often called 40k bags.
		// 
		// Most likely NETWORK_EARN_FROM_ROB***
		public static void NETWORK_EARN_FROM_ROB_ARMORED_CARS(int amount) { Invoke(0xF514621E8EA463D0, V(amount)); }
		public static void NETWORK_EARN_FROM_CRATE_DROP(int amount) { Invoke(0xB1CC1B9EC3007A2A, V(amount)); }
		public static void NETWORK_EARN_FROM_BETTING(int amount, string p1) { Invoke(0x827A5BA1A44ACA6D, V(amount), V(p1)); }
		public static void NETWORK_EARN_FROM_JOB(int amount, string p1) { Invoke(0xB2CC4836834E8A98, V(amount), V(p1)); }
		public static void NETWORK_EARN_FROM_JOBX2(int amount, string p1) { Invoke(0xDEBBF584665411D0, V(amount), V(p1)); }
		public static void NETWORK_EARN_FROM_PREMIUM_JOB(int amount, string p1) { Invoke(0xC8407624CEF2354B, V(amount), V(p1)); }
		public static void NETWORK_EARN_FROM_BEND_JOB(int amount, string heistHash) { Invoke(0x61326EE6DF15B0CA, V(amount), V(heistHash)); }
		public static void NETWORK_EARN_FROM_CHALLENGE_WIN(Any p0, Any* p1, bool p2) { Invoke(0x2B171E6B2F64D8DF, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_FROM_BOUNTY(int amount, Any* gamerHandle, Any* p2, Any p3) { Invoke(0x131BB5DA15453ACF, V(amount), V(gamerHandle), V(p2), V(p3)); }
		public static void NETWORK_EARN_FROM_IMPORT_EXPORT(int amount, Hash modelHash) { Invoke(0xF92A014A634442D6, V(amount), V(modelHash)); }
		public static void NETWORK_EARN_FROM_HOLDUPS(int amount) { Invoke(0x45B8154E077D9E4D, V(amount)); }
		public static void NETWORK_EARN_FROM_PROPERTY(int amount, Hash propertyName) { Invoke(0x849648349D77F5C5, V(amount), V(propertyName)); }
		// DSPORT
		public static void NETWORK_EARN_FROM_AI_TARGET_KILL(Any p0, Any p1) { Invoke(0x515B4A22E4D3C6D7, V(p0), V(p1)); }
		public static void NETWORK_EARN_FROM_NOT_BADSPORT(int amount) { Invoke(0x4337511FA8221D36, V(amount)); }
		public static void NETWORK_EARN_FROM_VEHICLE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) { Invoke(0xB539BD8A4C1EECF8, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7)); }
		public static void NETWORK_EARN_FROM_PERSONAL_VEHICLE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) { Invoke(0x3F4D00167E41E0AD, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		// type either Monthly,Weekly,Daily
		public static void NETWORK_EARN_FROM_DAILY_OBJECTIVES(int amount, string type, int characterSlot) { Invoke(0x6EA318C91C1A8786, V(amount), V(type), V(characterSlot)); }
		// Example for p1: "AM_DISTRACT_COPS"
		public static void NETWORK_EARN_FROM_AMBIENT_JOB(int p0, string p1, Any* p2) { Invoke(0xFB6DB092FBAE29E6, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_FROM_JOB_BONUS(Any p0, Any* p1, Any* p2) { Invoke(0x6816FB4416760775, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_FROM_CRIMINAL_MASTERMIND(Any p0, Any p1, Any p2) { Invoke(0xFA009A62990671D4, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_HEIST_AWARD(Any p0, Any p1, Any p2) { Invoke(0x9D4FDBB035229669, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_FIRST_TIME_BONUS(Any p0, Any p1, Any p2) { Invoke(0x11B0A20C493F7E36, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_GOON(Any p0, Any p1, Any p2) { Invoke(0xCDA1C62BE2777802, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_BOSS(Any p0, Any p1, Any p2) { Invoke(0x08B0CA7A6AB3AC32, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_AGENCY(Any p0, Any p1, Any p2, Any p3) { Invoke(0x0CB1BE0633C024A8, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_FROM_WAREHOUSE(int amount, int id) { Invoke(0x3E4ADAFF1830F146, V(amount), V(id)); }
		public static void NETWORK_EARN_FROM_CONTRABAND(int amount, Any p1) { Invoke(0xECA658CE2A4E5A72, V(amount), V(p1)); }
		public static void NETWORK_EARN_FROM_DESTROYING_CONTRABAND(Any p0, Any p1, Any p2) { Invoke(0x84C0116D012E8FC2, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_FROM_SMUGGLER_WORK(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { Invoke(0x6B7E4FB50D5F3D65, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void NETWORK_EARN_FROM_HANGAR_TRADE(Any p0, Any p1) { Invoke(0x31BA138F6304FB9F, V(p0), V(p1)); }
		public static void NETWORK_EARN_PURCHASE_CLUB_HOUSE(Any p0, Any p1) { Invoke(0x55A1E095DB052FA5, V(p0), V(p1)); }
		public static void NETWORK_EARN_FROM_BUSINESS_PRODUCT(int amount, Any p1, Any p2, Any p3) { Invoke(0x8586789730B10CAF, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_FROM_VEHICLE_EXPORT(int amount, Any p1, Any p2) { Invoke(0xEDEAD9A91EC768B3, V(amount), V(p1), V(p2)); }
		public static void NETWORK_EARN_SMUGGLER_AGENCY(int amount, Any p1, Any p2, Any p3) { Invoke(0xDEE612F2D71B0308, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_BOUNTY_HUNTER_REWARD(Any p0) { Invoke(0xF6B170F9A02E9E87, V(p0)); }
		public static void NETWORK_EARN_FROM_BUSINESS_BATTLE(Any p0) { Invoke(0x42FCE14F50F27291, V(p0)); }
		public static void NETWORK_EARN_FROM_CLUB_MANAGEMENT_PARTICIPATION(Any p0, int p1) { Invoke(0xA75EAC69F59E96E7, V(p0), V(p1)); }
		public static void NETWORK_EARN_FROM_FMBB_PHONECALL_MISSION(Any p0) { Invoke(0xC5156361F26E2212, V(p0)); }
		public static void NETWORK_EARN_FROM_BUSINESS_HUB_SELL(Any p0, Any p1, Any p2) { Invoke(0x0B39CF0D53F1C883, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_FROM_FMBB_BOSS_WORK(Any p0) { Invoke(0x1FDA0AA679C9919B, V(p0)); }
		public static void NETWORK_EARN_FMBB_WAGE_BONUS(Any p0) { Invoke(0xFFFBA1B1F7C0B6F4, V(p0)); }
		public static bool NETWORK_CAN_SPEND_MONEY(Any p0, bool p1, bool p2, bool p3, Any p4, Any p5) { return Invoke<bool>(0xAB3CAA6B422164DA, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static bool NETWORK_CAN_SPEND_MONEY2(Any p0, bool p1, bool p2, bool p3, Any* p4, Any p5, Any p6) { return Invoke<bool>(0x7303E27CC6532080, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static void NETWORK_BUY_ITEM(int amount, Hash item, Any p2, Any p3, bool p4, string item_name, Any p6, Any p7, Any p8, bool p9) { Invoke(0xF0077C797F66A355, V(amount), V(item), V(p2), V(p3), V(p4), V(item_name), V(p6), V(p7), V(p8), V(p9)); }
		public static void NETWORK_SPENT_TAXI(int amount, bool p1, bool p2, Any p3, Any p4) { Invoke(0x17C3A7D31EAE39F9, V(amount), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_PAY_EMPLOYEE_WAGE(Any p0, bool p1, bool p2) { Invoke(0x5FD5ED82CBBE9989, V(p0), V(p1), V(p2)); }
		public static void NETWORK_PAY_MATCH_ENTRY_FEE(int amount, string matchId, bool p2, bool p3) { Invoke(0x9346E14F2AF74D46, V(amount), V(matchId), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BETTING(int amount, int p1, string matchId, bool p3, bool p4) { Invoke(0x1C436FD11FFA692F, V(amount), V(p1), V(matchId), V(p3), V(p4)); }
		public static void NETWORK_SPENT_WAGER(Any p0, Any p1, int amount) { Invoke(0xD99DB210089617FE, V(p0), V(p1), V(amount)); }
		public static void NETWORK_SPENT_IN_STRIPCLUB(Any p0, bool p1, Any p2, bool p3) { Invoke(0xEE99784E4467689C, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_BUY_HEALTHCARE(int cost, bool p1, bool p2) { Invoke(0xD9B067E55253E3DD, V(cost), V(p1), V(p2)); }
		// p1 = 0 (always)
		// p2 = 1 (always)
		public static void NETWORK_BUY_AIRSTRIKE(int cost, bool p1, bool p2, Any p3) { Invoke(0x763B4BD305338F19, V(cost), V(p1), V(p2), V(p3)); }
		public static void NETWORK_BUY_BACKUP_GANG(int p0, int p1, bool p2, bool p3, int npcProvider) { Invoke(0xA3EDDAA42411D3B9, V(p0), V(p1), V(p2), V(p3), V(npcProvider)); }
		// p1 = 0 (always)
		// p2 = 1 (always)
		public static void NETWORK_BUY_HELI_STRIKE(int cost, bool p1, bool p2, Any p3) { Invoke(0x81AA4610E3FD3A69, V(cost), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_AMMO_DROP(Any p0, bool p1, bool p2, Any p3) { Invoke(0xB162DC95C0A3317B, V(p0), V(p1), V(p2), V(p3)); }
		// p1 is just an assumption. p2 was false and p3 was true.
		public static void NETWORK_BUY_BOUNTY(int amount, Player victim, bool p2, bool p3, Any p4) { Invoke(0x7B718E197453F2D9, V(amount), V(victim), V(p2), V(p3), V(p4)); }
		public static void NETWORK_BUY_PROPERTY(int cost, Hash propertyName, bool p2, bool p3) { Invoke(0x650A08A280870AF6, V(cost), V(propertyName), V(p2), V(p3)); }
		public static void NETWORK_BUY_SMOKES(int p0, bool p1, bool p2) { Invoke(0x75AF80E61248EEBD, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_HELI_PICKUP(Any p0, bool p1, bool p2, Any p3) { Invoke(0x7BF1D73DB2ECA492, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BOAT_PICKUP(Any p0, bool p1, bool p2, Any p3) { Invoke(0x524EE43A37232C00, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BULL_SHARK(Any p0, bool p1, bool p2, Any p3) { Invoke(0xA6DD8458CE24012C, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_CASH_DROP(int amount, bool p1, bool p2) { Invoke(0x289016EC778D60E0, V(amount), V(p1), V(p2)); }
		// Only used once in a script (am_contact_requests)
		// p1 = 0
		// p2 = 1
		public static void NETWORK_SPENT_HIRE_MUGGER(Any p0, bool p1, bool p2, Any p3) { Invoke(0xE404BFB981665BF0, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_ROBBED_BY_MUGGER(int amount, bool p1, bool p2, Any p3) { Invoke(0x995A65F15F581359, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_HIRE_MERCENARY(Any p0, bool p1, bool p2, Any p3) { Invoke(0xE7B80E2BF9D80BD6, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BUY_WANTEDLEVEL(Any p0, Any* p1, bool p2, bool p3, Any p4) { Invoke(0xE1B13771A843C4F6, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPENT_BUY_OFFTHERADAR(Any p0, bool p1, bool p2, Any p3) { Invoke(0xA628A745E2275C5D, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BUY_REVEAL_PLAYERS(Any p0, bool p1, bool p2, Any p3) { Invoke(0x6E176F1B18BC0637, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_CARWASH(Any p0, Any p1, Any p2, bool p3, bool p4) { Invoke(0xEC03C719DB2F4306, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPENT_CINEMA(Any p0, Any p1, bool p2, bool p3) { Invoke(0x6B38ECB05A63A685, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_TELESCOPE(Any p0, bool p1, bool p2) { Invoke(0x7FE61782AD94CC09, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_HOLDUPS(Any p0, bool p1, bool p2) { Invoke(0xD9B86B9872039763, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_BUY_PASSIVE_MODE(Any p0, bool p1, bool p2, Any p3) { Invoke(0x6D3A430D1A809179, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BANK_INTEREST(int p0, bool p1, bool p2) { Invoke(0xCA230C9682556CF1, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_PROSTITUTES(Any p0, bool p1, bool p2) { Invoke(0xB21B89501CFAC79E, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_ARREST_BAIL(Any p0, bool p1, bool p2) { Invoke(0x812F5488B1B2A299, V(p0), V(p1), V(p2)); }
		// According to how I understood this in the freemode script alone,
		// The first parameter is determined by a function named, func_5749 within the freemode script which has a list of all the vehicles and a set price to return which some vehicles deals with globals as well. So the first parameter is basically the set in stone insurance cost it's gonna charge you for that specific vehicle model.
		// 
		// The second parameter whoever put it was right, they call GET_ENTITY_MODEL with the vehicle as the paremeter.
		// 
		// The third parameter is the network handle as they call their little struct<13> func or atleast how the script decompiled it to look which in lamens terms just returns the network handle of the previous owner based on DECOR_GET_INT(vehicle, "Previous_Owner").
		// 
		// The fourth parameter is a bool that returns true/false depending on if your bank balance is greater then 0.
		// 
		// The fifth and last parameter is a bool that returns true/false depending on if you have the money for the car based on the cost returned by func_5749. In the freemode script eg,
		// bool hasTheMoney = MONEY::_GET_BANK_BALANCE() < carCost.
		public static void NETWORK_SPENT_PAY_VEHICLE_INSURANCE_PREMIUM(int amount, Hash vehicleModel, Any* gamerHandle, bool notBankrupt, bool hasTheMoney) { Invoke(0x9FF28D88C766E3E8, V(amount), V(vehicleModel), V(gamerHandle), V(notBankrupt), V(hasTheMoney)); }
		public static void NETWORK_SPENT_CALL_PLAYER(Any p0, Any* p1, bool p2, bool p3) { Invoke(0xACDE7185B374177C, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BOUNTY(Any p0, bool p1, bool p2) { Invoke(0x29B260B84947DFCC, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_FROM_ROCKSTAR(int p0, bool p1, bool p2) { Invoke(0x6A445B64ED7ABEB5, V(p0), V(p1), V(p2)); }
		// Hardcoded to return 0.
		public static int NETWORK_SPEND_EARNED_FROM_BANK_AND_WALLETS(int amount) { return Invoke<int>(0x9B5016A6433A68C5, V(amount)); }
		// This isn't a hash collision.
		public static byte* PROCESS_CASH_GIFT(int* p0, int* p1, string p2) { return PInvoke<byte>(0x20194D48EAEC9A41, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_MOVE_SUBMARINE(Any p0, Any p1, Any p2) { Invoke(0xCD4D66B43B1DD28D, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_PLAYER_HEALTHCARE(int p0, int p1, bool p2, bool p3) { Invoke(0x7C99101F7FCE2EE5, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_NO_COPS(Any p0, bool p1, bool p2, Any p3) { Invoke(0xD5BB406F4E04019F, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_CARGO_SOURCING(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { Invoke(0x948705F6F9C50824, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void NETWORK_SPENT_REQUEST_JOB(Any p0, bool p1, bool p2, Any p3) { Invoke(0x8204DA7934DF3155, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_REQUEST_HEIST(Any p0, bool p1, bool p2, Any p3) { Invoke(0x9D26502BB97BFE62, V(p0), V(p1), V(p2), V(p3)); }
		// The first parameter is the amount spent which is store in a global when this native is called. The global returns 10. Which is the price for both rides.
		// 
		// The last 3 parameters are, 
		// 2,0,1 in the am_ferriswheel.c
		// 1,0,1 in the am_rollercoaster.c
		// 
		public static void NETWORK_BUY_FAIRGROUND_RIDE(int amount, Any p1, bool p2, bool p3, Any p4) { Invoke(0x8A7B3952DD64D2B5, V(amount), V(p1), V(p2), V(p3), V(p4)); }
		public static bool NETWORK_ECONOMY_HAS_FIXED_CRAZY_NUMBERS() { return Invoke<bool>(0x7C4FCCD2E4DEB394); }
		public static void NETWORK_SPENT_JOB_SKIP(int amount, string matchId, bool p2, bool p3) { Invoke(0x28F174A67B8D0C2F, V(amount), V(matchId), V(p2), V(p3)); }
		public static bool NETWORK_SPENT_BOSS_GOON(int amount, bool p1, bool p2) { return Invoke<bool>(0xFFBE02CD385356BD, V(amount), V(p1), V(p2)); }
		public static void NETWORK_SPEND_GOON(int p0, int p1, int amount) { Invoke(0x08A1B82B91900682, V(p0), V(p1), V(amount)); }
		public static void NETWORK_SPEND_BOSS(Any p0, Any p1, Any p2) { Invoke(0xDBC966A01C02BCA7, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_MOVE_YACHT(int amount, bool p1, bool p2) { Invoke(0xE7DF4E0545DFB56E, V(amount), V(p1), V(p2)); }
		public static void NETWORK_SPENT_RENAME_ORGANIZATION(Any p0, Any p1, Any p2, Any p3) { Invoke(0xFC4EE00A7B3BFB76, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_BUY_CONTRABAND_MISSION(int p0, int p1, Hash p2, bool p3, bool p4) { Invoke(0x30FD873ECE50E9F6, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPENT_PA_SERVICE_HELI(Any p0, Any p1, Any p2, Any p3) { Invoke(0x112209CE0290C03A, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PA_SERVICE_VEHICLE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xED5FD7AF10F5E262, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PA_SERVICE_SNACK(Any p0, Any p1, Any p2, Any p3) { Invoke(0x0D30EB83668E63C5, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PA_SERVICE_DANCER(Any p0, Any p1, Any p2, Any p3) { Invoke(0xB49ECA122467D05F, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PA_SERVICE_IMPOUND(Any p0, Any p1, Any p2) { Invoke(0xE23ADC6FCB1F29AE, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_PA_HELI_PICKUP(Any p0, Any p1, Any p2, Any p3) { Invoke(0x0FE8E1FCD2B86B33, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PURCHASE_OFFICE_PROPERTY(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x69EF772B192614C1, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPENT_UPGRADE_OFFICE_PROPERTY(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x8E243837643D9583, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPENT_PURCHASE_WAREHOUSE_PROPERTY(Any p0, Any p1, Any p2, Any p3) { Invoke(0xBD0EFB25CCA8F97A, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_WAREHOUSE_PROPERTY(Any p0, Any p1, Any p2, Any p3) { Invoke(0xA95F667A755725DA, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PURCHASE_IMPEXP_WAREHOUSE_PROPERTY(int amount, Any* data, bool p2, bool p3) { Invoke(0x33981D6804E62F49, V(amount), V(data), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_IMPEXP_WAREHOUSE_PROPERTY(Any p0, Any p1, Any p2, Any p3) { Invoke(0x4128464231E3CA0B, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_TRADE_IMPEXP_WAREHOUSE_PROPERTY(Any p0, Any p1, Any p2, Any p3) { Invoke(0x2FAB6614CE22E196, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_ORDER_WAREHOUSE_VEHICLE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x05F04155A226FBBF, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_ORDER_BODYGUARD_VEHICLE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xE8B0B270B6E7C76E, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_JUKEBOX(Any p0, Any p1, Any p2, Any p3) { Invoke(0x5BCDE0F640C773D2, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PURCHASE_CLUB_HOUSE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x998E18CEB44487FC, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_CLUB_HOUSE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xFA07759E6FDDD7CF, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PURCHASE_BUSINESS_PROPERTY(Any p0, Any p1, Any p2, Any p3) { Invoke(0x6FD97159FE3C971A, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_BUSINESS_PROPERTY(Any p0, Any p1, Any p2, Any p3) { Invoke(0x675D19C6067CAE08, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_TRADE_BUSINESS_PROPERTY(Any p0, Any p1, Any p2, Any p3) { Invoke(0xA51B086B0B2C0F7A, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_MC_ABILITY(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0xD7CCCBA28C4ECAF0, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPENT_PAY_BUSINESS_SUPPLIES(Any p0, Any p1, Any p2, Any p3) { Invoke(0x0035BB914316F1E3, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_CHANGE_APPEARANCE(Any p0, Any p1, Any p2) { Invoke(0x5F456788B05FAEAC, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_VEHICLE_EXPORT_MODS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) { Invoke(0xA75CCF58A60A5FD1, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9)); }
		public static void NETWORK_SPENT_PURCHASE_OFFICE_GARAGE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xB4C2EC463672474E, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_OFFICE_GARAGE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x2AFC2D19B50797F2, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_IMPORT_EXPORT_REPAIR(Any p0, Any p1, Any p2) { Invoke(0xC1952F3773BA18FE, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SPENT_PURCHASE_HANGAR(Any p0, Any p1, Any p2, Any p3) { Invoke(0xCCB339CC970452DA, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_HANGAR(Any p0, Any p1, Any p2, Any p3) { Invoke(0x615EB504B0788DAF, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_HANGAR_UTILITY_CHARGES(int amount, bool p1, bool p2) { Invoke(0xB18AC2ECBB15CB6A, V(amount), V(p1), V(p2)); }
		public static void NETWORK_SPENT_HANGAR_STAFF_CHARGES(int amount, bool p1, bool p2) { Invoke(0xB1F1346FD57685D7, V(amount), V(p1), V(p2)); }
		public static void NETWORK_SPENT_BUY_TRUCK(Any p0, Any p1, Any p2, Any p3) { Invoke(0xAC272C0AE01B4BD8, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_TRUCK(Any p0, Any p1, Any p2, Any p3) { Invoke(0x365E877C61D6988B, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BUY_BUNKER(Any p0, Any p1, Any p2, Any p3) { Invoke(0x12D148D26538D0F9, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPRADE_BUNKER(Any p0, Any p1, Any p2, Any p3) { Invoke(0x0C82D21A77C22D49, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_FROM_SELL_BUNKER(int amount, Hash bunkerHash) { Invoke(0x9251B6ABF2D0A5B4, V(amount), V(bunkerHash)); }
		public static void NETWORK_SPENT_BALLISTIC_EQUIPMENT(int amount, bool p1, bool p2) { Invoke(0x5D97630A8A0EF123, V(amount), V(p1), V(p2)); }
		public static void NETWORK_EARN_RDR_BONUS(int amount, Any p1) { Invoke(0x7A5349B773584675, V(amount), V(p1)); }
		public static void NETWORK_EARN_WAGE_PAYMENT(int amount, Any p1) { Invoke(0x35F8DA0E8A31EF1B, V(amount), V(p1)); }
		public static void NETWORK_EARN_WAGE_PAYMENT_BONUS(int amount) { Invoke(0x005ACA7100BD101D, V(amount)); }
		public static void NETWORK_SPENT_BUY_BASE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x4EA3F425C7744D21, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_BASE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x3DD3F33A5D55EA6F, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_BUY_TILTROTOR(Any p0, Any p1, Any p2, Any p3) { Invoke(0x0CCE73BC7A11E885, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_TILTROTOR(Any p0, Any p1, Any p2, Any p3) { Invoke(0x165E135D6DFA2907, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_EMPLOY_ASSASSINS(Any p0, Any p1, Any p2, Any p3) { Invoke(0x5BBBD92186E1F1C5, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_GANGOPS_CANNON(Any p0, Any p1, Any p2, Any p3) { Invoke(0x771ADB0E7635B7BF, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_GANGOPS_SKIP_MISSION(Any p0, Any p1, Any p2, Any p3) { Invoke(0xDA947AE8880D5C18, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_CASINO_HEIST_SKIP_MISSION(Any p0, Any p1, Any p2, Any p3) { Invoke(0x487009DD91D93429, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_SELL_BASE(int amount, Hash baseNameHash) { Invoke(0x0E1E2FF3F4EC11AA, V(amount), V(baseNameHash)); }
		public static void NETWORK_EARN_TARGET_REFUND(int amount, int p1) { Invoke(0x5B669CF2299A271F, V(amount), V(p1)); }
		public static void NETWORK_EARN_GANGOPS_WAGES(int amount, int p1) { Invoke(0x2DCB19ABAB0380A8, V(amount), V(p1)); }
		public static void NETWORK_EARN_GANGOPS_WAGES_BONUS(int amount, int p1) { Invoke(0x15BB2A5C757EB91F, V(amount), V(p1)); }
		public static void NETWORK_EARN_DAR_CHALLENGE(int amount, Any p1) { Invoke(0xCAC672087B4A24AB, V(amount), V(p1)); }
		public static void NETWORK_EARN_DOOMSDAY_FINALE_BONUS(int amount, Hash vehicleHash) { Invoke(0x128A747F4A230952, V(amount), V(vehicleHash)); }
		public static void NETWORK_EARN_GANGOPS_AWARD(int amount, string p1, Any p2) { Invoke(0xA9A31475F530DFDA, V(amount), V(p1), V(p2)); }
		public static void NETWORK_EARN_GANGOPS_ELITE(int amount, string p1, int actIndex) { Invoke(0x2597A0D4A4FC2C77, V(amount), V(p1), V(actIndex)); }
		public static void NETWORK_SERVICE_EARN_GANGOPS_RIVAL_DELIVERY(int earnedMoney) { Invoke(0x1B882107C23A9022, V(earnedMoney)); }
		public static void NETWORK_SPEND_GANGOPS_START_STRAND(int type, int amount, bool p2, bool p3) { Invoke(0xA19EC0786E326E06, V(type), V(amount), V(p2), V(p3)); }
		public static void NETWORK_SPEND_GANGOPS_TRIP_SKIP(int amount, bool p1, bool p2) { Invoke(0x5ECE6FD7B4EC8D6A, V(amount), V(p1), V(p2)); }
		public static void NETWORK_EARN_GANGOPS_PREP_PARTICIPATION(int amount) { Invoke(0xED26584F6BDCBBFD, V(amount)); }
		public static void NETWORK_EARN_GANGOPS_SETUP(int amount, string p1) { Invoke(0xA9160796D47A2CF8, V(amount), V(p1)); }
		public static void NETWORK_EARN_GANGOPS_FINALE(int amount, string p1) { Invoke(0x1C121FC9545E0D52, V(amount), V(p1)); }
		public static void NETWORK_SPEND_GANGOPS_REPAIR_COST(Any p0, Any p1, Any p2) { Invoke(0x2A7CEC72C3443BCC, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_NIGHTCLUB(Any p0, Any p1) { Invoke(0xE0F82D68C7039158, V(p0), V(p1)); }
		public static void NETWORK_EARN_NIGHTCLUB_DANCING(Any p0) { Invoke(0xB4DEAE67F35E2ACD, V(p0)); }
		public static void NETWORK_EARN_BB_EVENT_BONUS(int amount) { Invoke(0xFDD8D2440DAF1590, V(amount)); }
		public static void NETWORK_SPENT_PURCHASE_HACKER_TRUCK(Any p0, Any p1, Any p2, Any p3) { Invoke(0x2A93C46AAB1EACC9, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_HACKER_TRUCK(Any p0, Any p1, Any p2, Any p3) { Invoke(0x226C284C830D0CA8, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_HACKER_TRUCK(Any p0, int amount, Any p2, Any p3) { Invoke(0xE8815FE993896AD3, V(p0), V(amount), V(p2), V(p3)); }
		public static void NETWORK_SPENT_PURCHASE_NIGHTCLUB_AND_WAREHOUSE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xED76D195E6E3BF7F, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_UPGRADE_NIGHTCLUB_AND_WAREHOUSE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x1DC9B749E7AE282B, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_NIGHTCLUB_AND_WAREHOUSE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) { Invoke(0xC6E74CF8C884C880, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static void NETWORK_SPEND_NIGHTCLUB_AND_WAREHOUSE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x65482BFD0923C8A1, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_RDR_HATCHET_BONUS(int amount, bool p1, bool p2) { Invoke(0xE284D46FFDB82E36, V(amount), V(p1), V(p2)); }
		public static void NETWORK_SPENT_NIGHTCLUB_ENTRY_FEE(Player player, int amount, Any p1, bool p2, bool p3) { Invoke(0x876056684281655D, V(player), V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_NIGHTCLUB_BAR_DRINK(int amount, Any p1, bool p2, bool p3) { Invoke(0xDD21B016E4289465, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_BOUNTY_HUNTER_MISSION(int amount, bool p1, bool p2) { Invoke(0x1BEA0CD93470BB1F, V(amount), V(p1), V(p2)); }
		public static void NETWORK_SPENT_REHIRE_DJ(int amount, Any p1, bool p2, bool p3) { Invoke(0xF6C8A544E4CF14FC, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPENT_ARENA_JOIN_SPECTATOR(int amount, Any p1, bool p2, bool p3) { Invoke(0x14EAEA58F93B55AF, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_ARENA_SKILL_LEVEL_PROGRESSION(int amount, Any p1) { Invoke(0xE08256F972C7BB2C, V(amount), V(p1)); }
		public static void NETWORK_EARN_ARENA_CAREER_PROGRESSION(int amount, Any p1) { Invoke(0x0F99F70C61F14619, V(amount), V(p1)); }
		public static void NETWORK_SPEND_MAKE_IT_RAIN(int amount, bool p1, bool p2) { Invoke(0xE5F5A060439C2F5D, V(amount), V(p1), V(p2)); }
		public static void NETWORK_SPEND_BUY_ARENA(int amount, bool p1, bool p2, string p3) { Invoke(0x40D5DA9550B7CB46, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_UPGRADE_ARENA(int amount, bool p1, bool p2, string p3) { Invoke(0x037ABB06825D7AB1, V(amount), V(p1), V(p2), V(p3)); }
		// type either, 1 for cam spectate, 2 for drone
		public static void NETWORK_SPEND_ARENA_SPECTATOR_BOX(int amount, int type, bool p2, bool p3) { Invoke(0x7049BF858601DC0F, V(amount), V(type), V(p2), V(p3)); }
		public static void NETWORK_SPEND_SPIN_THE_WHEEL_PAYMENT(int amount, Any p1, bool p2) { Invoke(0x9A5BD1D0000B339C, V(amount), V(p1), V(p2)); }
		public static void NETWORK_EARN_SPIN_THE_WHEEL_CASH(int amount) { Invoke(0x676C48776CACBB5A, V(amount)); }
		public static void NETWORK_SPEND_ARENA_PREMIUM(int amount, bool p1, bool p2) { Invoke(0x619496D837EFD920, V(amount), V(p1), V(p2)); }
		public static void NETWORK_EARN_ARENA_WAR(int amount, Any p1, Any p2, Any p3) { Invoke(0x631F1CB8FB4130AA, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_ARENA_WAR_ASSASSINATE_TARGET(int amount) { Invoke(0x5E7AE8AABE8B7C0D, V(amount)); }
		public static void NETWORK_EARN_ARENA_WAR_EVENT_CARGO(int amount) { Invoke(0xA82959062361B259, V(amount)); }
		public static void NETWORK_EARN_RC_TIME_TRIAL(int amount) { Invoke(0xDFF49EE984E7AAE8, V(amount)); }
		public static void NETWORK_EARN_DAILY_OBJECTIVE_EVENT(int amount) { Invoke(0x5128DF14A5BB86FC, V(amount)); }
		public static void NETWORK_SPEND_CASINO_MEMBERSHIP(int amount, bool p1, bool p2, int p3) { Invoke(0xFBBE0570EDF39D46, V(amount), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_BUY_CASINO(int amount, bool p1, bool p2, Any* data) { Invoke(0x34A6FC4D06C4DA0F, V(amount), V(p1), V(p2), V(data)); }
		public static void NETWORK_SPEND_UPGRADE_CASINO(int amount, bool p1, bool p2, Any* data) { Invoke(0x4740D62BC1B4EBEA, V(amount), V(p1), V(p2), V(data)); }
		public static void NETWORK_SPEND_CASINO_GENERIC(int amount, Any p1, Any p2, Any p3, Any p4) { Invoke(0x88BF9B612B84D3C3, V(amount), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_EARN_CASINO_TIME_TRIAL_WIN(int amount) { Invoke(0x0819DB99FD2FBBD8, V(amount)); }
		public static void NETWORK_EARN_COLLECTABLES_ACTION_FIGURES(int amount) { Invoke(0x5517F90043466049, V(amount)); }
		public static void NETWORK_EARN_CASINO_COLLECTABLE_COMPLETED_COLLECTION(int amount) { Invoke(0x83AD64F53F4E9483, V(amount)); }
		public static void NETWORK_EARN_SELL_PRIZE_VEHICLE(int amount, Any p1, Any p2) { Invoke(0x8BCB27A057DF7B7F, V(amount), V(p1), V(p2)); }
		public static void NETWORK_EARN_CASINO_MISSION_REWARD(int amount) { Invoke(0x566FD402B25787DE, V(amount)); }
		public static void NETWORK_EARN_CASINO_STORY_MISSION_REWARD(int amount) { Invoke(0xAC95ED552157E092, V(amount)); }
		public static void NETWORK_EARN_CASINO_MISSION_PARTICIPATION(int amount) { Invoke(0x09E8F18641BE2575, V(amount)); }
		public static void NETWORK_EARN_CASINO_AWARD(int amount, Hash hash) { Invoke(0x973A9781A34F8DEB, V(amount), V(hash)); }
		public static void NETWORK_SPEND_BUY_ARCADE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x870289A558348378, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_UPGRADE_ARCADE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x5574637681911FDA, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_CASINO_HEIST(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) { Invoke(0xD30E8392F407C328, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10)); }
		public static void NETWORK_SPEND_ARCADE_MGMT(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0xB5B58E24868CB09E, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPEND_PLAY_ARCADE(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0xEAD3D81F2C3A1458, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPEND_ARCADE(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x43AA7FAC4E6D6687, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_EARN_CASINO_HEIST(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) { Invoke(0x72E7C7B9615FA3C3, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static void NETWORK_EARN_UPGRADE_ARCADE(Any p0, Any p1, Any p2) { Invoke(0x4C3B75694F7E0D9C, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_ARCADE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { Invoke(0xD29334ED1A256DBF, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void NETWORK_EARN_COLLECTABLES(Any p0, Any p1, Any p2) { Invoke(0xA95CFB4E02390842, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_CHALLENGE(int amount, Any p1, Any p2) { Invoke(0x0DD362F14F18942A, V(amount), V(p1), V(p2)); }
		public static void NETWORK_EARN_CASINO_HEIST_AWARDS(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x3EC7471E6909798A, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_EARN_COLLECTABLE_ITEM(int amount, Any p1) { Invoke(0x84FF63BD4966F33D, V(amount), V(p1)); }
		public static void NETWORK_EARN_COLLECTABLE_COMPLETED_COLLECTION(int amount, Any p1) { Invoke(0x5C9B198AF5A54FA6, V(amount), V(p1)); }
		public static void NETWORK_EARN_YATCH_MISSION(int amount, Any p1) { Invoke(0xDE68E30D89F97132, V(amount), V(p1)); }
		public static void NETWORK_EARN_DISPATCH_CALL(int amount, Any p1) { Invoke(0xE2E244AB823B4483, V(amount), V(p1)); }
		public static void NETWORK_SPEND_BEACH_PARTY(Any p0) { Invoke(0x54ABA22FA6371249, V(p0)); }
		public static void NETWORK_SPEND_SUBMARINE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { Invoke(0x6C8BC1488527AAAB, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void NETWORK_SPEND_CASINO_CLUB(int amount1, Any p1, bool p2, Any p3, int p4, int p5, int p6, int amount2, Any p8) { Invoke(0xC991C255AA6D90B2, V(amount1), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(amount2), V(p8)); }
		public static void NETWORK_SPEND_BUY_SUB(Any p0, Any p1, Any p2, Any p3) { Invoke(0x90CD7C6871FBF1B4, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_UPGRADE_SUB(Any p0, Any p1, Any p2, Any p3) { Invoke(0x89049A84065CE68E, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_ISLAND_HEIST(Any p0, Any p1, Any p2, Any p3) { Invoke(0xE86689E5F82DE429, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_ISLAND_HEIST(int amount1, Any p1, Any p2, Any p3, int amount2, int p5) { Invoke(0xD21D111C46BA9F15, V(amount1), V(p1), V(p2), V(p3), V(amount2), V(p5)); }
		public static void NETWORK_EARN_BEACH_PARTY_LOST_FOUND(Any p0, Any p1, Any p2) { Invoke(0xA51338E0DCCD4065, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_FROM_ISLAND_HEIST_DJ_MISSION(Any p0, Any p1) { Invoke(0xE2BB399D90942091, V(p0), V(p1)); }
		public static void NETWORK_SPEND_CAR_CLUB_MEMBERSHIP(int amount1, Any p1, Any p2, int amount2, Any p4) { Invoke(0x1464E17207CD36E2, V(amount1), V(p1), V(p2), V(amount2), V(p4)); }
		public static void NETWORK_SPEND_CAR_CLUB_BAR(Any p0, bool p1, bool p2, Any p3) { Invoke(0x925227803A0EAA1B, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_AUTOSHOP_MODIFY(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x9BEA350D7C48061B, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPEND_CAR_CLUB_TAKEOVER(Any p0, Any p1, Any p2, Any p3) { Invoke(0xD1E46824E6FB92B5, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_BUY_AUTOSHOP(Any p0, Any p1, Any p2, Any p3) { Invoke(0xEEB7E5D1FEB20869, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_UPGRADE_AUTOSHOP(Any p0, Any p1, Any p2, Any p3) { Invoke(0xDD829AA198FDC46C, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_AUTOSHOP_BUSINESS(Any p0, Any p1, Any p2) { Invoke(0x36A7FD5A7194B03E, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_AUTOSHOP_INCOME(Any p0, int p1) { Invoke(0xC66D1CF99ED7FE25, V(p0), V(p1)); }
		public static void NETWORK_EARN_CARCLUB_MEMBERSHIP(Any p0) { Invoke(0xBC6227792A188E2E, V(p0)); }
		public static void NETWORK_EARN_DAILY_VEHICLE(Any p0, Any p1) { Invoke(0x533073E8A596008C, V(p0), V(p1)); }
		public static void NETWORK_EARN_DAILY_VEHICLE_BONUS(Any p0) { Invoke(0xFE65AFE7308E32B2, V(p0)); }
		public static void NETWORK_EARN_TUNER_AWARD(Any p0, Any p1, Any p2) { Invoke(0xB846F547D3792DF6, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_TUNER_ROBBERY(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0xBCB266247193AC61, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_EARN_UPGRADE_AUTOSHOP(Any p0, Any p1) { Invoke(0xC10322A8D3E061EE, V(p0), V(p1)); }
		public static void NETWORK_SPEND_INTERACTION_MENU_ABILITY(Any p0, Any p1, Any p2, Any p3) { Invoke(0x93AA4165CB67E925, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_SET_COMMON_FIELDS(Any p0, Any p1, Any p2, bool p3) { Invoke(0xB9F7A469460E7A4A, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_SET_DISCOUNT(bool p0) { Invoke(0x7E2F4E8F44CAF4E0, V(p0)); }
		public static void NETWORK_SPEND_BUY_AGENCY(Any p0, Any p1, Any p2, Any p3) { Invoke(0xEA8CD3C9B3C35884, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_UPGRADE_AGENCY(Any p0, Any p1, Any p2, Any p3) { Invoke(0x6CCA64840589A3B6, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_AGENCY(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x1B2120405080125C, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPEND_HIDDEN(Any p0, Any p1, Any p2, Any p3) { Invoke(0xBF8793B91EA094A7, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_SOURCE_BIKE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xD9DF467CBE4398C8, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_COMP_SUV(Any p0, Any p1, Any p2, Any p3) { Invoke(0xD86581F9E7CDA383, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_SUV_FST_TRVL(int p0, bool p1, bool p2, Any p3) { Invoke(0x61A2DF64ED2D396E, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_SUPPLY(Any p0, Any p1, Any p2, Any p3) { Invoke(0xEBD482B82ACB8BAD, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_BIKE_SHOP(Any p0, Any p1, Any p2, Any p3) { Invoke(0x923AEA8E78F8DF0B, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_SPEND_VEHICLE_REQUESTED(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x02D24A35A9CC3503, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void NETWORK_SPEND_GUNRUNNING(Any p0, Any p1, Any p2, Any p3) { Invoke(0x2CEB0E0BC2A77C05, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_AGENCY_SAFE(Any p0, Any p1) { Invoke(0x663B4B9D11742A12, V(p0), V(p1)); }
		public static void NETWORK_EARN_AWARD_CONTRACT(Any p0, Any p1) { Invoke(0x146D4EB6D22A403F, V(p0), V(p1)); }
		public static void NETWORK_EARN_AGENCY_CONTRACT(Any p0, Any p1) { Invoke(0x38482AD49CB905C7, V(p0), V(p1)); }
		public static void NETWORK_EARN_AWARD_PHONE(Any p0, Any p1) { Invoke(0x7397A115030F1BE3, V(p0), V(p1)); }
		public static void NETWORK_EARN_AGENCY_PHONE(Any p0, Any p1, Any p2) { Invoke(0xE29F3D5FA63B1B82, V(p0), V(p1), V(p2)); }
		public static void NETWORK_EARN_AWARD_FIXER_MISSION(Any p0, Any p1) { Invoke(0x88D6C327D6C57C45, V(p0), V(p1)); }
		public static void NETWORK_EARN_FIXER_PREP(Any p0, Any p1) { Invoke(0x6283E5DE4C4460C6, V(p0), V(p1)); }
		public static void NETWORK_EARN_FIXER_FINALE(Any p0, Any p1) { Invoke(0xBA154373C5FE51E8, V(p0), V(p1)); }
		public static void NETWORK_EARN_FIXER_AGENCY_SHORT_TRIP(Any p0, Any p1) { Invoke(0xF4A8E57460BF2037, V(p0), V(p1)); }
		public static void NETWORK_EARN_AWARD_SHORT_TRIP(Any p0, Any p1) { Invoke(0x5B4DBDED84D6A420, V(p0), V(p1)); }
		public static void NETWORK_EARN_FIXER_RIVAL_DELIVERY(Any p0, Any p1) { Invoke(0x235D41210B3A1A5E, V(p0), V(p1)); }
		public static void NETWORK_EARN_UPGRADE_AGENCY(Any p0, Any p1) { Invoke(0xD07C7C3F1995108C, V(p0), V(p1)); }
		public static void NETWORK_SPEND_APARTMENT_UTILITIES(int amount, bool p1, bool p2, Any* data) { Invoke(0x1254B5B3925EFD3D, V(amount), V(p1), V(p2), V(data)); }
		public static void NETWORK_SPEND_BUSINESS_PROPERTY_FEES(Any p0, Any p1, Any p2, Any p3) { Invoke(0x92D1CFDA1227FF1C, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_SIGHTSEEING_REWARD(Any p0, Any p1, Any p2, Any p3) { Invoke(0x45087AE480B233AC, V(p0), V(p1), V(p2), V(p3)); }
		public static void NETWORK_EARN_BIKER_SHOP(Any p0, Any p1) { Invoke(0x2C5809EB9DF57257, V(p0), V(p1)); }
		public static void NETWORK_EARN_BIKER(Any p0) { Invoke(0x71BEC32FA466E105, V(p0)); }
		public static void NETWORK_YOHAN_SOURCE_GOODS(Any p0, Any p1, Any p2, Any p3) { Invoke(0x59498BC8B1C8B15C, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_BUY_MFGARAGE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xA2ED36DCF0FCA413, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_UPGRADE_MFGARAGE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xCF8F346DDDC66643, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_BUY_SUPPLIES(int p0, bool p1, bool p2, int p3) { Invoke(0xB48185C0CA67B16B, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_BUY_ACID_LAB(Any p0, Any p1, Any p2, Any p3) { Invoke(0xF1E26A7924327152, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_UPGRADE_ACID_LAB_EQUIPMENT(Any p0, Any p1, Any p2, Any p3) { Invoke(0x110EE9D486C23126, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_UPGRADE_ACID_LAB_ARMOR(int p0, bool p1, bool p2, int p3) { Invoke(0xA7D541C9ACD63133, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_UPGRADE_ACID_LAB_SCOOP(int p0, bool p1, bool p2, int p3) { Invoke(0x2940558E05BCC2EC, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_UPGRADE_ACID_LAB_MINES(int p0, bool p1, bool p2, int p3) { Invoke(0x4B99AB08C92C54E4, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_RENAME_ACID_LAB(Any p0, Any p1, Any p2, Any p3) { Invoke(0x842B1C5AF61ACDE9, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_SPEND_RENAME_ACID_PRODUCT(Any p0, Any p1, Any p2, Any p3) { Invoke(0x446798F7495DD7D8, V(p0), V(p1), V(p2), V(p3)); }
		public static void _NETWORK_EARN_AWARD_JUGGALO_MISSION(Any p0, Any p1) { Invoke(0xDDF047577F1A02A7, V(p0), V(p1)); }
		public static void _NETWORK_EARN_AWARD_ACID_LAB(Any p0, Any p1) { Invoke(0xD1A8165767AD2D23, V(p0), V(p1)); }
		public static void _NETWORK_EARN_AWARD_DAILY_STASH(Any p0, Any p1) { Invoke(0xC30650FA74A19D02, V(p0), V(p1)); }
		public static void _NETWORK_EARN_AWARD_DEAD_DROP(Any p0, Any p1) { Invoke(0xD01EBAEA1F905EF6, V(p0), V(p1)); }
		public static void _NETWORK_EARN_AWARD_RANDOM_EVENT(Any p0, Any p1) { Invoke(0xBEAFBB1B98B7EF55, V(p0), V(p1)); }
		public static void _NETWORK_EARN_AWARD_TAXI(Any p0, Any p1) { Invoke(0xA914768AD35CD3A5, V(p0), V(p1)); }
		public static void _NETWORK_EARN_STREET_DEALER(Any p0, Any p1) { Invoke(0xA81017EE1324FDFE, V(p0), V(p1)); }
		public static void _NETWORK_EARN_SELL_ACID(Any p0, Any p1) { Invoke(0x79B656937DF6DF5D, V(p0), V(p1)); }
		public static void _NETWORK_EARN_SETUP_PARTICIPATION_ACID_LAB(Any p0, Any p1) { Invoke(0xE3942D59E8A7F70D, V(p0), V(p1)); }
		public static void _NETWORK_EARN_SOURCE_PARTICIPATION_ACID_LAB(Any p0, Any p1) { Invoke(0x136F11B5DF1B304D, V(p0), V(p1)); }
		public static void _NETWORK_EARN_SELL_PARTICIPATION_ACID_LAB(Any p0, Any p1) { Invoke(0xCA3EF9B09A8D76B4, V(p0), V(p1)); }
		public static void _NETWORK_EARN_JUGGALO_STORY_MISSION(Any p0, Any p1) { Invoke(0xE01D10BA8CD53621, V(p0), V(p1)); }
		public static void _NETWORK_EARN_JUGGALO_STORY_MISSION_PARTICIPATION(Any p0, Any p1) { Invoke(0x40FF6CCCC476185C, V(p0), V(p1)); }
		// JUGGALO_PHONE_MISSION...
		public static void _NETWORK_EARN_FOOLIGAN_JOB(Any p0, Any p1) { Invoke(0xCE4452AE85F5E252, V(p0), V(p1)); }
		// JUGGALO_PHONE_MISSION_PARTICIPATION...
		public static void _NETWORK_EARN_FOOLIGAN_JOB_PARTICIPATION(Any p0, Any p1) { Invoke(0xC376B92D0E060970, V(p0), V(p1)); }
		public static void _NETWORK_EARN_TAXI_JOB(Any p0, Any p1) { Invoke(0x991E1588FAD9019D, V(p0), V(p1)); }
		public static void _NETWORK_EARN_DAILY_STASH_HOUSE_COMPLETED(Any p0, Any p1) { Invoke(0xCABC9874AFA70D6D, V(p0), V(p1)); }
		public static void _NETWORK_EARN_DAILY_STASH_HOUSE_PARTICIPATION(Any p0, Any p1) { Invoke(0x9C0C6BD0F94CE391, V(p0), V(p1)); }
		// Used for SERVICE_EARN_AVENGER_OPERATIONS & SERVICE_EARN_AVENGER_OPS_BONUS
		public static void _NETWORK_EARN_AVENGER(int amount, int p1) { Invoke(0x55F006B9D4A46C1D, V(amount), V(p1)); }
		public static void _NETWORK_EARN_SMUGGLER_OPS(Any p0, Any p1, Any p2) { Invoke(0xDEA273D5F8A9661A, V(p0), V(p1), V(p2)); }
		public static void _NETWORK_EARN_BONUS_OBJECTIVE(int amount, Any p1, Any p2) { Invoke(0xDCEF983C24191997, V(amount), V(p1), V(p2)); }
		public static void _NETWORK_EARN_PROGRESS_HUB(Any p0, Any p1) { Invoke(0xF8332B06F0EECC9C, V(p0), V(p1)); }
		public static void _NETWORK_SPENT_AIR_FREIGHT(int hangarCargoSourcingPrice, bool fromBank, bool fromBankAndWallet, int cost, int warehouseId, int warehouseSlot) { Invoke(0x8C7E8D6F96C9E948, V(hangarCargoSourcingPrice), V(fromBank), V(fromBankAndWallet), V(cost), V(warehouseId), V(warehouseSlot)); }
		public static void _NETWORK_SPENT_SKIP_CARGO_SOURCE_SETUP(int amount, bool fromBank, bool fromBankAndWallet, int cost) { Invoke(0xED1B407BADA42CEC, V(amount), V(fromBank), V(fromBankAndWallet), V(cost)); }
		// Hash p3 = STEALTH_MODULE
		public static void _NETWORK_SPENT_STEALTH_MODULE(int amount, bool fromBank, bool fromBankAndWallet, Hash p3) { Invoke(0x95CE79A6939C537A, V(amount), V(fromBank), V(fromBankAndWallet), V(p3)); }
		// Hash p3 = MISSILE_JAMMER
		public static void _NETWORK_SPENT_MISSILE_JAMMER(int amount, bool fromBank, bool fromBankAndWallet, Hash p3) { Invoke(0xD687100F616163F4, V(amount), V(fromBank), V(fromBankAndWallet), V(p3)); }
		public static void _NETWORK_SPENT_GENERIC(int price, bool p1, bool p2, Hash stat, Hash spent, string p5, string p6, Any* data) { Invoke(0x2803B027479FB640, V(price), V(p1), V(p2), V(stat), V(spent), V(p5), V(p6), V(data)); }
		// _NETWORK_EARN_G*
		public static void _NETWORK_EARN_GENERIC(int amount, Hash earn, string p2, string p3, Any* data) { Invoke(0xBF7B5BB7ED890380, V(amount), V(earn), V(p2), V(p3), V(data)); }
		public static void _NETWORK_CLEAR_TRANSACTION_TELEMETRY_NONCE() { Invoke(0xE03B9F95556E48E9); }
		public static int NETWORK_GET_VC_BANK_BALANCE() { return Invoke<int>(0x76EF28DA05EA395A); }
		public static int NETWORK_GET_VC_WALLET_BALANCE(int characterSlot) { return Invoke<int>(0xA40F9C2623F6A8B5, V(characterSlot)); }
		public static int NETWORK_GET_VC_BALANCE() { return Invoke<int>(0x5CBAD97E059E1B94); }
		public static int NETWORK_GET_EVC_BALANCE() { return Invoke<int>(0x5D1E75F91C07DEE5); }
		public static int NETWORK_GET_PVC_BALANCE() { return Invoke<int>(0x4F54F3B6C202FB4E); }
		public static byte* NETWORK_GET_STRING_WALLET_BALANCE(int characterSlot) { return PInvoke<byte>(0xF9B10B529DCFB33B, V(characterSlot)); }
		public static byte* NETWORK_GET_STRING_BANK_BALANCE() { return PInvoke<byte>(0xA6FA3979BED01B81); }
		public static byte* NETWORK_GET_STRING_BANK_WALLET_BALANCE(int character) { return PInvoke<byte>(0x700AF71AE615E6DD, V(character)); }
		// Returns true if wallet balance >= amount.
		public static bool NETWORK_GET_CAN_SPEND_FROM_WALLET(int amount, int characterSlot) { return Invoke<bool>(0xED5AB8860415BABA, V(amount), V(characterSlot)); }
		// Returns true if bank balance >= amount.
		public static bool NETWORK_GET_CAN_SPEND_FROM_BANK(int amount) { return Invoke<bool>(0xA31FD6A0865B6D14, V(amount)); }
		// Returns true if bank balance + wallet balance >= amount.
		public static bool NETWORK_GET_CAN_SPEND_FROM_BANK_AND_WALLET(int amount, int characterSlot) { return Invoke<bool>(0xDC18531D7019A535, V(amount), V(characterSlot)); }
		// Retturns the same value as NETWORK_GET_REMAINING_TRANSFER_BALANCE.
		public static int NETWORK_GET_PVC_TRANSFER_BALANCE() { return Invoke<int>(0x13A8DE2FD77D04F3); }
		// Returns false if amount > wallet balance or daily transfer limit has been hit.
		public static bool NETWORK_GET_CAN_TRANSFER_CASH(int amount) { return Invoke<bool>(0x08E8EEADFD0DC4A0, V(amount)); }
		public static bool NETWORK_CAN_RECEIVE_PLAYER_CASH(Any p0, Any p1, Any p2, Any p3) { return Invoke<bool>(0x5D17BE59D2123284, V(p0), V(p1), V(p2), V(p3)); }
		// Returns the same value as NETWORK_GET_PVC_TRANSFER_BALANCE.
		public static int NETWORK_GET_REMAINING_TRANSFER_BALANCE() { return Invoke<int>(0xEA560AC9EEB1E19B); }
		// Does nothing and always returns 0.
		public static int WITHDRAW_VC(int amount) { return Invoke<int>(0xF70EFA14FE091429, V(amount)); }
		// Does nothing and always returns false.
		public static bool DEPOSIT_VC(int amount) { return Invoke<bool>(0xE260E0BB9CD995AC, V(amount)); }
		// This function is hard-coded to always return 1.
		public static bool HAS_VC_WITHDRAWAL_COMPLETED(Any p0) { return Invoke<bool>(0xE154B48B68EF72BC, V(p0)); }
		// This function is hard-coded to always return 1.
		public static bool WAS_VC_WITHDRAWAL_SUCCESSFUL(Any p0) { return Invoke<bool>(0x6FCF8DDEA146C45B, V(p0)); }




		public static bool NET_GAMESERVER_USE_SERVER_TRANSACTIONS() { return Invoke<bool>(0x7D2708796355B20B); }
		public static bool NET_GAMESERVER_CATALOG_ITEM_IS_VALID(string name) { return Invoke<bool>(0xBD4D7EAF8A30F637, V(name)); }
		public static bool NET_GAMESERVER_CATALOG_ITEM_KEY_IS_VALID(Hash hash) { return Invoke<bool>(0x247F0F73A182EA0B, V(hash)); }
		// bool is always true in game scripts
		public static int NET_GAMESERVER_GET_PRICE(Hash itemHash, Hash categoryHash, bool p2) { return Invoke<int>(0xC27009422FCCA88D, V(itemHash), V(categoryHash), V(p2)); }
		public static bool NET_GAMESERVER_CATALOG_IS_VALID() { return Invoke<bool>(0x3C4487461E9B0DCB); }
		public static bool NET_GAMESERVER_IS_CATALOG_CURRENT() { return Invoke<bool>(0x2B949A1E6AEC8F6A); }
		public static Hash NET_GAMESERVER_GET_CATALOG_CLOUD_CRC() { return Invoke<Hash>(0x85F6C9ABA1DE2BCF); }
		public static bool NET_GAMESERVER_REFRESH_SERVER_CATALOG() { return Invoke<bool>(0x357B152EF96C30B6); }
		public static bool NET_GAMESERVER_RETRIEVE_CATALOG_REFRESH_STATUS(int* state) { return Invoke<bool>(0xCF38DAFBB49EDE5E, V(state)); }
		public static bool NET_GAMESERVER_INIT_SESSION() { return Invoke<bool>(0xE3E5A7C64CA2C6ED); }
		public static bool NET_GAMESERVER_RETRIEVE_INIT_SESSION_STATUS(int* p0) { return Invoke<bool>(0x0395CB47B022E62C, V(p0)); }
		public static bool NET_GAMESERVER_START_SESSION(int charSlot) { return Invoke<bool>(0xA135AC892A58FC07, V(charSlot)); }
		public static bool NET_GAMESERVER_START_SESSION_PENDING() { return Invoke<bool>(0x72EB7BA9B69BF6AB); }
		public static bool NET_GAMESERVER_RETRIEVE_START_SESSION_STATUS(int* p0) { return Invoke<bool>(0x170910093218C8B9, V(p0)); }
		public static bool NET_GAMESERVER_RETRIEVE_SESSION_ERROR_CODE(int* p0) { return Invoke<bool>(0xC13C38E47EA5DF31, V(p0)); }
		public static bool NET_GAMESERVER_IS_SESSION_VALID(int charSlot) { return Invoke<bool>(0xB24F0944DA203D9E, V(charSlot)); }
		public static bool NET_GAMESERVER_CLEAR_SESSION(int p0) { return Invoke<bool>(0x74A0FD0688F1EE45, V(p0)); }
		public static bool NET_GAMESERVER_SESSION_APPLY_RECEIVED_DATA(int charSlot) { return Invoke<bool>(0x2F41D51BA3BCD1F1, V(charSlot)); }
		public static bool NET_GAMESERVER_IS_SESSION_REFRESH_PENDING() { return Invoke<bool>(0x810E8431C0614BF9); }
		// Note: only one of the arguments can be set to true at a time
		public static bool NET_GAMESERVER_START_SESSION_RESTART(bool inventory, bool playerbalance) { return Invoke<bool>(0x35A1B3E1D1315CFA, V(inventory), V(playerbalance)); }
		public static bool NET_GAMESERVER_TRANSACTION_IN_PROGRESS() { return Invoke<bool>(0x613F125BA3BD2EB9); }
		public static bool NET_GAMESERVER_GET_SESSION_STATE_AND_STATUS(int* p0, bool* p1) { return Invoke<bool>(0x897433D292B44130, V(p0), V(p1)); }
		public static bool NET_GAMESERVER_BASKET_START(int* transactionId, Hash categoryHash, Hash actionHash, int flags) { return Invoke<bool>(0x279F08B1A4B29B7E, V(transactionId), V(categoryHash), V(actionHash), V(flags)); }
		public static bool NET_GAMESERVER_BASKET_END() { return Invoke<bool>(0xFA336E7F40C0A0D0); }
		public static bool NET_GAMESERVER_BASKET_IS_ACTIVE() { return Invoke<bool>(0xA65568121DF2EA26); }
		public static bool NET_GAMESERVER_BASKET_ADD_ITEM(Any* itemData, int quantity) { return Invoke<bool>(0xF30980718C8ED876, V(itemData), V(quantity)); }
		public static bool NET_GAMESERVER_BASKET_IS_FULL() { return Invoke<bool>(0x27F76CC6C55AD30E); }
		public static bool NET_GAMESERVER_BASKET_APPLY_SERVER_DATA(Any p0, Any* p1) { return Invoke<bool>(0xE1A0450ED46A7812, V(p0), V(p1)); }
		public static bool NET_GAMESERVER_CHECKOUT_START(int transactionId) { return Invoke<bool>(0x39BE7CEA8D9CC8E6, V(transactionId)); }
		public static bool NET_GAMESERVER_BEGIN_SERVICE(int* transactionId, Hash categoryHash, Hash itemHash, Hash actionTypeHash, int value, int flags) { return Invoke<bool>(0x3C5FD37B5499582E, V(transactionId), V(categoryHash), V(itemHash), V(actionTypeHash), V(value), V(flags)); }
		public static bool NET_GAMESERVER_END_SERVICE(int transactionId) { return Invoke<bool>(0xE2A99A9B524BEFFF, V(transactionId)); }
		public static bool NET_GAMESERVER_DELETE_CHARACTER(int slot, bool transfer, Hash reason) { return Invoke<bool>(0x51F1A8E48C3D2F6D, V(slot), V(transfer), V(reason)); }
		public static int NET_GAMESERVER_DELETE_CHARACTER_GET_STATUS() { return Invoke<int>(0x0A6D923DFFC9BD89); }
		public static bool NET_GAMESERVER_DELETE_SET_TELEMETRY_NONCE_SEED() { return Invoke<bool>(0x112CEF1615A1139F); }
		public static bool NET_GAMESERVER_TRANSFER_BANK_TO_WALLET(int charSlot, int amount) { return Invoke<bool>(0xD47A2C1BA117471D, V(charSlot), V(amount)); }
		public static bool NET_GAMESERVER_TRANSFER_WALLET_TO_BANK(int charSlot, int amount) { return Invoke<bool>(0xC2F7FE5309181C7D, V(charSlot), V(amount)); }
		// Same as 0x350AA5EBC03D3BD2
		public static int NET_GAMESERVER_TRANSFER_BANK_TO_WALLET_GET_STATUS() { return Invoke<int>(0x23789E777D14CE44); }
		// Same as 0x23789E777D14CE44
		public static int NET_GAMESERVER_TRANSFER_WALLET_TO_BANK_GET_STATUS() { return Invoke<int>(0x350AA5EBC03D3BD2); }
		// Used to be NETWORK_SHOP_CASH_TRANSFER_SET_TELEMETRY_NONCE_SEED
		public static bool NET_GAMESERVER_TRANSFER_CASH_SET_TELEMETRY_NONCE_SEED() { return Invoke<bool>(0x498C1E05CE5F7877); }
		public static bool NET_GAMESERVER_SET_TELEMETRY_NONCE_SEED(int p0) { return Invoke<bool>(0x9507D4271988E1AE, V(p0)); }




		// Online version is defined here: update\update.rpf\common\data\version.txt
		// 
		// Example:
		// 
		// [ONLINE_VERSION_NUMBER]
		// 1.33
		// 
		// _GET_ONLINE_VERSION() will return "1.33"
		public static byte* GET_ONLINE_VERSION() { return PInvoke<byte>(0xFCA9373EF340AC0A); }
		// Returns whether the player is signed into Social Club.
		public static bool NETWORK_IS_SIGNED_IN() { return Invoke<bool>(0x054354A99211EB96); }
		// Returns whether the game is not in offline mode.
		// 
		// seemed not to work for some ppl
		public static bool NETWORK_IS_SIGNED_ONLINE() { return Invoke<bool>(0x1077788E268557C2); }
		// This function is hard-coded to always return 1.
		public static bool NETWORK_IS_NP_AVAILABLE() { return Invoke<bool>(0xBD545D44CCE70597); }
		// This function is hard-coded to always return 1.
		public static bool NETWORK_IS_NP_PENDING() { return Invoke<bool>(0xEBCAB9E5048434F4); }
		// Hardcoded to return zero.
		// 
		// ==== PS4 specific info ====
		// 
		// Returns some sort of unavailable reason:
		// -1 = REASON_INVALID
		//  0 = REASON_OTHER
		//  1 = REASON_SYSTEM_UPDATE
		//  2 = REASON_GAME_UPDATE
		//  3 = REASON_SIGNED_OUT
		//  4 = REASON_AGE
		//  5 = REASON_CONNECTION
		// 
		// =================================
		public static int NETWORK_GET_NP_UNAVAILABLE_REASON() { return Invoke<int>(0x74FB3E29E6D10FA9); }
		// This function is hard-coded to always return 1.
		public static bool NETWORK_IS_CONNETED_TO_NP_PRESENCE() { return Invoke<bool>(0x7808619F31FF22DB); }
		// This function is hard-coded to always return 0.
		public static bool NETWORK_IS_LOGGED_IN_TO_PSN() { return Invoke<bool>(0xA0FA4EC6A05DA44E); }
		// Returns whether the signed-in user has valid Rockstar Online Services (ROS) credentials.
		public static bool NETWORK_HAS_VALID_ROS_CREDENTIALS() { return Invoke<bool>(0x85443FF4C328F53B); }
		public static bool NETWORK_IS_REFRESHING_ROS_CREDENTIALS() { return Invoke<bool>(0x8D11E61A4ABF49CC); }
		public static bool NETWORK_IS_CLOUD_AVAILABLE() { return Invoke<bool>(0x9A4CF4F48AD77302); }
		public static bool NETWORK_HAS_SOCIAL_CLUB_ACCOUNT() { return Invoke<bool>(0x67A5589628E0CFF6); }
		public static bool NETWORK_ARE_SOCIAL_CLUB_POLICIES_CURRENT() { return Invoke<bool>(0xBA9775570DB788CF); }
		// If you are host, returns true else returns false.
		public static bool NETWORK_IS_HOST() { return Invoke<bool>(0x8DB296B814EDDA07); }
		public static Player NETWORK_GET_HOST_PLAYER_INDEX() { return Invoke<Player>(0x8251FB94DC4FDFC8); }
		public static bool NETWORK_WAS_GAME_SUSPENDED() { return Invoke<bool>(0x4237E822315D8BA9); }
		public static bool NETWORK_HAVE_ONLINE_PRIVILEGES() { return Invoke<bool>(0x25CB5A9F37BFD063); }
		public static bool NETWORK_HAS_AGE_RESTRICTIONS() { return Invoke<bool>(0x1353F87E89946207); }
		public static bool NETWORK_HAVE_USER_CONTENT_PRIVILEGES(int p0) { return Invoke<bool>(0x72D918C99BCACC54, V(p0)); }
		public static bool NETWORK_HAVE_COMMUNICATION_PRIVILEGES(int p0, Player player) { return Invoke<bool>(0xAEEF48CDF5B6CE7C, V(p0), V(player)); }
		// Appears to be PlayStation-specific. Always returns true on other platforms if signed in with the primary user profile
		public static bool _NETWORK_HAVE_PLATFORM_COMMUNICATION_PRIVILEGES() { return Invoke<bool>(0xE1E02509169C124E); }
		public static bool NETWORK_CHECK_ONLINE_PRIVILEGES(Any p0, bool p1) { return Invoke<bool>(0x78321BEA235FD8CD, V(p0), V(p1)); }
		public static bool NETWORK_CHECK_USER_CONTENT_PRIVILEGES(int p0, int p1, bool p2) { return Invoke<bool>(0x595F028698072DD9, V(p0), V(p1), V(p2)); }
		public static bool NETWORK_CHECK_COMMUNICATION_PRIVILEGES(int p0, int p1, bool p2) { return Invoke<bool>(0x83F28CE49FBBFFBA, V(p0), V(p1), V(p2)); }
		public static bool NETWORK_CHECK_TEXT_COMMUNICATION_PRIVILEGES(Any p0, Any p1, Any p2) { return Invoke<bool>(0x07EAB372C8841D99, V(p0), V(p1), V(p2)); }
		public static bool NETWORK_IS_USING_ONLINE_PROMOTION() { return Invoke<bool>(0x906CA41A4B74ECA4); }
		public static bool NETWORK_SHOULD_SHOW_PROMOTION_ALERT_SCREEN() { return Invoke<bool>(0x023ACAB2DC9DC4A4); }
		public static bool NETWORK_HAS_SOCIAL_NETWORKING_SHARING_PRIV() { return Invoke<bool>(0x76BF03FADBF154F5); }
		public static int NETWORK_GET_AGE_GROUP() { return Invoke<int>(0x9614B71F8ADB982B); }
		public static bool NETWORK_CHECK_PRIVILEGES(Any p0, Any p1, Any p2) { return Invoke<bool>(0x0CF6CC51AA18F0F8, V(p0), V(p1), V(p2)); }
		// Hardcoded to return false.
		public static bool NETWORK_IS_PRIVILEGE_CHECK_IN_PROGRESS() { return Invoke<bool>(0x64E5C4CC82847B73); }
		public static void NETWORK_SET_PRIVILEGE_CHECK_RESULT_NOT_NEEDED() { Invoke(0x1F7BC3539F9E0224); }
		// Hardcoded to return true.
		public static bool NETWORK_RESOLVE_PRIVILEGE_USER_CONTENT() { return Invoke<bool>(0xDE9225854F37BF72); }
		public static bool NETWORK_HAVE_PLATFORM_SUBSCRIPTION() { return Invoke<bool>(0x5EA784D197556507); }
		public static bool NETWORK_IS_PLATFORM_SUBSCRIPTION_CHECK_PENDING() { return Invoke<bool>(0xA8ACB6459542A8C8); }
		public static void NETWORK_SHOW_ACCOUNT_UPGRADE_UI() { Invoke(0x83FE8D7229593017); }
		public static bool NETWORK_IS_SHOWING_SYSTEM_UI_OR_RECENTLY_REQUESTED_UPSELL() { return Invoke<bool>(0x7788DFE15016A182); }
		public static bool NETWORK_NEED_TO_START_NEW_GAME_BUT_BLOCKED() { return Invoke<bool>(0x53C10C8BD774F2C9); }
		public static bool NETWORK_CAN_BAIL() { return Invoke<bool>(0x580CE4438479CC61); }
		public static void NETWORK_BAIL(int p0, int p1, int p2) { Invoke(0x95914459A87EBA28, V(p0), V(p1), V(p2)); }
		public static void NETWORK_ON_RETURN_TO_SINGLE_PLAYER() { Invoke(0x283B6062A2C01E9B); }
		public static bool NETWORK_TRANSITION_START(int p0, Any p1, Any p2, Any p3) { return Invoke<bool>(0x8B4FFC790CA131EF, V(p0), V(p1), V(p2), V(p3)); }
		public static bool NETWORK_TRANSITION_ADD_STAGE(Hash hash, int p1, int p2, int state, int p4) { return Invoke<bool>(0xC3BFED92026A2AAD, V(hash), V(p1), V(p2), V(state), V(p4)); }
		public static bool NETWORK_TRANSITION_FINISH(Any p0, Any p1, Any p2) { return Invoke<bool>(0x04918A41BC9B8157, V(p0), V(p1), V(p2)); }
		// 11 - Need to download tunables.
		// 12 - Need to download background script.
		// 
		// Returns 1 if the multiplayer is loaded, otherwhise 0.
		public static bool NETWORK_CAN_ACCESS_MULTIPLAYER(int* loadingState) { return Invoke<bool>(0xAF50DA1A3F8B1BA4, V(loadingState)); }
		public static bool NETWORK_IS_MULTIPLAYER_DISABLED() { return Invoke<bool>(0x9747292807126EDA); }
		public static bool NETWORK_CAN_ENTER_MULTIPLAYER() { return Invoke<bool>(0x7E782A910C362C25); }
		public static bool NETWORK_SESSION_DO_FREEROAM_QUICKMATCH(Any p0, Any p1, Any p2) { return Invoke<bool>(0x330ED4D05491934F, V(p0), V(p1), V(p2)); }
		public static bool NETWORK_SESSION_DO_FRIEND_MATCHMAKING(int p0, int p1, int p2) { return Invoke<bool>(0x2CFC76E0D087C994, V(p0), V(p1), V(p2)); }
		// p4 seems to be unused in 1.60/build 2628
		public static bool NETWORK_SESSION_DO_CREW_MATCHMAKING(int crewId, int p1, int p2, int maxPlayers) { return Invoke<bool>(0x94BC51E9449D917F, V(crewId), V(p1), V(p2), V(maxPlayers)); }
		public static bool NETWORK_SESSION_DO_ACTIVITY_QUICKMATCH(Any p0, Any p1, Any p2, Any p3, Any p4) { return Invoke<bool>(0xBE3E347A87ACEB82, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		// Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
		public static bool NETWORK_SESSION_HOST(int p0, int maxPlayers, bool p2) { return Invoke<bool>(0x6F3D4ED9BEE4E61D, V(p0), V(maxPlayers), V(p2)); }
		public static bool NETWORK_SESSION_HOST_CLOSED(int p0, int maxPlayers) { return Invoke<bool>(0xED34C0C02C098BB7, V(p0), V(maxPlayers)); }
		// Does nothing in online but in offline it will cause the screen to fade to black. Nothing happens past then, the screen will sit at black until you restart GTA. Other stuff must be needed to actually host a session.
		public static bool NETWORK_SESSION_HOST_FRIENDS_ONLY(int p0, int maxPlayers) { return Invoke<bool>(0xB9CFD27A5D578D83, V(p0), V(maxPlayers)); }
		public static bool NETWORK_SESSION_IS_CLOSED_FRIENDS() { return Invoke<bool>(0xFBCFA2EA2E206890); }
		public static bool NETWORK_SESSION_IS_CLOSED_CREW() { return Invoke<bool>(0x74732C6CA90DA2B4); }
		public static bool NETWORK_SESSION_IS_SOLO() { return Invoke<bool>(0xF3929C2379B60CCE); }
		public static bool NETWORK_SESSION_IS_PRIVATE() { return Invoke<bool>(0xCEF70AA5B3F89BA1); }
		public static bool _NETWORK_SESSION_LEAVE_INCLUDING_REASON(int leaveFlags, int leaveReason) { return Invoke<bool>(0xE0128328CF1FD9F4, V(leaveFlags), V(leaveReason)); }
		// p0 is always false and p1 varies.
		// NETWORK_SESSION_END(0, 1)
		// NETWORK_SESSION_END(0, 0)
		// Results in: "Connection to session lost due to an unknown network error. Please return to Grand Theft Auto V and try again later."
		public static bool NETWORK_SESSION_END(bool p0, bool p1) { return Invoke<bool>(0xA02E59562D711006, V(p0), V(p1)); }
		public static bool NETWORK_SESSION_LEAVE(Any p0) { return Invoke<bool>(0xB9351A07A0D458B1, V(p0)); }
		// Only works as host.
		public static void NETWORK_SESSION_KICK_PLAYER(Player player) { Invoke(0xFA8904DC5F304220, V(player)); }
		public static bool NETWORK_SESSION_GET_KICK_VOTE(Player player) { return Invoke<bool>(0xD6D09A6F32F49EF1, V(player)); }
		public static bool NETWORK_SESSION_RESERVE_SLOTS_TRANSITION(Any p0, Any p1, Any p2) { return Invoke<bool>(0x041C7F2A6C9894E6, V(p0), V(p1), V(p2)); }
		public static bool NETWORK_JOIN_PREVIOUSLY_FAILED_SESSION() { return Invoke<bool>(0x59DF79317F85A7E0); }
		public static bool NETWORK_JOIN_PREVIOUSLY_FAILED_TRANSITION() { return Invoke<bool>(0xFFE1E5B792D92B34); }
		public static void NETWORK_SESSION_SET_MATCHMAKING_GROUP(int matchmakingGroup) { Invoke(0x49EC8030F5015F8B, V(matchmakingGroup)); }
		// playerType is an unsigned int from 0 to 4
		// 0 = regular joiner
		// 4 = spectator
		public static void NETWORK_SESSION_SET_MATCHMAKING_GROUP_MAX(int playerType, int playerCount) { Invoke(0x8B6A4DD0AF9CE215, V(playerType), V(playerCount)); }
		public static int NETWORK_SESSION_GET_MATCHMAKING_GROUP_FREE(int p0) { return Invoke<int>(0x56CE820830EF040B, V(p0)); }
		// groupId range: [0, 4]
		public static void NETWORK_SESSION_ADD_ACTIVE_MATCHMAKING_GROUP(int groupId) { Invoke(0xCAE55F48D3D7875C, V(groupId)); }
		public static void NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT(Any p0) { Invoke(0xF49ABC20D8552257, V(p0)); }
		public static int NETWORK_SESSION_GET_UNIQUE_CREW_LIMIT() { return Invoke<int>(0xCDC936BF35EDCB73); }
		public static void NETWORK_SESSION_SET_UNIQUE_CREW_LIMIT_TRANSITION(Any p0) { Invoke(0x4811BBAC21C5FCD5, V(p0)); }
		public static void NETWORK_SESSION_SET_UNIQUE_CREW_ONLY_CREWS_TRANSITION(bool p0) { Invoke(0x5539C3EBF104A53A, V(p0)); }
		public static void NETWORK_SESSION_SET_CREW_LIMIT_MAX_MEMBERS_TRANSITION(Any p0) { Invoke(0x702BC4D605522539, V(p0)); }
		public static void NETWORK_SESSION_SET_MATCHMAKING_PROPERTY_ID(bool p0) { Invoke(0x3F52E880AAF6C8CA, V(p0)); }
		// p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
		public static void NETWORK_SESSION_SET_MATCHMAKING_MENTAL_STATE(int p0) { Invoke(0xF1EEA2DDA9FFA69D, V(p0)); }
		public static void NETWORK_SESSION_SET_NUM_BOSSES(int num) { Invoke(0x59D421683D31835A, V(num)); }
		public static void NETWORK_SESSION_SET_SCRIPT_VALIDATE_JOIN() { Invoke(0x1153FA02A659051C); }
		public static void NETWORK_SESSION_VALIDATE_JOIN(bool p0) { Invoke(0xC19F6C8E7865A6FF, V(p0)); }
		// ..
		public static void NETWORK_ADD_FOLLOWERS(int* p0, int p1) { Invoke(0x236406F60CF216D6, V(p0), V(p1)); }
		public static void NETWORK_CLEAR_FOLLOWERS() { Invoke(0x058F43EC59A8631A); }
		public static void NETWORK_GET_GLOBAL_MULTIPLAYER_CLOCK(int* hours, int* minutes, int* seconds) { Invoke(0x6D03BFBD643B2A02, V(hours), V(minutes), V(seconds)); }
		public static void NETWORK_SESSION_SET_GAMEMODE(Any p0) { Invoke(0x600F8CB31C7AAB6E, V(p0)); }
		public static int NETWORK_SESSION_GET_HOST_AIM_PREFERENCE() { return Invoke<int>(0xDFFA5BE8381C3314); }
		public static bool NETWORK_FIND_GAMERS_IN_CREW(int crewId) { return Invoke<bool>(0xE532D6811B3A4D2A, V(crewId)); }
		// Uses attributes to find players with similar stats. Upper/Lower limit must be above zero or the fallback limit +/-0.1 is used.
		// There can be up to 15 attributes, they are as follows:
		// 
		// 0 = Races
		// 1 = Parachuting
		// 2 = Horde
		// 3 = Darts
		// 4 = Arm Wrestling
		// 5 = Tennis
		// 6 = Golf
		// 7 = Shooting Range
		// 8 = Deathmatch
		// 9 = MPPLY_MCMWIN/MPPLY_CRMISSION
		public static bool NETWORK_FIND_MATCHED_GAMERS(int attribute, float fallbackLimit, float lowerLimit, float upperLimit) { return Invoke<bool>(0xF7B2CFDE5C9F700D, V(attribute), V(fallbackLimit), V(lowerLimit), V(upperLimit)); }
		public static bool NETWORK_IS_FINDING_GAMERS() { return Invoke<bool>(0xDDDF64C91BFCF0AA); }
		public static bool NETWORK_DID_FIND_GAMERS_SUCCEED() { return Invoke<bool>(0xF9B83B77929D8863); }
		public static int NETWORK_GET_NUM_FOUND_GAMERS() { return Invoke<int>(0xA1B043EE79A916FB); }
		public static bool NETWORK_GET_FOUND_GAMER(Any* p0, Any p1) { return Invoke<bool>(0x9DCFF2AFB68B3476, V(p0), V(p1)); }
		public static void NETWORK_CLEAR_FOUND_GAMERS() { Invoke(0x6D14CCEE1B40381A); }
		public static bool NETWORK_QUEUE_GAMER_FOR_STATUS(Any* p0) { return Invoke<bool>(0x85A0EF54A500882C, V(p0)); }
		public static bool NETWORK_GET_GAMER_STATUS_FROM_QUEUE() { return Invoke<bool>(0x2CC848A861D01493); }
		public static bool NETWORK_IS_GETTING_GAMER_STATUS() { return Invoke<bool>(0x94A8394D150B013A); }
		public static bool NETWORK_DID_GET_GAMER_STATUS_SUCCEED() { return Invoke<bool>(0x5AE17C6B0134B7F1); }
		public static bool NETWORK_GET_GAMER_STATUS_RESULT(Any* p0, Any p1) { return Invoke<bool>(0x02A8BEC6FD9AF660, V(p0), V(p1)); }
		public static void NETWORK_CLEAR_GET_GAMER_STATUS() { Invoke(0x86E0660E4F5C956D); }
		public static void NETWORK_SESSION_JOIN_INVITE() { Invoke(0xC6F8AB8A4189CF3A); }
		public static void NETWORK_SESSION_CANCEL_INVITE() { Invoke(0x2FBF47B1B36D36F9); }
		public static void NETWORK_SESSION_FORCE_CANCEL_INVITE() { Invoke(0xA29177F7703B5644); }
		public static bool NETWORK_HAS_PENDING_INVITE() { return Invoke<bool>(0xAC8C7B9B88C4A668); }
		public static bool NETWORK_HAS_CONFIRMED_INVITE() { return Invoke<bool>(0xC42DD763159F3461); }
		// Triggers a CEventNetworkInviteConfirmed evt
		public static bool NETWORK_REQUEST_INVITE_CONFIRMED_EVENT() { return Invoke<bool>(0x62A0296C1BB1CEB3); }
		public static bool NETWORK_SESSION_WAS_INVITED() { return Invoke<bool>(0x23DFB504655D0CE4); }
		public static void NETWORK_SESSION_GET_INVITER(Any* gamerHandle) { Invoke(0xE57397B4A3429DD0, V(gamerHandle)); }
		// Seems to be true while "Getting GTA Online session details" shows up.
		public static bool NETWORK_SESSION_IS_AWAITING_INVITE_RESPONSE() { return Invoke<bool>(0xD313DE83394AF134); }
		public static bool NETWORK_SESSION_IS_DISPLAYING_INVITE_CONFIRMATION() { return Invoke<bool>(0xBDB6F89C729CF388); }
		public static void NETWORK_SUPPRESS_INVITE(bool toggle) { Invoke(0xA0682D67EF1FBA3D, V(toggle)); }
		public static void NETWORK_BLOCK_INVITES(bool toggle) { Invoke(0x34F9E9049454A7A0, V(toggle)); }
		public static void NETWORK_BLOCK_JOIN_QUEUE_INVITES(bool toggle) { Invoke(0xCFEB8AF24FC1D0BB, V(toggle)); }
		public static void NETWORK_SET_CAN_RECEIVE_RS_INVITES(bool p0) { Invoke(0x68980414688F7F9D, V(p0)); }
		public static void NETWORK_STORE_INVITE_THROUGH_RESTART() { Invoke(0xF814FEC6A19FD6E0); }
		public static void NETWORK_ALLOW_INVITE_PROCESS_IN_PLAYER_SWITCH(bool p0) { Invoke(0x6B07B9CE4D390375, V(p0)); }
		public static void NETWORK_SET_SCRIPT_READY_FOR_EVENTS(bool toggle) { Invoke(0x7AC752103856FB20, V(toggle)); }
		public static bool NETWORK_IS_OFFLINE_INVITE_PENDING() { return Invoke<bool>(0x74698374C45701D2); }
		public static void NETWORK_CLEAR_OFFLINE_INVITE_PENDING() { Invoke(0x140E6A44870A11CE); }
		// Retrieves the failed invite join alert reason
		public static byte* _NETWORK_INVITE_GET_JOIN_FAIL_REASON() { return PInvoke<byte>(0x7B335F84501145BB); }
		// Clears the failed invite join alert reason
		public static void _NETWORK_INVITE_CLEAR_JOIN_FAIL_REASON() { Invoke(0x8EF5F5811A940F82); }
		// Loads up the map that is loaded when beeing in mission creator
		// Player gets placed in a mix between online/offline mode
		// p0 is always 2 in R* scripts.
		// 
		// Appears to be patched in gtav b757 (game gets terminated) alonside with most other network natives to prevent online modding ~ghost30812
		public static void NETWORK_SESSION_HOST_SINGLE_PLAYER(int p0) { Invoke(0xC74C33FCA52856D5, V(p0)); }
		public static void NETWORK_SESSION_LEAVE_SINGLE_PLAYER() { Invoke(0x3442775428FD2DAA); }
		public static bool NETWORK_IS_GAME_IN_PROGRESS() { return Invoke<bool>(0x10FAB35428CCC9D7); }
		public static bool NETWORK_IS_SESSION_ACTIVE() { return Invoke<bool>(0xD83C2B94E7508980); }
		public static bool NETWORK_IS_IN_SESSION() { return Invoke<bool>(0xCA97246103B63917); }
		// Hardcoded to return 0.
		public static bool _NETWORK_IS_AMERICAS_VERSION() { return Invoke<bool>(0x0292BD7F3766CEBC); }
		// This checks if player is playing on gta online or not.
		// Please add an if and block your mod if this is "true".
		public static bool NETWORK_IS_SESSION_STARTED() { return Invoke<bool>(0x9DE624D2FC4B603F); }
		public static bool NETWORK_IS_SESSION_BUSY() { return Invoke<bool>(0xF4435D66A8E2905E); }
		public static bool NETWORK_CAN_SESSION_END() { return Invoke<bool>(0x4EEBC3694E49C572); }
		public static int NETWORK_GET_GAME_MODE() { return Invoke<int>(0x4C9034162368E206); }
		public static void NETWORK_SESSION_MARK_VISIBLE(bool toggle) { Invoke(0x271CC6AB59EBF9A5, V(toggle)); }
		public static bool NETWORK_SESSION_IS_VISIBLE() { return Invoke<bool>(0xBA416D68C631496A); }
		public static void NETWORK_SESSION_BLOCK_JOIN_REQUESTS(bool toggle) { Invoke(0xA73667484D7037C3, V(toggle)); }
		// num player slots allowed in session, seems to work? 32 max
		public static void NETWORK_SESSION_CHANGE_SLOTS(int slots, bool p1) { Invoke(0xB4AB419E0D86ACAE, V(slots), V(p1)); }
		public static int NETWORK_SESSION_GET_PRIVATE_SLOTS() { return Invoke<int>(0x53AFD64C6758F2F9); }
		public static bool NETWORK_SESSION_VOICE_HOST() { return Invoke<bool>(0x9C1556705F864230); }
		public static bool NETWORK_SESSION_VOICE_LEAVE() { return Invoke<bool>(0x6793E42BE02B575D); }
		public static void NETWORK_SESSION_VOICE_CONNECT_TO_PLAYER(Any* gamerHandle) { Invoke(0xABD5E88B8A2D3DB2, V(gamerHandle)); }
		public static void NETWORK_SESSION_VOICE_RESPOND_TO_REQUEST(bool p0, int p1) { Invoke(0x7F8413B7FC2AA6B9, V(p0), V(p1)); }
		public static void NETWORK_SESSION_VOICE_SET_TIMEOUT(int timeout) { Invoke(0x5B8ED3DB018927B1, V(timeout)); }
		public static bool NETWORK_SESSION_IS_IN_VOICE_SESSION() { return Invoke<bool>(0x855BC38818F6F684); }
		public static bool NETWORK_SESSION_IS_VOICE_SESSION_ACTIVE() { return Invoke<bool>(0xB5D3453C98456528); }
		public static bool NETWORK_SESSION_IS_VOICE_SESSION_BUSY() { return Invoke<bool>(0xEF0912DDF7C4CB4B); }
		// Message is limited to 64 characters.
		public static bool NETWORK_SEND_TEXT_MESSAGE(string message, Any* gamerHandle) { return Invoke<bool>(0x3A214F2EC889B100, V(message), V(gamerHandle)); }
		public static void NETWORK_SET_ACTIVITY_SPECTATOR(bool toggle) { Invoke(0x75138790B4359A74, V(toggle)); }
		public static bool NETWORK_IS_ACTIVITY_SPECTATOR() { return Invoke<bool>(0x12103B9E0C9F92FB); }
		public static void NETWORK_SET_ACTIVITY_PLAYER_MAX(Any p0) { Invoke(0x0E4F77F7B9D74D84, V(p0)); }

		public static void NETWORK_SET_ACTIVITY_SPECTATOR_MAX(int maxSpectators) { Invoke(0x9D277B76D1D12222, V(maxSpectators)); }
		public static int NETWORK_GET_ACTIVITY_PLAYER_NUM(bool p0) { return Invoke<int>(0x73E2B500410DA5A2, V(p0)); }
		public static bool NETWORK_IS_ACTIVITY_SPECTATOR_FROM_HANDLE(Any* gamerHandle) { return Invoke<bool>(0x2763BBAA72A7BCB9, V(gamerHandle)); }
		// p0: Unknown int
		// p1: Unknown int
		// p2: Unknown int
		// p3: Unknown int
		// p4: Unknown always 0 in decompiled scripts
		// p5: bool purpose unknown, both 0 and 1 are used in decompiled scripts.
		// p6: bool purpose unknown, both 0 and 1 are used in decompiled scripts.
		// p7: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
		// p8: Unknown int, it's an int according to decompiled scripts, however the value is always 0 or 1.
		// p9: Unknown int, sometimes 0, but also 32768 or 16384 appear in decompiled scripst, maybe a flag of some sort?
		// 
		// From what I can tell it looks like it does the following:
		// Creates/hosts a new transition to another online session, using this in FiveM will result in other players being disconencted from the server/preventing them from joining. This is most likely because I entered the wrong session parameters since they're pretty much all unknown right now.
		// You also need to use `NetworkJoinTransition(Player player)` and `NetworkLaunchTransition()`.
		public static bool NETWORK_HOST_TRANSITION(int p0, int p1, int p2, int p3, Any p4, bool p5, bool p6, int p7, Any p8, int p9) { return Invoke<bool>(0xA60BB5CE242BB254, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9)); }
		public static bool NETWORK_DO_TRANSITION_QUICKMATCH(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { return Invoke<bool>(0x71FB0EBCD4915D56, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static bool NETWORK_DO_TRANSITION_QUICKMATCH_ASYNC(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { return Invoke<bool>(0xA091A5E44F0072E5, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static bool NETWORK_DO_TRANSITION_QUICKMATCH_WITH_GROUP(Any p0, Any p1, Any p2, Any p3, Any* p4, Any p5, Any p6, Any p7) { return Invoke<bool>(0x9C4AB58491FDC98A, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7)); }
		public static bool NETWORK_JOIN_GROUP_ACTIVITY() { return Invoke<bool>(0xA06509A691D12BE4); }
		public static void NETWORK_CLEAR_GROUP_ACTIVITY() { Invoke(0x1888694923EF4591); }

		public static void NETWORK_RETAIN_ACTIVITY_GROUP() { Invoke(0xB13E88E655E5A3BC); }
		public static bool NETWORK_IS_TRANSITION_CLOSED_FRIENDS() { return Invoke<bool>(0x6512765E3BE78C50); }
		public static bool NETWORK_IS_TRANSITION_CLOSED_CREW() { return Invoke<bool>(0x0DBD5D7E3C5BEC3B); }
		public static bool NETWORK_IS_TRANSITION_SOLO() { return Invoke<bool>(0x5DC577201723960A); }
		public static bool NETWORK_IS_TRANSITION_PRIVATE() { return Invoke<bool>(0x5A6AA44FF8E931E6); }
		public static int NETWORK_GET_NUM_TRANSITION_NON_ASYNC_GAMERS() { return Invoke<int>(0x617F49C2668E6155); }
		public static void NETWORK_MARK_AS_PREFERRED_ACTIVITY(bool p0) { Invoke(0x261E97AD7BCF3D40, V(p0)); }
		public static void NETWORK_MARK_AS_WAITING_ASYNC(bool p0) { Invoke(0x39917E1B4CB0F911, V(p0)); }
		public static void NETWORK_SET_IN_PROGRESS_FINISH_TIME(Any p0) { Invoke(0x2CE9D95E4051AECD, V(p0)); }
		public static void NETWORK_SET_TRANSITION_CREATOR_HANDLE(Any* p0) { Invoke(0xEF26739BCD9907D5, V(p0)); }
		public static void NETWORK_CLEAR_TRANSITION_CREATOR_HANDLE() { Invoke(0xFB3272229A82C759); }
		public static bool NETWORK_INVITE_GAMERS_TO_TRANSITION(Any* p0, Any p1) { return Invoke<bool>(0x4A595C32F77DFF76, V(p0), V(p1)); }
		public static void NETWORK_SET_GAMER_INVITED_TO_TRANSITION(Any* gamerHandle) { Invoke(0xCA2C8073411ECDB6, V(gamerHandle)); }
		public static bool NETWORK_LEAVE_TRANSITION() { return Invoke<bool>(0xD23A1A815D21DB19); }
		public static bool NETWORK_LAUNCH_TRANSITION() { return Invoke<bool>(0x2DCF46CB1A4F0884); }
		// Appears to set whether a transition should be started when the session is migrating.
		public static void NETWORK_SET_DO_NOT_LAUNCH_FROM_JOIN_AS_MIGRATED_HOST(bool toggle) { Invoke(0xA2E9C1AB8A92E8CD, V(toggle)); }
		public static void NETWORK_CANCEL_TRANSITION_MATCHMAKING() { Invoke(0x023782EFC70585EE); }
		public static void NETWORK_BAIL_TRANSITION(int p0, int p1, int p2) { Invoke(0xEAA572036990CD1B, V(p0), V(p1), V(p2)); }
		public static bool NETWORK_DO_TRANSITION_TO_GAME(bool p0, int maxPlayers) { return Invoke<bool>(0x3E9BB38102A589B0, V(p0), V(maxPlayers)); }
		public static bool NETWORK_DO_TRANSITION_TO_NEW_GAME(bool p0, int maxPlayers, bool p2) { return Invoke<bool>(0x4665F51EFED00034, V(p0), V(maxPlayers), V(p2)); }
		// p2 is true 3/4 of the occurrences I found.
		// 'players' is the number of players for a session. On PS3/360 it's always 18. On PC it's 32.
		public static bool NETWORK_DO_TRANSITION_TO_FREEMODE(Any* p0, Any p1, bool p2, int players, bool p4) { return Invoke<bool>(0x3AAD8B2FCA1E289F, V(p0), V(p1), V(p2), V(players), V(p4)); }
		public static bool NETWORK_DO_TRANSITION_TO_NEW_FREEMODE(Any* p0, Any p1, int players, bool p3, bool p4, bool p5) { return Invoke<bool>(0x9E80A5BA8109F974, V(p0), V(p1), V(players), V(p3), V(p4), V(p5)); }
		public static bool NETWORK_IS_TRANSITION_TO_GAME() { return Invoke<bool>(0x9D7696D8F4FA6CB7); }
		// Returns count.
		public static int NETWORK_GET_TRANSITION_MEMBERS(Any* data, int dataCount) { return Invoke<int>(0x73B000F7FBC55829, V(data), V(dataCount)); }
		public static void NETWORK_APPLY_TRANSITION_PARAMETER(int p0, int p1) { Invoke(0x521638ADA1BA0D18, V(p0), V(p1)); }
		public static void NETWORK_APPLY_TRANSITION_PARAMETER_STRING(int p0, string str, bool p2) { Invoke(0xEBEFC2E77084F599, V(p0), V(str), V(p2)); }
		public static bool NETWORK_SEND_TRANSITION_GAMER_INSTRUCTION(Any* gamerHandle, string p1, int p2, int p3, bool p4) { return Invoke<bool>(0x31D1D2B858D25E6B, V(gamerHandle), V(p1), V(p2), V(p3), V(p4)); }
		public static bool NETWORK_MARK_TRANSITION_GAMER_AS_FULLY_JOINED(Any* p0) { return Invoke<bool>(0x5728BB6D63E3FF1D, V(p0)); }
		public static bool NETWORK_IS_TRANSITION_HOST() { return Invoke<bool>(0x0B824797C9BF2159); }
		public static bool NETWORK_IS_TRANSITION_HOST_FROM_HANDLE(Any* gamerHandle) { return Invoke<bool>(0x6B5C83BA3EFE6A10, V(gamerHandle)); }
		public static bool NETWORK_GET_TRANSITION_HOST(Any* gamerHandle) { return Invoke<bool>(0x65042B9774C4435E, V(gamerHandle)); }
		public static bool NETWORK_IS_IN_TRANSITION() { return Invoke<bool>(0x68049AEFF83D8F0A); }
		public static bool NETWORK_IS_TRANSITION_STARTED() { return Invoke<bool>(0x53FA83401D9C07FE); }
		public static bool NETWORK_IS_TRANSITION_BUSY() { return Invoke<bool>(0x520F3282A53D26B7); }
		public static bool NETWORK_IS_TRANSITION_MATCHMAKING() { return Invoke<bool>(0x292564C735375EDF); }
		public static bool NETWORK_IS_TRANSITION_LEAVE_POSTPONED() { return Invoke<bool>(0xC571D0E77D8BBC29); }
		public static void NETWORK_TRANSITION_SET_IN_PROGRESS(Any p0) { Invoke(0x1398582B7F72B3ED, V(p0)); }
		public static void NETWORK_TRANSITION_SET_CONTENT_CREATOR(Any p0) { Invoke(0x1F8E00FB18239600, V(p0)); }
		public static void NETWORK_TRANSITION_SET_ACTIVITY_ISLAND(Any p0) { Invoke(0xF6F4383B7C92F11A, V(p0)); }
		public static void NETWORK_OPEN_TRANSITION_MATCHMAKING() { Invoke(0x2B3A8F7CA3A38FDE); }
		public static void NETWORK_CLOSE_TRANSITION_MATCHMAKING() { Invoke(0x43F4DBA69710E01E); }
		public static bool NETWORK_IS_TRANSITION_OPEN_TO_MATCHMAKING() { return Invoke<bool>(0x37A4494483B9F5C9); }
		public static void NETWORK_SET_TRANSITION_VISIBILITY_LOCK(bool p0, bool p1) { Invoke(0x0C978FDA19692C2C, V(p0), V(p1)); }
		public static bool NETWORK_IS_TRANSITION_VISIBILITY_LOCKED() { return Invoke<bool>(0xD0A484CB2F829FBE); }
		public static void NETWORK_SET_TRANSITION_ACTIVITY_ID(Any p0) { Invoke(0x30DE938B516F0AD2, V(p0)); }
		public static void NETWORK_CHANGE_TRANSITION_SLOTS(Any p0, bool p1) { Invoke(0xEEEDA5E6D7080987, V(p0), V(p1)); }
		public static void NETWORK_TRANSITION_BLOCK_JOIN_REQUESTS(bool p0) { Invoke(0x973D76AA760A6CB6, V(p0)); }
		public static bool NETWORK_HAS_PLAYER_STARTED_TRANSITION(Player player) { return Invoke<bool>(0x9AC9CCBFA8C29795, V(player)); }
		public static bool NETWORK_ARE_TRANSITION_DETAILS_VALID(Any p0) { return Invoke<bool>(0x2615AA2A695930C1, V(p0)); }
		// int handle[76];
		//           NETWORK_HANDLE_FROM_FRIEND(iSelectedPlayer, &handle[0], 13);
		//           Player uVar2 = NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(&handle[0]);
		//           NETWORK_JOIN_TRANSITION(uVar2);
		// nothing doin.
		public static bool NETWORK_JOIN_TRANSITION(Player player) { return Invoke<bool>(0x9D060B08CD63321A, V(player)); }
		public static bool NETWORK_HAS_INVITED_GAMER_TO_TRANSITION(Any* p0) { return Invoke<bool>(0x7284A47B3540E6CF, V(p0)); }
		public static bool NETWORK_HAS_TRANSITION_INVITE_BEEN_ACKED(Any* p0) { return Invoke<bool>(0x3F9990BF5F22759C, V(p0)); }
		public static bool NETWORK_IS_ACTIVITY_SESSION() { return Invoke<bool>(0x05095437424397FA); }
		public static void NETWORK_DISABLE_REALTIME_MULTIPLAYER() { Invoke(0x236905C700FDB54D); }
		// Does nothing. It's just a nullsub.
		public static void NETWORK_SET_PRESENCE_SESSION_INVITES_BLOCKED(bool toggle) { Invoke(0x4A9FDE3A5A6D0437, V(toggle)); }
		public static bool NETWORK_SEND_INVITE_VIA_PRESENCE(Any* gamerHandle, string p1, int dataCount, int p3) { return Invoke<bool>(0xC3C7A6AFDB244624, V(gamerHandle), V(p1), V(dataCount), V(p3)); }
		public static bool NETWORK_SEND_TRANSITION_INVITE_VIA_PRESENCE(Any* gamerHandle, string p1, int dataCount, int p3) { return Invoke<bool>(0xC116FF9B4D488291, V(gamerHandle), V(p1), V(dataCount), V(p3)); }
		// Contains the string "NETWORK_SEND_PRESENCE_TRANSITION_INVITE" but so does 0xC116FF9B4D488291; seems to fit alphabetically here, tho.
		public static bool NETWORK_SEND_IMPORTANT_TRANSITION_INVITE_VIA_PRESENCE(Any* gamerHandle, string p1, int dataCount, int p3) { return Invoke<bool>(0x1171A97A3D3981B6, V(gamerHandle), V(p1), V(dataCount), V(p3)); }
		public static int NETWORK_GET_PRESENCE_INVITE_INDEX_BY_ID(int p0) { return Invoke<int>(0x742B58F723233ED9, V(p0)); }
		public static int NETWORK_GET_NUM_PRESENCE_INVITES() { return Invoke<int>(0xCEFA968912D0F78D); }
		public static bool NETWORK_ACCEPT_PRESENCE_INVITE(int p0) { return Invoke<bool>(0xFA91550DF9318B22, V(p0)); }
		public static bool NETWORK_REMOVE_PRESENCE_INVITE(int p0) { return Invoke<bool>(0xF0210268DB0974B1, V(p0)); }
		public static int NETWORK_GET_PRESENCE_INVITE_ID(int p0) { return Invoke<int>(0xDFF09646E12EC386, V(p0)); }
		public static byte* NETWORK_GET_PRESENCE_INVITE_INVITER(int p0) { return PInvoke<byte>(0x4962CC4AA2F345B7, V(p0)); }
		public static bool NETWORK_GET_PRESENCE_INVITE_HANDLE(Any p0, Any* p1) { return Invoke<bool>(0x38D5B0FEBB086F75, V(p0), V(p1)); }
		public static int NETWORK_GET_PRESENCE_INVITE_SESSION_ID(Any p0) { return Invoke<int>(0x26E1CD96B0903D60, V(p0)); }
		public static byte* NETWORK_GET_PRESENCE_INVITE_CONTENT_ID(int p0) { return PInvoke<byte>(0x24409FC4C55CB22D, V(p0)); }
		public static int NETWORK_GET_PRESENCE_INVITE_PLAYLIST_LENGTH(int p0) { return Invoke<int>(0xD39B3FFF8FFDD5BF, V(p0)); }
		public static int NETWORK_GET_PRESENCE_INVITE_PLAYLIST_CURRENT(int p0) { return Invoke<int>(0x728C4CC7920CD102, V(p0)); }
		public static bool NETWORK_GET_PRESENCE_INVITE_FROM_ADMIN(int p0) { return Invoke<bool>(0x3DBF2DF0AEB7D289, V(p0)); }
		public static bool NETWORK_GET_PRESENCE_INVITE_IS_TOURNAMENT(Any p0) { return Invoke<bool>(0x8806CEBFABD3CE05, V(p0)); }
		public static bool NETWORK_HAS_FOLLOW_INVITE() { return Invoke<bool>(0x76D9B976C4C09FDE); }
		public static bool NETWORK_ACTION_FOLLOW_INVITE() { return Invoke<bool>(0xC88156EBB786F8D5); }
		public static bool NETWORK_CLEAR_FOLLOW_INVITE() { return Invoke<bool>(0x439BFDE3CD0610F6); }
		public static void NETWORK_REMOVE_AND_CANCEL_ALL_INVITES() { Invoke(0xEBF8284D8CADEB53); }
		public static void NETWORK_REMOVE_TRANSITION_INVITE(Any* p0) { Invoke(0x7524B431B2E6F7EE, V(p0)); }
		public static void NETWORK_REMOVE_ALL_TRANSITION_INVITE() { Invoke(0x726E0375C7A26368); }
		public static void NETWORK_REMOVE_AND_CANCEL_ALL_TRANSITION_INVITES() { Invoke(0xF083835B70BA9BFE); }
		public static bool NETWORK_INVITE_GAMERS(Any* p0, Any p1, Any* p2, Any p3) { return Invoke<bool>(0x9D80CD1D0E6327DE, V(p0), V(p1), V(p2), V(p3)); }
		public static bool NETWORK_HAS_INVITED_GAMER(Any* p0) { return Invoke<bool>(0x4D86CD31E8976ECE, V(p0)); }
		public static bool NETWORK_HAS_MADE_INVITE_DECISION(Any* gamerHandle) { return Invoke<bool>(0x71DC455F5CD1C2B1, V(gamerHandle)); }
		public static int NETWORK_GET_INVITE_REPLY_STATUS(Any p0) { return Invoke<int>(0x3855FB5EB2C5E8B2, V(p0)); }
		public static bool NETWORK_GET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(Any* p0) { return Invoke<bool>(0x74881E6BCAE2327C, V(p0)); }
		public static bool NETWORK_SET_CURRENTLY_SELECTED_GAMER_HANDLE_FROM_INVITE_MENU(Any* p0) { return Invoke<bool>(0x7206F674F2A3B1BB, V(p0)); }
		public static void NETWORK_SET_INVITE_ON_CALL_FOR_INVITE_MENU(Any* p0) { Invoke(0x66F010A4B031A331, V(p0)); }
		public static bool NETWORK_CHECK_DATA_MANAGER_SUCCEEDED_FOR_HANDLE(int p0, Any* gamerHandle) { return Invoke<bool>(0x44B37CDCAE765AAE, V(p0), V(gamerHandle)); }
		public static bool NETWORK_CHECK_DATA_MANAGER_FOR_HANDLE(Any p0, Any* gamerHandle) { return Invoke<bool>(0x4AD490AE1536933B, V(p0), V(gamerHandle)); }
		public static void NETWORK_SET_INVITE_FAILED_MESSAGE_FOR_INVITE_MENU(Any* p0, Any* p1) { Invoke(0x0D77A82DC2D0DA59, V(p0), V(p1)); }
		public static bool FILLOUT_PM_PLAYER_LIST(Any* gamerHandle, Any p1, Any p2) { return Invoke<bool>(0xCBBD7C4991B64809, V(gamerHandle), V(p1), V(p2)); }
		public static bool FILLOUT_PM_PLAYER_LIST_WITH_NAMES(Any* p0, Any* p1, Any p2, Any p3) { return Invoke<bool>(0x716B6DB9D1886106, V(p0), V(p1), V(p2), V(p3)); }
		public static bool REFRESH_PLAYER_LIST_STATS(int p0) { return Invoke<bool>(0xE26CCFF8094D8C74, V(p0)); }
		public static bool NETWORK_SET_CURRENT_DATA_MANAGER_HANDLE(Any* p0) { return Invoke<bool>(0x796A87B3B68D1F3D, V(p0)); }
		// Hardcoded to return false.
		public static bool NETWORK_IS_IN_PLATFORM_PARTY() { return Invoke<bool>(0x2FC5650B0271CB57); }
		public static int NETWORK_GET_PLATFORM_PARTY_MEMBER_COUNT() { return Invoke<int>(0x01ABCE5E7CBDA196); }
		public static int NETWORK_GET_PLATFORM_PARTY_MEMBERS(Any* data, int dataSize) { return Invoke<int>(0x120364DE2845DAF8, V(data), V(dataSize)); }
		// Hardcoded to return false.
		public static bool NETWORK_IS_IN_PLATFORM_PARTY_CHAT() { return Invoke<bool>(0xFD8B834A8BA05048); }
		// This would be nice to see if someone is in party chat, but 2 sad notes.
		// 1) It only becomes true if said person is speaking in that party at the time.
		// 2) It will never, become true unless you are in that party with said person.
		public static bool NETWORK_IS_CHATTING_IN_PLATFORM_PARTY(Any* gamerHandle) { return Invoke<bool>(0x8DE9945BCC9AEC52, V(gamerHandle)); }
		public static bool NETWORK_CAN_QUEUE_FOR_PREVIOUS_SESSION_JOIN() { return Invoke<bool>(0x2BF66D2E7414F686); }
		public static bool NETWORK_IS_QUEUING_FOR_SESSION_JOIN() { return Invoke<bool>(0x14922ED3E38761F0); }
		public static void NETWORK_CLEAR_QUEUED_JOIN_REQUEST() { Invoke(0x6CE50E47F5543D0C); }
		public static void NETWORK_SEND_QUEUED_JOIN_REQUEST() { Invoke(0xFA2888E3833C8E96); }
		public static void NETWORK_REMOVE_ALL_QUEUED_JOIN_REQUESTS() { Invoke(0x25D990F8E0E3F13C); }
		public static void NETWORK_SEED_RANDOM_NUMBER_GENERATOR(int seed) { Invoke(0xF1B84178F8674195, V(seed)); }
		public static int NETWORK_GET_RANDOM_INT() { return Invoke<int>(0x599E4FA1F87EB5FF); }
		// Same as GET_RANDOM_INT_IN_RANGE
		public static int NETWORK_GET_RANDOM_INT_RANGED(int rangeStart, int rangeEnd) { return Invoke<int>(0xE30CF56F1EFA5F43, V(rangeStart), V(rangeEnd)); }
		public static float _NETWORK_GET_RANDOM_FLOAT_RANGED(float rangeStart, float rangeEnd) { return Invoke<float>(0x04BD27B5ACB67067, V(rangeStart), V(rangeEnd)); }
		public static bool NETWORK_PLAYER_IS_CHEATER() { return Invoke<bool>(0x655B91F1495A9090); }
		public static int NETWORK_PLAYER_GET_CHEATER_REASON() { return Invoke<int>(0x172F75B6EE2233BA); }
		public static bool NETWORK_PLAYER_IS_BADSPORT() { return Invoke<bool>(0x19D8DA0E5A68045A); }
		public static bool REMOTE_CHEATER_PLAYER_DETECTED(Player player, int a, int b) { return Invoke<bool>(0x472841A026D26D8B, V(player), V(a), V(b)); }
		public static bool BAD_SPORT_PLAYER_LEFT_DETECTED(Any* gamerHandle, int evt, int amountReceived) { return Invoke<bool>(0xEC5E3AF5289DCA81, V(gamerHandle), V(evt), V(amountReceived)); }
		public static void NETWORK_ADD_INVALID_OBJECT_MODEL(Hash modelHash, Any p1) { Invoke(0x7F562DBC212E81F9, V(modelHash), V(p1)); }
		public static void NETWORK_REMOVE_INVALID_OBJECT_MODEL(Hash modelHash) { Invoke(0x791EDB5803B2F468, V(modelHash)); }
		public static void NETWORK_CLEAR_INVALID_OBJECT_MODELS() { Invoke(0x03B2F03A53D85E41); }
		public static void NETWORK_APPLY_PED_SCAR_DATA(Ped ped, int p1) { Invoke(0xE66C690248F11150, V(ped), V(p1)); }
		public static void NETWORK_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(int maxNumMissionParticipants, bool p1, int instanceId) { Invoke(0x1CA59E306ECB80A5, V(maxNumMissionParticipants), V(p1), V(instanceId)); }
		public static bool NETWORK_TRY_TO_SET_THIS_SCRIPT_IS_NETWORK_SCRIPT(Any p0, bool p1, Any p2) { return Invoke<bool>(0xD1110739EEADB592, V(p0), V(p1), V(p2)); }
		public static bool NETWORK_GET_THIS_SCRIPT_IS_NETWORK_SCRIPT() { return Invoke<bool>(0x2910669969E9535E); }
		public static int NETWORK_GET_MAX_NUM_PARTICIPANTS() { return Invoke<int>(0xA6C90FBC38E395EE); }
		public static int NETWORK_GET_NUM_PARTICIPANTS() { return Invoke<int>(0x18D0456E86604654); }
		public static int NETWORK_GET_SCRIPT_STATUS() { return Invoke<int>(0x57D158647A6BFABF); }
		public static void NETWORK_REGISTER_HOST_BROADCAST_VARIABLES(int* vars, int numVars, string debugName) { Invoke(0x3E9B2F01C50DF595, V(vars), V(numVars), V(debugName)); }
		public static void NETWORK_REGISTER_PLAYER_BROADCAST_VARIABLES(int* vars, int numVars, string debugName) { Invoke(0x3364AA97340CA215, V(vars), V(numVars), V(debugName)); }
		public static void NETWORK_REGISTER_HIGH_FREQUENCY_HOST_BROADCAST_VARIABLES(Any p0, Any p1, Any p2) { Invoke(0xEA8C0DDB10E2822A, V(p0), V(p1), V(p2)); }
		public static void NETWORK_REGISTER_HIGH_FREQUENCY_PLAYER_BROADCAST_VARIABLES(Any p0, Any p1, Any p2) { Invoke(0xD6D7478CA62B8D41, V(p0), V(p1), V(p2)); }
		public static void NETWORK_FINISH_BROADCASTING_DATA() { Invoke(0x64F62AFB081E260D); }
		public static bool NETWORK_HAS_RECEIVED_HOST_BROADCAST_DATA() { return Invoke<bool>(0x5D10B3795F3FC886); }
		public static Player NETWORK_GET_PLAYER_INDEX(Player player) { return Invoke<Player>(0x24FB80D107371267, V(player)); }
		public static int NETWORK_GET_PARTICIPANT_INDEX(int index) { return Invoke<int>(0x1B84DF6AF2A46938, V(index)); }
		// Returns the Player associated to a given Ped when in an online session.
		public static Player NETWORK_GET_PLAYER_INDEX_FROM_PED(Ped ped) { return Invoke<Player>(0x6C0E2E0125610278, V(ped)); }
		// Returns the amount of players connected in the current session. Only works when connected to a session/server.
		public static int NETWORK_GET_NUM_CONNECTED_PLAYERS() { return Invoke<int>(0xA4A79DD2D9600654); }
		public static bool NETWORK_IS_PLAYER_CONNECTED(Player player) { return Invoke<bool>(0x93DC1BE4E1ABE9D1, V(player)); }
		public static int NETWORK_GET_TOTAL_NUM_PLAYERS() { return Invoke<int>(0xCF61D4B4702EE9EB); }
		public static bool NETWORK_IS_PARTICIPANT_ACTIVE(int p0) { return Invoke<bool>(0x6FF8FF40B6357D45, V(p0)); }
		public static bool NETWORK_IS_PLAYER_ACTIVE(Player player) { return Invoke<bool>(0xB8DFD30D6973E135, V(player)); }
		public static bool NETWORK_IS_PLAYER_A_PARTICIPANT(Player player) { return Invoke<bool>(0x3CA58F6CB7CBD784, V(player)); }
		public static bool NETWORK_IS_HOST_OF_THIS_SCRIPT() { return Invoke<bool>(0x83CD99A1E6061AB5); }
		public static Player NETWORK_GET_HOST_OF_THIS_SCRIPT() { return Invoke<Player>(0xC7B4D79B01FA7A5C); }
		// scriptName examples:
		// "freemode", "AM_CR_SecurityVan", ...
		// 
		// Most of the time, these values are used:
		// instance_id = -1
		// position_hash = 0
		public static Player NETWORK_GET_HOST_OF_SCRIPT(string scriptName, int instance_id, int position_hash) { return Invoke<Player>(0x1D6A14F1F9A736FC, V(scriptName), V(instance_id), V(position_hash)); }
		public static void NETWORK_SET_MISSION_FINISHED() { Invoke(0x3B3D11CD9FFCDFC9); }
		public static bool NETWORK_IS_SCRIPT_ACTIVE(string scriptName, int instance_id, bool p2, int position_hash) { return Invoke<bool>(0x9D40DF90FAD26098, V(scriptName), V(instance_id), V(p2), V(position_hash)); }
		public static bool NETWORK_IS_SCRIPT_ACTIVE_BY_HASH(Hash scriptHash, int p1, bool p2, int p3) { return Invoke<bool>(0xDA7DE67F5FE5EE13, V(scriptHash), V(p1), V(p2), V(p3)); }
		public static bool NETWORK_IS_THREAD_A_NETWORK_SCRIPT(int threadId) { return Invoke<bool>(0x560B423D73015E77, V(threadId)); }
		public static int NETWORK_GET_NUM_SCRIPT_PARTICIPANTS(string scriptName, int instance_id, int position_hash) { return Invoke<int>(0x3658E8CD94FC121A, V(scriptName), V(instance_id), V(position_hash)); }
		public static int NETWORK_GET_INSTANCE_ID_OF_THIS_SCRIPT() { return Invoke<int>(0x638A3A81733086DB); }
		public static Hash NETWORK_GET_POSITION_HASH_OF_THIS_SCRIPT() { return Invoke<Hash>(0x257ED0FADF750BCF); }
		public static bool NETWORK_IS_PLAYER_A_PARTICIPANT_ON_SCRIPT(Player player, string script, int instance_id) { return Invoke<bool>(0x1AD5B71586B94820, V(player), V(script), V(instance_id)); }
		public static void NETWORK_PREVENT_SCRIPT_HOST_MIGRATION() { Invoke(0x2302C0264EA58D31); }
		public static void NETWORK_REQUEST_TO_BE_HOST_OF_THIS_SCRIPT() { Invoke(0x741A3D8380319A81); }
		// Return the local Participant ID
		public static Player PARTICIPANT_ID() { return Invoke<Player>(0x90986E8876CE0A83); }
		// Return the local Participant ID.
		// 
		// This native is exactly the same as 'PARTICIPANT_ID' native.
		public static int PARTICIPANT_ID_TO_INT() { return Invoke<int>(0x57A3BDDAD8E5AA0A); }
		public static Player NETWORK_GET_KILLER_OF_PLAYER(Player player, Hash* weaponHash) { return Invoke<Player>(0x2DA41ED6E1FCD7A5, V(player), V(weaponHash)); }
		public static Player NETWORK_GET_DESTROYER_OF_NETWORK_ID(int netId, Hash* weaponHash) { return Invoke<Player>(0x7A1ADEEF01740A24, V(netId), V(weaponHash)); }
		public static Player NETWORK_GET_DESTROYER_OF_ENTITY(Entity entity, Hash* weaponHash) { return Invoke<Player>(0xC434133D9BA52777, V(entity), V(weaponHash)); }
		// NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY that ensures the entity is dead (IS_ENTITY_DEAD)
		public static bool NETWORK_GET_ASSISTED_KILL_OF_ENTITY(Player player, Entity entity, int* p2) { return Invoke<bool>(0x83660B734994124D, V(player), V(entity), V(p2)); }
		public static bool NETWORK_GET_ASSISTED_DAMAGE_OF_ENTITY(Player player, Entity entity, int* p2) { return Invoke<bool>(0x4CACA84440FA26F6, V(player), V(entity), V(p2)); }
		public static Entity NETWORK_GET_ENTITY_KILLER_OF_PLAYER(Player player, Hash* weaponHash) { return Invoke<Entity>(0x42B2DAA6B596F5F8, V(player), V(weaponHash)); }
		public static void NETWORK_SET_CURRENT_PUBLIC_CONTENT_ID(string missionId) { Invoke(0x2C863ACDCD12B3DB, V(missionId)); }
		public static void NETWORK_SET_CURRENT_CHAT_OPTION(int newChatOption) { Invoke(0x3DAD00265FBF356B, V(newChatOption)); }
		// mpSettingSpawn:
		// 
		// enum eMpSettingSpawn
		// {
		// 	MP_SETTING_SPAWN_NULL,
		// 	MP_SETTING_SPAWN_PROPERTY,
		// 	MP_SETTING_SPAWN_LAST_POSITION,
		// 	MP_SETTING_SPAWN_GARAGE,
		// 	MP_SETTING_SPAWN_RANDOM,
		// 	MP_SETTING_SPAWN_PRIVATE_YACHT,
		// 	MP_SETTING_SPAWN_OFFICE,
		// 	MP_SETTING_SPAWN_CLUBHOUSE,
		// 	MP_SETTING_SPAWN_IE_WAREHOUSE,
		// 	MP_SETTING_SPAWN_BUNKER,
		// 	MP_SETTING_SPAWN_HANGAR,
		// 	MP_SETTING_SPAWN_DEFUNCT_BASE,
		// 	MP_SETTING_SPAWN_NIGHTCLUB,
		// 	MP_SETTING_SPAWN_ARENA_GARAGE,
		// 	MP_SETTING_SPAWN_CASINO_APARTMENT,
		// 	MP_SETTING_SPAWN_ARCADE,
		// 	MP_SETTING_SPAWN_SUBMARINE,
		// 	MP_SETTING_SPAWN_CAR_MEET,
		// 	MP_SETTING_SPAWN_AUTO_SHOP,
		// 	MP_SETTING_SPAWN_FIXER_HQ,
		// 	MP_SETTING_SPAWN_MAX,
		// };
		public static void NETWORK_SET_CURRENT_SPAWN_LOCATION_OPTION(Hash mpSettingSpawn) { Invoke(0xAA6D5451DC3448B6, V(mpSettingSpawn)); }
		// Used by MetricVEHICLE_DIST_DRIVEN
		public static void NETWORK_SET_VEHICLE_DRIVEN_IN_TEST_DRIVE(bool toggle) { Invoke(0x8C70252FC40F320B, V(toggle)); }
		// Sets 'loc' variable used in MetricVEHICLE_DIST_DRIVEN
		public static void NETWORK_SET_VEHICLE_DRIVEN_LOCATION(Hash location) { Invoke(0xA0CE91E47531D3BB, V(location)); }
		public static void NETWORK_RESURRECT_LOCAL_PLAYER(float x, float y, float z, float heading, bool p4, bool changetime, bool p6, int p7, int p8) { Invoke(0xEA23C49EAA83ACFB, V(x), V(y), V(z), V(heading), V(p4), V(changetime), V(p6), V(p7), V(p8)); }
		public static void NETWORK_SET_LOCAL_PLAYER_INVINCIBLE_TIME(int time) { Invoke(0x2D95C7E2D7E07307, V(time)); }
		public static bool NETWORK_IS_LOCAL_PLAYER_INVINCIBLE() { return Invoke<bool>(0x8A8694B48715B000); }
		public static void NETWORK_DISABLE_INVINCIBLE_FLASHING(Player player, bool toggle) { Invoke(0x9DD368BF06983221, V(player), V(toggle)); }
		public static void NETWORK_PATCH_POST_CUTSCENE_HS4F_TUN_ENT(Ped ped) { Invoke(0xF0BC9BCD24A511D5, V(ped)); }
		public static void NETWORK_SET_LOCAL_PLAYER_SYNC_LOOK_AT(bool toggle) { Invoke(0x524FF0AEFF9C3973, V(toggle)); }
		public static bool NETWORK_HAS_ENTITY_BEEN_REGISTERED_WITH_THIS_THREAD(Entity entity) { return Invoke<bool>(0xB07D3185E11657A5, V(entity)); }
		public static int NETWORK_GET_NETWORK_ID_FROM_ENTITY(Entity entity) { return Invoke<int>(0xA11700682F3AD45C, V(entity)); }
		public static Entity NETWORK_GET_ENTITY_FROM_NETWORK_ID(int netId) { return Invoke<Entity>(0xCE4E5D9B0A4FF560, V(netId)); }
		public static bool NETWORK_GET_ENTITY_IS_NETWORKED(Entity entity) { return Invoke<bool>(0xC7827959479DCC78, V(entity)); }
		public static bool NETWORK_GET_ENTITY_IS_LOCAL(Entity entity) { return Invoke<bool>(0x0991549DE4D64762, V(entity)); }
		public static void NETWORK_REGISTER_ENTITY_AS_NETWORKED(Entity entity) { Invoke(0x06FAACD625D80CAA, V(entity)); }
		public static void NETWORK_UNREGISTER_NETWORKED_ENTITY(Entity entity) { Invoke(0x7368E683BB9038D6, V(entity)); }
		public static bool NETWORK_DOES_NETWORK_ID_EXIST(int netId) { return Invoke<bool>(0x38CE16C96BD11344, V(netId)); }
		public static bool NETWORK_DOES_ENTITY_EXIST_WITH_NETWORK_ID(int netId) { return Invoke<bool>(0x18A47D074708FD68, V(netId)); }
		public static bool NETWORK_REQUEST_CONTROL_OF_NETWORK_ID(int netId) { return Invoke<bool>(0xA670B3662FAFFBD0, V(netId)); }
		public static bool NETWORK_HAS_CONTROL_OF_NETWORK_ID(int netId) { return Invoke<bool>(0x4D36070FE0215186, V(netId)); }
		// Returns true if the specified network id is controlled by someone else.
		public static bool NETWORK_IS_NETWORK_ID_REMOTELY_CONTROLLED(int netId) { return Invoke<bool>(0x7242F8B741CE1086, V(netId)); }
		public static bool NETWORK_REQUEST_CONTROL_OF_ENTITY(Entity entity) { return Invoke<bool>(0xB69317BF5E782347, V(entity)); }
		public static bool NETWORK_REQUEST_CONTROL_OF_DOOR(int doorID) { return Invoke<bool>(0x870DDFD5A4A796E4, V(doorID)); }
		public static bool NETWORK_HAS_CONTROL_OF_ENTITY(Entity entity) { return Invoke<bool>(0x01BF60A500E28887, V(entity)); }
		public static bool NETWORK_HAS_CONTROL_OF_PICKUP(Pickup pickup) { return Invoke<bool>(0x5BC9495F0B3B6FA6, V(pickup)); }
		public static bool NETWORK_HAS_CONTROL_OF_DOOR(Hash doorHash) { return Invoke<bool>(0xCB3C68ADB06195DF, V(doorHash)); }
		public static bool NETWORK_IS_DOOR_NETWORKED(Hash doorHash) { return Invoke<bool>(0xC01E93FAC20C3346, V(doorHash)); }
		// calls from vehicle to net.
		// 
		public static int VEH_TO_NET(Vehicle vehicle) { return Invoke<int>(0xB4C94523F023419C, V(vehicle)); }
		// gets the network id of a ped
		public static int PED_TO_NET(Ped ped) { return Invoke<int>(0x0EDEC3C276198689, V(ped)); }
		// Lets objects spawn online simply do it like this:
		// 
		// int createdObject = OBJ_TO_NET(CREATE_OBJECT_NO_OFFSET(oball, pCoords.x, pCoords.y, pCoords.z, 1, 0, 0));
		public static int OBJ_TO_NET(Obj obj) { return Invoke<int>(0x99BFDC94A603E541, V(obj)); }
		public static Vehicle NET_TO_VEH(int netHandle) { return Invoke<Vehicle>(0x367B936610BA360C, V(netHandle)); }
		// gets the ped id of a network id
		public static Ped NET_TO_PED(int netHandle) { return Invoke<Ped>(0xBDCD95FC216A8B3E, V(netHandle)); }
		// gets the obj id of a network id
		public static Obj NET_TO_OBJ(int netHandle) { return Invoke<Obj>(0xD8515F5FEA14CB3F, V(netHandle)); }
		// gets the entity id of a network id
		public static Entity NET_TO_ENT(int netHandle) { return Invoke<Entity>(0xBFFEAB45A9A9094A, V(netHandle)); }
		public static void NETWORK_GET_LOCAL_HANDLE(Any* gamerHandle, int gamerHandleSize) { Invoke(0xE86051786B66CD8E, V(gamerHandle), V(gamerHandleSize)); }
		public static void NETWORK_HANDLE_FROM_USER_ID(string userId, Any* gamerHandle, int gamerHandleSize) { Invoke(0xDCD51DD8F87AEC5C, V(userId), V(gamerHandle), V(gamerHandleSize)); }
		public static void NETWORK_HANDLE_FROM_MEMBER_ID(string memberId, Any* gamerHandle, int gamerHandleSize) { Invoke(0xA0FD21BED61E5C4C, V(memberId), V(gamerHandle), V(gamerHandleSize)); }
		public static void NETWORK_HANDLE_FROM_PLAYER(Player player, Any* gamerHandle, int gamerHandleSize) { Invoke(0x388EB2B86C73B6B3, V(player), V(gamerHandle), V(gamerHandleSize)); }
		public static Hash NETWORK_HASH_FROM_PLAYER_HANDLE(Player player) { return Invoke<Hash>(0xBC1D768F2F5D6C05, V(player)); }
		public static Hash NETWORK_HASH_FROM_GAMER_HANDLE(Any* gamerHandle) { return Invoke<Hash>(0x58575AC3CF2CA8EC, V(gamerHandle)); }
		public static void NETWORK_HANDLE_FROM_FRIEND(int friendIndex, Any* gamerHandle, int gamerHandleSize) { Invoke(0xD45CB817D7E177D2, V(friendIndex), V(gamerHandle), V(gamerHandleSize)); }
		public static bool NETWORK_GAMERTAG_FROM_HANDLE_START(Any* gamerHandle) { return Invoke<bool>(0x9F0C0A981D73FA56, V(gamerHandle)); }
		public static bool NETWORK_GAMERTAG_FROM_HANDLE_PENDING() { return Invoke<bool>(0xB071E27958EF4CF0); }
		public static bool NETWORK_GAMERTAG_FROM_HANDLE_SUCCEEDED() { return Invoke<bool>(0xFD00798DBA7523DD); }
		public static byte* NETWORK_GET_GAMERTAG_FROM_HANDLE(Any* gamerHandle) { return PInvoke<byte>(0x426141162EBE5CDB, V(gamerHandle)); }
		// Hardcoded to return -1.
		public static int NETWORK_DISPLAYNAMES_FROM_HANDLES_START(Any* p0, Any p1) { return Invoke<int>(0xD66C9E72B3CC4982, V(p0), V(p1)); }
		// This function is hard-coded to always return 0.
		public static int NETWORK_GET_DISPLAYNAMES_FROM_HANDLES(Any p0, Any p1, Any p2) { return Invoke<int>(0x58CC181719256197, V(p0), V(p1), V(p2)); }
		public static bool NETWORK_ARE_HANDLES_THE_SAME(Any* gamerHandle1, Any* gamerHandle2) { return Invoke<bool>(0x57DBA049E110F217, V(gamerHandle1), V(gamerHandle2)); }
		public static bool NETWORK_IS_HANDLE_VALID(Any* gamerHandle, int gamerHandleSize) { return Invoke<bool>(0x6F79B93B0A8E4133, V(gamerHandle), V(gamerHandleSize)); }
		public static Player NETWORK_GET_PLAYER_FROM_GAMER_HANDLE(Any* gamerHandle) { return Invoke<Player>(0xCE5F689CF5A0A49D, V(gamerHandle)); }
		public static byte* NETWORK_MEMBER_ID_FROM_GAMER_HANDLE(Any* gamerHandle) { return PInvoke<byte>(0xC82630132081BB6F, V(gamerHandle)); }
		public static bool NETWORK_IS_GAMER_IN_MY_SESSION(Any* gamerHandle) { return Invoke<bool>(0x0F10B05DDF8D16E9, V(gamerHandle)); }
		public static void NETWORK_SHOW_PROFILE_UI(Any* gamerHandle) { Invoke(0x859ED1CEA343FCA8, V(gamerHandle)); }
		// Returns the name of a given player. Returns "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
		public static byte* NETWORK_PLAYER_GET_NAME(Player player) { return PInvoke<byte>(0x7718D2E2060837D2, V(player)); }
		// Returns a string of the player's Rockstar Id. 
		// Takes a 24 char buffer. Returns the buffer or "**Invalid**" if rlGamerInfo of the given player cannot be retrieved or the player doesn't exist.
		public static byte* NETWORK_PLAYER_GET_USERID(Player player, int* userID) { return PInvoke<byte>(0x4927FC39CD0869A0, V(player), V(userID)); }
		// Checks if a specific value (BYTE) in CNetGamePlayer is nonzero.
		// Returns always false in Singleplayer.
		// 
		// No longer used for dev checks since first mods were released on PS3 & 360.
		// R* now checks with the IS_DLC_PRESENT native for the dlc hash 2532323046,
		// if that is present it will unlock dev stuff.
		public static bool NETWORK_PLAYER_IS_ROCKSTAR_DEV(Player player) { return Invoke<bool>(0x544ABDDA3B409B6D, V(player)); }
		public static bool NETWORK_PLAYER_INDEX_IS_CHEATER(Player player) { return Invoke<bool>(0x565E430DB3B05BEC, V(player)); }
		public static int NETWORK_ENTITY_GET_OBJECT_ID(Entity entity) { return Invoke<int>(0x815F18AD865F057F, V(entity)); }
		// I've had this return the player's ped handle sometimes, but also other random entities.
		// Whatever p0 is, it's at least not synced to other players.
		// At least not all the time, some p0 values actually output the same entity, (different handle of course, but same entity).
		// But another p0 value may return an entity for player x, but not for player y (it'll just return -1 even if the entity exists on both clients).
		// 
		// Returns an entity handle or -1, value changes based on p0's value.
		public static Entity NETWORK_GET_ENTITY_FROM_OBJECT_ID(Any p0) { return Invoke<Entity>(0x37D5F739FD494675, V(p0)); }
		public static bool NETWORK_IS_INACTIVE_PROFILE(Any* p0) { return Invoke<bool>(0x7E58745504313A2E, V(p0)); }
		// Returns the name from given friend gamer handle.
		public static byte* _NETWORK_LOAD_GAMER_DISPLAY_NAME(Any* gamerHandle) { return PInvoke<byte>(0x338ECE3637937BC2, V(gamerHandle)); }
		public static int NETWORK_GET_MAX_FRIENDS() { return Invoke<int>(0xAFEBB0D5D8F687D2); }
		public static int NETWORK_GET_FRIEND_COUNT() { return Invoke<int>(0x203F1CFD823B27A4); }
		public static byte* NETWORK_GET_FRIEND_NAME(int friendIndex) { return PInvoke<byte>(0xE11EBBB2A783FE8B, V(friendIndex)); }
		public static byte* NETWORK_GET_FRIEND_DISPLAY_NAME(int friendIndex) { return PInvoke<byte>(0x4164F227D052E293, V(friendIndex)); }
		public static bool NETWORK_IS_FRIEND_ONLINE(string name) { return Invoke<bool>(0x425A44533437B64D, V(name)); }
		public static bool NETWORK_IS_FRIEND_HANDLE_ONLINE(Any* gamerHandle) { return Invoke<bool>(0x87EB7A3FFCB314DB, V(gamerHandle)); }
		// In scripts R* calls 'NETWORK_GET_FRIEND_NAME' in this param.
		public static bool NETWORK_IS_FRIEND_IN_SAME_TITLE(string friendName) { return Invoke<bool>(0x2EA9A3BEDF3F17B8, V(friendName)); }
		public static bool NETWORK_IS_FRIEND_IN_MULTIPLAYER(string friendName) { return Invoke<bool>(0x57005C18827F3A28, V(friendName)); }
		public static bool NETWORK_IS_FRIEND(Any* gamerHandle) { return Invoke<bool>(0x1A24A179F9B31654, V(gamerHandle)); }
		// This function is hard-coded to always return 0.
		public static bool NETWORK_IS_PENDING_FRIEND(Any p0) { return Invoke<bool>(0x0BE73DA6984A6E33, V(p0)); }
		public static bool NETWORK_IS_ADDING_FRIEND() { return Invoke<bool>(0x6EA101606F6E4D81); }
		public static bool NETWORK_ADD_FRIEND(Any* gamerHandle, string message) { return Invoke<bool>(0x8E02D73914064223, V(gamerHandle), V(message)); }
		public static bool NETWORK_IS_FRIEND_INDEX_ONLINE(int friendIndex) { return Invoke<bool>(0xBAD8F2A42B844821, V(friendIndex)); }
		public static void NETWORK_SET_PLAYER_IS_PASSIVE(bool toggle) { Invoke(0x1B857666604B1A74, V(toggle)); }
		public static bool NETWORK_GET_PLAYER_OWNS_WAYPOINT(Player player) { return Invoke<bool>(0x82377B65E943F72D, V(player)); }
		public static bool NETWORK_CAN_SET_WAYPOINT() { return Invoke<bool>(0xC927EC229934AF60); }
		public static void NETWORK_IGNORE_REMOTE_WAYPOINTS() { Invoke(0x4C2A9FDC22377075); }
		// communicationType: 0 = VOICE; 1 = TEXT_CHAT; 2 = TEXT_MESSAGE; 3 = EMAIL; 4 = USER_CONTENT;  5 = USER_TEXT
		public static bool _NETWORK_DOES_COMMUNICATION_GROUP_EXIST(int communicationType) { return Invoke<bool>(0xDBDF80673BBA3D65, V(communicationType)); }
		// Returns communicationGroupFlag
		// communicationType: see 0xDBDF80673BBA3D65
		// 
		// enum eCommunicationGroupFlag
		// {
		// 	COMMUNICATION_GROUP_LOCAL_PLAYER = 1 << 0,
		// 	COMMUNICATION_GROUP_FRIENDS = 1 << 1,
		// 	COMMUNICATION_GROUP_SMALL_CREW = 1 << 2,
		// 	COMMUNICATION_GROUP_LARGE_CREW = 1 << 3,
		// 	COMMUNICATION_GROUP_RECENT_PLAYER = 1 << 4,
		// 	COMMUNICATION_GROUP_SAME_SESSION = 1 << 5,
		// 	COMMUNICATION_GROUP_SAME_TEAM = 1 << 6,
		// 	COMMUNICATION_GROUP_INVALID = 1 << 7,
		// };
		public static int _NETWORK_GET_COMMUNICATION_GROUP_FLAGS(int communicationType) { return Invoke<int>(0x40DF02F371F40883, V(communicationType)); }
		// communicationType: see 0xDBDF80673BBA3D65
		// communicationGroupFlag: see 0x40DF02F371F40883
		public static void _NETWORK_SET_COMMUNICATION_GROUP_FLAGS(int communicationType, int communicationGroupFlag) { Invoke(0xE549F846DE7D32D5, V(communicationType), V(communicationGroupFlag)); }
		// _NETWORK_HAS_P*
		// checkType 3 is similar as using 0x9F633448E4C73207
		public static bool _NETWORK_HAS_PLAYER_PASSED_CHECK_TYPE(int checkType, Any* gamerHandle) { return Invoke<bool>(0x62E29CDA11F9C230, V(checkType), V(gamerHandle)); }
		public static bool NETWORK_IS_PLAYER_ON_BLOCKLIST(Any* gamerHandle) { return Invoke<bool>(0xAD4326FCA30D62F8, V(gamerHandle)); }
		public static bool NETWORK_SET_SCRIPT_AUTOMUTED(Any p0) { return Invoke<bool>(0xB309EBEA797E001F, V(p0)); }
		public static bool NETWORK_HAS_AUTOMUTE_OVERRIDE() { return Invoke<bool>(0x26F07DD83A5F7F98); }
		public static bool NETWORK_HAS_HEADSET() { return Invoke<bool>(0xE870F9F1F7B4F1FA); }
		public static void NETWORK_SET_LOOK_AT_TALKERS(bool p0) { Invoke(0x7D395EA61622E116, V(p0)); }
		public static bool NETWORK_IS_PUSH_TO_TALK_ACTIVE() { return Invoke<bool>(0xC0D2AF00BCC234CA); }
		public static bool NETWORK_GAMER_HAS_HEADSET(Any* gamerHandle) { return Invoke<bool>(0xF2FD55CB574BCC55, V(gamerHandle)); }
		public static bool NETWORK_IS_GAMER_TALKING(Any* gamerHandle) { return Invoke<bool>(0x71C33B22606CD88A, V(gamerHandle)); }
		public static bool NETWORK_PERMISSIONS_HAS_GAMER_RECORD(Any* gamerHandle) { return Invoke<bool>(0x559EBF901A8C68E0, V(gamerHandle)); }
		public static bool NETWORK_CAN_COMMUNICATE_WITH_GAMER(Any* gamerHandle) { return Invoke<bool>(0x8F5D1AD832AEB06C, V(gamerHandle)); }
		public static bool NETWORK_CAN_TEXT_CHAT_WITH_GAMER(Any* gamerHandle) { return Invoke<bool>(0xA150A4F065806B1F, V(gamerHandle)); }
		public static bool NETWORK_IS_GAMER_MUTED_BY_ME(Any* gamerHandle) { return Invoke<bool>(0xCE60DE011B6C7978, V(gamerHandle)); }
		public static bool NETWORK_AM_I_MUTED_BY_GAMER(Any* gamerHandle) { return Invoke<bool>(0xDF02A2C93F1F26DA, V(gamerHandle)); }
		public static bool NETWORK_IS_GAMER_BLOCKED_BY_ME(Any* gamerHandle) { return Invoke<bool>(0xE944C4F5AF1B5883, V(gamerHandle)); }
		public static bool NETWORK_AM_I_BLOCKED_BY_GAMER(Any* gamerHandle) { return Invoke<bool>(0x15337C7C268A27B2, V(gamerHandle)); }
		public static bool NETWORK_CAN_VIEW_GAMER_USER_CONTENT(Any* gamerHandle) { return Invoke<bool>(0xB57A49545BA53CE7, V(gamerHandle)); }
		public static bool NETWORK_HAS_VIEW_GAMER_USER_CONTENT_RESULT(Any* gamerHandle) { return Invoke<bool>(0xCCA4318E1AB03F1F, V(gamerHandle)); }
		// NETWORK_CAN_*
		public static bool _NETWORK_CAN_TEXT_FROM_GAMER_BE_VIEWED(Any* gamerHandle) { return Invoke<bool>(0x9F633448E4C73207, V(gamerHandle)); }
		public static bool NETWORK_CAN_PLAY_MULTIPLAYER_WITH_GAMER(Any* gamerHandle) { return Invoke<bool>(0x07DD29D5E22763F1, V(gamerHandle)); }
		public static bool NETWORK_CAN_GAMER_PLAY_MULTIPLAYER_WITH_ME(Any* gamerHandle) { return Invoke<bool>(0x135F9B7B7ADD2185, V(gamerHandle)); }
		public static bool NETWORK_CAN_SEND_LOCAL_INVITE(Any* gamerHandle) { return Invoke<bool>(0x021ABCBD98EC4320, V(gamerHandle)); }
		public static bool NETWORK_CAN_RECEIVE_LOCAL_INVITE(Any* gamerHandle) { return Invoke<bool>(0x421E34C55F125964, V(gamerHandle)); }
		// returns true if someone is screaming or talking in a microphone
		public static bool NETWORK_IS_PLAYER_TALKING(Player player) { return Invoke<bool>(0x031E11F3D447647E, V(player)); }
		public static bool NETWORK_PLAYER_HAS_HEADSET(Player player) { return Invoke<bool>(0x3FB99A8B08D18FD6, V(player)); }
		public static bool NETWORK_IS_PLAYER_MUTED_BY_ME(Player player) { return Invoke<bool>(0x8C71288AE68EDE39, V(player)); }
		public static bool NETWORK_AM_I_MUTED_BY_PLAYER(Player player) { return Invoke<bool>(0x9D6981DFC91A8604, V(player)); }
		public static bool NETWORK_IS_PLAYER_BLOCKED_BY_ME(Player player) { return Invoke<bool>(0x57AF1F8E27483721, V(player)); }
		public static bool NETWORK_AM_I_BLOCKED_BY_PLAYER(Player player) { return Invoke<bool>(0x87F395D957D4353D, V(player)); }
		public static float NETWORK_GET_PLAYER_LOUDNESS(Player player) { return Invoke<float>(0x21A1684A25C2867F, V(player)); }
		public static void NETWORK_SET_TALKER_PROXIMITY(float value) { Invoke(0xCBF12D65F95AD686, V(value)); }
		public static float NETWORK_GET_TALKER_PROXIMITY() { return Invoke<float>(0x84F0F13120B4E098); }
		public static void NETWORK_SET_VOICE_ACTIVE(bool toggle) { Invoke(0xBABEC9E69A91C57B, V(toggle)); }
		public static void NETWORK_REMAIN_IN_GAME_CHAT(bool p0) { Invoke(0xCFEB46DCD7D8D5EB, V(p0)); }
		public static void NETWORK_OVERRIDE_TRANSITION_CHAT(bool p0) { Invoke(0xAF66059A131AA269, V(p0)); }
		public static void NETWORK_SET_TEAM_ONLY_CHAT(bool toggle) { Invoke(0xD5B4883AC32F24C3, V(toggle)); }
		public static void NETWORK_SET_SCRIPT_CONTROLLING_TEAMS(Any p0) { Invoke(0x265559DA40B3F327, V(p0)); }
		public static bool NETWORK_SET_SAME_TEAM_AS_LOCAL_PLAYER(Any p0, Any p1) { return Invoke<bool>(0x4348BFDA56023A2F, V(p0), V(p1)); }
		public static void NETWORK_OVERRIDE_TEAM_RESTRICTIONS(int team, bool toggle) { Invoke(0x6F697A66CE78674E, V(team), V(toggle)); }
		public static void NETWORK_SET_OVERRIDE_SPECTATOR_MODE(bool toggle) { Invoke(0x70DA3BF8DACD3210, V(toggle)); }
		public static void NETWORK_SET_OVERRIDE_TUTORIAL_SESSION_CHAT(bool toggle) { Invoke(0x3C5C1E2C2FF814B1, V(toggle)); }
		public static void NETWORK_SET_PROXIMITY_AFFECTS_TEAM(bool toggle) { Invoke(0x9D7AFCBF21C51712, V(toggle)); }
		public static void NETWORK_SET_NO_SPECTATOR_CHAT(bool toggle) { Invoke(0xF46A1E03E8755980, V(toggle)); }
		public static void NETWORK_SET_IGNORE_SPECTATOR_CHAT_LIMITS_SAME_TEAM(bool toggle) { Invoke(0x6A5D89D7769A40D8, V(toggle)); }
		// Could possibly bypass being muted or automatically muted
		public static void NETWORK_OVERRIDE_CHAT_RESTRICTIONS(Player player, bool toggle) { Invoke(0x3039AE5AD2C9C0C4, V(player), V(toggle)); }
		// This is used alongside the native,
		// 'NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS'. Read its description for more info.
		public static void NETWORK_OVERRIDE_SEND_RESTRICTIONS(Player player, bool toggle) { Invoke(0x97DD4C5944CC2E6A, V(player), V(toggle)); }
		public static void NETWORK_OVERRIDE_SEND_RESTRICTIONS_ALL(bool toggle) { Invoke(0x57B192B4D4AD23D5, V(toggle)); }
		// R* uses this to hear all player when spectating. 
		// It allows you to hear other online players when their chat is on none, crew and or friends
		public static void NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS(Player player, bool toggle) { Invoke(0xDDF73E2B1FEC5AB4, V(player), V(toggle)); }
		// p0 is always false in scripts.
		public static void NETWORK_OVERRIDE_RECEIVE_RESTRICTIONS_ALL(bool toggle) { Invoke(0x0FF2862B61A58AF9, V(toggle)); }
		public static void NETWORK_SET_VOICE_CHANNEL(int channel) { Invoke(0xEF6212C2EFEF1A23, V(channel)); }
		public static void NETWORK_CLEAR_VOICE_CHANNEL() { Invoke(0xE036A705F989E049); }
		public static void NETWORK_APPLY_VOICE_PROXIMITY_OVERRIDE(float x, float y, float z) { Invoke(0xDBD2056652689917, V(x), V(y), V(z)); }
		public static void NETWORK_CLEAR_VOICE_PROXIMITY_OVERRIDE() { Invoke(0xF03755696450470C); }
		public static void NETWORK_ENABLE_VOICE_BANDWIDTH_RESTRICTION(Player player) { Invoke(0x5E3AA4CA2B6FB0EE, V(player)); }
		public static void NETWORK_DISABLE_VOICE_BANDWIDTH_RESTRICTION(Player player) { Invoke(0xCA575C391FEA25CC, V(player)); }
		// NETWORK_GET_M[A-U]
		public static void NETWORK_GET_MUTE_COUNT_FOR_PLAYER(Player p0, float* p1, float* p2) { Invoke(0xADB57E5B663CCA8B, V(p0), V(p1), V(p2)); }
		public static void NETWORK_SET_SPECTATOR_TO_NON_SPECTATOR_TEXT_CHAT(bool toggle) { Invoke(0x8EF52ACAECC51D9C, V(toggle)); }
		// Same as _IS_TEXT_CHAT_ACTIVE, except it does not check if the text chat HUD component is initialized, and therefore may crash.
		public static bool NETWORK_TEXT_CHAT_IS_TYPING() { return Invoke<bool>(0x5FCF4D7069B09026); }
		// Starts a new singleplayer game (at the prologue).
		public static void SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME() { Invoke(0x593850C16A36B692); }
		// In singleplayer this will re-load your game.
		// 
		// In FiveM / GTA:Online this disconnects you from the session, and starts loading single player, however you still remain connected to the server (only if you're the host, if you're not then you also (most likely) get disconnected from the server) and other players will not be able to join until you exit the game.
		// 
		// You might need to DoScreenFadeIn and ShutdownLoadingScreen otherwise you probably won't end up loading into SP at all.
		// 
		// Somewhat related note: opening the pause menu after loading into this 'singleplayer' mode crashes the game.
		public static bool SHUTDOWN_AND_LOAD_MOST_RECENT_SAVE() { return Invoke<bool>(0x9ECA15ADFE141431); }
		public static void NETWORK_SET_FRIENDLY_FIRE_OPTION(bool toggle) { Invoke(0xF808475FA571D823, V(toggle)); }
		// This native does absolutely nothing, just a nullsub
		public static void NETWORK_SET_RICH_PRESENCE(int p0, int p1, Any p2, Any p3) { Invoke(0x1DCCACDCFC569362, V(p0), V(p1), V(p2), V(p3)); }
		// This native does absolutely nothing, just a nullsub
		public static void NETWORK_SET_RICH_PRESENCE_STRING(int p0, string textLabel) { Invoke(0x3E200C2BCF4164EB, V(p0), V(textLabel)); }
		public static int NETWORK_GET_TIMEOUT_TIME() { return Invoke<int>(0x5ED0356A0CE3A34F); }
		// p4 and p5 are always 0 in scripts
		public static void NETWORK_LEAVE_PED_BEHIND_BEFORE_WARP(Player player, float x, float y, float z, bool p4, bool p5) { Invoke(0x9769F811D1785B03, V(player), V(x), V(y), V(z), V(p4), V(p5)); }
		public static void NETWORK_LEAVE_PED_BEHIND_BEFORE_CUTSCENE(Player player, bool p1) { Invoke(0xBF22E0F32968E967, V(player), V(p1)); }
		// entity must be a valid entity; ped can be NULL
		public static void REMOVE_ALL_STICKY_BOMBS_FROM_ENTITY(Entity entity, Ped ped) { Invoke(0x715135F4B82AC90D, V(entity), V(ped)); }
		public static void NETWORK_KEEP_ENTITY_COLLISION_DISABLED_AFTER_ANIM_SCENE(Any p0, Any p1) { Invoke(0x17C9E241111A674D, V(p0), V(p1)); }
		public static bool NETWORK_IS_ANY_PLAYER_NEAR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) { return Invoke<bool>(0x2E4C123D1C8A710E, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static bool NETWORK_CLAN_SERVICE_IS_VALID() { return Invoke<bool>(0x579CCED0265D4896); }
		public static bool NETWORK_CLAN_PLAYER_IS_ACTIVE(Any* gamerHandle) { return Invoke<bool>(0xB124B57F571D8F18, V(gamerHandle)); }
		// bufferSize is 35 in the scripts.
		// 
		// bufferSize is the elementCount of p0(desc), sizeof(p0) == 280 == p1*8 == 35 * 8, p2(netHandle) is obtained from NETWORK::NETWORK_HANDLE_FROM_PLAYER.  And no, I can't explain why 35 * sizeof(int) == 280 and not 140, but I'll get back to you on that.
		// 
		// the answer is: because p0 an int64_t* / int64_t[35].  and FYI p2 is an int64_t[13]
		// 
		// https://pastebin.com/cSZniHak
		public static bool NETWORK_CLAN_PLAYER_GET_DESC(Any* clanDesc, int bufferSize, Any* gamerHandle) { return Invoke<bool>(0xEEE6EACBE8874FBA, V(clanDesc), V(bufferSize), V(gamerHandle)); }
		// bufferSize is 35 in the scripts.
		public static bool NETWORK_CLAN_IS_ROCKSTAR_CLAN(Any* clanDesc, int bufferSize) { return Invoke<bool>(0x7543BB439F63792B, V(clanDesc), V(bufferSize)); }
		// bufferSize is 35 in the scripts.
		public static void NETWORK_CLAN_GET_UI_FORMATTED_TAG(Any* clanDesc, int bufferSize, char* formattedTag) { Invoke(0xF45352426FF3A4F0, V(clanDesc), V(bufferSize), V(formattedTag)); }
		public static int NETWORK_CLAN_GET_LOCAL_MEMBERSHIPS_COUNT() { return Invoke<int>(0x1F471B79ACC90BEF); }
		public static bool NETWORK_CLAN_GET_MEMBERSHIP_DESC(Any* memberDesc, int p1) { return Invoke<bool>(0x48DE78AF2C8885B8, V(memberDesc), V(p1)); }
		public static bool NETWORK_CLAN_DOWNLOAD_MEMBERSHIP(Any* gamerHandle) { return Invoke<bool>(0xA989044E70010ABE, V(gamerHandle)); }
		public static bool NETWORK_CLAN_DOWNLOAD_MEMBERSHIP_PENDING(Any* p0) { return Invoke<bool>(0x5B9E023DC6EBEDC0, V(p0)); }
		public static bool NETWORK_CLAN_ANY_DOWNLOAD_MEMBERSHIP_PENDING() { return Invoke<bool>(0xB3F64A6A91432477); }
		public static bool NETWORK_CLAN_REMOTE_MEMBERSHIPS_ARE_IN_CACHE(int* p0) { return Invoke<bool>(0xBB6E6FEE99D866B2, V(p0)); }
		public static int NETWORK_CLAN_GET_MEMBERSHIP_COUNT(int* p0) { return Invoke<int>(0xAAB11F6C4ADBC2C1, V(p0)); }
		public static bool NETWORK_CLAN_GET_MEMBERSHIP_VALID(int* p0, Any p1) { return Invoke<bool>(0x48A59CF88D43DF0E, V(p0), V(p1)); }
		public static bool NETWORK_CLAN_GET_MEMBERSHIP(int* p0, Any* clanMembership, int p2) { return Invoke<bool>(0xC8BC2011F67B3411, V(p0), V(clanMembership), V(p2)); }
		public static bool NETWORK_CLAN_JOIN(int clanDesc) { return Invoke<bool>(0x9FAAA4F4FC71F87F, V(clanDesc)); }
		// Only documented...
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool NETWORK_CLAN_CREWINFO_GET_STRING_VALUE(string animDict, string animName) { return Invoke<bool>(0x729E3401F0430686, V(animDict), V(animName)); }
		public static bool NETWORK_CLAN_CREWINFO_GET_CREWRANKTITLE(int p0, string p1) { return Invoke<bool>(0x2B51EDBEFC301339, V(p0), V(p1)); }
		public static bool NETWORK_CLAN_HAS_CREWINFO_METADATA_BEEN_RECEIVED() { return Invoke<bool>(0xC32EA7A2F6CA7557); }
		public static bool NETWORK_CLAN_GET_EMBLEM_TXD_NAME(Any* netHandle, char* txdName) { return Invoke<bool>(0x5835D9CD92E83184, V(netHandle), V(txdName)); }
		public static bool NETWORK_CLAN_REQUEST_EMBLEM(Any p0) { return Invoke<bool>(0x13518FF1C6B28938, V(p0)); }
		public static bool NETWORK_CLAN_IS_EMBLEM_READY(Any p0, Any* p1) { return Invoke<bool>(0xA134777FF7F33331, V(p0), V(p1)); }
		public static void NETWORK_CLAN_RELEASE_EMBLEM(Any p0) { Invoke(0x113E6E3E50E286B0, V(p0)); }
		public static bool NETWORK_GET_PRIMARY_CLAN_DATA_CLEAR() { return Invoke<bool>(0x9AA46BADAD0E27ED); }
		public static void NETWORK_GET_PRIMARY_CLAN_DATA_CANCEL() { Invoke(0x042E4B70B93E6054); }
		public static bool NETWORK_GET_PRIMARY_CLAN_DATA_START(Any* p0, Any p1) { return Invoke<bool>(0xCE86D8191B762107, V(p0), V(p1)); }
		public static bool NETWORK_GET_PRIMARY_CLAN_DATA_PENDING() { return Invoke<bool>(0xB5074DB804E28CE7); }
		public static bool NETWORK_GET_PRIMARY_CLAN_DATA_SUCCESS() { return Invoke<bool>(0x5B4F04F19376A0BA); }
		public static bool NETWORK_GET_PRIMARY_CLAN_DATA_NEW(Any* p0, Any* p1) { return Invoke<bool>(0xC080FF658B2E41DA, V(p0), V(p1)); }
		// Whether or not another player is allowed to take control of the entity
		public static void SET_NETWORK_ID_CAN_MIGRATE(int netId, bool toggle) { Invoke(0x299EEB23175895FC, V(netId), V(toggle)); }
		public static void SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES(int netId, bool toggle) { Invoke(0xE05E81A888FA63C8, V(netId), V(toggle)); }
		public static void SET_NETWORK_ID_ALWAYS_EXISTS_FOR_PLAYER(int netId, Player player, bool toggle) { Invoke(0xA8A024587329F36A, V(netId), V(player), V(toggle)); }
		// "No Reassign" in CPhysicalScriptGameStateDataNode
		public static void SET_NETWORK_ID_CAN_BE_REASSIGNED(int netId, bool toggle) { Invoke(0x9D724B400A7E8FFC, V(netId), V(toggle)); }
		public static void NETWORK_SET_ENTITY_CAN_BLEND(Entity entity, bool toggle) { Invoke(0xD830567D88A1E873, V(entity), V(toggle)); }
		public static void NETWORK_SET_OBJECT_CAN_BLEND_WHEN_FIXED(Obj obj, bool toggle) { Invoke(0x0379DAF89BA09AA5, V(obj), V(toggle)); }
		// if set to true other network players can't see it
		// if set to false other network player can see it
		// =========================================
		// ^^ I attempted this by grabbing an obj with GET_ENTITY_PLAYER_IS_FREE_AIMING_AT and setting this naive no matter the toggle he could still see it.
		// 
		// pc or last gen?
		// 
		// ^^ last-gen
		public static void NETWORK_SET_ENTITY_ONLY_EXISTS_FOR_PARTICIPANTS(Entity entity, bool toggle) { Invoke(0xF1CA12B18AEF5298, V(entity), V(toggle)); }
		public static void SET_NETWORK_ID_VISIBLE_IN_CUTSCENE(int netId, bool p1, bool p2) { Invoke(0xA6928482543022B4, V(netId), V(p1), V(p2)); }
		public static void SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_HACK(int netId, bool p1, bool p2) { Invoke(0x32EBD154CB6B8B99, V(netId), V(p1), V(p2)); }
		public static void SET_NETWORK_ID_VISIBLE_IN_CUTSCENE_REMAIN_HACK(Any p0, Any p1, Any p2) { Invoke(0x76B3F29D3F967692, V(p0), V(p1), V(p2)); }
		public static void SET_NETWORK_CUTSCENE_ENTITIES(bool toggle) { Invoke(0xAAA553E7DD28A457, V(toggle)); }
		// Getter for SET_NETWORK_CUTSCENE_ENTITIES.
		public static bool ARE_CUTSCENE_ENTITIES_NETWORKED() { return Invoke<bool>(0x66D6A5E9C511214A); }
		public static void SET_NETWORK_ID_PASS_CONTROL_IN_TUTORIAL(int netId, bool state) { Invoke(0x3FA36981311FA4FF, V(netId), V(state)); }
		public static bool IS_NETWORK_ID_OWNED_BY_PARTICIPANT(int netId) { return Invoke<bool>(0xA1607996431332DF, V(netId)); }
		public static void SET_REMOTE_PLAYER_VISIBLE_IN_CUTSCENE(Player player, bool locallyVisible) { Invoke(0x96320E6549DAE7B4, V(player), V(locallyVisible)); }
		public static void SET_LOCAL_PLAYER_VISIBLE_IN_CUTSCENE(bool p0, bool p1) { Invoke(0xD1065D68947E7B6E, V(p0), V(p1)); }
		public static void SET_LOCAL_PLAYER_INVISIBLE_LOCALLY(bool bIncludePlayersVehicle) { Invoke(0xE5F773C1A1D9D168, V(bIncludePlayersVehicle)); }
		public static void SET_LOCAL_PLAYER_VISIBLE_LOCALLY(bool bIncludePlayersVehicle) { Invoke(0x7619364C82D3BF14, V(bIncludePlayersVehicle)); }
		public static void SET_PLAYER_INVISIBLE_LOCALLY(Player player, bool bIncludePlayersVehicle) { Invoke(0x12B37D54667DB0B8, V(player), V(bIncludePlayersVehicle)); }
		public static void SET_PLAYER_VISIBLE_LOCALLY(Player player, bool bIncludePlayersVehicle) { Invoke(0xFAA10F1FAFB11AF2, V(player), V(bIncludePlayersVehicle)); }
		// Hardcoded to not work in SP.
		public static void FADE_OUT_LOCAL_PLAYER(bool p0) { Invoke(0x416DBD4CD6ED8DD2, V(p0)); }
		// normal - transition like when your coming out of LSC
		// slow - transition like when you walk into a mission
		//  
		public static void NETWORK_FADE_OUT_ENTITY(Entity entity, bool normal, bool slow) { Invoke(0xDE564951F95E09ED, V(entity), V(normal), V(slow)); }
		// state - 0 does 5 fades
		// state - 1 does 6 fades
		// 
		// p3: setting to 1 made vehicle fade in slower, probably "slow" as per NETWORK_FADE_OUT_ENTITY
		public static void NETWORK_FADE_IN_ENTITY(Entity entity, bool state, Any p2) { Invoke(0x1F4ED342ACEFE62D, V(entity), V(state), V(p2)); }
		public static bool NETWORK_IS_PLAYER_FADING(Player player) { return Invoke<bool>(0x631DC5DFF4B110E3, V(player)); }
		public static bool NETWORK_IS_ENTITY_FADING(Entity entity) { return Invoke<bool>(0x422F32CC7E56ABAD, V(entity)); }
		public static bool IS_PLAYER_IN_CUTSCENE(Player player) { return Invoke<bool>(0xE73092F4157CD126, V(player)); }
		public static void SET_ENTITY_VISIBLE_IN_CUTSCENE(Any p0, bool p1, bool p2) { Invoke(0xE0031D3C8F36AB82, V(p0), V(p1), V(p2)); }
		// Makes the provided entity visible for yourself for the current frame.
		public static void SET_ENTITY_LOCALLY_INVISIBLE(Entity entity) { Invoke(0xE135A9FF3F5D05D8, V(entity)); }
		public static void SET_ENTITY_LOCALLY_VISIBLE(Entity entity) { Invoke(0x241E289B5C059EDC, V(entity)); }
		public static bool IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID(int netID) { return Invoke<bool>(0x6E192E33AD436366, V(netID)); }
		public static void ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID(int netID, bool toggle) { Invoke(0xD45B1FFCCD52FF19, V(netID), V(toggle)); }
		public static bool IS_DAMAGE_TRACKER_ACTIVE_ON_PLAYER(Player player) { return Invoke<bool>(0xB2092A1EAA7FD45F, V(player)); }
		public static void ACTIVATE_DAMAGE_TRACKER_ON_PLAYER(Player player, bool toggle) { Invoke(0xBEC0816FF5ACBCDA, V(player), V(toggle)); }
		public static bool IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE(float p0, float p1, float p2, float p3) { return Invoke<bool>(0xD82CF8E64C8729D8, V(p0), V(p1), V(p2), V(p3)); }
		public static bool IS_SPHERE_VISIBLE_TO_PLAYER(Any p0, float p1, float p2, float p3, float p4) { return Invoke<bool>(0xDC3A310219E5DA62, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void RESERVE_NETWORK_MISSION_OBJECTS(int amount) { Invoke(0x4E5C93BD0C32FBF8, V(amount)); }
		public static void RESERVE_NETWORK_MISSION_PEDS(int amount) { Invoke(0xB60FEBA45333D36F, V(amount)); }
		public static void RESERVE_NETWORK_MISSION_VEHICLES(int amount) { Invoke(0x76B02E21ED27A469, V(amount)); }
		public static void RESERVE_LOCAL_NETWORK_MISSION_OBJECTS(int amount) { Invoke(0x797F9C5E661D920E, V(amount)); }
		public static void RESERVE_LOCAL_NETWORK_MISSION_PEDS(int amount) { Invoke(0x2C8DF5D129595281, V(amount)); }
		public static void RESERVE_LOCAL_NETWORK_MISSION_VEHICLES(int amount) { Invoke(0x42613035157E4208, V(amount)); }
		public static bool CAN_REGISTER_MISSION_OBJECTS(int amount) { return Invoke<bool>(0x800DD4721A8B008B, V(amount)); }
		public static bool CAN_REGISTER_MISSION_PEDS(int amount) { return Invoke<bool>(0xBCBF4FEF9FA5D781, V(amount)); }
		public static bool CAN_REGISTER_MISSION_VEHICLES(int amount) { return Invoke<bool>(0x7277F1F2E085EE74, V(amount)); }
		public static bool CAN_REGISTER_MISSION_PICKUPS(int amount) { return Invoke<bool>(0x0A49D1CB6E34AF72, V(amount)); }
		public static bool CAN_REGISTER_MISSION_DOORS(Any p0) { return Invoke<bool>(0xE16AA70CE9BEEDC3, V(p0)); }
		public static bool CAN_REGISTER_MISSION_ENTITIES(int ped_amt, int vehicle_amt, int object_amt, int pickup_amt) { return Invoke<bool>(0x69778E7564BADE6D, V(ped_amt), V(vehicle_amt), V(object_amt), V(pickup_amt)); }
		// p0 appears to be for MP
		public static int GET_NUM_RESERVED_MISSION_OBJECTS(bool p0, Any p1) { return Invoke<int>(0xAA81B5F10BC43AC2, V(p0), V(p1)); }
		// p0 appears to be for MP
		public static int GET_NUM_RESERVED_MISSION_PEDS(bool p0, Any p1) { return Invoke<int>(0x1F13D5AE5CB17E17, V(p0), V(p1)); }
		// p0 appears to be for MP
		public static int GET_NUM_RESERVED_MISSION_VEHICLES(bool p0, Any p1) { return Invoke<int>(0xCF3A965906452031, V(p0), V(p1)); }
		public static int GET_NUM_CREATED_MISSION_OBJECTS(bool p0) { return Invoke<int>(0x12B6281B6C6706C0, V(p0)); }
		public static int GET_NUM_CREATED_MISSION_PEDS(bool p0) { return Invoke<int>(0xCB215C4B56A7FAE7, V(p0)); }
		public static int GET_NUM_CREATED_MISSION_VEHICLES(bool p0) { return Invoke<int>(0x0CD9AB83489430EA, V(p0)); }
		public static void GET_RESERVED_MISSION_ENTITIES_IN_AREA(float x, float y, float z, Any p3, Any* out1, Any* out2, Any* out3) { Invoke(0xE42D626EEC94E5D9, V(x), V(y), V(z), V(p3), V(out1), V(out2), V(out3)); }
		public static int GET_MAX_NUM_NETWORK_OBJECTS() { return Invoke<int>(0xC7BE335216B5EC7C); }
		public static int GET_MAX_NUM_NETWORK_PEDS() { return Invoke<int>(0x0C1F7D49C39D2289); }
		public static int GET_MAX_NUM_NETWORK_VEHICLES() { return Invoke<int>(0x0AFCE529F69B21FF); }
		public static int GET_MAX_NUM_NETWORK_PICKUPS() { return Invoke<int>(0xA72835064DD63E4C); }
		public static void NETWORK_SET_OBJECT_SCOPE_DISTANCE(Obj obj, float range) { Invoke(0xBA7F0B77D80A4EB7, V(obj), V(range)); }
		public static void NETWORK_ALLOW_CLONING_WHILE_IN_TUTORIAL(Any p0, Any p1) { Invoke(0x0F1A4B45B7693B95, V(p0), V(p1)); }
		// A value between 1.0 and 5.0
		// 
		// _NETWORK_SET_TASK_CUTSCENE_PROXIMITY_SCALE?
		public static void NETWORK_SET_TASK_CUTSCENE_INSCOPE_MULTIPLER(Any p0) { Invoke(0xC6FCEE21C6FCEE21, V(p0)); }
		public static void _NETWORK_HIDE_ENTITY_IN_TUTORIAL_SESSION(int netHandle, bool hide) { Invoke(0xCFE359CCCFE359CC, V(netHandle), V(hide)); }
		public static int GET_NETWORK_TIME() { return Invoke<int>(0x7A5487FE9FAA6B48); }
		// Returns the same value as GET_NETWORK_TIME in freemode, but as opposed to `GET_NETWORK_TIME` it always gets the most recent time, instead of once per tick.
		// Could be used for benchmarking since it can return times in ticks.
		public static int GET_NETWORK_TIME_ACCURATE() { return Invoke<int>(0x89023FBBF9200E9F); }
		public static bool HAS_NETWORK_TIME_STARTED() { return Invoke<bool>(0x46718ACEEDEAFC84); }
		// Adds the first argument to the second.
		public static int GET_TIME_OFFSET(int timeA, int timeB) { return Invoke<int>(0x017008CCDAD48503, V(timeA), V(timeB)); }
		// Subtracts the second argument from the first, then returns whether the result is negative.
		public static bool IS_TIME_LESS_THAN(int timeA, int timeB) { return Invoke<bool>(0xCB2CF5148012C8D0, V(timeA), V(timeB)); }
		// Subtracts the first argument from the second, then returns whether the result is negative.
		public static bool IS_TIME_MORE_THAN(int timeA, int timeB) { return Invoke<bool>(0xDE350F8651E4346C, V(timeA), V(timeB)); }
		// Returns true if the two times are equal; otherwise returns false.
		public static bool IS_TIME_EQUAL_TO(int timeA, int timeB) { return Invoke<bool>(0xF5BC95857BD6D512, V(timeA), V(timeB)); }
		// Subtracts the second argument from the first.
		public static int GET_TIME_DIFFERENCE(int timeA, int timeB) { return Invoke<int>(0xA2C6FC031D46FFF0, V(timeA), V(timeB)); }
		public static byte* GET_TIME_AS_STRING(int time) { return PInvoke<byte>(0x9E23B1777A927DAD, V(time)); }
		// Same as GET_CLOUD_TIME_AS_INT but returns the value as a hex string (%I64X).
		public static byte* GET_CLOUD_TIME_AS_STRING() { return PInvoke<byte>(0xF12E6CD06C73D69E); }
		// Returns POSIX timestamp, an int representing the cloud time.
		public static int GET_CLOUD_TIME_AS_INT() { return Invoke<int>(0x9A73240B49945C76); }
		// Takes the specified time and writes it to the structure specified in the second argument.
		// 
		// struct date_time
		// {
		//     int year;
		//     int PADDING1;
		//     int month;
		//     int PADDING2;
		//     int day;
		//     int PADDING3;
		//     int hour;
		//     int PADDING4;
		//     int minute;
		//     int PADDING5;
		//     int second;
		//     int PADDING6;
		// };
		public static void CONVERT_POSIX_TIME(int posixTime, Any* timeStructure) { Invoke(0xAC97AF97FA68E5D5, V(posixTime), V(timeStructure)); }
		public static void NETWORK_SET_IN_SPECTATOR_MODE(bool toggle, Ped playerPed) { Invoke(0x423DE3854BB50894, V(toggle), V(playerPed)); }
		public static void NETWORK_SET_IN_SPECTATOR_MODE_EXTENDED(bool toggle, Ped playerPed, bool p2) { Invoke(0x419594E137637120, V(toggle), V(playerPed), V(p2)); }
		public static void NETWORK_SET_IN_FREE_CAM_MODE(bool toggle) { Invoke(0xFC18DB55AE19E046, V(toggle)); }
		public static void NETWORK_SET_ANTAGONISTIC_TO_PLAYER(bool toggle, Player player) { Invoke(0x5C707A667DF8B9FA, V(toggle), V(player)); }
		public static bool NETWORK_IS_IN_SPECTATOR_MODE() { return Invoke<bool>(0x048746E388762E11); }
		public static void NETWORK_SET_IN_MP_CUTSCENE(bool p0, bool p1) { Invoke(0x9CA5DE655269FEC4, V(p0), V(p1)); }
		public static bool NETWORK_IS_IN_MP_CUTSCENE() { return Invoke<bool>(0x6CC27C9FA2040220); }
		public static bool NETWORK_IS_PLAYER_IN_MP_CUTSCENE(Player player) { return Invoke<bool>(0x63F9EE203C3619F2, V(player)); }
		public static void NETWORK_HIDE_PROJECTILE_IN_CUTSCENE() { Invoke(0xFAC18E7356BD3210); }
		public static void SET_NETWORK_VEHICLE_RESPOT_TIMER(int netId, int time, Any p2, Any p3) { Invoke(0xEC51713AB6EC36E8, V(netId), V(time), V(p2), V(p3)); }
		public static bool IS_NETWORK_VEHICLE_RUNNING_RESPOT_TIMER(int networkID) { return Invoke<bool>(0xDD7CEF5B3A4DA8A6, V(networkID)); }
		public static void SET_NETWORK_VEHICLE_AS_GHOST(Vehicle vehicle, bool toggle) { Invoke(0x6274C4712850841E, V(vehicle), V(toggle)); }
		// rage::netBlenderLinInterp::GetPositionMaxForUpdateLevel
		public static void SET_NETWORK_VEHICLE_MAX_POSITION_DELTA_MULTIPLIER(Vehicle vehicle, float multiplier) { Invoke(0xA2A707979FE754DC, V(vehicle), V(multiplier)); }
		// Enables a periodic ShapeTest within the NetBlender and invokes rage::netBlenderLinInterp::GoStraightToTarget (or some functional wrapper).
		public static void SET_NETWORK_ENABLE_HIGH_SPEED_EDGE_FALL_DETECTION(Vehicle vehicle, bool toggle) { Invoke(0x838DA0936A24ED4D, V(vehicle), V(toggle)); }
		public static void SET_LOCAL_PLAYER_AS_GHOST(bool toggle, bool p1) { Invoke(0x5FFE9B4144F9712F, V(toggle), V(p1)); }
		public static bool IS_ENTITY_A_GHOST(Entity entity) { return Invoke<bool>(0x21D04D7BC538C146, V(entity)); }
		public static void SET_NON_PARTICIPANTS_OF_THIS_SCRIPT_AS_GHOSTS(bool p0) { Invoke(0x13F1FCB111B820B0, V(p0)); }
		// Enables ghosting between specific players
		public static void SET_REMOTE_PLAYER_AS_GHOST(Player player, bool p1) { Invoke(0xA7C511FA1C5BDA38, V(player), V(p1)); }
		// Must be a value between 1 and 254
		public static void SET_GHOST_ALPHA(int alpha) { Invoke(0x658500AE6D723A7E, V(alpha)); }
		// Resets the entity ghost alpha to the default value (128)
		public static void RESET_GHOST_ALPHA() { Invoke(0x17330EBF2F2124A8); }
		public static void SET_ENTITY_GHOSTED_FOR_GHOST_PLAYERS(Entity entity, bool toggle) { Invoke(0x4BA166079D658ED4, V(entity), V(toggle)); }
		public static void SET_INVERT_GHOSTING(bool p0) { Invoke(0xD7B6C73CAD419BCF, V(p0)); }
		public static bool IS_ENTITY_IN_GHOST_COLLISION(Entity entity) { return Invoke<bool>(0x7EF7649B64D7FF10, V(entity)); }
		// reportData includes mc, ceo, yacht and licenceplate names
		public static void _SET_FREEMODE_REPORT_DATA(Any* gamerHandle, Any* reportData) { Invoke(0x527803286A8B6C81, V(gamerHandle), V(reportData)); }
		public static bool IS_OBJECT_REASSIGNMENT_IN_PROGRESS() { return Invoke<bool>(0x28123C8B056CC8AA); }
		public static void USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR(bool toggle) { Invoke(0x77758139EC9B66C7, V(toggle)); }
		public static int NETWORK_CREATE_SYNCHRONISED_SCENE(float x, float y, float z, float xRot, float yRot, float zRot, int rotationOrder, bool useOcclusionPortal, bool looped, float p9, float animTime, float p11) { return Invoke<int>(0x7CD6BC4C2BBDD526, V(x), V(y), V(z), V(xRot), V(yRot), V(zRot), V(rotationOrder), V(useOcclusionPortal), V(looped), V(p9), V(animTime), V(p11)); }
		public static void NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE(Ped ped, int netScene, string animDict, string animnName, float speed, float speedMultiplier, int duration, int flag, float playbackRate, Any p9) { Invoke(0x742A637471BCECD9, V(ped), V(netScene), V(animDict), V(animnName), V(speed), V(speedMultiplier), V(duration), V(flag), V(playbackRate), V(p9)); }
		public static void NETWORK_ADD_PED_TO_SYNCHRONISED_SCENE_WITH_IK(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) { Invoke(0xA5EAFE473E45C442, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9)); }
		public static void NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE(Entity entity, int netScene, string animDict, string animName, float speed, float speedMulitiplier, int flag) { Invoke(0xF2404D68CBC855FA, V(entity), V(netScene), V(animDict), V(animName), V(speed), V(speedMulitiplier), V(flag)); }
		// Similar structure as NETWORK_ADD_ENTITY_TO_SYNCHRONISED_SCENE but it includes this time a hash.
		// In casino_slots it is used one time in a synced scene involving a ped and the slot machine?
		public static void NETWORK_ADD_MAP_ENTITY_TO_SYNCHRONISED_SCENE(int netScene, Hash modelHash, float x, float y, float z, float p5, string p6, float p7, float p8, int flags) { Invoke(0x45F35C0EDC33B03B, V(netScene), V(modelHash), V(x), V(y), V(z), V(p5), V(p6), V(p7), V(p8), V(flags)); }
		public static void NETWORK_ADD_SYNCHRONISED_SCENE_CAMERA(int netScene, string animDict, string animName) { Invoke(0xCF8BD3B0BD6D42D7, V(netScene), V(animDict), V(animName)); }
		public static void NETWORK_ATTACH_SYNCHRONISED_SCENE_TO_ENTITY(int netScene, Entity entity, int bone) { Invoke(0x478DCBD2A98B705A, V(netScene), V(entity), V(bone)); }
		public static void NETWORK_START_SYNCHRONISED_SCENE(int netScene) { Invoke(0x9A1B3FCDB36C8697, V(netScene)); }
		public static void NETWORK_STOP_SYNCHRONISED_SCENE(int netScene) { Invoke(0xC254481A4574CB2F, V(netScene)); }
		public static int NETWORK_GET_LOCAL_SCENE_FROM_NETWORK_ID(int netId) { return Invoke<int>(0x02C40BF885C567B6, V(netId)); }
		public static void NETWORK_FORCE_LOCAL_USE_OF_SYNCED_SCENE_CAMERA(int netScene) { Invoke(0xC9B43A33D09CADA7, V(netScene)); }
		public static void NETWORK_ALLOW_REMOTE_SYNCED_SCENE_LOCAL_PLAYER_REQUESTS(Any p0) { Invoke(0x144DA052257AE7D8, V(p0)); }
		// p0 is always 0. p1 is pointing to a global.
		public static bool NETWORK_FIND_LARGEST_BUNCH_OF_PLAYERS(int p0, Any p1) { return Invoke<bool>(0xFB1F9381E80FA13F, V(p0), V(p1)); }
		// One of the first things it does is get the players ped.
		// Then it calls a function that is used in some tasks and ped based functions.
		// p5, p6, p7 is another coordinate (or zero), often related to `GET_BLIP_COORDS, in the decompiled scripts.
		public static bool NETWORK_START_RESPAWN_SEARCH_FOR_PLAYER(Player player, float x, float y, float z, float radius, float p5, float p6, float p7, int flags) { return Invoke<bool>(0x5A6FFA2433E2F14C, V(player), V(x), V(y), V(z), V(radius), V(p5), V(p6), V(p7), V(flags)); }
		// p8, p9, p10 is another coordinate, or zero, often related to `GET_BLIP_COORDS in the decompiled scripts.
		public static bool NETWORK_START_RESPAWN_SEARCH_IN_ANGLED_AREA_FOR_PLAYER(Player player, float x1, float y1, float z1, float x2, float y2, float z2, float width, float p8, float p9, float p10, int flags) { return Invoke<bool>(0x4BA92A18502BCA61, V(player), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(p8), V(p9), V(p10), V(flags)); }
		public static int NETWORK_QUERY_RESPAWN_RESULTS(Any* p0) { return Invoke<int>(0x3C891A251567DFCE, V(p0)); }
		public static void NETWORK_CANCEL_RESPAWN_SEARCH() { Invoke(0xFB8F2A6F3DF08CBE); }
		// Based on scripts such as in freemode.c how they call their vars vVar and fVar the 2nd and 3rd param it a Vector3 and Float, but the first is based on get_random_int_in_range..
		public static void NETWORK_GET_RESPAWN_RESULT(int randomInt, Vector3* coordinates, float* heading) { Invoke(0x371EA43692861CF1, V(randomInt), V(coordinates), V(heading)); }
		public static int NETWORK_GET_RESPAWN_RESULT_FLAGS(int p0) { return Invoke<int>(0x6C34F1208B8923FD, V(p0)); }
		public static void NETWORK_START_SOLO_TUTORIAL_SESSION() { Invoke(0x17E0198B3882C2CB); }
		// teamId must be < 3, instanceId must be < 64
		public static void NETWORK_ALLOW_GANG_TO_JOIN_TUTORIAL_SESSION(int teamId, int instanceId) { Invoke(0xFB680D403909DC70, V(teamId), V(instanceId)); }
		public static void NETWORK_END_TUTORIAL_SESSION() { Invoke(0xD0AFAFF5A51D72F7); }
		public static bool NETWORK_IS_IN_TUTORIAL_SESSION() { return Invoke<bool>(0xADA24309FE08DACF); }
		public static bool NETWORK_WAITING_POP_CLEAR_TUTORIAL_SESSION() { return Invoke<bool>(0xB37E4E6A2388CA7B); }
		public static bool NETWORK_IS_TUTORIAL_SESSION_CHANGE_PENDING() { return Invoke<bool>(0x35F0B98A8387274D); }
		public static int NETWORK_GET_PLAYER_TUTORIAL_SESSION_INSTANCE(Player player) { return Invoke<int>(0x3B39236746714134, V(player)); }
		public static bool NETWORK_ARE_PLAYERS_IN_SAME_TUTORIAL_SESSION(Player player, int index) { return Invoke<bool>(0x9DE986FC9A87C474, V(player), V(index)); }
		public static void NETWORK_BLOCK_PROXY_MIGRATION_BETWEEN_TUTORIAL_SESSIONS(Any p0) { Invoke(0xFEA7A352DDB34D52, V(p0)); }
		public static void NETWORK_CONCEAL_PLAYER(Player player, bool toggle, bool p2) { Invoke(0xBBDF066252829606, V(player), V(toggle), V(p2)); }
		public static bool NETWORK_IS_PLAYER_CONCEALED(Player player) { return Invoke<bool>(0x919B3C98ED8292F9, V(player)); }
		public static void NETWORK_CONCEAL_ENTITY(Entity entity, bool toggle) { Invoke(0x1632BE0AC1E62876, V(entity), V(toggle)); }
		// Note: This only works for vehicles, which appears to be a bug (since the setter _does_ work for every entity type and the name is 99% correct).
		public static bool NETWORK_IS_ENTITY_CONCEALED(Entity entity) { return Invoke<bool>(0x71302EC70689052A, V(entity)); }
		// Works in Singleplayer too.
		// Passing wrong data (e.g. hours above 23) will cause the game to crash.
		public static void NETWORK_OVERRIDE_CLOCK_TIME(int hours, int minutes, int seconds) { Invoke(0xE679E3E06E363892, V(hours), V(minutes), V(seconds)); }
		public static void NETWORK_OVERRIDE_CLOCK_RATE(int ms) { Invoke(0x42BF1D2E723B6D7E, V(ms)); }
		public static void NETWORK_CLEAR_CLOCK_TIME_OVERRIDE() { Invoke(0xD972DF67326F966E); }
		public static bool NETWORK_IS_CLOCK_TIME_OVERRIDDEN() { return Invoke<bool>(0xD7C95D322FF57522); }
		public static int NETWORK_ADD_ENTITY_AREA(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<int>(0x494C8FB299290269, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// To remove, see: NETWORK_REMOVE_ENTITY_AREA
		// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
		public static int NETWORK_ADD_ENTITY_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width) { return Invoke<int>(0x376C6375BA60293A, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width)); }
		public static int NETWORK_ADD_CLIENT_ENTITY_AREA(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<int>(0x25B99872D588A101, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		public static int NETWORK_ADD_CLIENT_ENTITY_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float radius) { return Invoke<int>(0x2B1C623823DB0D9D, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(radius)); }
		public static bool NETWORK_REMOVE_ENTITY_AREA(int areaHandle) { return Invoke<bool>(0x93CF869BAA0C4874, V(areaHandle)); }
		public static bool NETWORK_ENTITY_AREA_DOES_EXIST(int areaHandle) { return Invoke<bool>(0xE64A3CA08DFA37A9, V(areaHandle)); }
		public static bool NETWORK_ENTITY_AREA_HAVE_ALL_REPLIED(int areaHandle) { return Invoke<bool>(0x4DF7CFFF471A7FB1, V(areaHandle)); }
		public static bool NETWORK_ENTITY_AREA_IS_OCCUPIED(int areaHandle) { return Invoke<bool>(0x4A2D4E8BF4265B0F, V(areaHandle)); }
		public static void NETWORK_USE_HIGH_PRECISION_BLENDING(int netID, bool toggle) { Invoke(0x2B1813ABA29016C5, V(netID), V(toggle)); }
		public static void NETWORK_SET_CUSTOM_ARENA_BALL_PARAMS(int netId) { Invoke(0xA6FCECCF4721D679, V(netId)); }
		public static void NETWORK_ENTITY_USE_HIGH_PRECISION_ROTATION(int netId, bool toggle) { Invoke(0x95BAF97C82464629, V(netId), V(toggle)); }
		public static bool NETWORK_REQUEST_CLOUD_BACKGROUND_SCRIPTS() { return Invoke<bool>(0x924426BFFD82E915); }
		public static bool NETWORK_IS_CLOUD_BACKGROUND_SCRIPT_REQUEST_PENDING() { return Invoke<bool>(0x8132C0EB8B2B3293); }
		public static void NETWORK_REQUEST_CLOUD_TUNABLES() { Invoke(0x42FB3B532D526E6C); }
		public static bool NETWORK_IS_TUNABLE_CLOUD_REQUEST_PENDING() { return Invoke<bool>(0x0467C11ED88B7D28); }
		// Actually returns the version (TUNABLE_VERSION)
		public static int NETWORK_GET_TUNABLE_CLOUD_CRC() { return Invoke<int>(0x10BD227A753B0D84); }
		// Sets up tunable contexts for _NETWORK_GET_TUNABLES_REGISTRATION_{bool|INT|FLOAT}
		public static void _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS(Any* tunableContextData) { Invoke(0x014A73449675121D, V(tunableContextData)); }
		// Clears tunable contexts that were set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS
		public static void _NETWORK_CLEAR_TUNABLES_REGISTRATION_CONTEXTS() { Invoke(0x0C87C83C8950432B); }
		// Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
		// Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
		public static bool _NETWORK_GET_TUNABLES_REGISTRATION_BOOL(Hash tunableName, bool defaultValue) { return Invoke<bool>(0xB327CF1B8C2C0EA3, V(tunableName), V(defaultValue)); }
		// Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
		// Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
		public static int _NETWORK_GET_TUNABLES_REGISTRATION_INT(Hash tunableName, int defaultValue) { return Invoke<int>(0x0D94071E55F4C9CE, V(tunableName), V(defaultValue)); }
		// Checks if the given tunable exists and returns its value. Otherwise returns defaultValue.
		// Possible tunable contexts must first be set up using _NETWORK_SET_TUNABLES_REGISTRATION_CONTEXTS.
		public static float _NETWORK_GET_TUNABLES_REGISTRATION_FLOAT(Hash tunableName, float defaultValue) { return Invoke<float>(0x367E5E33E7F0DD1A, V(tunableName), V(defaultValue)); }
		public static bool NETWORK_DOES_TUNABLE_EXIST(string tunableContext, string tunableName) { return Invoke<bool>(0x85E5F8B9B898B20A, V(tunableContext), V(tunableName)); }
		public static bool NETWORK_ACCESS_TUNABLE_INT(string tunableContext, string tunableName, int* value) { return Invoke<bool>(0x8BE1146DFD5D4468, V(tunableContext), V(tunableName), V(value)); }
		public static bool NETWORK_ACCESS_TUNABLE_FLOAT(string tunableContext, string tunableName, float* value) { return Invoke<bool>(0xE5608CA7BC163A5F, V(tunableContext), V(tunableName), V(value)); }
		public static bool NETWORK_ACCESS_TUNABLE_BOOL(string tunableContext, string tunableName) { return Invoke<bool>(0xAA6A47A573ABB75A, V(tunableContext), V(tunableName)); }
		public static bool NETWORK_DOES_TUNABLE_EXIST_HASH(Hash tunableContext, Hash tunableName) { return Invoke<bool>(0xE4E53E1419D81127, V(tunableContext), V(tunableName)); }
		public static bool NETWORK_ACCESS_TUNABLE_MODIFICATION_DETECTION_CLEAR() { return Invoke<bool>(0xFAFC23AEE23868DB); }
		public static bool NETWORK_ACCESS_TUNABLE_INT_HASH(Hash tunableContext, Hash tunableName, int* value) { return Invoke<bool>(0x40FCE03E50E8DBE8, V(tunableContext), V(tunableName), V(value)); }
		public static bool NETWORK_ACCESS_TUNABLE_INT_MODIFICATION_DETECTION_REGISTRATION_HASH(Hash contextHash, Hash nameHash, int* value) { return Invoke<bool>(0x3A8B55FDA4C8DDEF, V(contextHash), V(nameHash), V(value)); }
		public static bool NETWORK_ACCESS_TUNABLE_FLOAT_HASH(Hash tunableContext, Hash tunableName, float* value) { return Invoke<bool>(0x972BC203BBC4C4D5, V(tunableContext), V(tunableName), V(value)); }
		public static bool NETWORK_ACCESS_TUNABLE_FLOAT_MODIFICATION_DETECTION_REGISTRATION_HASH(Hash contextHash, Hash nameHash, float* value) { return Invoke<bool>(0x1950DAE9848A4739, V(contextHash), V(nameHash), V(value)); }
		public static bool NETWORK_ACCESS_TUNABLE_BOOL_HASH(Hash tunableContext, Hash tunableName) { return Invoke<bool>(0xEA16B69D93D71A45, V(tunableContext), V(tunableName)); }
		public static bool NETWORK_ACCESS_TUNABLE_BOOL_MODIFICATION_DETECTION_REGISTRATION_HASH(Hash contextHash, Hash nameHash, bool* value) { return Invoke<bool>(0x697F508861875B42, V(contextHash), V(nameHash), V(value)); }
		// Returns defaultValue if the tunable doesn't exist.
		public static bool NETWORK_TRY_ACCESS_TUNABLE_BOOL_HASH(Hash tunableContext, Hash tunableName, bool defaultValue) { return Invoke<bool>(0xC7420099936CE286, V(tunableContext), V(tunableName), V(defaultValue)); }
		// Return the content modifier id (the tunables context if you want) of a specific content.
		// 
		// It takes the content hash (which is the mission id hash), and return the content modifier id, used as the tunables context.
		// 
		// The mission id can be found on the Social club, for example, 'socialclub.rockstargames.com/games/gtav/jobs/job/A8M6Bz8MLEC5xngvDCzGwA'
		// 
		// 'A8M6Bz8MLEC5xngvDCzGwA' is the mission id, so the game hash this and use it as the parameter for this native.
		// 
		public static int NETWORK_GET_CONTENT_MODIFIER_LIST_ID(Hash contentHash) { return Invoke<int>(0x187382F8A3E0A6C3, V(contentHash)); }
		public static int NETWORK_GET_BONE_ID_OF_FATAL_HIT() { return Invoke<int>(0x7DB53B37A2F211A0); }
		public static void NETWORK_RESET_BODY_TRACKER() { Invoke(0x72433699B4E6DD64); }
		public static int NETWORK_GET_NUMBER_BODY_TRACKER_HITS() { return Invoke<int>(0xD38C4A6D047C019D); }
		public static bool NETWORK_HAS_BONE_BEEN_HIT_BY_KILLER(int boneIndex) { return Invoke<bool>(0x2E0BF682CC778D49, V(boneIndex)); }
		public static bool NETWORK_SET_ATTRIBUTE_DAMAGE_TO_PLAYER(Ped ped, Player player) { return Invoke<bool>(0x0EDE326D47CD0F3E, V(ped), V(player)); }
		// Allows vehicle wheels to be destructible even when the vehicle entity is invincible.
		public static void NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_DAMAGE(Entity entity, bool toggle) { Invoke(0x890E2C5ABED7236D, V(entity), V(toggle)); }
		public static void _NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_PED_DAMAGE(Entity entity, bool trigger) { Invoke(0xE9D0244ACBEE1BC4, V(entity), V(trigger)); }
		public static void NETWORK_TRIGGER_DAMAGE_EVENT_FOR_ZERO_WEAPON_HASH(Entity entity, bool toggle) { Invoke(0x38B7C51AB1EDC7D8, V(entity), V(toggle)); }
		public static void NETWORK_SET_NO_LONGER_NEEDED(Entity entity, bool toggle) { Invoke(0x3FC795691834481D, V(entity), V(toggle)); }
		// In the console script dumps, this is only referenced once. 
		// NETWORK::NETWORK_EXPLODE_VEHICLE(vehicle, 1, 0, 0);
		// 
		// ^^^^^ That must be PC script dumps? In X360 Script Dumps it is reference a few times with 2 differences in the parameters.
		// Which as you see below is 1, 0, 0 + 1, 1, 0 + 1, 0, and a *param?
		// 
		// am_plane_takedown.c 
		// network_explode_vehicle(net_to_veh(Local_40.imm_2), 1, 1, 0);
		// 
		// armenian2.c 
		// network_explode_vehicle(Local_80[6 <2>], 1, 0, 0);
		// 
		// fm_horde_controler.c
		// network_explode_vehicle(net_to_veh(*uParam0), 1, 0, *uParam0);
		// 
		// fm_mission_Controller->c, has 6 hits so not going to list them.
		// 
		// Side note, setting the first parameter to 0 seems to mute sound or so?
		// 
		// Seems it's like ADD_EXPLOSION, etc. the first 2 params. The 3rd atm no need to worry since it always seems to be 0.
		// 
		public static bool NETWORK_EXPLODE_VEHICLE(Vehicle vehicle, bool isAudible, bool isInvisible, int netId) { return Invoke<bool>(0x301A42153C9AD707, V(vehicle), V(isAudible), V(isInvisible), V(netId)); }
		public static void NETWORK_EXPLODE_HELI(Vehicle vehicle, bool isAudible, bool isInvisible, int netId) { Invoke(0x2A5E0621DD815A9A, V(vehicle), V(isAudible), V(isInvisible), V(netId)); }

		public static void NETWORK_USE_LOGARITHMIC_BLENDING_THIS_FRAME(Entity entity) { Invoke(0xCD71A4ECAB22709E, V(entity)); }
		public static void NETWORK_OVERRIDE_COORDS_AND_HEADING(Entity entity, float x, float y, float z, float heading) { Invoke(0xA7E30DE9272B6D49, V(entity), V(x), V(y), V(z), V(heading)); }
		public static void NETWORK_ENABLE_EXTRA_VEHICLE_ORIENTATION_BLEND_CHECKS(int netId, bool toggle) { Invoke(0xE6717E652B8C8D8A, V(netId), V(toggle)); }
		public static void NETWORK_DISABLE_PROXIMITY_MIGRATION(int netID) { Invoke(0x407091CF6037118E, V(netID)); }
		// value must be < 255
		public static void NETWORK_SET_PROPERTY_ID(int id) { Invoke(0x1775961C2FBBCB5C, V(id)); }
		public static void NETWORK_CLEAR_PROPERTY_ID() { Invoke(0xC2B82527CA77053E); }
		// p0 in the decompiled scripts is always the stat mesh_texblend * 0.07 to int
		public static void NETWORK_SET_PLAYER_MENTAL_STATE(int p0) { Invoke(0x367EF5E2F439B4C6, V(p0)); }
		public static void NETWORK_SET_MINIMUM_RANK_FOR_MISSION(bool p0) { Invoke(0x94538037EE44F5CF, V(p0)); }
		public static void NETWORK_CACHE_LOCAL_PLAYER_HEAD_BLEND_DATA() { Invoke(0xBD0BE0BFC927EAC1); }
		public static bool NETWORK_HAS_CACHED_PLAYER_HEAD_BLEND_DATA(Player player) { return Invoke<bool>(0x237D5336A9A54108, V(player)); }
		public static bool NETWORK_APPLY_CACHED_PLAYER_HEAD_BLEND_DATA(Ped ped, Player player) { return Invoke<bool>(0x99B72C7ABDE5C910, V(ped), V(player)); }
		public static int GET_NUM_COMMERCE_ITEMS() { return Invoke<int>(0xF2EAC213D5EA0623); }
		public static bool IS_COMMERCE_DATA_VALID() { return Invoke<bool>(0xEA14EEF5B7CD2C30); }
		// Does nothing (it's a nullsub).
		public static void TRIGGER_COMMERCE_DATA_FETCH(Any p0) { Invoke(0xB606E6CC59664972, V(p0)); }
		public static bool IS_COMMERCE_DATA_FETCH_IN_PROGRESS() { return Invoke<bool>(0x1D4DC17C38FEAFF0); }
		public static byte* GET_COMMERCE_ITEM_ID(int index) { return PInvoke<byte>(0x662635855957C411, V(index)); }
		public static byte* GET_COMMERCE_ITEM_NAME(int index) { return PInvoke<byte>(0xB4271092CA7EDF48, V(index)); }
		public static byte* GET_COMMERCE_PRODUCT_PRICE(int index) { return PInvoke<byte>(0xCA94551B50B4932C, V(index)); }
		public static int GET_COMMERCE_ITEM_NUM_CATS(int index) { return Invoke<int>(0x2A7776C709904AB0, V(index)); }
		// index2 is unused
		public static byte* GET_COMMERCE_ITEM_CAT(int index, int index2) { return PInvoke<byte>(0x6F44CBF56D79FAC0, V(index), V(index2)); }
		public static void OPEN_COMMERCE_STORE(string p0, string p1, int p2) { Invoke(0x58C21165F6545892, V(p0), V(p1), V(p2)); }
		public static bool IS_COMMERCE_STORE_OPEN() { return Invoke<bool>(0x2EAC52B4019E2782); }
		// Access to the store for shark cards etc...
		public static void SET_STORE_ENABLED(bool toggle) { Invoke(0x9641A9FF718E9C5E, V(toggle)); }
		public static bool REQUEST_COMMERCE_ITEM_IMAGE(int index) { return Invoke<bool>(0xA2F952104FC6DD4B, V(index)); }
		public static void RELEASE_ALL_COMMERCE_ITEM_IMAGES() { Invoke(0x72D0706CD6CCDB58); }
		public static byte* GET_COMMERCE_ITEM_TEXTURENAME(int index) { return PInvoke<byte>(0x722F5D28B61C5EA8, V(index)); }
		public static bool IS_STORE_AVAILABLE_TO_USER() { return Invoke<bool>(0x883D79C4071E18B3); }
		public static void DELAY_MP_STORE_OPEN() { Invoke(0x265635150FB0D82E); }
		public static void RESET_STORE_NETWORK_GAME_TRACKING() { Invoke(0x444C4525ECE0A4B9); }
		public static bool IS_USER_OLD_ENOUGH_TO_ACCESS_STORE() { return Invoke<bool>(0x59328EB08C5CEB2B); }
		public static void SET_LAST_VIEWED_SHOP_ITEM(Hash p0, int p1, Hash p2) { Invoke(0xFAE628F1E9ADB239, V(p0), V(p1), V(p2)); }
		// Checks some commerce stuff
		public static int GET_USER_PREMIUM_ACCESS() { return Invoke<int>(0x754615490A029508); }
		// Checks some commerce stuff
		public static int GET_USER_STARTER_ACCESS() { return Invoke<int>(0x155467ACA0F55705); }
		public static int CLOUD_DELETE_MEMBER_FILE(string p0) { return Invoke<int>(0xC64DED7EF0D2FE37, V(p0)); }
		public static bool CLOUD_HAS_REQUEST_COMPLETED(int requestId) { return Invoke<bool>(0x4C61B39930D045DA, V(requestId)); }
		public static bool CLOUD_DID_REQUEST_SUCCEED(int requestId) { return Invoke<bool>(0x3A3D5568AF297CD5, V(requestId)); }
		// Downloads prod.cloud.rockstargames.com/titles/gta5/[platform]/check.json
		public static void CLOUD_CHECK_AVAILABILITY() { Invoke(0x4F18196C8D38768D); }
		public static bool CLOUD_IS_CHECKING_AVAILABILITY() { return Invoke<bool>(0xC7ABAC5DE675EE3B); }
		public static bool CLOUD_GET_AVAILABILITY_CHECK_RESULT() { return Invoke<bool>(0x0B0CC10720653F3B); }
		// This function is hard-coded to always return 0.
		public static int GET_CONTENT_TO_LOAD_TYPE() { return Invoke<int>(0x8B0C2964BA471961); }
		// This function is hard-coded to always return 0.
		public static bool GET_IS_LAUNCH_FROM_LIVE_AREA() { return Invoke<bool>(0x88B588B41FF7868E); }
		// This function is hard-coded to always return 0.
		public static bool GET_IS_LIVE_AREA_LAUNCH_WITH_CONTENT() { return Invoke<bool>(0x67FC09BC554A75E5); }
		// This native does absolutely nothing, just a nullsub
		public static void CLEAR_SERVICE_EVENT_ARGUMENTS() { Invoke(0x966DD84FB6A46017); }
		public static bool UGC_COPY_CONTENT(Any* p0, Any* p1) { return Invoke<bool>(0x152D90E4C1B4738A, V(p0), V(p1)); }
		public static bool UGC_IS_CREATING() { return Invoke<bool>(0x9FEDF86898F100E9); }
		public static bool UGC_HAS_CREATE_FINISHED() { return Invoke<bool>(0x5E24341A7F92A74B); }
		public static bool UGC_DID_CREATE_SUCCEED() { return Invoke<bool>(0x24E4E51FC16305F9); }
		public static int UGC_GET_CREATE_RESULT() { return Invoke<int>(0xFBC5E768C7A77A6A); }
		public static byte* UGC_GET_CREATE_CONTENT_ID() { return PInvoke<byte>(0xC55A0B40FFB1ED23); }
		public static void UGC_CLEAR_CREATE_RESULT() { Invoke(0x17440AA15D1D3739); }
		public static bool UGC_QUERY_MY_CONTENT(Any p0, Any p1, Any* p2, Any p3, Any p4, Any p5) { return Invoke<bool>(0x9BF438815F5D96EA, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static bool UGC_QUERY_BY_CATEGORY(Any p0, Any p1, Any p2, string p3, Any p4, bool p5) { return Invoke<bool>(0x692D58DF40657E8C, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static bool UGC_QUERY_BY_CONTENT_ID(string contentId, bool latestVersion, string contentTypeName) { return Invoke<bool>(0x158EC424F35EC469, V(contentId), V(latestVersion), V(contentTypeName)); }
		public static bool UGC_QUERY_BY_CONTENT_IDS(Any* data, int count, bool latestVersion, string contentTypeName) { return Invoke<bool>(0xC7397A83F7A2A462, V(data), V(count), V(latestVersion), V(contentTypeName)); }
		public static bool UGC_QUERY_MOST_RECENTLY_CREATED_CONTENT(int offset, int count, string contentTypeName, int p3) { return Invoke<bool>(0x6D4CB481FAC835E8, V(offset), V(count), V(contentTypeName), V(p3)); }
		public static bool UGC_GET_BOOKMARKED_CONTENT(Any p0, Any p1, string p2, Any* p3) { return Invoke<bool>(0xD5A4B59980401588, V(p0), V(p1), V(p2), V(p3)); }
		public static bool UGC_GET_MY_CONTENT(Any p0, Any p1, string p2, Any* p3) { return Invoke<bool>(0x3195F8DD0D531052, V(p0), V(p1), V(p2), V(p3)); }
		public static bool UGC_GET_FRIEND_CONTENT(Any p0, Any p1, string p2, Any* p3) { return Invoke<bool>(0xF9E1CCAE8BA4C281, V(p0), V(p1), V(p2), V(p3)); }
		public static bool UGC_GET_CREW_CONTENT(Any p0, Any p1, Any p2, string p3, Any* p4) { return Invoke<bool>(0x9F6E2821885CAEE2, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static bool UGC_GET_GET_BY_CATEGORY(Any p0, Any p1, Any p2, string p3, Any* p4) { return Invoke<bool>(0x678BB03C1A3BD51E, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static bool UGC_GET_GET_BY_CONTENT_ID(string contentId, string contentTypeName) { return Invoke<bool>(0x815E5E3073DA1D67, V(contentId), V(contentTypeName)); }
		public static bool UGC_GET_GET_BY_CONTENT_IDS(Any* data, int dataCount, string contentTypeName) { return Invoke<bool>(0xB8322EEB38BE7C26, V(data), V(dataCount), V(contentTypeName)); }
		public static bool UGC_GET_MOST_RECENTLY_CREATED_CONTENT(Any p0, Any p1, Any* p2, Any* p3) { return Invoke<bool>(0xA7862BC5ED1DFD7E, V(p0), V(p1), V(p2), V(p3)); }
		public static bool UGC_GET_MOST_RECENTLY_PLAYED_CONTENT(Any p0, Any p1, Any* p2, Any* p3) { return Invoke<bool>(0x97A770BEEF227E2B, V(p0), V(p1), V(p2), V(p3)); }
		public static bool UGC_GET_TOP_RATED_CONTENT(Any p0, Any p1, Any* p2, Any* p3) { return Invoke<bool>(0x5324A0E3E4CE3570, V(p0), V(p1), V(p2), V(p3)); }
		public static void UGC_CANCEL_QUERY() { Invoke(0xE9B99B6853181409); }
		public static bool UGC_IS_GETTING() { return Invoke<bool>(0xD53ACDBEF24A46E8); }
		public static bool UGC_HAS_GET_FINISHED() { return Invoke<bool>(0x02ADA21EA2F6918F); }
		public static bool UGC_DID_GET_SUCCEED() { return Invoke<bool>(0x941E5306BCD7C2C7); }
		public static bool UGC_WAS_QUERY_FORCE_CANCELLED() { return Invoke<bool>(0xC87E740D9F3872CC); }
		public static int UGC_GET_QUERY_RESULT() { return Invoke<int>(0xEDF7F927136C224B); }
		public static int UGC_GET_CONTENT_NUM() { return Invoke<int>(0xE0A6138401BCB837); }
		public static int UGC_GET_CONTENT_TOTAL() { return Invoke<int>(0x769951E2455E2EB5); }
		public static Hash UGC_GET_CONTENT_HASH() { return Invoke<Hash>(0x3A17A27D75C74887); }
		public static void UGC_CLEAR_QUERY_RESULTS() { Invoke(0xBA96394A0EECFA65); }
		public static byte* UGC_GET_CONTENT_USER_ID(int p0) { return PInvoke<byte>(0xCD67AD041A394C9C, V(p0)); }
		public static bool UGC_GET_CONTENT_CREATOR_GAMER_HANDLE(int p0, Any* p1) { return Invoke<bool>(0x584770794D758C18, V(p0), V(p1)); }
		public static bool UGC_GET_CONTENT_CREATED_BY_LOCAL_PLAYER(Any p0) { return Invoke<bool>(0x8C8D2739BA44AF0F, V(p0)); }
		public static byte* UGC_GET_CONTENT_USER_NAME(Any p0) { return PInvoke<byte>(0x703F12425ECA8BF5, V(p0)); }
		public static bool UGC_GET_CONTENT_IS_USING_SC_NICKNAME(Any p0) { return Invoke<bool>(0xAEAB987727C5A8A4, V(p0)); }
		public static int UGC_GET_CONTENT_CATEGORY(int p0) { return Invoke<int>(0xA7BAB11E7C9C6C5A, V(p0)); }
		// Return the mission id of a job.
		public static byte* UGC_GET_CONTENT_ID(int p0) { return PInvoke<byte>(0x55AA95F481D694D2, V(p0)); }
		// Return the root content id of a job.
		public static byte* UGC_GET_ROOT_CONTENT_ID(int p0) { return PInvoke<byte>(0xC0173D6BFF4E0348, V(p0)); }
		public static byte* UGC_GET_CONTENT_NAME(Any p0) { return PInvoke<byte>(0xBF09786A7FCAB582, V(p0)); }
		public static byte* UGC_GET_CONTENT_DESCRIPTION(int index) { return PInvoke<byte>(0x4A56710BAB5C4DB4, V(index)); }
		public static int UGC_GET_CONTENT_DESCRIPTION_HASH(Any p0) { return Invoke<int>(0x7CF0448787B23758, V(p0)); }
		public static byte* UGC_GET_CONTENT_PATH(int p0, int p1) { return PInvoke<byte>(0xBAF6BABF9E7CCC13, V(p0), V(p1)); }
		public static void UGC_GET_CONTENT_UPDATED_DATE(Any p0, Any* p1) { Invoke(0xCFD115B373C0DF63, V(p0), V(p1)); }
		public static int UGC_GET_CONTENT_FILE_VERSION(Any p0, Any p1) { return Invoke<int>(0x37025B27D9B658B1, V(p0), V(p1)); }
		public static bool UGC_GET_CONTENT_HAS_LO_RES_PHOTO(int p0) { return Invoke<bool>(0x1D610EB0FEA716D9, V(p0)); }
		public static bool UGC_GET_CONTENT_HAS_HI_RES_PHOTO(int p0) { return Invoke<bool>(0x7FCC39C46C3C03BD, V(p0)); }
		public static int UGC_GET_CONTENT_LANGUAGE(Any p0) { return Invoke<int>(0x32DD916F3F7C9672, V(p0)); }
		public static bool UGC_GET_CONTENT_IS_PUBLISHED(Any p0) { return Invoke<bool>(0x3054F114121C21EA, V(p0)); }
		public static bool UGC_GET_CONTENT_IS_VERIFIED(Any p0) { return Invoke<bool>(0xA9240A96C74CCA13, V(p0)); }
		public static float UGC_GET_CONTENT_RATING(Any p0, Any p1) { return Invoke<float>(0x1ACCFBA3D8DAB2EE, V(p0), V(p1)); }
		public static int UGC_GET_CONTENT_RATING_COUNT(Any p0, Any p1) { return Invoke<int>(0x759299C5BB31D2A9, V(p0), V(p1)); }
		public static int UGC_GET_CONTENT_RATING_POSITIVE_COUNT(Any p0, Any p1) { return Invoke<int>(0x87E5C46C187FE0AE, V(p0), V(p1)); }
		public static int UGC_GET_CONTENT_RATING_NEGATIVE_COUNT(Any p0, Any p1) { return Invoke<int>(0x4E548C0D7AE39FF9, V(p0), V(p1)); }
		public static bool UGC_GET_CONTENT_HAS_PLAYER_RECORD(Any p0) { return Invoke<bool>(0x70EA8DA57840F9BE, V(p0)); }
		public static bool UGC_GET_CONTENT_HAS_PLAYER_BOOKMARKED(Any p0) { return Invoke<bool>(0x993CBE59D350D225, V(p0)); }
		public static int UGC_REQUEST_CONTENT_DATA_FROM_INDEX(int p0, int p1) { return Invoke<int>(0x171DF6A0C07FB3DC, V(p0), V(p1)); }
		public static int UGC_REQUEST_CONTENT_DATA_FROM_PARAMS(string contentTypeName, string contentId, int p2, int p3, int p4) { return Invoke<int>(0x7FD2990AF016795E, V(contentTypeName), V(contentId), V(p2), V(p3), V(p4)); }
		public static int UGC_REQUEST_CACHED_DESCRIPTION(int p0) { return Invoke<int>(0x5E0165278F6339EE, V(p0)); }
		public static bool UGC_IS_DESCRIPTION_REQUEST_IN_PROGRESS(Any p0) { return Invoke<bool>(0x2D5DC831176D0114, V(p0)); }
		public static bool UGC_HAS_DESCRIPTION_REQUEST_FINISHED(Any p0) { return Invoke<bool>(0xEBFA8D50ADDC54C4, V(p0)); }
		public static bool UGC_DID_DESCRIPTION_REQUEST_SUCCEED(Any p0) { return Invoke<bool>(0x162C23CA83ED0A62, V(p0)); }
		public static byte* UGC_GET_CACHED_DESCRIPTION(Any p0, Any p1) { return PInvoke<byte>(0x40F7E66472DF3E5C, V(p0), V(p1)); }
		public static bool UGC_RELEASE_CACHED_DESCRIPTION(Any p0) { return Invoke<bool>(0x5A34CD9C3C5BEC44, V(p0)); }
		public static void UGC_RELEASE_ALL_CACHED_DESCRIPTIONS() { Invoke(0x68103E2247887242); }
		public static bool UGC_HAS_PERMISSION_TO_WRITE() { return Invoke<bool>(0xC33E7CBC06EC1A8D); }
		public static bool UGC_PUBLISH(string contentId, string baseContentId, string contentTypeName) { return Invoke<bool>(0x1DE0F5F50D723CAA, V(contentId), V(baseContentId), V(contentTypeName)); }
		public static bool UGC_SET_BOOKMARKED(string contentId, bool bookmarked, string contentTypeName) { return Invoke<bool>(0x274A1519DFC1094F, V(contentId), V(bookmarked), V(contentTypeName)); }
		public static bool UGC_SET_DELETED(Any* p0, bool p1, string p2) { return Invoke<bool>(0xD05D1A6C74DA3498, V(p0), V(p1), V(p2)); }
		public static bool UGC_IS_MODIFYING() { return Invoke<bool>(0x45E816772E93A9DB); }
		public static bool UGC_HAS_MODIFY_FINISHED() { return Invoke<bool>(0x299EF3C576773506); }
		public static bool UGC_DID_MODIFY_SUCCEED() { return Invoke<bool>(0x793FF272D5B365F4); }
		public static int UGC_GET_MODIFY_RESULT() { return Invoke<int>(0x5A0A3D1A186A5508); }
		public static void UGC_CLEAR_MODIFY_RESULT() { Invoke(0xA1E5E0204A6FCC70); }
		public static bool UGC_GET_CREATORS_BY_USER_ID(Any* p0, Any* p1) { return Invoke<bool>(0xB746D20B17F2A229, V(p0), V(p1)); }
		public static bool UGC_HAS_QUERY_CREATORS_FINISHED() { return Invoke<bool>(0x63B406D7884BFA95); }
		public static bool UGC_DID_QUERY_CREATORS_SUCCEED() { return Invoke<bool>(0x4D02279C83BE69FE); }
		public static int UGC_GET_CREATOR_NUM() { return Invoke<int>(0x597F8DBA9B206FC7); }
		public static bool UGC_LOAD_OFFLINE_QUERY(Any p0) { return Invoke<bool>(0x5CAE833B0EE0C500, V(p0)); }
		public static void UGC_CLEAR_OFFLINE_QUERY() { Invoke(0x61A885D3F7CFEE9A); }
		public static void UGC_SET_QUERY_DATA_FROM_OFFLINE(bool p0) { Invoke(0xF98DDE0A8ED09323, V(p0)); }
		public static void UGC_SET_USING_OFFLINE_CONTENT(bool p0) { Invoke(0xFD75DABC0957BF33, V(p0)); }
		public static bool UGC_IS_LANGUAGE_SUPPORTED(Any p0) { return Invoke<bool>(0xF53E48461B71EECB, V(p0)); }
		public static bool FACEBOOK_POST_COMPLETED_HEIST(string heistName, int cashEarned, int xpEarned) { return Invoke<bool>(0x098AB65B9ED9A9EC, V(heistName), V(cashEarned), V(xpEarned)); }
		public static bool FACEBOOK_POST_CREATE_CHARACTER() { return Invoke<bool>(0xDC48473142545431); }
		public static bool FACEBOOK_POST_COMPLETED_MILESTONE(int milestoneId) { return Invoke<bool>(0x0AE1F1653B554AB9, V(milestoneId)); }
		public static bool FACEBOOK_HAS_POST_COMPLETED() { return Invoke<bool>(0x62B9FEC9A11F10EF); }
		public static bool FACEBOOK_DID_POST_SUCCEED() { return Invoke<bool>(0xA75E2B6733DA5142); }
		public static bool FACEBOOK_CAN_POST_TO_FACEBOOK() { return Invoke<bool>(0x43865688AE10F0D7); }
		public static int TEXTURE_DOWNLOAD_REQUEST(Any* gamerHandle, string filePath, string name, bool p3) { return Invoke<int>(0x16160DA74A8E74A2, V(gamerHandle), V(filePath), V(name), V(p3)); }
		public static int TITLE_TEXTURE_DOWNLOAD_REQUEST(string filePath, string name, bool p2) { return Invoke<int>(0x0B203B4AFDE53A4F, V(filePath), V(name), V(p2)); }
		public static int UGC_TEXTURE_DOWNLOAD_REQUEST(string p0, int p1, int p2, int p3, string p4, bool p5) { return Invoke<int>(0x308F96458B7087CC, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void TEXTURE_DOWNLOAD_RELEASE(int p0) { Invoke(0x487EB90B98E9FB19, V(p0)); }
		public static bool TEXTURE_DOWNLOAD_HAS_FAILED(int p0) { return Invoke<bool>(0x5776ED562C134687, V(p0)); }
		public static byte* TEXTURE_DOWNLOAD_GET_NAME(int p0) { return PInvoke<byte>(0x3448505B6E35262D, V(p0)); }
		// 0 = succeeded
		// 1 = pending
		// 2 = failed
		public static int GET_STATUS_OF_TEXTURE_DOWNLOAD(int p0) { return Invoke<int>(0x8BD6C6DEA20E82C6, V(p0)); }
		// Returns true if profile setting 901 is set to true and sets it to false.
		public static bool NETWORK_CHECK_ROS_LINK_WENTDOWN_NOT_NET() { return Invoke<bool>(0x60EDD13EB3AC1FF3); }
		// Returns true if the NAT type is Strict (3) and a certain number of connections have failed.
		public static bool NETWORK_SHOULD_SHOW_STRICT_NAT_WARNING() { return Invoke<bool>(0x82A2B386716608F1); }
		public static bool NETWORK_IS_CABLE_CONNECTED() { return Invoke<bool>(0xEFFB25453D8600F9); }
		public static bool NETWORK_HAVE_SCS_PRIVATE_MSG_PRIV() { return Invoke<bool>(0x66B59CFFD78467AF); }
		public static bool NETWORK_HAVE_ROS_SOCIAL_CLUB_PRIV() { return Invoke<bool>(0x606E4D3E3CCCF3EB); }
		public static bool NETWORK_HAVE_ROS_BANNED_PRIV() { return Invoke<bool>(0x8020A73847E0CA7D); }
		public static bool NETWORK_HAVE_ROS_CREATE_TICKET_PRIV() { return Invoke<bool>(0xA0AD7E2AF5349F61); }
		public static bool NETWORK_HAVE_ROS_MULTIPLAYER_PRIV() { return Invoke<bool>(0x5F91D5D0B36AA310); }
		public static bool NETWORK_HAVE_ROS_LEADERBOARD_WRITE_PRIV() { return Invoke<bool>(0x422D396F80A96547); }
		// index is always 18 in scripts
		public static bool NETWORK_HAS_ROS_PRIVILEGE(int index) { return Invoke<bool>(0xA699957E60D80214, V(index)); }
		public static bool NETWORK_HAS_ROS_PRIVILEGE_END_DATE(int privilege, int* banType, Any* timeData) { return Invoke<bool>(0xC22912B1D85F26B1, V(privilege), V(banType), V(timeData)); }
		public static bool NETWORK_HAS_ROS_PRIVILEGE_PLAYED_LAST_GEN() { return Invoke<bool>(0x593570C289A77688); }
		public static bool NETWORK_HAS_ROS_PRIVILEGE_SPECIAL_EDITION_CONTENT() { return Invoke<bool>(0x91B87C55093DE351); }
		// Checks for privilege 29
		public static bool _NETWORK_HAS_ROS_PRIVILEGE_MP_TEXT_COMMUNICATION() { return Invoke<bool>(0xD9719341663C385F); }
		// Checks for privilege 30
		public static bool _NETWORK_HAS_ROS_PRIVILEGE_MP_VOICE_COMMUNICATION() { return Invoke<bool>(0x8956A309BE90057C); }
		// Checks for privilege 31
		public static bool _NETWORK_HAS_ROS_PRIVILEGE_REPORTING() { return Invoke<bool>(0x9BA54B3CFB82ADDD); }
		// Always returns -1. Seems to be XB1 specific.
		public static int NETWORK_START_USER_CONTENT_PERMISSIONS_CHECK(Any* netHandle) { return Invoke<int>(0xDEB2B99A1AF1A2A6, V(netHandle)); }
		public static void NETWORK_SKIP_RADIO_RESET_NEXT_CLOSE() { Invoke(0x9465E683B12D3F6B); }
		public static void NETWORK_SKIP_RADIO_RESET_NEXT_OPEN() { Invoke(0xCA59CCAE5D01E4CE); }
		// Returns true if dinput8.dll is present in the game directory.
		// You will get following error message if that is true: "You are attempting to access GTA Online servers with an altered version of the game."
		public static bool NETWORK_SKIP_RADIO_WARNING() { return Invoke<bool>(0x659CF2EF7F550C4F); }
		// NETWORK_F[I-O]
		public static void NETWORK_FORCE_LOCAL_PLAYER_SCAR_SYNC() { Invoke(0xB7C7F6AD6424304B); }
		public static void NETWORK_DISABLE_LEAVE_REMOTE_PED_BEHIND(bool toggle) { Invoke(0xC505036A35AFD01B, V(toggle)); }
		public static void NETWORK_ALLOW_REMOTE_ATTACHMENT_MODIFICATION(Entity entity, bool toggle) { Invoke(0x267C78C60E806B9A, V(entity), V(toggle)); }
		// Does nothing (it's a nullsub).
		public static void NETWORK_SHOW_CHAT_RESTRICTION_MSC(Player player) { Invoke(0x6BFF5F84102DF80A, V(player)); }
		// This native does absolutely nothing, just a nullsub
		public static void NETWORK_SHOW_PSN_UGC_RESTRICTION() { Invoke(0x5C497525F803486B); }
		// This function is hard-coded to always return 0.
		public static bool NETWORK_IS_TITLE_UPDATE_REQUIRED() { return Invoke<bool>(0x6FB7BB3607D27FA2); }
		public static void NETWORK_QUIT_MP_TO_DESKTOP() { Invoke(0x45A83257ED02D9BC); }
		public static bool NETWORK_IS_CONNECTED_VIA_RELAY(Player player) { return Invoke<bool>(0x16D3D49902F697BB, V(player)); }
		public static float NETWORK_GET_AVERAGE_LATENCY(Player player) { return Invoke<float>(0xD414BE129BB81B32, V(player)); }
		// Same as NETWORK_GET_AVERAGE_LATENCY
		public static float NETWORK_GET_AVERAGE_PING(Player player) { return Invoke<float>(0x0E3A041ED6AC2B45, V(player)); }
		public static float NETWORK_GET_AVERAGE_PACKET_LOSS(Player player) { return Invoke<float>(0x350C23949E43686C, V(player)); }
		public static int NETWORK_GET_NUM_UNACKED_RELIABLES(Player player) { return Invoke<int>(0xFF8FCF9FFC458A1C, V(player)); }
		public static int NETWORK_GET_UNRELIABLE_RESEND_COUNT(Player player) { return Invoke<int>(0x3765C3A3E8192E10, V(player)); }
		public static int NETWORK_GET_HIGHEST_RELIABLE_RESEND_COUNT(Player player) { return Invoke<int>(0x52C1EADAF7B10302, V(player)); }
		public static void NETWORK_REPORT_CODE_TAMPER() { Invoke(0x5626D9D6810730D5); }
		public static Vector3 NETWORK_GET_LAST_ENTITY_POS_RECEIVED_OVER_NETWORK(Entity entity) { return Invoke<Vector3>(0x64D779659BC37B19, V(entity)); }
		// Returns the coordinates of another player.
		// Does not work if you enter your own player id as p0 (will return `(0.0, 0.0, 0.0)` in that case).
		public static Vector3 NETWORK_GET_LAST_PLAYER_POS_RECEIVED_OVER_NETWORK(Player player) { return Invoke<Vector3>(0x125E6D638B8605D4, V(player)); }
		// Used by NetBlender
		public static Vector3 NETWORK_GET_LAST_VEL_RECEIVED_OVER_NETWORK(Entity entity) { return Invoke<Vector3>(0x33DE49EDF4DDE77A, V(entity)); }
		public static Vector3 NETWORK_GET_PREDICTED_VELOCITY(Entity entity, float maxSpeedToPredict) { return Invoke<Vector3>(0xAA5FAFCD2C5F5E47, V(entity), V(maxSpeedToPredict)); }
		// Does nothing (it's a nullsub).
		public static void NETWORK_DUMP_NET_IF_CONFIG() { Invoke(0xAEDF1BC1C133D6E3); }
		// Does nothing (it's a nullsub).
		public static void NETWORK_GET_SIGNALLING_INFO(Any* p0) { Invoke(0x2555CF7DA5473794, V(p0)); }
		// Does nothing (it's a nullsub).
		public static void NETWORK_GET_NET_STATISTICS_INFO(Any* p0) { Invoke(0x6FD992C4A1C1B986, V(p0)); }
		public static int NETWORK_GET_PLAYER_ACCOUNT_ID(Player player) { return Invoke<int>(0xDB663CC9FF3407A9, V(player)); }
		public static void NETWORK_UGC_NAV(Any p0, Any p1) { Invoke(0xC1447451DDB512F0, V(p0), V(p1)); }
		// enum eNetworkGameRestartReason
		// {
		// 	BE_RESTART_SERVICE_NOT_RUNNING = 1, 	// BattlEye service not running
		// 	BE_RESTART_SERVICE_NEEDS_UPDATE, 		// BattlEye service needs an update
		// 	BE_RESTART_UNKNOWN_REASON,				// Unknown BattlEye reason
		// 	BE_RESTART_EF_DISABLED_WITH_BE,			// BattlEye Enforcement Flag is disabled, but BattlEye is active
		// 	BE_RESTART_EF_ENABLED_NO_BE,			// BattlEye Enforcement Flag is enabled, but BattlEye is not active
		// 	BE_RESTART_BE_MODULES_FAILED_TO_LOAD,	// BattlEye modules failed to load
		// 	NUM_NETWORK_GAME_RESTART_REASONS
		// };
		public static int _NETWORK_GET_GAME_RESTART_REASON() { return Invoke<int>(0x7F7E8401F81CB65B); }
		// If the restart reason is 4 (BE_RESTART_EF_DISABLED_WITH_BE), will cause the game to exit with exit code 622011. Otherwise exits with code 622010. Has no effect when a restart hasn't been requested (reason == 0 or reason > 6).
		// 
		// Note that this 'confirmation' itself does not restart the game, a call to QUIT_GAME or similar is required afterwards.
		public static void _NETWORK_CONFIRM_GAME_RESTART() { Invoke(0x0A141818CA2311AD); }
		// Returns the restart reason as a string, see _NETWORK_GET_GAME_RESTART_REASON. Returns a null pointer when a restart hasn't been requested (reason == 0 or reason > 6).
		public static byte* _NETWORK_GET_GAME_RESTART_REASON_MESSAGE_LABEL() { return PInvoke<byte>(0x47B11D51FC50A259); }
		// 0x20211000 = HUD_BE_ERROR_FAILED_UNKNOWN
		// 0x20212000 = HUD_BE_ERROR_FAILED_CLIENT_INIT
		// 0x20213000 = HUD_BE_ERROR_FAILED_SERVER_INIT
		// 0x20214000 = HUD_BE_ERROR_FAILED_AUTH_ATTEMPTS
		// 0x20215000 = HUD_BE_ERROR_UNTRUSTED_HOST
		// 0x20216000 = HUD_BE_ERROR_KICKED
		// 0x20217000 = HUD_BE_ERROR_BANNED
		// 0x50140000 = HUD_BE_BLOCK_BANNED
		// 
		// Note: an invalid error code returns a null pointer!
		public static byte* _NETWORK_GET_BATTLEYE_ERROR_MESSAGE_LABEL(int errorCode) { return PInvoke<byte>(0xCBA50F371E45B90D, V(errorCode)); }




		// List of obj models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
		public static Obj CREATE_OBJECT(Hash modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic) { return Invoke<Obj>(0x509D5878EB39E842, V(modelHash), V(x), V(y), V(z), V(isNetwork), V(bScriptHostObj), V(dynamic)); }
		// List of obj models that can be created without any additional effort like making sure ytyp is loaded etc: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ObjectList.ini
		public static Obj CREATE_OBJECT_NO_OFFSET(Hash modelHash, float x, float y, float z, bool isNetwork, bool bScriptHostObj, bool dynamic, Any p7) { return Invoke<Obj>(0x9A294B2138ABB884, V(modelHash), V(x), V(y), V(z), V(isNetwork), V(bScriptHostObj), V(dynamic), V(p7)); }
		// Deletes the specified obj, then sets the handle pointed to by the pointer to NULL.
		public static void DELETE_OBJECT(Obj* obj) { Invoke(0x539E0AE3E6634B9F, V(obj)); }
		public static bool PLACE_OBJECT_ON_GROUND_PROPERLY(Obj obj) { return Invoke<bool>(0x58A850EAEE20FAA3, V(obj)); }
		public static bool PLACE_OBJECT_ON_GROUND_OR_OBJECT_PROPERLY(Obj obj) { return Invoke<bool>(0xD76EEEF746057FD6, V(obj)); }
		public static bool ROTATE_OBJECT(Obj obj, float p1, float p2, bool p3) { return Invoke<bool>(0xAFE24E4D29249E4A, V(obj), V(p1), V(p2), V(p3)); }
		// Returns true if the obj has finished moving.
		// 
		// If false, moves the obj towards the specified X, Y and Z coordinates with the specified X, Y and Z speed.
		// 
		// See also: https://gtagmodding.com/opcode-database/opcode/034E/
		// Has to be looped until it returns true.
		public static bool SLIDE_OBJECT(Obj obj, float toX, float toY, float toZ, float speedX, float speedY, float speedZ, bool collision) { return Invoke<bool>(0x2FDFF4107B8C1147, V(obj), V(toX), V(toY), V(toZ), V(speedX), V(speedY), V(speedZ), V(collision)); }
		public static void SET_OBJECT_TARGETTABLE(Obj obj, bool targettable, Any p2) { Invoke(0x8A7391690F5AFD81, V(obj), V(targettable), V(p2)); }
		// Sets the 34th and 35th obj flags related to player peds.
		public static void _SET_OBJECT_TARGETTABLE_BY_PLAYER(Obj obj, bool setFlag34, bool setFlag35) { Invoke(0xB39F03368DB0CAA2, V(obj), V(setFlag34), V(setFlag35)); }
		// Overrides a flag on the obj which determines if the obj should be avoided by a vehicle in task CTaskVehicleGoToPointWithAvoidanceAutomobile.
		public static void SET_OBJECT_FORCE_VEHICLES_TO_AVOID(Obj obj, bool toggle) { Invoke(0x77F33F2CCF64B3AA, V(obj), V(toggle)); }
		// Has 8 params in the latest patches.
		// 
		// isMission - if true doesn't return mission objects
		public static Obj GET_CLOSEST_OBJECT_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, bool isMission, bool p6, bool p7) { return Invoke<Obj>(0xE143FA2249364369, V(x), V(y), V(z), V(radius), V(modelHash), V(isMission), V(p6), V(p7)); }
		public static bool HAS_OBJECT_BEEN_BROKEN(Obj obj, Any p1) { return Invoke<bool>(0x8ABFB70C49CC43E2, V(obj), V(p1)); }
		public static bool HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_BROKEN(float p0, float p1, float p2, float p3, Hash modelHash, Any p5) { return Invoke<bool>(0x761B0E69AC4D007E, V(p0), V(p1), V(p2), V(p3), V(modelHash), V(p5)); }
		public static bool HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_COMPLETELY_DESTROYED(float x, float y, float z, float radius, Hash modelHash, bool p5) { return Invoke<bool>(0x46494A2475701343, V(x), V(y), V(z), V(radius), V(modelHash), V(p5)); }
		public static bool GET_HAS_OBJECT_BEEN_COMPLETELY_DESTROYED(Any p0) { return Invoke<bool>(0x2542269291C6AC84, V(p0)); }
		public static Vector3 GET_OFFSET_FROM_COORD_AND_HEADING_IN_WORLD_COORDS(float xPos, float yPos, float zPos, float heading, float xOffset, float yOffset, float zOffset) { return Invoke<Vector3>(0x163E252DE035A133, V(xPos), V(yPos), V(zPos), V(heading), V(xOffset), V(yOffset), V(zOffset)); }
		public static bool GET_COORDS_AND_ROTATION_OF_CLOSEST_OBJECT_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, Vector3* outPosition, Vector3* outRotation, int rotationOrder) { return Invoke<bool>(0x163F8B586BC95F2A, V(x), V(y), V(z), V(radius), V(modelHash), V(outPosition), V(outRotation), V(rotationOrder)); }
		// Hardcoded to not work in multiplayer.
		// 
		// 
		// Used to lock/unlock doors to interior areas of the game.
		// 
		// (Possible) Door Types:
		// 
		// https://pastebin.com/9S2m3qA4
		// 
		// Heading is either 1, 0 or -1 in the scripts. Means default closed(0) or opened either into(1) or out(-1) of the interior.
		// Locked means that the heading is locked.  
		// p6 is always 0. 
		// 
		// 225 door types, model names and coords found in stripclub.c4:
		// https://pastebin.com/gywnbzsH
		// 
		// get door info: https://pastebin.com/i14rbekD
		public static void SET_STATE_OF_CLOSEST_DOOR_OF_TYPE(Hash type, float x, float y, float z, bool locked, float heading, bool p6) { Invoke(0xF82D8F1926A02C3D, V(type), V(x), V(y), V(z), V(locked), V(heading), V(p6)); }
		// locked is 0 if no door is found
		// locked is 0 if door is unlocked
		// locked is 1 if door is found and unlocked.
		// 
		// -------------
		// the locked bool is either 0(unlocked)(false) or 1(locked)(true)
		public static void GET_STATE_OF_CLOSEST_DOOR_OF_TYPE(Hash type, float x, float y, float z, bool* locked, float* heading) { Invoke(0xEDC1A5B84AEF33FF, V(type), V(x), V(y), V(z), V(locked), V(heading)); }
		// Hardcoded not to work in multiplayer environments.
		// When you set locked to 0 the door open and to 1 the door close
		// OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 0, 0.0, 50.0, 0);  //door open
		// 
		// OBJECT::SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(${prop_gate_prison_01}, 1845.0, 2605.0, 45.0, 1, 0.0, 50.0, 0);  //door close
		public static void SET_LOCKED_UNSTREAMED_IN_DOOR_OF_TYPE(Hash modelHash, float x, float y, float z, bool locked, float xRotMult, float yRotMult, float zRotMult) { Invoke(0x9B12F9A24FABEDB0, V(modelHash), V(x), V(y), V(z), V(locked), V(xRotMult), V(yRotMult), V(zRotMult)); }
		public static void PLAY_OBJECT_AUTO_START_ANIM(Any p0) { Invoke(0x006E4B040ED37EC3, V(p0)); }
		// doorHash has to be unique. scriptDoor false; relies upon getNetworkGameScriptHandler. isLocal On true disables the creation CRequestDoorEvent's in DOOR_SYSTEM_SET_DOOR_STATE.
		// p5 only set to true in single player native scripts.
		// If scriptDoor is true, register the door on the script handler host (note: there's a hardcap on the number of script IDs that can be added to the system at a given time). If scriptDoor and isLocal are both false, the door is considered to be in a "Persists w/o netobj" state.
		// 
		// door hashes normally look like PROP_[int]_DOOR_[int] for interior doors and PROP_BUILDING_[int]_DOOR_[int] exterior doors but you can just make up your own hash if you want
		// All doors need to be registered with ADD_DOOR_TO_SYSTEM before they can be manipulated with the door natives and the easiest way to get door models is just find the door in codewalker.
		// 
		// Example: AddDoorToSystem("PROP_43_DOOR_0", "hei_v_ilev_fh_heistdoor2", -1456.818, -520.5037, 69.67043, 0, 0, 0)
		public static void ADD_DOOR_TO_SYSTEM(Hash doorHash, Hash modelHash, float x, float y, float z, bool p5, bool scriptDoor, bool isLocal, Any p8) { Invoke(0x6F8838D03D1DC226, V(doorHash), V(modelHash), V(x), V(y), V(z), V(p5), V(scriptDoor), V(isLocal), V(p8)); }
		// CDoor and CDoorSystemData still internally allocated (and their associations between doorHash, modelHash, and coordinates).
		// Only its NetObj removed and flag ``*(v2 + 192) |= 8u`` (1604 retail) toggled.
		public static void REMOVE_DOOR_FROM_SYSTEM(Hash doorHash, Any p1) { Invoke(0x464D8E1427156FE4, V(doorHash), V(p1)); }
		// Lockstates not applied and CNetObjDoor's not created until DOOR_SYSTEM_GET_IS_PHYSICS_LOADED returns true.
		// `requestDoor` on true, and when door system is configured to, i.e., "persists w/o netobj", generate a CRequestDoorEvent.
		// `forceUpdate` on true, forces an update on the door system (same path as netObjDoor_applyDoorStuff)
		// Door lock states:
		// 0: UNLOCKED
		// 1: LOCKED
		// 2: DOORSTATE_FORCE_LOCKED_UNTIL_OUT_OF_AREA
		// 3: DOORSTATE_FORCE_UNLOCKED_THIS_FRAME
		// 4: DOORSTATE_FORCE_LOCKED_THIS_FRAME
		// 5: DOORSTATE_FORCE_OPEN_THIS_FRAME
		// 6: DOORSTATE_FORCE_CLOSED_THIS_FRAME
		public static void DOOR_SYSTEM_SET_DOOR_STATE(Hash doorHash, int state, bool requestDoor, bool forceUpdate) { Invoke(0x6BAB9442830C7F53, V(doorHash), V(state), V(requestDoor), V(forceUpdate)); }
		public static int DOOR_SYSTEM_GET_DOOR_STATE(Hash doorHash) { return Invoke<int>(0x160AA1B32F6139B8, V(doorHash)); }
		public static int DOOR_SYSTEM_GET_DOOR_PENDING_STATE(Hash doorHash) { return Invoke<int>(0x4BC2854478F3A749, V(doorHash)); }
		// Includes networking check: ownership vs. or the door itself **isn't** networked.
		// `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
		public static void DOOR_SYSTEM_SET_AUTOMATIC_RATE(Hash doorHash, float rate, bool requestDoor, bool forceUpdate) { Invoke(0x03C27E13B42A0E82, V(doorHash), V(rate), V(requestDoor), V(forceUpdate)); }
		// `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
		public static void DOOR_SYSTEM_SET_AUTOMATIC_DISTANCE(Hash doorHash, float distance, bool requestDoor, bool forceUpdate) { Invoke(0x9BA001CB45CBF627, V(doorHash), V(distance), V(requestDoor), V(forceUpdate)); }
		// Sets the ajar angle of a door.
		// Ranges from -1.0 to 1.0, and 0.0 is closed / default.
		// `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
		public static void DOOR_SYSTEM_SET_OPEN_RATIO(Hash doorHash, float ajar, bool requestDoor, bool forceUpdate) { Invoke(0xB6E6FBA95C7324AC, V(doorHash), V(ajar), V(requestDoor), V(forceUpdate)); }
		public static float DOOR_SYSTEM_GET_AUTOMATIC_DISTANCE(Hash doorHash) { return Invoke<float>(0xE851471AEFC3374F, V(doorHash)); }
		public static float DOOR_SYSTEM_GET_OPEN_RATIO(Hash doorHash) { return Invoke<float>(0x65499865FCA6E5EC, V(doorHash)); }
		public static bool DOOR_SYSTEM_GET_IS_SPRING_REMOVED(Hash doorHash) { return Invoke<bool>(0x8562FD8AB1E94D39, V(doorHash)); }
		// Includes networking check: ownership vs. or the door itself **isn't** networked.
		// `forceUpdate` on true invokes DOOR_SYSTEM_SET_DOOR_STATE otherwise requestDoor is unused.
		public static void DOOR_SYSTEM_SET_SPRING_REMOVED(Hash doorHash, bool removed, bool requestDoor, bool forceUpdate) { Invoke(0xC485E07E4F0B7958, V(doorHash), V(removed), V(requestDoor), V(forceUpdate)); }
		// Includes networking check: ownership vs. or the door itself **isn't** networked.
		public static void DOOR_SYSTEM_SET_HOLD_OPEN(Hash doorHash, bool toggle) { Invoke(0xD9B71952F78A2640, V(doorHash), V(toggle)); }
		// Some property related to gates. Native name between ``DOOR_SYSTEM_SET_AUTOMATIC_RATE`` and ``DOOR_SYSTEM_SET_DOOR_STATE``.
		public static void DOOR_SYSTEM_SET_DOOR_OPEN_FOR_RACES(Hash doorHash, bool p1) { Invoke(0xA85A21582451E951, V(doorHash), V(p1)); }
		// if (OBJECT::IS_DOOR_REGISTERED_WITH_SYSTEM(doorHash)) 
		// {
		//     OBJECT::REMOVE_DOOR_FROM_SYSTEM(doorHash);
		// }
		public static bool IS_DOOR_REGISTERED_WITH_SYSTEM(Hash doorHash) { return Invoke<bool>(0xC153C43EA202C8C1, V(doorHash)); }
		public static bool IS_DOOR_CLOSED(Hash doorHash) { return Invoke<bool>(0xC531EE8A1145A149, V(doorHash)); }
		public static void OPEN_ALL_BARRIERS_FOR_RACE(bool p0) { Invoke(0xC7F29CA00F46350E, V(p0)); }
		// Clears the fields sets by 0xC7F29CA00F46350E (1604 retail: 0x1424A7A10, 0x1424A7A11) and iterates over the global CDoor's bucket-list.
		// Related to its "Pre-networked state"?
		public static void CLOSE_ALL_BARRIERS_FOR_RACE() { Invoke(0x701FDA1E82076BA4); }
		public static bool DOOR_SYSTEM_GET_IS_PHYSICS_LOADED(Any p0) { return Invoke<bool>(0xDF97CDD4FC08FD34, V(p0)); }
		// Search radius: 0.5
		public static bool DOOR_SYSTEM_FIND_EXISTING_DOOR(float x, float y, float z, Hash modelHash, Hash* outDoorHash) { return Invoke<bool>(0x589F80B325CC82C5, V(x), V(y), V(z), V(modelHash), V(outDoorHash)); }
		public static bool IS_GARAGE_EMPTY(Hash garageHash, bool p1, int p2) { return Invoke<bool>(0x90E47239EA1980B8, V(garageHash), V(p1), V(p2)); }
		public static bool IS_PLAYER_ENTIRELY_INSIDE_GARAGE(Hash garageHash, Player player, float p2, int p3) { return Invoke<bool>(0x024A60DEB0EA69F0, V(garageHash), V(player), V(p2), V(p3)); }
		public static bool IS_PLAYER_PARTIALLY_INSIDE_GARAGE(Hash garageHash, Player player, int p2) { return Invoke<bool>(0x1761DC5D8471CBAA, V(garageHash), V(player), V(p2)); }
		public static bool ARE_ENTITIES_ENTIRELY_INSIDE_GARAGE(Hash garageHash, bool p1, bool p2, bool p3, Any p4) { return Invoke<bool>(0x85B6C850546FDDE2, V(garageHash), V(p1), V(p2), V(p3), V(p4)); }
		public static bool IS_ANY_ENTITY_ENTIRELY_INSIDE_GARAGE(Hash garageHash, bool p1, bool p2, bool p3, Any p4) { return Invoke<bool>(0x673ED815D6E323B7, V(garageHash), V(p1), V(p2), V(p3), V(p4)); }
		// Despite the name, it does work for any entity type.
		public static bool IS_OBJECT_ENTIRELY_INSIDE_GARAGE(Hash garageHash, Entity entity, float p2, int p3) { return Invoke<bool>(0x372EF6699146A1E4, V(garageHash), V(entity), V(p2), V(p3)); }
		// Despite the name, it does work for any entity type.
		public static bool IS_OBJECT_PARTIALLY_INSIDE_GARAGE(Hash garageHash, Entity entity, int p2) { return Invoke<bool>(0xF0EED5A6BC7B237A, V(garageHash), V(entity), V(p2)); }
		public static void CLEAR_GARAGE(Hash garageHash, bool isNetwork) { Invoke(0xDA05194260CDCDF9, V(garageHash), V(isNetwork)); }
		public static void CLEAR_OBJECTS_INSIDE_GARAGE(Hash garageHash, bool vehicles, bool peds, bool objects, bool isNetwork) { Invoke(0x190428512B240692, V(garageHash), V(vehicles), V(peds), V(objects), V(isNetwork)); }
		// Sets a flag. A valid id is 0x157DC10D
		public static void DISABLE_TIDYING_UP_IN_GARAGE(int id, bool toggle) { Invoke(0x659F9D71F52843F8, V(id), V(toggle)); }
		public static void ENABLE_SAVING_IN_GARAGE(Hash garageHash, bool toggle) { Invoke(0xF2E1A7133DD356A6, V(garageHash), V(toggle)); }
		public static void CLOSE_SAFEHOUSE_GARAGES() { Invoke(0x66A49D021870FE88); }
		// p5 is usually 0.
		public static bool DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS(float x, float y, float z, float radius, Hash hash, bool p5) { return Invoke<bool>(0xBFA48E2FF417213F, V(x), V(y), V(z), V(radius), V(hash), V(p5)); }
		// An angled area is an X-Z oriented rectangle with three parameters:
		// 1. origin: the mid-point along a base1 edge of the rectangle;
		// 2. extent: the mid-point of opposite base1 edge on the other Z;
		// 3. width: the length of the base1 edge; (named derived from logging strings ``CNetworkRoadNodeWorldStateData``).
		// 
		// The oriented rectangle can then be derived from the direction of the two points (``norm(origin - extent)``), its orthonormal, and the width, e.g:
		// 1. golf_mp https://i.imgur.com/JhsQAK9.png
		// 2. am_taxi https://i.imgur.com/TJWCZaT.jpg
		public static bool IS_POINT_IN_ANGLED_AREA(float xPos, float yPos, float zPos, float x1, float y1, float z1, float x2, float y2, float z2, float width, bool debug, bool includeZ) { return Invoke<bool>(0x2A70BAE8883E4C81, V(xPos), V(yPos), V(zPos), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(debug), V(includeZ)); }
		// Overrides the climbing/blocking flags of the obj, used in the native scripts mostly for "prop_dock_bouy_*"
		public static void SET_OBJECT_ALLOW_LOW_LOD_BUOYANCY(Obj obj, bool toggle) { Invoke(0x4D89D607CB3DD1D2, V(obj), V(toggle)); }
		// Adjust the physics parameters of a prop, or otherwise known as "obj". This is useful for simulated gravity.
		// 
		// Other parameters seem to be unknown.
		// 
		// p2: seems to be weight and gravity related. Higher value makes the obj fall faster. Very sensitive?
		// p3: seems similar to p2
		// p4: makes obj fall slower the higher the value
		// p5: similar to p4
		public static void SET_OBJECT_PHYSICS_PARAMS(Obj obj, float weight, float p2, float p3, float p4, float p5, float gravity, float p7, float p8, float p9, float p10, float buoyancy) { Invoke(0xF6DF6E90DE7DF90F, V(obj), V(weight), V(p2), V(p3), V(p4), V(p5), V(gravity), V(p7), V(p8), V(p9), V(p10), V(buoyancy)); }
		public static float GET_OBJECT_FRAGMENT_DAMAGE_HEALTH(Any p0, bool p1) { return Invoke<float>(0xB6FBFD079B8D0596, V(p0), V(p1)); }
		public static void SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN(Obj obj, bool toggle) { Invoke(0x406137F8EF90EAF5, V(obj), V(toggle)); }
		public static bool IS_ANY_OBJECT_NEAR_POINT(float x, float y, float z, float range, bool p4) { return Invoke<bool>(0x397DC58FF00298D1, V(x), V(y), V(z), V(range), V(p4)); }
		public static bool IS_OBJECT_NEAR_POINT(Hash objectHash, float x, float y, float z, float range) { return Invoke<bool>(0x8C90FE4B381BA60A, V(objectHash), V(x), V(y), V(z), V(range)); }
		public static void REMOVE_OBJECT_HIGH_DETAIL_MODEL(Obj obj) { Invoke(0x4A39DB43E47CF3AA, V(obj)); }
		public static void BREAK_OBJECT_FRAGMENT_CHILD(Obj p0, Any p1, bool p2) { Invoke(0xE7E4C198B0185900, V(p0), V(p1), V(p2)); }
		public static void DAMAGE_OBJECT_FRAGMENT_CHILD(Any p0, Any p1, Any p2) { Invoke(0xE05F6AEEFEB0BB02, V(p0), V(p1), V(p2)); }
		public static void FIX_OBJECT_FRAGMENT(Obj obj) { Invoke(0xF9C1681347C8BD15, V(obj)); }
		public static void TRACK_OBJECT_VISIBILITY(Obj obj) { Invoke(0xB252BC036B525623, V(obj)); }
		public static bool IS_OBJECT_VISIBLE(Obj obj) { return Invoke<bool>(0x8B32ACE6326A7546, V(obj)); }
		public static void SET_OBJECT_IS_SPECIAL_GOLFBALL(Obj obj, bool toggle) { Invoke(0xC6033D32241F6FB5, V(obj), V(toggle)); }
		public static void SET_OBJECT_TAKES_DAMAGE_FROM_COLLIDING_WITH_BUILDINGS(Any p0, bool p1) { Invoke(0xEB6F1A9B5510A5D2, V(p0), V(p1)); }
		public static void ALLOW_DAMAGE_EVENTS_FOR_NON_NETWORKED_OBJECTS(bool value) { Invoke(0xABDABF4E1EDECBFA, V(value)); }
		// Requires a component_at_*_flsh to be attached to the weapon obj
		public static void SET_CUTSCENES_WEAPON_FLASHLIGHT_ON_THIS_FRAME(Obj obj, bool toggle) { Invoke(0xBCE595371A5FBAAF, V(obj), V(toggle)); }
		// Example:
		// OBJECT::GET_RAYFIRE_MAP_OBJECT(-809.9619750976562, 170.919, 75.7406997680664, 3.0, "des_tvsmash");
		public static Obj GET_RAYFIRE_MAP_OBJECT(float x, float y, float z, float radius, string name) { return Invoke<Obj>(0xB48FCED898292E52, V(x), V(y), V(z), V(radius), V(name)); }
		// Defines the state of a destructible obj.
		// Use the GET_RAYFIRE_MAP_OBJECT native to find an obj's handle with its name / coords.
		// State 2 == obj just spawned
		// State 4 == Beginning of the animation
		// State 6 == Start animation
		// State 9 == End of the animation
		public static void SET_STATE_OF_RAYFIRE_MAP_OBJECT(Obj obj, int state) { Invoke(0x5C29F698D404C5E1, V(obj), V(state)); }
		// Get a destructible obj's state.
		// Substract 1 to get the real state.
		// See SET_STATE_OF_RAYFIRE_MAP_OBJECT to see the different states
		// For example, if the obj just spawned (state 2), the native will return 3.
		public static int GET_STATE_OF_RAYFIRE_MAP_OBJECT(Obj obj) { return Invoke<int>(0x899BA936634A322E, V(obj)); }
		// Returns true if a destructible obj with this handle exists, false otherwise.  
		public static bool DOES_RAYFIRE_MAP_OBJECT_EXIST(Obj obj) { return Invoke<bool>(0x52AF537A0C5B8AAD, V(obj)); }
		// `obj`: The des-obj handle to get the animation progress from.
		// Return value is a float between 0.0 and 1.0, 0.0 is the beginning of the animation, 1.0 is the end. Value resets to 0.0 instantly after reaching 1.0.
		public static float GET_RAYFIRE_MAP_OBJECT_ANIM_PHASE(Obj obj) { return Invoke<float>(0x260EE4FDBDF4DB01, V(obj)); }
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static Pickup CREATE_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int p4, int value, bool p6, Hash modelHash) { return Invoke<Pickup>(0xFBA08C503DD5FA58, V(pickupHash), V(posX), V(posY), V(posZ), V(p4), V(value), V(p6), V(modelHash)); }
		// flags:
		// 8 (1 << 3): place on ground
		// 512 (1 << 9): spin around
		// 
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static Pickup CREATE_PICKUP_ROTATE(Hash pickupHash, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, int flag, int amount, Any p9, bool p10, Hash modelHash) { return Invoke<Pickup>(0x891804727E0A98B7, V(pickupHash), V(posX), V(posY), V(posZ), V(rotX), V(rotY), V(rotZ), V(flag), V(amount), V(p9), V(p10), V(modelHash)); }
		public static void FORCE_PICKUP_ROTATE_FACE_UP() { Invoke(0x394CD08E31313C28); }
		public static void SET_CUSTOM_PICKUP_WEAPON_HASH(Hash pickupHash, Pickup pickup) { Invoke(0x826D1EE4D1CAFC78, V(pickupHash), V(pickup)); }
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static Obj CREATE_AMBIENT_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int flags, int value, Hash modelHash, bool p7, bool p8) { return Invoke<Obj>(0x673966A0C0FD7171, V(pickupHash), V(posX), V(posY), V(posZ), V(flags), V(value), V(modelHash), V(p7), V(p8)); }
		public static Obj CREATE_NON_NETWORKED_AMBIENT_PICKUP(Hash pickupHash, float posX, float posY, float posZ, int flags, int value, Hash modelHash, bool p7, bool p8) { return Invoke<Obj>(0x9C93764223E29C50, V(pickupHash), V(posX), V(posY), V(posZ), V(flags), V(value), V(modelHash), V(p7), V(p8)); }
		public static void BLOCK_PLAYERS_FOR_AMBIENT_PICKUP(Any p0, Any p1) { Invoke(0x1E3F1B1B891A2AAA, V(p0), V(p1)); }
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static Obj CREATE_PORTABLE_PICKUP(Hash pickupHash, float x, float y, float z, bool placeOnGround, Hash modelHash) { return Invoke<Obj>(0x2EAF1FDB2FB55698, V(pickupHash), V(x), V(y), V(z), V(placeOnGround), V(modelHash)); }
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static Obj CREATE_NON_NETWORKED_PORTABLE_PICKUP(Hash pickupHash, float x, float y, float z, bool placeOnGround, Hash modelHash) { return Invoke<Obj>(0x125494B98A21AAF7, V(pickupHash), V(x), V(y), V(z), V(placeOnGround), V(modelHash)); }
		public static void ATTACH_PORTABLE_PICKUP_TO_PED(Obj pickupObject, Ped ped) { Invoke(0x8DC39368BDD57755, V(pickupObject), V(ped)); }
		public static void DETACH_PORTABLE_PICKUP_FROM_PED(Obj pickupObject) { Invoke(0xCF463D1E9A0AECB1, V(pickupObject)); }
		public static void FORCE_PORTABLE_PICKUP_LAST_ACCESSIBLE_POSITION_SETTING(Obj obj) { Invoke(0x5CE2E45A5CE2E45A, V(obj)); }
		public static void HIDE_PORTABLE_PICKUP_WHEN_DETACHED(Obj pickupObject, bool toggle) { Invoke(0x867458251D47CCB2, V(pickupObject), V(toggle)); }

		public static void SET_MAX_NUM_PORTABLE_PICKUPS_CARRIED_BY_PLAYER(Hash modelHash, int number) { Invoke(0x0BF3B3BD47D79C08, V(modelHash), V(number)); }
		public static void SET_LOCAL_PLAYER_CAN_COLLECT_PORTABLE_PICKUPS(bool toggle) { Invoke(0x78857FC65CADB909, V(toggle)); }
		public static Vector3 GET_SAFE_PICKUP_COORDS(float x, float y, float z, float p3, float p4) { return Invoke<Vector3>(0x6E16BC2503FF1FF0, V(x), V(y), V(z), V(p3), V(p4)); }
		// Adds an area that seems to be related to pickup physics behavior.
		// Max amount of areas is 10. Only works in multiplayer.
		public static void ADD_EXTENDED_PICKUP_PROBE_AREA(float x, float y, float z, float radius) { Invoke(0xD4A7A435B3710D05, V(x), V(y), V(z), V(radius)); }
		// Clears all areas created by ADD_EXTENDED_PICKUP_PROBE_AREA
		public static void CLEAR_EXTENDED_PICKUP_PROBE_AREAS() { Invoke(0xB7C6D80FB371659A); }
		public static Vector3 GET_PICKUP_COORDS(Pickup pickup) { return Invoke<Vector3>(0x225B8B35C88029B3, V(pickup)); }
		public static void SUPPRESS_PICKUP_SOUND_FOR_PICKUP(Any p0, Any p1) { Invoke(0x8DCA505A5C196F05, V(p0), V(p1)); }
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static void REMOVE_ALL_PICKUPS_OF_TYPE(Hash pickupHash) { Invoke(0x27F9D613092159CF, V(pickupHash)); }
		public static bool HAS_PICKUP_BEEN_COLLECTED(Pickup pickup) { return Invoke<bool>(0x80EC48E6679313F9, V(pickup)); }
		public static void REMOVE_PICKUP(Pickup pickup) { Invoke(0x3288D8ACAECD2AB2, V(pickup)); }
		// Spawns one or more money pickups.
		// 
		// x: The X-component of the world position to spawn the money pickups at.
		// y: The Y-component of the world position to spawn the money pickups at.
		// z: The Z-component of the world position to spawn the money pickups at.
		// value: The combined value of the pickups (in dollars).
		// amount: The number of pickups to spawn.
		// model: The model to use, or 0 for default money model.
		// 
		// Example:
		// CREATE_MONEY_PICKUPS(x, y, z, 1000, 3, 0x684a97ae);
		// 
		// Spawns 3 spray cans that'll collectively give $1000 when picked up. (Three spray cans, each giving $334, $334, $332 = $1000).
		// 
		// ==============================================
		// 
		// Max is 2000 in MP. So if you put the amount to 20, but the value to $400,000 eg. They will only be able to pickup 20 - $2,000 bags. So, $40,000
		public static void CREATE_MONEY_PICKUPS(float x, float y, float z, int value, int amount, Hash model) { Invoke(0x0589B5E791CE9B2B, V(x), V(y), V(z), V(value), V(amount), V(model)); }
		public static bool DOES_PICKUP_EXIST(Pickup pickup) { return Invoke<bool>(0xAFC1CA75AD4074D1, V(pickup)); }
		public static bool DOES_PICKUP_OBJECT_EXIST(Obj pickupObject) { return Invoke<bool>(0xD9EFB6DBF7DAAEA3, V(pickupObject)); }
		public static Obj GET_PICKUP_OBJECT(Pickup pickup) { return Invoke<Obj>(0x5099BC55630B25AE, V(pickup)); }
		public static bool IS_OBJECT_A_PICKUP(Obj obj) { return Invoke<bool>(0xFC481C641EBBD27D, V(obj)); }

		public static bool IS_OBJECT_A_PORTABLE_PICKUP(Obj obj) { return Invoke<bool>(0x0378C08504160D0D, V(obj)); }
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static bool DOES_PICKUP_OF_TYPE_EXIST_IN_AREA(Hash pickupHash, float x, float y, float z, float radius) { return Invoke<bool>(0xF9C36251F6E48E33, V(pickupHash), V(x), V(y), V(z), V(radius)); }
		public static void SET_PICKUP_REGENERATION_TIME(Pickup pickup, int duration) { Invoke(0x78015C9B4B3ECC9D, V(pickup), V(duration)); }
		public static void FORCE_PICKUP_REGENERATE(Any p0) { Invoke(0x758A5C1B3B1E1990, V(p0)); }
		// Disabling/enabling a player from getting pickups. From the scripts:
		// 
		// OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
		// OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
		// OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 1);
		// OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_portable_package}, 0);
		// OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 0);
		// OBJECT::SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(PLAYER::PLAYER_ID(), ${pickup_armour_standard}, 1);
		// 
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static void SET_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_OF_TYPE(Player player, Hash pickupHash, bool toggle) { Invoke(0x616093EC6B139DD9, V(player), V(pickupHash), V(toggle)); }
		// Maximum amount of pickup models that can be disallowed is 30.
		public static void SET_LOCAL_PLAYER_PERMITTED_TO_COLLECT_PICKUPS_WITH_MODEL(Hash modelHash, bool toggle) { Invoke(0x88EAEC617CD26926, V(modelHash), V(toggle)); }
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static void ALLOW_ALL_PLAYERS_TO_COLLECT_PICKUPS_OF_TYPE(Hash pickupHash) { Invoke(0xFDC07C58E8AAB715, V(pickupHash)); }
		public static void SET_TEAM_PICKUP_OBJECT(Obj obj, Any p1, bool p2) { Invoke(0x53E0DF1A2A3CF0CA, V(obj), V(p1), V(p2)); }
		public static void PREVENT_COLLECTION_OF_PORTABLE_PICKUP(Obj obj, bool p1, bool p2) { Invoke(0x92AEFB5F6E294023, V(obj), V(p1), V(p2)); }
		public static void SET_PICKUP_OBJECT_GLOW_WHEN_UNCOLLECTABLE(Pickup pickup, bool toggle) { Invoke(0x27F248C3FEBFAAD3, V(pickup), V(toggle)); }
		public static void _SET_PICKUP_GLOW_DISABLED(Pickup pickup, bool toggle) { Invoke(0x08BD8BA5BDE2C2FA, V(pickup), V(toggle)); }
		// p1 is always 0.51. This native is called before SET_PICKUP_REGENERATION_TIME in all occurances.
		public static void SET_PICKUP_GLOW_OFFSET(Pickup pickup, float p1) { Invoke(0x0596843B34B95CE5, V(pickup), V(p1)); }
		// p1 is always -0.2 in scripts and p2 is always true in scripts.
		public static void SET_PICKUP_OBJECT_GLOW_OFFSET(Pickup pickup, float p1, bool p2) { Invoke(0xA08FE5E49BDC39DD, V(pickup), V(p1), V(p2)); }
		public static void SET_OBJECT_GLOW_IN_SAME_TEAM(Pickup pickup) { Invoke(0x62454A641B41F3C5, V(pickup)); }
		public static void SET_PICKUP_OBJECT_ARROW_MARKER(Pickup pickup, bool toggle) { Invoke(0x39A5FB7EAF150840, V(pickup), V(toggle)); }
		public static void ALLOW_PICKUP_ARROW_MARKER_WHEN_UNCOLLECTABLE(Pickup pickup, bool toggle) { Invoke(0x834344A414C7C85D, V(pickup), V(toggle)); }
		public static int GET_DEFAULT_AMMO_FOR_WEAPON_PICKUP(Hash pickupHash) { return Invoke<int>(0xDB41D07A45A6D4B7, V(pickupHash)); }
		public static void SET_PICKUP_GENERATION_RANGE_MULTIPLIER(float multiplier) { Invoke(0x318516E02DE3ECE2, V(multiplier)); }
		public static float GET_PICKUP_GENERATION_RANGE_MULTIPLIER() { return Invoke<float>(0xB3ECA65C7317F174); }
		public static void SET_ONLY_ALLOW_AMMO_COLLECTION_WHEN_LOW(bool p0) { Invoke(0x31F924B53EADDF65, V(p0)); }
		public static void SET_PICKUP_UNCOLLECTABLE(Pickup pickup, bool toggle) { Invoke(0x1C1B69FAE509BA97, V(pickup), V(toggle)); }
		public static void SET_PICKUP_TRANSPARENT_WHEN_UNCOLLECTABLE(Pickup pickup, bool toggle) { Invoke(0x858EC9FD25DE04AA, V(pickup), V(toggle)); }
		public static void SET_PICKUP_HIDDEN_WHEN_UNCOLLECTABLE(Pickup pickup, bool toggle) { Invoke(0x3ED2B83AB2E82799, V(pickup), V(toggle)); }
		public static void SET_PICKUP_OBJECT_TRANSPARENT_WHEN_UNCOLLECTABLE(Pickup pickup, bool toggle) { Invoke(0x8881C98A31117998, V(pickup), V(toggle)); }
		// p0 is either 0 or 50 in scripts.
		public static void SET_PICKUP_OBJECT_ALPHA_WHEN_TRANSPARENT(int p0) { Invoke(0x8CFF648FBD7330F1, V(p0)); }
		public static void SET_PORTABLE_PICKUP_PERSIST(Pickup pickup, bool toggle) { Invoke(0x46F3ADD1E2D5BAF2, V(pickup), V(toggle)); }
		public static void ALLOW_PORTABLE_PICKUP_TO_MIGRATE_TO_NON_PARTICIPANTS(Pickup pickup, bool toggle) { Invoke(0x641F272B52E2F0F8, V(pickup), V(toggle)); }
		public static void FORCE_ACTIVATE_PHYSICS_ON_UNFIXED_PICKUP(Pickup pickup, bool toggle) { Invoke(0x4C134B4DF76025D0, V(pickup), V(toggle)); }
		public static void ALLOW_PICKUP_BY_NONE_PARTICIPANT(Pickup pickup, bool toggle) { Invoke(0xAA059C615DE9DD03, V(pickup), V(toggle)); }
		// enum ePickupRewardType
		// {
		//     PICKUP_REWARD_TYPE_AMMO = (1 << 0),
		//     PICKUP_REWARD_TYPE_BULLET_MP = (1 << 1),
		//     PICKUP_REWARD_TYPE_MISSILE_MP = (1 << 2),
		//     PICKUP_REWARD_TYPE_GRENADE_LAUNCHER_MP = (1 << 3),
		//     PICKUP_REWARD_TYPE_ARMOUR = (1 << 4),
		//     PICKUP_REWARD_TYPE_HEALTH = (1 << 5),
		//     PICKUP_REWARD_TYPE_HEALTH_VARIABLE = PICKUP_REWARD_TYPE_HEALTH,
		//     PICKUP_REWARD_TYPE_MONEY_FIXED = (1 << 6),
		//     PICKUP_REWARD_TYPE_MONEY_VARIABLE = PICKUP_REWARD_TYPE_MONEY_FIXED,
		//     PICKUP_REWARD_TYPE_WEAPON = (1 << 7),
		//     PICKUP_REWARD_TYPE_STAT = (1 << 8),
		//     PICKUP_REWARD_TYPE_STAT_VARIABLE = PICKUP_REWARD_TYPE_STAT,
		//     PICKUP_REWARD_TYPE_VEHICLE_FIX = (1 << 9),
		//     PICKUP_REWARD_TYPE_FIREWORK_MP = (1 << 10),
		// };
		public static void SUPPRESS_PICKUP_REWARD_TYPE(int rewardType, bool suppress) { Invoke(0xF92099527DB8E2A7, V(rewardType), V(suppress)); }
		public static void CLEAR_ALL_PICKUP_REWARD_TYPE_SUPPRESSION() { Invoke(0xA2C1F5E92AFE49ED); }
		public static void CLEAR_PICKUP_REWARD_TYPE_SUPPRESSION(int rewardType) { Invoke(0x762DB2D380B48D04, V(rewardType)); }
		// draws circular marker at pos
		// -1 = none
		// 0 = red
		// 1 = green
		// 2 = blue
		// 3 = green larger
		// 4 = nothing
		// 5 = green small
		public static void RENDER_FAKE_PICKUP_GLOW(float x, float y, float z, int colorIndex) { Invoke(0x3430676B11CDF21D, V(x), V(y), V(z), V(colorIndex)); }
		public static void SET_PICKUP_OBJECT_COLLECTABLE_IN_VEHICLE(Pickup pickup) { Invoke(0x7813E8B8C4AE4799, V(pickup)); }
		public static void SET_PICKUP_TRACK_DAMAGE_EVENTS(Pickup pickup, bool toggle) { Invoke(0xBFFE53AE7E67FCDC, V(pickup), V(toggle)); }
		// Sets entity+38 to C (when false) or 0xFF3f (when true)
		public static void SET_ENTITY_FLAG_SUPPRESS_SHADOW(Entity entity, bool toggle) { Invoke(0xD05A3241B9A86F19, V(entity), V(toggle)); }
		public static void SET_ENTITY_FLAG_RENDER_SMALL_SHADOW(Obj obj, bool toggle) { Invoke(0xB2D0BDE54F0E8E5A, V(obj), V(toggle)); }
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static Hash GET_WEAPON_TYPE_FROM_PICKUP_TYPE(Hash pickupHash) { return Invoke<Hash>(0x08F96CA6C551AD51, V(pickupHash)); }
		// Returns the pickup hash for the given weapon hash
		public static Hash GET_PICKUP_TYPE_FROM_WEAPON_HASH(Hash weaponHash) { return Invoke<Hash>(0xD6429A016084F1A5, V(weaponHash)); }
		public static bool IS_PICKUP_WEAPON_OBJECT_VALID(Obj obj) { return Invoke<bool>(0x11D1E53A726891FE, V(obj)); }
		public static int GET_OBJECT_TINT_INDEX(Obj obj) { return Invoke<int>(0xE84EB93729C5F36A, V(obj)); }
		// enum ObjectPaintVariants
		// {
		//  Pacific = 0,
		//   Azure = 1,
		//     Nautical = 2,
		//  Continental = 3,
		//   Battleship = 4,
		//    Intrepid = 5,
		//  Uniform = 6,
		//   Classico = 7,
		//  Mediterranean = 8,
		//     Command = 9,
		//   Mariner = 10,
		//  Ruby = 11,
		//     Vintage = 12,
		//  Pristine = 13,
		//     Merchant = 14,
		//     Voyager = 15
		// };
		public static void SET_OBJECT_TINT_INDEX(Obj obj, int textureVariation) { Invoke(0x971DA0055324D033, V(obj), V(textureVariation)); }
		public static bool SET_TINT_INDEX_CLOSEST_BUILDING_OF_TYPE(float x, float y, float z, float radius, Hash modelHash, int textureVariation) { return Invoke<bool>(0xF12E33034D887F66, V(x), V(y), V(z), V(radius), V(modelHash), V(textureVariation)); }
		public static void SET_PROP_TINT_INDEX(Any p0, Any p1) { Invoke(0x31574B1B41268673, V(p0), V(p1)); }
		public static bool SET_PROP_LIGHT_COLOR(Obj obj, bool p1, int r, int g, int b) { return Invoke<bool>(0x5F048334B4A4E774, V(obj), V(p1), V(r), V(g), V(b)); }
		public static bool IS_PROP_LIGHT_OVERRIDEN(Obj obj) { return Invoke<bool>(0xADF084FB8F075D06, V(obj)); }
		public static void SET_OBJECT_IS_VISIBLE_IN_MIRRORS(Obj obj, bool toggle) { Invoke(0x3B2FD68DB5F8331C, V(obj), V(toggle)); }
		public static void SET_OBJECT_SPEED_BOOST_AMOUNT(Obj obj, Any p1) { Invoke(0x96EE0EBA0163DF80, V(obj), V(p1)); }
		public static void SET_OBJECT_SPEED_BOOST_DURATION(Obj obj, float duration) { Invoke(0xDF6CA0330F2E737B, V(obj), V(duration)); }
		// returns pickup hash.
		// 
		// Full list of pickup types by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pickupTypes.json
		public static Hash CONVERT_OLD_PICKUP_TYPE_TO_NEW(Hash pickupHash) { return Invoke<Hash>(0x5EAAD83F8CFB4575, V(pickupHash)); }
		public static void SET_FORCE_OBJECT_THIS_FRAME(float x, float y, float z, float p3) { Invoke(0xF538081986E49E9D, V(x), V(y), V(z), V(p3)); }
		// is this like setting is as no longer needed?
		public static void ONLY_CLEAN_UP_OBJECT_WHEN_OUT_OF_RANGE(Obj obj) { Invoke(0xADBE4809F19F927A, V(obj)); }
		public static void SET_DISABLE_COLLISIONS_BETWEEN_CARS_AND_CAR_PARACHUTE(Any p0) { Invoke(0x8CAAB2BD3EA58BD4, V(p0)); }
		public static void SET_PROJECTILES_SHOULD_EXPLODE_ON_CONTACT(Entity entity, Any p1) { Invoke(0x63ECF581BC70E363, V(entity), V(p1)); }
		// Activate the physics to: "xs_prop_arena_{flipper,wall,bollard,turntable,pit}"
		public static void SET_DRIVE_ARTICULATED_JOINT(Obj obj, bool toggle, int p2) { Invoke(0x911024442F4898F0, V(obj), V(toggle), V(p2)); }
		public static void SET_DRIVE_ARTICULATED_JOINT_WITH_INFLICTOR(Obj obj, bool toggle, int p2, Ped ped) { Invoke(0xB20834A7DD3D8896, V(obj), V(toggle), V(p2), V(ped)); }
		public static void SET_OBJECT_IS_A_PRESSURE_PLATE(Obj obj, bool toggle) { Invoke(0x734E1714D077DA9A, V(obj), V(toggle)); }
		public static void SET_WEAPON_IMPACTS_APPLY_GREATER_FORCE(Obj obj, bool p1) { Invoke(0x1A6CBB06E2D0D79D, V(obj), V(p1)); }
		public static bool GET_IS_ARTICULATED_JOINT_AT_MIN_ANGLE(Obj obj, Any p1) { return Invoke<bool>(0x43C677F1E1158005, V(obj), V(p1)); }
		public static bool GET_IS_ARTICULATED_JOINT_AT_MAX_ANGLE(Any p0, Any p1) { return Invoke<bool>(0x3BD770D281982DB5, V(p0), V(p1)); }
		public static void SET_IS_OBJECT_ARTICULATED(Obj obj, bool toggle) { Invoke(0x1C57C94A6446492A, V(obj), V(toggle)); }
		public static void SET_IS_OBJECT_BALL(Obj obj, bool toggle) { Invoke(0xB5B7742424BD4445, V(obj), V(toggle)); }




		// control: 0: PLAYER_CONTROL, 1: CAMERA_CONTROL, 2: FRONTEND_CONTROL
		// For more info, see https://docs.fivem.net/docs/game-references/controls/
		public static bool IS_CONTROL_ENABLED(int control, int action) { return Invoke<bool>(0x1CEA6BFDF248E5D9, V(control), V(action)); }
		// Returns whether a control is currently pressed.
		// control: see IS_CONTROL_ENABLED
		public static bool IS_CONTROL_PRESSED(int control, int action) { return Invoke<bool>(0xF3A21BCD95725A4A, V(control), V(action)); }
		// Returns whether a control is currently _not_ pressed.
		// control: see IS_CONTROL_ENABLED
		public static bool IS_CONTROL_RELEASED(int control, int action) { return Invoke<bool>(0x648EE3E7F38877DD, V(control), V(action)); }
		// Returns whether a control was newly pressed since the last check.
		// control: see IS_CONTROL_ENABLED
		public static bool IS_CONTROL_JUST_PRESSED(int control, int action) { return Invoke<bool>(0x580417101DDB492F, V(control), V(action)); }
		// Returns whether a control was newly released since the last check.
		// control: see IS_CONTROL_ENABLED
		public static bool IS_CONTROL_JUST_RELEASED(int control, int action) { return Invoke<bool>(0x50F940259D3841E6, V(control), V(action)); }
		public static bool _IS_CONTROL_HELD_DOWN(int control, int action, int duration) { return Invoke<bool>(0xE9CB8C56E90D5079, V(control), V(action), V(duration)); }
		// control: see IS_CONTROL_ENABLED
		public static int GET_CONTROL_VALUE(int control, int action) { return Invoke<int>(0xD95E79E8686D2C27, V(control), V(action)); }
		// Returns the value of GET_CONTROL_VALUE normalized (i.e. a real number value between -1 and 1)
		// 
		// control: see IS_CONTROL_ENABLED
		public static float GET_CONTROL_NORMAL(int control, int action) { return Invoke<float>(0xEC3C9B8D5327B563, V(control), V(action)); }
		public static void SET_USE_ADJUSTED_MOUSE_COORDS(bool toggle) { Invoke(0x5B73C77D9EB66E24, V(toggle)); }
		// Seems to return values between -1 and 1 for controls like gas and steering.
		// 
		// control: see IS_CONTROL_ENABLED
		public static float GET_CONTROL_UNBOUND_NORMAL(int control, int action) { return Invoke<float>(0x5B84D09CEC5209C5, V(control), V(action)); }
		// This is for simulating player input.
		// value is a float value from 0 - 1
		// 
		// control: see IS_CONTROL_ENABLED
		public static bool SET_CONTROL_VALUE_NEXT_FRAME(int control, int action, float value) { return Invoke<bool>(0xE8A25867FBA3B05E, V(control), V(action), V(value)); }
		// control: see IS_CONTROL_ENABLED
		public static bool IS_DISABLED_CONTROL_PRESSED(int control, int action) { return Invoke<bool>(0xE2587F8CBBD87B1D, V(control), V(action)); }
		// control: see IS_CONTROL_ENABLED
		public static bool IS_DISABLED_CONTROL_RELEASED(int control, int action) { return Invoke<bool>(0xFB6C4072E9A32E92, V(control), V(action)); }
		// control: see IS_CONTROL_ENABLED
		public static bool IS_DISABLED_CONTROL_JUST_PRESSED(int control, int action) { return Invoke<bool>(0x91AEF906BCA88877, V(control), V(action)); }
		// control: see IS_CONTROL_ENABLED
		public static bool IS_DISABLED_CONTROL_JUST_RELEASED(int control, int action) { return Invoke<bool>(0x305C8DCD79DA8B0F, V(control), V(action)); }
		// control: see IS_CONTROL_ENABLED
		public static float GET_DISABLED_CONTROL_NORMAL(int control, int action) { return Invoke<float>(0x11E65974A982637C, V(control), V(action)); }
		// The "disabled" variant of GET_CONTROL_UNBOUND_NORMAL.
		// 
		// control: see IS_CONTROL_ENABLED
		public static float GET_DISABLED_CONTROL_UNBOUND_NORMAL(int control, int action) { return Invoke<float>(0x4F8A26A890FD62FB, V(control), V(action)); }
		// Returns time in ms since last input.
		// 
		// control: see IS_CONTROL_ENABLED
		public static int GET_CONTROL_HOW_LONG_AGO(int control) { return Invoke<int>(0xD7D22F5592AED8BA, V(control)); }
		// control: unused parameter
		public static bool IS_USING_KEYBOARD_AND_MOUSE(int control) { return Invoke<bool>(0xA571D46727E2B718, V(control)); }
		// control: see IS_CONTROL_ENABLED
		public static bool IS_USING_CURSOR(int control) { return Invoke<bool>(0x13337B38DB572509, V(control)); }
		public static bool SET_CURSOR_POSITION(float x, float y) { return Invoke<bool>(0xFC695459D4D0E219, V(x), V(y)); }
		// control: see IS_CONTROL_ENABLED
		// 
		// Hardcoded to return false.
		public static bool IS_USING_REMOTE_PLAY(int control) { return Invoke<bool>(0x23F09EADC01449D6, V(control)); }
		// control: unused parameter
		public static bool HAVE_CONTROLS_CHANGED(int control) { return Invoke<bool>(0x6CD79468A1E595C6, V(control)); }
		// allowXOSwap appears to always be true.
		// 
		// EG:
		// GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 201, 1) /*INPUT_FRONTEND_ACCEPT (e.g. Enter button)*/
		// GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 202, 1) /*INPUT_FRONTEND_CANCEL (e.g. ESC button)*/
		// GET_CONTROL_INSTRUCTIONAL_BUTTON (2, 51, 1) /*INPUT_CONTEXT (e.g. E button)*/
		// 
		// gtaforums.com/topic/819070-c-draw-instructional-buttons-scaleform-movie/#entry1068197378
		// 
		// control: unused parameter
		public static byte* GET_CONTROL_INSTRUCTIONAL_BUTTONS_STRING(int control, int action, bool allowXOSwap) { return PInvoke<byte>(0x0499D7B09FC9B407, V(control), V(action), V(allowXOSwap)); }
		// control: unused parameter
		public static byte* GET_CONTROL_GROUP_INSTRUCTIONAL_BUTTONS_STRING(int control, int controlGroup, bool allowXOSwap) { return PInvoke<byte>(0x80C2FD58D720C801, V(control), V(controlGroup), V(allowXOSwap)); }
		// control: see IS_CONTROL_ENABLED
		public static void SET_CONTROL_LIGHT_EFFECT_COLOR(int control, int red, int green, int blue) { Invoke(0x8290252FFF36ACB5, V(control), V(red), V(green), V(blue)); }
		// control: see IS_CONTROL_ENABLED
		public static void CLEAR_CONTROL_LIGHT_EFFECT(int control) { Invoke(0xCB0360EFEFB2580D, V(control)); }
		// control: see IS_CONTROL_ENABLED
		// duration in milliseconds 
		// frequency should range from about 10 (slow vibration) to 255 (very fast)
		// 
		// example:
		// SET_CONTROL_SHAKE(PLAYER_CONTROL, 100, 200);
		public static void SET_CONTROL_SHAKE(int control, int duration, int frequency) { Invoke(0x48B3886C1358D0D5, V(control), V(duration), V(frequency)); }
		// Does nothing (it's a nullsub).
		public static void SET_CONTROL_TRIGGER_SHAKE(int control, int leftDuration, int leftFrequency, int rightDuration, int rightFrequency) { Invoke(0x14D29BB12D47F68C, V(control), V(leftDuration), V(leftFrequency), V(rightDuration), V(rightFrequency)); }
		// control: see IS_CONTROL_ENABLED
		public static void STOP_CONTROL_SHAKE(int control) { Invoke(0x38C16A305E8CDC8D, V(control)); }
		// control: see IS_CONTROL_ENABLED
		public static void SET_CONTROL_SHAKE_SUPPRESSED_ID(int control, int uniqueId) { Invoke(0xF239400E16C23E08, V(control), V(uniqueId)); }
		// control: see IS_CONTROL_ENABLED
		public static void CLEAR_CONTROL_SHAKE_SUPPRESSED_ID(int control) { Invoke(0xA0CEFCEA390AAB9B, V(control)); }
		public static bool IS_LOOK_INVERTED() { return Invoke<bool>(0x77B612531280010D); }
		// Used with IS_LOOK_INVERTED() and negates its affect.
		// 
		// --
		// 
		// Not sure how the person above got that description, but here's an actual example:
		// 
		// if (PAD::IS_USING_KEYBOARD_AND_MOUSE(2)) {
		//     if (a_5) {
		//         if (PAD::IS_LOOK_INVERTED()) {
		//             a_3 *= -1;
		//         }
		//         if (PAD::IS_MOUSE_LOOK_INVERTED()) {
		//             a_3 *= -1;
		//         }
		//     }
		// }
		public static bool IS_MOUSE_LOOK_INVERTED() { return Invoke<bool>(0xE1615EC03B3BB4FD); }
		// Hard-coded to return 3 if using KBM, otherwise same behavior as GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE.
		public static int GET_LOCAL_PLAYER_AIM_STATE() { return Invoke<int>(0xBB41AFBBBC0A0287); }
		// Returns the local player's targeting mode. See PLAYER::SET_PLAYER_TARGETING_MODE.
		public static int GET_LOCAL_PLAYER_GAMEPAD_AIM_STATE() { return Invoke<int>(0x59B9A7AF4C95133C); }
		public static bool GET_IS_USING_ALTERNATE_HANDBRAKE() { return Invoke<bool>(0x25AAA32BDC98F2A3); }
		// Returns profile setting 225.
		public static bool GET_IS_USING_ALTERNATE_DRIVEBY() { return Invoke<bool>(0x0F70731BACCFBB96); }
		// Returns profile setting 17.
		public static bool GET_ALLOW_MOVEMENT_WHILE_ZOOMED() { return Invoke<bool>(0xFC859E2374407556); }
		public static void SET_PLAYERPAD_SHAKES_WHEN_CONTROLLER_DISABLED(bool toggle) { Invoke(0x798FDEB5B1575088, V(toggle)); }
		// control: see IS_CONTROL_ENABLED
		public static void SET_INPUT_EXCLUSIVE(int control, int action) { Invoke(0xEDE476E5EE29EDB1, V(control), V(action)); }
		// control: see IS_CONTROL_ENABLED
		public static void DISABLE_CONTROL_ACTION(int control, int action, bool disableRelatedActions) { Invoke(0xFE99B66D079CF6BC, V(control), V(action), V(disableRelatedActions)); }
		// control: see IS_CONTROL_ENABLED
		public static void ENABLE_CONTROL_ACTION(int control, int action, bool enableRelatedActions) { Invoke(0x351220255D64C155, V(control), V(action), V(enableRelatedActions)); }
		// control: see IS_CONTROL_ENABLED
		public static void DISABLE_ALL_CONTROL_ACTIONS(int control) { Invoke(0x5F4B6931816E599B, V(control)); }
		// control: see IS_CONTROL_ENABLED
		public static void ENABLE_ALL_CONTROL_ACTIONS(int control) { Invoke(0xA5FFE9B05F199DE7, V(control)); }
		// Used in carsteal3 script with schemeName = "Carsteal4_spycar".
		public static bool INIT_PC_SCRIPTED_CONTROLS(string schemeName) { return Invoke<bool>(0x3D42B92563939375, V(schemeName)); }
		// Same as INIT_PC_SCRIPTED_CONTROLS
		public static bool SWITCH_PC_SCRIPTED_CONTROLS(string schemeName) { return Invoke<bool>(0x4683149ED1DDE7A1, V(schemeName)); }
		public static void SHUTDOWN_PC_SCRIPTED_CONTROLS() { Invoke(0x643ED62D5EA3BEBD); }
		// control: see IS_CONTROL_ENABLED
		public static void ALLOW_ALTERNATIVE_SCRIPT_CONTROLS_LAYOUT(int control) { Invoke(0x7F4724035FDCA1DD, V(control)); }




		// When nodeEnabled is set to false, all nodes in the area get disabled.
		// `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns true afterwards.
		// If it's true, `GET_VEHICLE_NODE_IS_SWITCHED_OFF` returns false.
		public static void SET_ROADS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool nodeEnabled, bool unknown2) { Invoke(0xBF1A602B5BA52FEE, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(nodeEnabled), V(unknown2)); }
		// unknown3 is related to `SEND_SCRIPT_WORLD_STATE_EVENT > CNetworkRoadNodeWorldStateData` in networked environments.
		// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
		public static void SET_ROADS_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, bool unknown1, bool unknown2, bool unknown3) { Invoke(0x1A5AA1208AF5DB59, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(unknown1), V(unknown2), V(unknown3)); }
		public static void SET_PED_PATHS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool p6, Any p7) { Invoke(0x34F060F4BF92E018, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p6), V(p7)); }
		// Flags are:
		// 1 = 1 = B02_IsFootpath
		// 2 = 4 = !B15_InteractionUnk
		// 4 = 0x20 = !B14_IsInterior
		// 8 = 0x40 = !B07_IsWater
		// 16 = 0x200 = B17_IsFlatGround
		// When onGround == true outPosition is a position located on the nearest pavement.
		// 
		// When a safe coord could not be found the result of a function is false and outPosition == Vector3.Zero.
		// 
		// In the scripts these flags are used: 0, 14, 12, 16, 20, 21, 28. 0 is most commonly used, then 16. 
		// 
		// 16 works for me, 0 crashed the script.
		public static bool GET_SAFE_COORD_FOR_PED(float x, float y, float z, bool onGround, Vector3* outPosition, int flags) { return Invoke<bool>(0xB61C8E878A4199CA, V(x), V(y), V(z), V(onGround), V(outPosition), V(flags)); }
		// https://gtaforums.com/topic/843561-pathfind-node-types
		public static bool GET_CLOSEST_VEHICLE_NODE(float x, float y, float z, Vector3* outPosition, int nodeFlags, float p5, float p6) { return Invoke<bool>(0x240A18690AE96513, V(x), V(y), V(z), V(outPosition), V(nodeFlags), V(p5), V(p6)); }
		// Get the closest vehicle node to a given position.
		public static bool GET_CLOSEST_MAJOR_VEHICLE_NODE(float x, float y, float z, Vector3* outPosition, float unknown1, float unknown2) { return Invoke<bool>(0x2EABE3B06F58C1BE, V(x), V(y), V(z), V(outPosition), V(unknown1), V(unknown2)); }
		// p5, p6 and p7 seems to be about the same as p4, p5 and p6 for GET_CLOSEST_VEHICLE_NODE. p6 and/or p7 has something to do with finding a node on the same path/road and same direction(at least for this native, something to do with the heading maybe). Edit this when you find out more.
		// 
		// nodeType: 0 = main roads, 1 = any dry path, 3 = water
		// p6 is always 3.0
		// p7 is always 0
		// 
		// gtaforums.com/topic/843561-pathfind-node-types
		// 
		// Example of usage, moving vehicle to closest path/road:
		// Vector3 coords = ENTITY::GET_ENTITY_COORDS(playerVeh, true);
		// Vector3 closestVehicleNodeCoords; 
		// float roadHeading; 
		// PATHFIND::GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(coords.x, coords.y, coords.z, &closestVehicleNodeCoords, &roadHeading, 1, 3, 0); 
		// ENTITY::SET_ENTITY_HEADING(playerVeh, roadHeading);
		// ENTITY::SET_ENTITY_COORDS(playerVeh, closestVehicleNodeCoords.x, closestVehicleNodeCoords.y, closestVehicleNodeCoords.z, 1, 0, 0, 1);
		// VEHICLE::SET_VEHICLE_ON_GROUND_PROPERLY(playerVeh);
		// 
		// ------------------------------------------------------------------
		// C# Example (ins1de) : https://pastebin.com/fxtMWAHD
		public static bool GET_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, Vector3* outPosition, float* outHeading, int nodeType, float p6, float p7) { return Invoke<bool>(0xFF071FB798B803B0, V(x), V(y), V(z), V(outPosition), V(outHeading), V(nodeType), V(p6), V(p7)); }
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE(float x, float y, float z, int nthClosest, Vector3* outPosition, int nodeFlags, float unknown1, float unknown2) { return Invoke<bool>(0xE50E52416CCF948B, V(x), V(y), V(z), V(nthClosest), V(outPosition), V(nodeFlags), V(unknown1), V(unknown2)); }
		// Returns the id.
		public static int GET_NTH_CLOSEST_VEHICLE_NODE_ID(float x, float y, float z, int nth, int nodeFlags, float p5, float p6) { return Invoke<int>(0x22D7275A79FE8215, V(x), V(y), V(z), V(nth), V(nodeFlags), V(p5), V(p6)); }
		// Get the nth closest vehicle node and its heading.
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float* outHeading, int* outNumLanes, int nodeFlags, float unknown3, float unknown4) { return Invoke<bool>(0x80CA6A8B6C094CC4, V(x), V(y), V(z), V(nthClosest), V(outPosition), V(outHeading), V(outNumLanes), V(nodeFlags), V(unknown3), V(unknown4)); }
		public static int GET_NTH_CLOSEST_VEHICLE_NODE_ID_WITH_HEADING(float x, float y, float z, int nthClosest, Vector3* outPosition, float* outHeading, int nodeFlags, float p7, float p8) { return Invoke<int>(0x6448050E9C2A7207, V(x), V(y), V(z), V(nthClosest), V(outPosition), V(outHeading), V(nodeFlags), V(p7), V(p8)); }
		// See gtaforums.com/topic/843561-pathfind-node-types for node type info. 0 = paved road only, 1 = any road, 3 = water
		// 
		// p10 always equals 3.0
		// p11 always equals 0
		public static bool GET_NTH_CLOSEST_VEHICLE_NODE_FAVOUR_DIRECTION(float x, float y, float z, float desiredX, float desiredY, float desiredZ, int nthClosest, Vector3* outPosition, float* outHeading, int nodeFlags, float p10, float p11) { return Invoke<bool>(0x45905BE8654AE067, V(x), V(y), V(z), V(desiredX), V(desiredY), V(desiredZ), V(nthClosest), V(outPosition), V(outHeading), V(nodeFlags), V(p10), V(p11)); }
		// Gets the density and flags of the closest node to the specified position.
		// Density is a value between 0 and 15, indicating how busy the road is.
		// Flags is a bit field.
		public static bool GET_VEHICLE_NODE_PROPERTIES(float x, float y, float z, int* density, int* flags) { return Invoke<bool>(0x0568566ACBB5DEDC, V(x), V(y), V(z), V(density), V(flags)); }
		// Returns true if the id is non zero.
		public static bool IS_VEHICLE_NODE_ID_VALID(int vehicleNodeId) { return Invoke<bool>(0x1EAF30FCFBF5AF74, V(vehicleNodeId)); }
		// Calling this with an invalid node id, will crash the game.
		// Note that IS_VEHICLE_NODE_ID_VALID simply checks if nodeId is not zero. It does not actually ensure that the id is valid.
		// Eg. IS_VEHICLE_NODE_ID_VALID(1) will return true, but will crash when calling GET_VEHICLE_NODE_POSITION().
		public static void GET_VEHICLE_NODE_POSITION(int nodeId, Vector3* outPosition) { Invoke(0x703123E5E7D429C2, V(nodeId), V(outPosition)); }
		// Returns false for nodes that aren't used for GPS routes.
		// Example:
		// Nodes in Fort Zancudo and LSIA are false
		public static bool GET_VEHICLE_NODE_IS_GPS_ALLOWED(int nodeID) { return Invoke<bool>(0xA2AE5C478B96E3B6, V(nodeID)); }
		// Returns true when the node is Offroad. Alleys, some dirt roads, and carparks return true.
		// Normal roads where plenty of Peds spawn will return false
		public static bool GET_VEHICLE_NODE_IS_SWITCHED_OFF(int nodeID) { return Invoke<bool>(0x4F5070AA58F69279, V(nodeID)); }
		// p1 seems to be always 1.0f in the scripts
		public static bool GET_CLOSEST_ROAD(float x, float y, float z, float p3, int p4, Vector3* p5, Vector3* p6, Any* p7, Any* p8, float* p9, bool p10) { return Invoke<bool>(0x132F52BBA570FE92, V(x), V(y), V(z), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10)); }
		public static bool LOAD_ALL_PATH_NODES(bool set) { return Invoke<bool>(0xC2AB6BFE34E92F8B, V(set)); }
		public static void SET_ALLOW_STREAM_PROLOGUE_NODES(bool toggle) { Invoke(0x228E5C6AD4D74BFD, V(toggle)); }
		// Activates Cayo Perico path nodes if passed `1`. GPS navigation will start working, maybe more stuff will change, not sure. It seems if you try to unload (pass `0`) when close to the island, your game might crash.
		public static void SET_ALLOW_STREAM_HEIST_ISLAND_NODES(int type) { Invoke(0xF74B1FFA4A15FBEA, V(type)); }
		public static bool ARE_NODES_LOADED_FOR_AREA(float x1, float y1, float x2, float y2) { return Invoke<bool>(0xF7B79A50B905A30D, V(x1), V(y1), V(x2), V(y2)); }
		// Used internally for long range tasks
		public static bool REQUEST_PATH_NODES_IN_AREA_THIS_FRAME(float x1, float y1, float x2, float y2) { return Invoke<bool>(0x07FB139B592FA687, V(x1), V(y1), V(x2), V(y2)); }
		public static void SET_ROADS_BACK_TO_ORIGINAL(float p0, float p1, float p2, float p3, float p4, float p5, Any p6) { Invoke(0x1EE7063B80FFC77C, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		// See IS_POINT_IN_ANGLED_AREA for the definition of an angled area.
		// bool p7 - always 1
		public static void SET_ROADS_BACK_TO_ORIGINAL_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, Any p7) { Invoke(0x0027501B9F3B407E, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(p7)); }
		public static void SET_AMBIENT_PED_RANGE_MULTIPLIER_THIS_FRAME(float multiplier) { Invoke(0x0B919E1FB47CC4E0, V(multiplier)); }
		public static void ADJUST_AMBIENT_PED_SPAWN_DENSITIES_THIS_FRAME(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) { Invoke(0xAA76052DDA9BFC3E, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		// p6 is always 0
		public static void SET_PED_PATHS_BACK_TO_ORIGINAL(float x1, float y1, float z1, float x2, float y2, float z2, Any p6) { Invoke(0xE04B48F2CC926253, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p6)); }
		public static bool GET_RANDOM_VEHICLE_NODE(float x, float y, float z, float radius, bool p4, bool p5, bool p6, Vector3* outPosition, int* nodeId) { return Invoke<bool>(0x93E0DB8440B73A7D, V(x), V(y), V(z), V(radius), V(p4), V(p5), V(p6), V(outPosition), V(nodeId)); }
		public static Vector3 GET_SPAWN_COORDS_FOR_VEHICLE_NODE(int nodeAddress, float towardsCoorsX, float towardsCoorsY, float towardsCoorsZ, Vector3* centrePoint, float* heading) { return Invoke<Vector3>(0x809549AFC7AEC597, V(nodeAddress), V(towardsCoorsX), V(towardsCoorsY), V(towardsCoorsZ), V(centrePoint), V(heading)); }
		// Determines the name of the street which is the closest to the given coordinates.
		// 
		// x,y,z - the coordinates of the street
		// streetName - returns a hash to the name of the street the coords are on
		// crossingRoad - if the coordinates are on an intersection, a hash to the name of the crossing road
		// 
		// Note: the names are returned as hashes, the strings can be returned using the function HUD::GET_STREET_NAME_FROM_HASH_KEY.
		public static void GET_STREET_NAME_AT_COORD(float x, float y, float z, Hash* streetName, Hash* crossingRoad) { Invoke(0x2EB41072B4C1E4C0, V(x), V(y), V(z), V(streetName), V(crossingRoad)); }
		// p3 is 0 in the only game script occurrence (trevor3) but 1 doesn't seem to make a difference
		// 
		// distToNxJunction seems to be the distance in metres * 10.0f
		// 
		// direction:
		// 0 = This happens randomly during the drive for seemingly no reason but if you consider that this native is only used in trevor3, it seems to mean "Next frame, stop whatever's being said and tell the player the direction."
		// 1 = Route is being calculated or the player is going in the wrong direction
		// 2 = Please Proceed the Highlighted Route
		// 3 = In (distToNxJunction) Turn Left
		// 4 = In (distToNxJunction) Turn Right
		// 5 = In (distToNxJunction) Keep Straight
		// 6 = In (distToNxJunction) Turn Sharply To The Left
		// 7 = In (distToNxJunction) Turn Sharply To The Right
		// 8 = Route is being recalculated or the navmesh is confusing. This happens randomly during the drive but consistently at {2044.0358, 2996.6116, 44.9717} if you face towards the bar and the route needs you to turn right. In that particular case, it could be a bug with how the turn appears to be 270 deg. CCW instead of "right." Either way, this seems to be the engine saying "I don't know the route right now."
		// 
		// return value set to 0 always
		public static int GENERATE_DIRECTIONS_TO_COORD(float x, float y, float z, bool p3, int* direction, float* p5, float* distToNxJunction) { return Invoke<int>(0xF90125F1F79ECDF8, V(x), V(y), V(z), V(p3), V(direction), V(p5), V(distToNxJunction)); }
		public static void SET_IGNORE_NO_GPS_FLAG(bool toggle) { Invoke(0x72751156E7678833, V(toggle)); }
		// See: SET_BLIP_ROUTE
		public static void SET_IGNORE_NO_GPS_FLAG_UNTIL_FIRST_NORMAL_NODE(bool toggle) { Invoke(0x1FC289A0C3FF470F, V(toggle)); }
		public static void SET_GPS_DISABLED_ZONE(float x1, float y1, float z1, float x2, float y2, float z3) { Invoke(0xDC20483CD3DD5201, V(x1), V(y1), V(z1), V(x2), V(y2), V(z3)); }
		public static int GET_GPS_BLIP_ROUTE_LENGTH() { return Invoke<int>(0xBBB45C3CF5C8AA85); }
		// p3 can be 0, 1 or 2.
		public static bool GET_POS_ALONG_GPS_TYPE_ROUTE(Vector3* result, bool p1, float p2, int p3) { return Invoke<bool>(0xF3162836C28F9DA5, V(result), V(p1), V(p2), V(p3)); }
		public static bool GET_GPS_BLIP_ROUTE_FOUND() { return Invoke<bool>(0x869DAACBBE9FA006); }
		public static bool GET_ROAD_BOUNDARY_USING_HEADING(float x, float y, float z, float heading, Vector3* outPosition) { return Invoke<bool>(0xA0F8A7517A273C05, V(x), V(y), V(z), V(heading), V(outPosition)); }

		public static bool GET_POSITION_BY_SIDE_OF_ROAD(float x, float y, float z, int p3, Vector3* outPosition) { return Invoke<bool>(0x16F46FB18C8009E4, V(x), V(y), V(z), V(p3), V(outPosition)); }
		// Gets a value indicating whether the specified position is on a road.
		// The vehicle parameter is not implemented (ignored).
		public static bool IS_POINT_ON_ROAD(float x, float y, float z, Vehicle vehicle) { return Invoke<bool>(0x125BF4ABFC536B09, V(x), V(y), V(z), V(vehicle)); }
		// Gets the next zone that has been disabled using SET_GPS_DISABLED_ZONE_AT_INDEX.
		public static int GET_NEXT_GPS_DISABLED_ZONE_INDEX() { return Invoke<int>(0xD3A6A0EF48823A8C); }
		// Disables the GPS route displayed on the minimap while within a certain zone (area). When in a disabled zone and creating a waypoint, the GPS route is not shown on the minimap until you are outside of the zone. When disabled, the direct distance is shown on minimap opposed to distance to travel. Seems to only work before setting a waypoint.
		// You can clear the disabled zone with CLEAR_GPS_DISABLED_ZONE_AT_INDEX.
		// 
		// **Setting a waypoint at the same coordinate:**
		// Disabled Zone: https://i.imgur.com/P9VUuxM.png
		// Enabled Zone (normal): https://i.imgur.com/BPi24aw.png
		public static void SET_GPS_DISABLED_ZONE_AT_INDEX(float x1, float y1, float z1, float x2, float y2, float z2, int index) { Invoke(0xD0BC1C6FB18EE154, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(index)); }
		// Clears a disabled GPS route area from a certain index previously set using `SET_GPS_DISABLED_ZONE_AT_INDEX`.
		public static void CLEAR_GPS_DISABLED_ZONE_AT_INDEX(int index) { Invoke(0x2801D0012266DF07, V(index)); }
		public static void ADD_NAVMESH_REQUIRED_REGION(float x, float y, float radius) { Invoke(0x387EAD7EE42F6685, V(x), V(y), V(radius)); }
		public static void REMOVE_NAVMESH_REQUIRED_REGIONS() { Invoke(0x916F0A3CDEC3445E); }
		public static bool IS_NAVMESH_REQUIRED_REGION_IN_USE() { return Invoke<bool>(0x705A844002B39DC0); }
		// Set toggle true to disable navmesh.
		// Set toggle false to enable navmesh.
		public static void DISABLE_NAVMESH_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool toggle) { Invoke(0x4C8872D8CDBE1B8B, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(toggle)); }
		public static bool ARE_ALL_NAVMESH_REGIONS_LOADED() { return Invoke<bool>(0x8415D95B194A3AEA); }
		// Returns whether navmesh for the region is loaded. The region is a rectangular prism defined by it's top left deepest corner to it's bottom right shallowest corner.
		// 
		// If you can re-word this so it makes more sense, please do. I'm horrible with words sometimes...
		public static bool IS_NAVMESH_LOADED_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<bool>(0xF813C7E63F9062A5, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		public static int GET_NUM_NAVMESHES_EXISTING_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<int>(0x01708E8DD3FF8C65, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		public static int ADD_NAVMESH_BLOCKING_OBJECT(float p0, float p1, float p2, float p3, float p4, float p5, float p6, bool p7, Any p8) { return Invoke<int>(0xFCD5C8E06E502F5A, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		public static void UPDATE_NAVMESH_BLOCKING_OBJECT(Any p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, Any p8) { Invoke(0x109E99373F290687, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		public static void REMOVE_NAVMESH_BLOCKING_OBJECT(Any p0) { Invoke(0x46399A7895957C0E, V(p0)); }
		public static bool DOES_NAVMESH_BLOCKING_OBJECT_EXIST(Any p0) { return Invoke<bool>(0x0EAEB0DB4B132399, V(p0)); }
		// Returns CGameWorldHeightMap's maximum Z value at specified point (grid node).
		public static float GET_APPROX_HEIGHT_FOR_POINT(float x, float y) { return Invoke<float>(0x29C24BFBED8AB8FB, V(x), V(y)); }
		// Returns CGameWorldHeightMap's maximum Z among all grid nodes that intersect with the specified rectangle.
		public static float GET_APPROX_HEIGHT_FOR_AREA(float x1, float y1, float x2, float y2) { return Invoke<float>(0x8ABE8608576D9CE3, V(x1), V(y1), V(x2), V(y2)); }
		// Returns CGameWorldHeightMap's minimum Z value at specified point (grid node).
		public static float GET_APPROX_FLOOR_FOR_POINT(float x, float y) { return Invoke<float>(0x336511A34F2E5185, V(x), V(y)); }
		// Returns CGameWorldHeightMap's minimum Z among all grid nodes that intersect with the specified rectangle.
		public static float GET_APPROX_FLOOR_FOR_AREA(float x1, float y1, float x2, float y2) { return Invoke<float>(0x3599D741C9AC6310, V(x1), V(y1), V(x2), V(y2)); }
		// Calculates the travel distance between a set of points.
		// 
		// Doesn't seem to correlate with distance on gps sometimes.
		// This function returns the value 100000.0 over long distances, seems to be a failure mode result, potentially occurring when not all path nodes are loaded into pathfind.
		public static float CALCULATE_TRAVEL_DISTANCE_BETWEEN_POINTS(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<float>(0xADD95C7005C4A197, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }


		public enum PedType : int
		{
			PLAYER_0,
			PLAYER_1,
			NETWORK_PLAYER,
			PLAYER_2,
			CIVMALE,
			CIVFEMALE,
			COP,
			GANG_ALBANIAN,
			GANG_BIKER_1,
			GANG_BIKER_2,
			GANG_ITALIAN,
			GANG_RUSSIAN,
			GANG_RUSSIAN_2,
			GANG_IRISH,
			GANG_JAMAICAN,
			GANG_AFRICAN_AMERICAN,
			GANG_KOREAN,
			GANG_CHINESE_JAPANESE,
			GANG_PUERTO_RICAN,
			DEALER,
			MEDIC,
			FIREMAN,
			CRIMINAL,
			BUM,
			PROSTITUTE,
			SPECIAL,
			MISSION,
			SWAT,
			ANIMAL,
			ARMY
		};

		// https://alloc8or.re/gta5/doc/enums/ePedType.txt
		// 
		// Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
		public static Ped CREATE_PED(PedType pedType, Hash modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostPed) { return Invoke<Ped>(0xD49F9B0955C367DE, V((int)pedType), V(modelHash), V(x), V(y), V(z), V(heading), V(isNetwork), V(bScriptHostPed)); }
		// Deletes the specified ped, then sets the handle pointed to by the pointer to NULL.
		public static void DELETE_PED(Ped* ped) { Invoke(0x9614299DCB53E54B, V(ped)); }
		public static Ped CLONE_PED(Ped ped, bool isNetwork, bool bScriptHostPed, bool copyHeadBlendFlag) { return Invoke<Ped>(0xEF29A16337FACADB, V(ped), V(isNetwork), V(bScriptHostPed), V(copyHeadBlendFlag)); }
		public static Ped CLONE_PED_ALT(Ped ped, bool isNetwork, bool bScriptHostPed, bool copyHeadBlendFlag, bool p4) { return Invoke<Ped>(0x668FD40BCBA5DE48, V(ped), V(isNetwork), V(bScriptHostPed), V(copyHeadBlendFlag), V(p4)); }
		// Copies ped's components and props to targetPed.
		public static void CLONE_PED_TO_TARGET(Ped ped, Ped targetPed) { Invoke(0xE952D6431689AD9A, V(ped), V(targetPed)); }
		public static void CLONE_PED_TO_TARGET_ALT(Ped ped, Ped targetPed, bool p2) { Invoke(0x148B08C2D2ACB884, V(ped), V(targetPed), V(p2)); }
		// Gets a value indicating whether the specified ped is in the specified vehicle.
		// 
		// If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
		public static bool IS_PED_IN_VEHICLE(Ped ped, Vehicle vehicle, bool atGetIn) { return Invoke<bool>(0xA3EE4A07279BB9DB, V(ped), V(vehicle), V(atGetIn)); }
		public static bool IS_PED_IN_MODEL(Ped ped, Hash modelHash) { return Invoke<bool>(0x796D90EFB19AA332, V(ped), V(modelHash)); }
		// Gets a value indicating whether the specified ped is in any vehicle.
		// 
		// If 'atGetIn' is false, the function will not return true until the ped is sitting in the vehicle and is about to close the door. If it's true, the function returns true the moment the ped starts to get onto the seat (after opening the door). Eg. if false, and the ped is getting into a submersible, the function will not return true until the ped has descended down into the submersible and gotten into the seat, while if it's true, it'll return true the moment the hatch has been opened and the ped is about to descend into the submersible.
		public static bool IS_PED_IN_ANY_VEHICLE(Ped ped, bool atGetIn) { return Invoke<bool>(0x997ABD671D25CA0B, V(ped), V(atGetIn)); }
		// xyz - relative to the world origin.
		public static bool IS_COP_PED_IN_AREA_3D(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<bool>(0x16EC4839969F9F5E, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// Gets a value indicating whether this ped's health is below its injured threshold.
		// 
		// The default threshold is 100.
		public static bool IS_PED_INJURED(Ped ped) { return Invoke<bool>(0x84A2DD9AC37C35C1, V(ped)); }
		// Returns whether the specified ped is hurt.
		public static bool IS_PED_HURT(Ped ped) { return Invoke<bool>(0x5983BB449D7FDB12, V(ped)); }
		// Gets a value indicating whether this ped's health is below its fatally injured threshold. The default threshold is 100.
		// If the handle is invalid, the function returns true.
		public static bool IS_PED_FATALLY_INJURED(Ped ped) { return Invoke<bool>(0xD839450756ED5A80, V(ped)); }
		// Seems to consistently return true if the ped is dead.
		// 
		// p1 is always passed 1 in the scripts.
		// 
		// I suggest to remove "OR_DYING" part, because it does not detect dying phase.
		// 
		// That's what the devs call it, cry about it.
		// 
		// lol
		public static bool IS_PED_DEAD_OR_DYING(Ped ped, bool p1) { return Invoke<bool>(0x3317DEDB88C95038, V(ped), V(p1)); }
		public static bool IS_CONVERSATION_PED_DEAD(Ped ped) { return Invoke<bool>(0xE0A0AEC214B1FABA, V(ped)); }
		public static bool IS_PED_AIMING_FROM_COVER(Ped ped) { return Invoke<bool>(0x3998B1276A3300E5, V(ped)); }
		// Returns whether the specified ped is reloading.
		public static bool IS_PED_RELOADING(Ped ped) { return Invoke<bool>(0x24B100C68C645951, V(ped)); }
		// Returns true if the given ped has a valid pointer to CPlayerInfo in its CPed class. That's all.
		public static bool IS_PED_A_PLAYER(Ped ped) { return Invoke<bool>(0x12534C348C6CB68B, V(ped)); }
		// pedType: see CREATE_PED
		// 
		// Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
		public static Ped CREATE_PED_INSIDE_VEHICLE(Vehicle vehicle, int pedType, Hash modelHash, int seat, bool isNetwork, bool bScriptHostPed) { return Invoke<Ped>(0x7DD959874C1FD534, V(vehicle), V(pedType), V(modelHash), V(seat), V(isNetwork), V(bScriptHostPed)); }
		public static void SET_PED_DESIRED_HEADING(Ped ped, float heading) { Invoke(0xAA5A7ECE2AA8FE70, V(ped), V(heading)); }
		public static void FORCE_ALL_HEADING_VALUES_TO_ALIGN(Ped ped) { Invoke(0xFF287323B0E2C69A, V(ped)); }
		// angle is ped's view cone
		public static bool IS_PED_FACING_PED(Ped ped, Ped otherPed, float angle) { return Invoke<bool>(0xD71649DB0A545AA3, V(ped), V(otherPed), V(angle)); }
		// Notes: The function only returns true while the ped is: 
		// A.) Swinging a random melee attack (including pistol-whipping)
		// 
		// B.) Reacting to being hit by a melee attack (including pistol-whipping)
		// 
		// C.) Is locked-on to an enemy (arms up, strafing/skipping in the default fighting-stance, ready to dodge+counter). 
		// 
		// You don't have to be holding the melee-targetting button to be in this stance; you stay in it by default for a few seconds after swinging at someone. If you do a sprinting punch, it returns true for the duration of the punch animation and then returns false again, even if you've punched and made-angry many peds
		public static bool IS_PED_IN_MELEE_COMBAT(Ped ped) { return Invoke<bool>(0x4E209B2C1EAD5159, V(ped)); }
		// Returns true if the ped doesn't do any movement. If the ped is being pushed forwards by using APPLY_FORCE_TO_ENTITY for example, the function returns false.
		public static bool IS_PED_STOPPED(Ped ped) { return Invoke<bool>(0x530944F6F4B8A214, V(ped)); }
		public static bool IS_PED_SHOOTING_IN_AREA(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, bool p7, bool p8) { return Invoke<bool>(0x7E9DFE24AC1E58EF, V(ped), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p7), V(p8)); }
		public static bool IS_ANY_PED_SHOOTING_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool p6, bool p7) { return Invoke<bool>(0xA0D3D71EA1086C55, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p6), V(p7)); }
		// Returns whether the specified ped is shooting.
		public static bool IS_PED_SHOOTING(Ped ped) { return Invoke<bool>(0x34616828CD07F1A1, V(ped)); }
		// accuracy = 0-100, 100 being perfectly accurate
		public static void SET_PED_ACCURACY(Ped ped, int accuracy) { Invoke(0x7AEFB85C1D49DEB6, V(ped), V(accuracy)); }
		public static int GET_PED_ACCURACY(Ped ped) { return Invoke<int>(0x37F4AD56ECBC0CD6, V(ped)); }
		public static void SET_AMBIENT_LAW_PED_ACCURACY_MODIFIER(float multiplier) { Invoke(0x87DDEB611B329A9C, V(multiplier)); }
		public static bool IS_PED_MODEL(Ped ped, Hash modelHash) { return Invoke<bool>(0xC9D55B1A358A5BF7, V(ped), V(modelHash)); }
		// Forces the ped to fall back and kills it.
		// 
		// It doesn't really explode the ped's head but it kills the ped
		public static void EXPLODE_PED_HEAD(Ped ped, Hash weaponHash) { Invoke(0x2D05CED3A38D0F3A, V(ped), V(weaponHash)); }
		// Judging purely from a quick disassembly, if the ped is in a vehicle, the ped will be deleted immediately. If not, it'll be marked as no longer needed. - very elegant..
		public static void REMOVE_PED_ELEGANTLY(Ped* ped) { Invoke(0xAC6D445B994DF95E, V(ped)); }
		// Same as SET_PED_ARMOUR, but ADDS 'amount' to the armor the Ped already has.
		public static void ADD_ARMOUR_TO_PED(Ped ped, int amount) { Invoke(0x5BA652A0CD14DF2F, V(ped), V(amount)); }
		// Sets the armor of the specified ped.
		// 
		// ped: The Ped to set the armor of.
		// amount: A value between 0 and 100 indicating the value to set the Ped's armor to.
		public static void SET_PED_ARMOUR(Ped ped, int amount) { Invoke(0xCEA04D83135264CC, V(ped), V(amount)); }
		// Ped: The ped to warp.
		// vehicle: The vehicle to warp the ped into.
		// Seat_Index: [-1 is driver seat, -2 first free passenger seat]
		// 
		// Moreinfo of Seat Index
		// DriverSeat = -1
		// Passenger = 0
		// Left Rear = 1
		// RightRear = 2
		public static void SET_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seatIndex) { Invoke(0xF75B0D629E1C063D, V(ped), V(vehicle), V(seatIndex)); }
		public static void SET_PED_ALLOW_VEHICLES_OVERRIDE(Ped ped, bool toggle) { Invoke(0x3C028C636A414ED9, V(ped), V(toggle)); }
		public static bool CAN_CREATE_RANDOM_PED(bool p0) { return Invoke<bool>(0x3E8349C08E4B82E4, V(p0)); }
		// vb.net
		// Dim ped_handle As Integer
		//                     With Game.Player.Character
		//                         Dim pos As Vector3 = .Position + .ForwardVector * 3
		//                         ped_handle = Native.Function.Call(Of Integer)(Hash.CREATE_RANDOM_PED, pos.X, pos.Y, pos.Z)
		//                     End With
		// 
		// Creates a Ped at the specified location, returns the Ped Handle.  
		// Ped will not act until SET_PED_AS_NO_LONGER_NEEDED is called.
		public static Ped CREATE_RANDOM_PED(float posX, float posY, float posZ) { return Invoke<Ped>(0xB4AC7D0CF06BFE8F, V(posX), V(posY), V(posZ)); }
		public static Ped CREATE_RANDOM_PED_AS_DRIVER(Vehicle vehicle, bool returnHandle) { return Invoke<Ped>(0x9B62392B474F44A0, V(vehicle), V(returnHandle)); }
		public static bool CAN_CREATE_RANDOM_DRIVER() { return Invoke<bool>(0xB8EB95E5B4E56978); }
		public static bool CAN_CREATE_RANDOM_BIKE_RIDER() { return Invoke<bool>(0xEACEEDA81751915C); }
		public static void SET_PED_MOVE_ANIMS_BLEND_OUT(Ped ped) { Invoke(0x9E8C908F41584ECD, V(ped)); }
		public static void SET_PED_CAN_BE_DRAGGED_OUT(Ped ped, bool toggle) { Invoke(0xC1670E958EEE24E5, V(ped), V(toggle)); }
		// ntoggle was always false except in one instance (b678).
		// 
		// The one time this is set to true seems to do with when you fail the mission.
		public static void SET_PED_ALLOW_HURT_COMBAT_FOR_ALL_MISSION_PEDS(bool toggle) { Invoke(0xF2BEBCDFAFDAA19E, V(toggle)); }
		// Returns true/false if the ped is/isn't male.
		public static bool IS_PED_MALE(Ped ped) { return Invoke<bool>(0x6D9F5FAA7488BA46, V(ped)); }
		// Returns true/false if the ped is/isn't humanoid.
		public static bool IS_PED_HUMAN(Ped ped) { return Invoke<bool>(0xB980061DA992779D, V(ped)); }
		// Gets the vehicle the specified Ped is in. Returns 0 if the ped is/was not in a vehicle.
		public static Vehicle GET_VEHICLE_PED_IS_IN(Ped ped, bool includeEntering) { return Invoke<Vehicle>(0x9A9112A0FE9A4713, V(ped), V(includeEntering)); }
		// Resets the value for the last vehicle driven by the Ped.
		public static void RESET_PED_LAST_VEHICLE(Ped ped) { Invoke(0xBB8DE8CF6A8DD8BB, V(ped)); }
		public static void SET_PED_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) { Invoke(0x95E3D6257B166CF2, V(multiplier)); }
		public static void SET_SCENARIO_PED_DENSITY_MULTIPLIER_THIS_FRAME(float p0, float p1) { Invoke(0x7A556143A1C03898, V(p0), V(p1)); }
		public static void SUPPRESS_AMBIENT_PED_AGGRESSIVE_CLEANUP_THIS_FRAME() { Invoke(0x5A7F62FDA59759BD); }
		public static void SET_SCRIPTED_CONVERSION_COORD_THIS_FRAME(float x, float y, float z) { Invoke(0x5086C7843552CF85, V(x), V(y), V(z)); }
		// The distance between these points, is the diagonal of a box (remember it's 3D).
		public static void SET_PED_NON_CREATION_AREA(float x1, float y1, float z1, float x2, float y2, float z2) { Invoke(0xEE01041D559983EA, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		public static void CLEAR_PED_NON_CREATION_AREA() { Invoke(0x2E05208086BA0651); }
		public static void INSTANTLY_FILL_PED_POPULATION() { Invoke(0x4759CC730F947C81); }
		// Same function call as PED::GET_MOUNT, aka just returns 0
		public static bool IS_PED_ON_MOUNT(Ped ped) { return Invoke<bool>(0x460BC76A0E10655E, V(ped)); }
		// 
		// Function just returns 0
		// void __fastcall ped__get_mount(NativeContext *a1)
		// {
		//   NativeContext *v1; // rbx@1
		// 
		//   v1 = a1;
		//   GetAddressOfPedFromScriptHandle(a1->Args->Arg1);
		//   v1->Returns->Item1= 0;
		// }
		public static Ped GET_MOUNT(Ped ped) { return Invoke<Ped>(0xE7E11B8DCBED1058, V(ped)); }
		// Gets a value indicating whether the specified ped is on top of any vehicle.
		// 
		// Return 1 when ped is on vehicle.
		// Return 0 when ped is not on a vehicle.
		// 
		public static bool IS_PED_ON_VEHICLE(Ped ped) { return Invoke<bool>(0x67722AEB798E5FAB, V(ped)); }
		public static bool IS_PED_ON_SPECIFIC_VEHICLE(Ped ped, Vehicle vehicle) { return Invoke<bool>(0xEC5F66E459AF3BB2, V(ped), V(vehicle)); }
		// Maximum possible amount of money on MP is 2000. ~JX
		// 
		// -----------------------------------------------------------------------------
		// 
		// Maximum amount that a ped can theoretically have is 65535 (0xFFFF) since the amount is stored as an unsigned short (uint16_t) value.
		public static void SET_PED_MONEY(Ped ped, int amount) { Invoke(0xA9C8960E8684C1B5, V(ped), V(amount)); }
		public static int GET_PED_MONEY(Ped ped) { return Invoke<int>(0x3F69145BBA87BAE7, V(ped)); }
		// Related to Peds dropping pickup_health_snack; p0 is a value between [0.0, 1.0] that corresponds to drop rate
		public static void SET_HEALTH_SNACKS_CARRIED_BY_ALL_NEW_PEDS(float p0, Any p1) { Invoke(0xFF4803BC019852D9, V(p0), V(p1)); }
		public static void SET_AMBIENT_PEDS_DROP_MONEY(bool p0) { Invoke(0x6B0E6172C9A4D902, V(p0)); }
		public static void _SET_BLOCK_AMBIENT_PEDS_FROM_DROPPING_WEAPONS_THIS_FRAME() { Invoke(0xC73EFFC5E043A8BA); }
		public static void SET_BLOCKING_OF_NON_TEMPORARY_EVENTS_FOR_AMBIENT_PEDS_THIS_FRAME(bool p0) { Invoke(0x9911F4A24485F653, V(p0)); }
		// Ped no longer takes critical damage modifiers if set to FALSE.
		// Example: Headshotting a player no longer one shots them. Instead they will take the same damage as a torso shot.
		public static void SET_PED_SUFFERS_CRITICAL_HITS(Ped ped, bool toggle) { Invoke(0xEBD76F2359F190AC, V(ped), V(toggle)); }
		public static void SET_PED_UPPER_BODY_DAMAGE_ONLY(Ped ped, bool toggle) { Invoke(0xAFC976FD0580C7B3, V(ped), V(toggle)); }
		// Detect if ped is sitting in the specified vehicle
		// [True/False]
		public static bool IS_PED_SITTING_IN_VEHICLE(Ped ped, Vehicle vehicle) { return Invoke<bool>(0xA808AA1D79230FC2, V(ped), V(vehicle)); }
		// Detect if ped is in any vehicle
		// [True/False]
		public static bool IS_PED_SITTING_IN_ANY_VEHICLE(Ped ped) { return Invoke<bool>(0x826AA586EDB9FEF8, V(ped)); }
		public static bool IS_PED_ON_FOOT(Ped ped) { return Invoke<bool>(0x01FEE67DB37F59B2, V(ped)); }
		public static bool IS_PED_ON_ANY_BIKE(Ped ped) { return Invoke<bool>(0x94495889E22C6479, V(ped)); }
		public static bool IS_PED_PLANTING_BOMB(Ped ped) { return Invoke<bool>(0xC70B5FAE151982D8, V(ped)); }
		public static Vector3 GET_DEAD_PED_PICKUP_COORDS(Ped ped, float p1, float p2) { return Invoke<Vector3>(0xCD5003B097200F36, V(ped), V(p1), V(p2)); }
		public static bool IS_PED_IN_ANY_BOAT(Ped ped) { return Invoke<bool>(0x2E0E1C2B4F6CB339, V(ped)); }
		public static bool IS_PED_IN_ANY_SUB(Ped ped) { return Invoke<bool>(0xFBFC01CCFB35D99E, V(ped)); }
		public static bool IS_PED_IN_ANY_HELI(Ped ped) { return Invoke<bool>(0x298B91AE825E5705, V(ped)); }
		public static bool IS_PED_IN_ANY_PLANE(Ped ped) { return Invoke<bool>(0x5FFF4CFC74D8FB80, V(ped)); }
		public static bool IS_PED_IN_FLYING_VEHICLE(Ped ped) { return Invoke<bool>(0x9134873537FA419C, V(ped)); }
		public static void SET_PED_DIES_IN_WATER(Ped ped, bool toggle) { Invoke(0x56CEF0AC79073BDE, V(ped), V(toggle)); }
		public static bool GET_PED_DIES_IN_WATER(Ped ped) { return Invoke<bool>(0x65671A4FB8218930, V(ped)); }
		public static void SET_PED_DIES_IN_SINKING_VEHICLE(Ped ped, bool toggle) { Invoke(0xD718A22995E2B4BC, V(ped), V(toggle)); }
		public static int GET_PED_ARMOUR(Ped ped) { return Invoke<int>(0x9483AF821605B1D8, V(ped)); }
		public static void SET_PED_STAY_IN_VEHICLE_WHEN_JACKED(Ped ped, bool toggle) { Invoke(0xEDF4079F9D54C9A1, V(ped), V(toggle)); }
		public static void SET_PED_CAN_BE_SHOT_IN_VEHICLE(Ped ped, bool toggle) { Invoke(0xC7EF1BA83230BA07, V(ped), V(toggle)); }
		public static bool GET_PED_LAST_DAMAGE_BONE(Ped ped, int* outBone) { return Invoke<bool>(0xD75960F6BD9EA49C, V(ped), V(outBone)); }
		public static void CLEAR_PED_LAST_DAMAGE_BONE(Ped ped) { Invoke(0x8EF6B7AC68E2F01B, V(ped)); }
		public static void SET_AI_WEAPON_DAMAGE_MODIFIER(float value) { Invoke(0x1B1E2A40A65B8521, V(value)); }
		public static void RESET_AI_WEAPON_DAMAGE_MODIFIER() { Invoke(0xEA16670E7BA4743C); }
		public static void SET_AI_MELEE_WEAPON_DAMAGE_MODIFIER(float modifier) { Invoke(0x66460DEDDD417254, V(modifier)); }
		public static void RESET_AI_MELEE_WEAPON_DAMAGE_MODIFIER() { Invoke(0x46E56A7CD1D63C3F); }
		public static void SET_TREAT_AS_AMBIENT_PED_FOR_DRIVER_LOCKON(Ped ped, bool p1) { Invoke(0x2F3C3D9F50681DE4, V(ped), V(p1)); }
		public static void SET_PED_CAN_BE_TARGETTED(Ped ped, bool toggle) { Invoke(0x63F58F7C80513AAD, V(ped), V(toggle)); }
		public static void SET_PED_CAN_BE_TARGETTED_BY_TEAM(Ped ped, int team, bool toggle) { Invoke(0xBF1CA77833E58F2C, V(ped), V(team), V(toggle)); }
		public static void SET_PED_CAN_BE_TARGETTED_BY_PLAYER(Ped ped, Player player, bool toggle) { Invoke(0x66B57B72E0836A76, V(ped), V(player), V(toggle)); }
		public static void SET_ALLOW_LOCKON_TO_PED_IF_FRIENDLY(Ped ped, bool toggle) { Invoke(0x061CB768363D6424, V(ped), V(toggle)); }
		public static void SET_USE_CAMERA_HEADING_FOR_DESIRED_DIRECTION_LOCK_ON_TEST(Ped ped, bool toggle) { Invoke(0xFD325494792302D7, V(ped), V(toggle)); }
		public static bool IS_PED_IN_ANY_POLICE_VEHICLE(Ped ped) { return Invoke<bool>(0x0BD04E29640C9C12, V(ped)); }
		public static void FORCE_PED_TO_OPEN_PARACHUTE(Ped ped) { Invoke(0x16E42E800B472221, V(ped)); }
		public static bool IS_PED_IN_PARACHUTE_FREE_FALL(Ped ped) { return Invoke<bool>(0x7DCE8BDA0F1C1200, V(ped)); }
		public static bool IS_PED_FALLING(Ped ped) { return Invoke<bool>(0xFB92A102F1C4DFA3, V(ped)); }
		public static bool IS_PED_JUMPING(Ped ped) { return Invoke<bool>(0xCEDABC5900A0BF97, V(ped)); }
		public static bool IS_PED_LANDING(Any p0) { return Invoke<bool>(0x412F1364FA066CFB, V(p0)); }
		public static bool IS_PED_DOING_A_BEAST_JUMP(Any p0) { return Invoke<bool>(0x451D05012CCEC234, V(p0)); }
		public static bool IS_PED_CLIMBING(Ped ped) { return Invoke<bool>(0x53E8CB4F48BFE623, V(ped)); }
		public static bool IS_PED_VAULTING(Ped ped) { return Invoke<bool>(0x117C70D1F5730B5E, V(ped)); }
		public static bool IS_PED_DIVING(Ped ped) { return Invoke<bool>(0x5527B8246FEF9B11, V(ped)); }
		public static bool IS_PED_JUMPING_OUT_OF_VEHICLE(Ped ped) { return Invoke<bool>(0x433DDFFE2044B636, V(ped)); }
		// Returns true if the ped is currently opening a door (CTaskOpenDoor).
		public static bool IS_PED_OPENING_DOOR(Ped ped) { return Invoke<bool>(0x26AF0E8E30BD2A2C, V(ped)); }
		// Returns:
		// 
		// -1: Normal
		// 0: Wearing parachute on back
		// 1: Parachute opening
		// 2: Parachute open
		// 3: Falling to doom (e.g. after exiting parachute)
		// 
		// Normal means no parachute?
		public static int GET_PED_PARACHUTE_STATE(Ped ped) { return Invoke<int>(0x79CFD9827CC979B6, V(ped)); }
		// -1: no landing
		// 0: landing on both feet
		// 1: stumbling
		// 2: rolling
		// 3: ragdoll
		public static int GET_PED_PARACHUTE_LANDING_TYPE(Ped ped) { return Invoke<int>(0x8B9F1FC6AE8166C0, V(ped)); }
		public static void SET_PED_PARACHUTE_TINT_INDEX(Ped ped, int tintIndex) { Invoke(0x333FC8DB079B7186, V(ped), V(tintIndex)); }
		public static void GET_PED_PARACHUTE_TINT_INDEX(Ped ped, int* outTintIndex) { Invoke(0xEAF5F7E5AE7C6C9D, V(ped), V(outTintIndex)); }
		public static void SET_PED_RESERVE_PARACHUTE_TINT_INDEX(Ped ped, Any p1) { Invoke(0xE88DA0751C22A2AD, V(ped), V(p1)); }
		public static Obj CREATE_PARACHUTE_BAG_OBJECT(Ped ped, bool p1, bool p2) { return Invoke<Obj>(0x8C4F3BF23B6237DB, V(ped), V(p1), V(p2)); }
		// This is the SET_CHAR_DUCKING from GTA IV, that makes Peds duck. This function does nothing in GTA V. It cannot set the ped as ducking in vehicles, and IS_PED_DUCKING will always return false.
		public static void SET_PED_DUCKING(Ped ped, bool toggle) { Invoke(0x030983CA930B692D, V(ped), V(toggle)); }
		public static bool IS_PED_DUCKING(Ped ped) { return Invoke<bool>(0xD125AE748725C6BC, V(ped)); }
		public static bool IS_PED_IN_ANY_TAXI(Ped ped) { return Invoke<bool>(0x6E575D6A898AB852, V(ped)); }
		public static void SET_PED_ID_RANGE(Ped ped, float value) { Invoke(0xF107E836A70DCE05, V(ped), V(value)); }
		public static void SET_PED_HIGHLY_PERCEPTIVE(Ped ped, bool toggle) { Invoke(0x52D59AB61DDC05DD, V(ped), V(toggle)); }
		public static void SET_COP_PERCEPTION_OVERRIDES(float seeingRange, float seeingRangePeripheral, float hearingRange, float visualFieldMinAzimuthAngle, float visualFieldMaxAzimuthAngle, float fieldOfGazeMaxAngle, float p6) { Invoke(0x2F074C904D85129E, V(seeingRange), V(seeingRangePeripheral), V(hearingRange), V(visualFieldMinAzimuthAngle), V(visualFieldMaxAzimuthAngle), V(fieldOfGazeMaxAngle), V(p6)); }
		public static void SET_PED_INJURED_ON_GROUND_BEHAVIOUR(Ped ped, float p1) { Invoke(0xEC4B4B3B9908052A, V(ped), V(p1)); }
		public static void DISABLE_PED_INJURED_ON_GROUND_BEHAVIOUR(Ped ped) { Invoke(0x733C87D4CE22BEA2, V(ped)); }
		public static void SET_PED_SEEING_RANGE(Ped ped, float value) { Invoke(0xF29CF591C4BF6CEE, V(ped), V(value)); }
		public static void SET_PED_HEARING_RANGE(Ped ped, float value) { Invoke(0x33A8F7F7D5F7F33C, V(ped), V(value)); }
		public static void SET_PED_VISUAL_FIELD_MIN_ANGLE(Ped ped, float value) { Invoke(0x2DB492222FB21E26, V(ped), V(value)); }
		public static void SET_PED_VISUAL_FIELD_MAX_ANGLE(Ped ped, float value) { Invoke(0x70793BDCA1E854D4, V(ped), V(value)); }
		// This native refers to the field of vision the ped has below them, starting at 0 degrees. The angle value should be negative.
		// -90f should let the ped see 90 degrees below them, for example.
		public static void SET_PED_VISUAL_FIELD_MIN_ELEVATION_ANGLE(Ped ped, float angle) { Invoke(0x7A276EB2C224D70F, V(ped), V(angle)); }
		// This native refers to the field of vision the ped has above them, starting at 0 degrees. 90f would let the ped see enemies directly above of them.
		public static void SET_PED_VISUAL_FIELD_MAX_ELEVATION_ANGLE(Ped ped, float angle) { Invoke(0x78D0B67629D75856, V(ped), V(angle)); }
		public static void SET_PED_VISUAL_FIELD_PERIPHERAL_RANGE(Ped ped, float range) { Invoke(0x9C74B0BC831B753A, V(ped), V(range)); }
		public static void SET_PED_VISUAL_FIELD_CENTER_ANGLE(Ped ped, float angle) { Invoke(0x3B6405E8AB34A907, V(ped), V(angle)); }
		public static float GET_PED_VISUAL_FIELD_CENTER_ANGLE(Ped ped) { return Invoke<float>(0xEF2C71A32CAD5FBD, V(ped)); }
		// p1 is usually 0 in the scripts. action is either 0 or a pointer to "DEFAULT_ACTION".
		public static void SET_PED_STEALTH_MOVEMENT(Ped ped, bool p1, string action) { Invoke(0x88CBB5CEB96B7BD2, V(ped), V(p1), V(action)); }
		// Returns whether the entity is in stealth mode
		public static bool GET_PED_STEALTH_MOVEMENT(Ped ped) { return Invoke<bool>(0x7C2AC9CA66575FBF, V(ped)); }
		// Creates a new ped group.
		// Groups can contain up to 8 peds.
		// 
		// The parameter is unused.
		// 
		// Returns a handle to the created group, or 0 if a group couldn't be created.
		public static int CREATE_GROUP(int unused) { return Invoke<int>(0x90370EBE0FEE1A3D, V(unused)); }
		public static void SET_PED_AS_GROUP_LEADER(Ped ped, int groupId) { Invoke(0x2A7819605465FBCE, V(ped), V(groupId)); }
		public static void SET_PED_AS_GROUP_MEMBER(Ped ped, int groupId) { Invoke(0x9F3480FE65DB31B5, V(ped), V(groupId)); }
		// This only will teleport the ped to the group leader if the group leader teleports (sets coords).
		// 
		// Only works in singleplayer
		public static void SET_PED_CAN_TELEPORT_TO_GROUP_LEADER(Ped pedHandle, int groupHandle, bool toggle) { Invoke(0x2E2F4240B3F24647, V(pedHandle), V(groupHandle), V(toggle)); }
		public static void REMOVE_GROUP(int groupId) { Invoke(0x8EB2F69076AF7053, V(groupId)); }
		public static void REMOVE_PED_FROM_GROUP(Ped ped) { Invoke(0xED74007FFB146BC2, V(ped)); }
		public static bool IS_PED_GROUP_MEMBER(Ped ped, int groupId) { return Invoke<bool>(0x9BB01E3834671191, V(ped), V(groupId)); }
		public static bool IS_PED_HANGING_ON_TO_VEHICLE(Ped ped) { return Invoke<bool>(0x1C86D8AEF8254B78, V(ped)); }
		// Sets the range at which members will automatically leave the group.
		public static void SET_GROUP_SEPARATION_RANGE(int groupHandle, float separationRange) { Invoke(0x4102C7858CFEE4E4, V(groupHandle), V(separationRange)); }
		// Ped will stay on the ground after being stunned for at lest ms time. (in milliseconds)
		public static void SET_PED_MIN_GROUND_TIME_FOR_STUNGUN(Ped ped, int ms) { Invoke(0xFA0675AB151073FA, V(ped), V(ms)); }
		public static bool IS_PED_PRONE(Ped ped) { return Invoke<bool>(0xD6A86331A537A7B9, V(ped)); }
		// Checks to see if ped and target are in combat with eachother. Only goes one-way: if target is engaged in combat with ped but ped has not yet reacted, the function will return false until ped starts fighting back.
		// 
		// p1 is usually 0 in the scripts because it gets the ped id during the task sequence. For instance: PED::IS_PED_IN_COMBAT(l_42E[4/*14*/], PLAYER::PLAYER_PED_ID()) // armenian2.ct4: 43794
		public static bool IS_PED_IN_COMBAT(Ped ped, Ped target) { return Invoke<bool>(0x4859F1FC66A6278E, V(ped), V(target)); }
		public static Entity GET_PED_TARGET_FROM_COMBAT_PED(Ped ped, Any p1) { return Invoke<Entity>(0x32C27A11307B01CC, V(ped), V(p1)); }
		public static bool CAN_PED_IN_COMBAT_SEE_TARGET(Ped ped, Ped target) { return Invoke<bool>(0xEAD42DE3610D0721, V(ped), V(target)); }
		public static bool IS_PED_DOING_DRIVEBY(Ped ped) { return Invoke<bool>(0xB2C086CC1BF8F2BF, V(ped)); }
		public static bool IS_PED_JACKING(Ped ped) { return Invoke<bool>(0x4AE4FF911DFB61DA, V(ped)); }
		public static bool IS_PED_BEING_JACKED(Ped ped) { return Invoke<bool>(0x9A497FE2DF198913, V(ped)); }
		// p1 is always 0
		public static bool IS_PED_BEING_STUNNED(Ped ped, int p1) { return Invoke<bool>(0x4FBACCE3B4138EE8, V(ped), V(p1)); }
		public static Ped GET_PEDS_JACKER(Ped ped) { return Invoke<Ped>(0x9B128DC36C1E04CF, V(ped)); }
		public static Ped GET_JACK_TARGET(Ped ped) { return Invoke<Ped>(0x5486A79D9FBD342D, V(ped)); }
		public static bool IS_PED_FLEEING(Ped ped) { return Invoke<bool>(0xBBCCE00B381F8482, V(ped)); }
		// p1 is nearly always 0 in the scripts. 
		public static bool IS_PED_IN_COVER(Ped ped, bool exceptUseWeapon) { return Invoke<bool>(0x60DFD0691A170B88, V(ped), V(exceptUseWeapon)); }
		public static bool IS_PED_IN_COVER_FACING_LEFT(Ped ped) { return Invoke<bool>(0x845333B3150583AB, V(ped)); }
		public static bool IS_PED_IN_HIGH_COVER(Ped ped) { return Invoke<bool>(0x6A03BF943D767C93, V(ped)); }
		public static bool IS_PED_GOING_INTO_COVER(Ped ped) { return Invoke<bool>(0x9F65DBC537E59AD5, V(ped)); }
		// i could be time. Only example in the decompiled scripts uses it as -1.
		public static bool SET_PED_PINNED_DOWN(Ped ped, bool pinned, int i) { return Invoke<bool>(0xAAD6D1ACF08F4612, V(ped), V(pinned), V(i)); }
		public static bool _HAS_PED_CLEAR_LOS_TO_ENTITY(Ped ped, Entity entity, float x, float y, float z, int p5, bool p6, bool p7) { return Invoke<bool>(0xA32ABFEB2A03B306, V(ped), V(entity), V(x), V(y), V(z), V(p5), V(p6), V(p7)); }
		public static int GET_SEAT_PED_IS_TRYING_TO_ENTER(Ped ped) { return Invoke<int>(0x6F4C85ACD641BCD2, V(ped)); }
		public static Vehicle GET_VEHICLE_PED_IS_TRYING_TO_ENTER(Ped ped) { return Invoke<Vehicle>(0x814FA8BE5449445D, V(ped)); }
		// Returns the Entity (Ped, Vehicle, or ?Object?) that killed the 'ped'
		// 
		// Is best to check if the Ped is dead before asking for its killer.
		public static Entity GET_PED_SOURCE_OF_DEATH(Ped ped) { return Invoke<Entity>(0x93C8B64DEB84728C, V(ped)); }
		// Returns the hash of the weapon/model/obj that killed the ped.
		public static Hash GET_PED_CAUSE_OF_DEATH(Ped ped) { return Invoke<Hash>(0x16FFE42AB2D2DC59, V(ped)); }
		public static int GET_PED_TIME_OF_DEATH(Ped ped) { return Invoke<int>(0x1E98817B311AE98A, V(ped)); }
		public static int COUNT_PEDS_IN_COMBAT_WITH_TARGET(Ped ped) { return Invoke<int>(0x5407B7288D0478B7, V(ped)); }
		public static int COUNT_PEDS_IN_COMBAT_WITH_TARGET_WITHIN_RADIUS(Ped ped, float x, float y, float z, float radius) { return Invoke<int>(0x336B3D200AB007CB, V(ped), V(x), V(y), V(z), V(radius)); }
		public static void SET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(Ped ped, Hash hash) { Invoke(0xADB3F206518799E8, V(ped), V(hash)); }
		public static void SET_PED_RELATIONSHIP_GROUP_HASH(Ped ped, Hash hash) { Invoke(0xC80A74AC829DDD92, V(ped), V(hash)); }
		// Sets the relationship between two groups. This should be called twice (once for each group).
		// 
		// Relationship types:
		// 0 = Companion
		// 1 = Respect
		// 2 = Like
		// 3 = Neutral
		// 4 = Dislike
		// 5 = Hate
		// 255 = Pedestrians
		// 
		// Example:
		// PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
		// PED::SET_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
		public static void SET_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2) { Invoke(0xBF25EB89375A37AD, V(relationship), V(group1), V(group2)); }
		// Clears the relationship between two groups. This should be called twice (once for each group).
		// 
		// Relationship types:
		// 0 = Companion
		// 1 = Respect
		// 2 = Like
		// 3 = Neutral
		// 4 = Dislike
		// 5 = Hate
		// 255 = Pedestrians
		// (Credits: Inco)
		// 
		// Example:
		// PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, l_1017, 0xA49E591C);
		// PED::CLEAR_RELATIONSHIP_BETWEEN_GROUPS(2, 0xA49E591C, l_1017);
		public static void CLEAR_RELATIONSHIP_BETWEEN_GROUPS(int relationship, Hash group1, Hash group2) { Invoke(0x5E29243FB56FC6D4, V(relationship), V(group1), V(group2)); }
		// Can't select void. This function returns nothing. The hash of the created relationship group is output in the second parameter.
		public static bool ADD_RELATIONSHIP_GROUP(string name, Hash* groupHash) { return Invoke<bool>(0xF372BC22FCB88606, V(name), V(groupHash)); }
		public static void REMOVE_RELATIONSHIP_GROUP(Hash groupHash) { Invoke(0xB6BA2444AB393DA2, V(groupHash)); }
		public static bool DOES_RELATIONSHIP_GROUP_EXIST(Hash groupHash) { return Invoke<bool>(0xCC6E3B6BB69501F1, V(groupHash)); }
		// Gets the relationship between two peds. This should be called twice (once for each ped).
		// 
		// Relationship types:
		// 0 = Companion
		// 1 = Respect
		// 2 = Like
		// 3 = Neutral
		// 4 = Dislike
		// 5 = Hate
		// 255 = Pedestrians
		// (Credits: Inco)
		// 
		// Example:
		// PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, l_1017, 0xA49E591C);
		// PED::GET_RELATIONSHIP_BETWEEN_PEDS(2, 0xA49E591C, l_1017);
		public static int GET_RELATIONSHIP_BETWEEN_PEDS(Ped ped1, Ped ped2) { return Invoke<int>(0xEBA5AD3A0EAF7121, V(ped1), V(ped2)); }
		public static Hash GET_PED_RELATIONSHIP_GROUP_DEFAULT_HASH(Ped ped) { return Invoke<Hash>(0x42FDD0F017B1E38E, V(ped)); }
		public static Hash GET_PED_RELATIONSHIP_GROUP_HASH(Ped ped) { return Invoke<Hash>(0x7DBDD04862D95F04, V(ped)); }
		// Gets the relationship between two groups. This should be called twice (once for each group).
		// 
		// Relationship types:
		// 0 = Companion
		// 1 = Respect
		// 2 = Like
		// 3 = Neutral
		// 4 = Dislike
		// 5 = Hate
		// 255 = Pedestrians
		// 
		// Example:
		// PED::GET_RELATIONSHIP_BETWEEN_GROUPS(l_1017, 0xA49E591C);
		// PED::GET_RELATIONSHIP_BETWEEN_GROUPS(0xA49E591C, V(l_1017));
		public static int GET_RELATIONSHIP_BETWEEN_GROUPS(Hash group1, Hash group2) { return Invoke<int>(0x9E6B70061662AE5C, V(group1), V(group2)); }
		public static void SET_RELATIONSHIP_GROUP_AFFECTS_WANTED_LEVEL(Hash group, bool p1) { Invoke(0x5615E0C5EB2BC6E2, V(group), V(p1)); }
		public static void TELL_GROUP_PEDS_IN_AREA_TO_ATTACK(Ped ped, Any p1, float p2, Hash hash, Any p4, Any p5) { Invoke(0xAD27D957598E49E9, V(ped), V(p1), V(p2), V(hash), V(p4), V(p5)); }
		public static void SET_PED_CAN_BE_TARGETED_WITHOUT_LOS(Ped ped, bool toggle) { Invoke(0x4328652AE5769C71, V(ped), V(toggle)); }
		public static void SET_PED_TO_INFORM_RESPECTED_FRIENDS(Ped ped, float radius, int maxFriends) { Invoke(0x112942C6E708F70B, V(ped), V(radius), V(maxFriends)); }
		public static bool IS_PED_RESPONDING_TO_EVENT(Ped ped, Any evt) { return Invoke<bool>(0x625B774D75C87068, V(ped), V(evt)); }
		public static bool GET_POS_FROM_FIRED_EVENT(Ped ped, int eventType, Any* outData) { return Invoke<bool>(0xBA656A3BB01BDEA3, V(ped), V(eventType), V(outData)); }
		// FIRING_PATTERN_BURST_FIRE = 0xD6FF6D61 ( 1073727030 )
		// FIRING_PATTERN_BURST_FIRE_IN_COVER = 0x026321F1 ( 40051185 )
		// FIRING_PATTERN_BURST_FIRE_DRIVEBY = 0xD31265F2 ( -753768974 )
		// FIRING_PATTERN_FROM_GROUND = 0x2264E5D6 ( 577037782 )
		// FIRING_PATTERN_DELAY_FIRE_BY_ONE_SEC = 0x7A845691 ( 2055493265 )
		// FIRING_PATTERN_FULL_AUTO = 0xC6EE6B4C ( -957453492 )
		// FIRING_PATTERN_SINGLE_SHOT = 0x5D60E4E0 ( 1566631136 )
		// FIRING_PATTERN_BURST_FIRE_PISTOL = 0xA018DB8A ( -1608983670 )
		// FIRING_PATTERN_BURST_FIRE_SMG = 0xD10DADEE ( 1863348768 )
		// FIRING_PATTERN_BURST_FIRE_RIFLE = 0x9C74B406 ( -1670073338 )
		// FIRING_PATTERN_BURST_FIRE_MG = 0xB573C5B4 ( -1250703948 )
		// FIRING_PATTERN_BURST_FIRE_PUMPSHOTGUN = 0x00BAC39B ( 12239771 )
		// FIRING_PATTERN_BURST_FIRE_HELI = 0x914E786F ( -1857128337 )
		// FIRING_PATTERN_BURST_FIRE_MICRO = 0x42EF03FD ( 1122960381 )
		// FIRING_PATTERN_SHORT_BURSTS = 0x1A92D7DF ( 445831135 )
		// FIRING_PATTERN_SLOW_FIRE_TANK = 0xE2CA3A71 ( -490063247 )
		// 
		// Firing pattern info: https://pastebin.com/Px036isB
		public static void SET_PED_FIRING_PATTERN(Ped ped, Hash patternHash) { Invoke(0x9AC577F5A12AD8A9, V(ped), V(patternHash)); }
		// shootRate 0-1000
		public static void SET_PED_SHOOT_RATE(Ped ped, int shootRate) { Invoke(0x614DA022990752DC, V(ped), V(shootRate)); }
		// combatType can be between 0-14. See GET_COMBAT_FLOAT below for a list of possible parameters.
		public static void SET_COMBAT_FLOAT(Ped ped, int combatType, float p2) { Invoke(0xFF41B4B141ED981C, V(ped), V(combatType), V(p2)); }
		// p0: Ped Handle
		// p1: int i | 0 <= i <= 27
		// 
		// p1 probably refers to the attributes configured in combatbehavior.meta. There are 13. Example:
		// 
		// <BlindFireChance value="0.1"/>
		// <WeaponShootRateModifier value="1.0"/>
		// <TimeBetweenBurstsInCover value="1.25"/>
		// <BurstDurationInCover value="2.0"/>
		// <TimeBetweenPeeks value="10.0"/>
		// <WeaponAccuracy value="0.18"/>
		// <FightProficiency value="0.8"/>
		// <StrafeWhenMovingChance value="1.0"/>
		// <WalkWhenStrafingChance value="0.0"/>
		// <AttackWindowDistanceForCover value="55.0"/>
		// <TimeToInvalidateInjuredTarget value="9.0"/>
		// <TriggerChargeTime_Near value="4.0"/>
		// <TriggerChargeTime_Far value="10.0"/>
		// 
		// -------------Confirmed by editing combatbehavior.meta:
		// p1:
		// 0=BlindFireChance
		// 1=BurstDurationInCover
		// 3=TimeBetweenBurstsInCover
		// 4=TimeBetweenPeeks
		// 5=StrafeWhenMovingChance
		// 8=WalkWhenStrafingChance
		// 11=AttackWindowDistanceForCover
		// 12=TimeToInvalidateInjuredTarget
		// 16=OptimalCoverDistance
		// 
		public static float GET_COMBAT_FLOAT(Ped ped, int p1) { return Invoke<float>(0x52DFF8A10508090A, V(ped), V(p1)); }
		// p1 may be a bool representing whether or not the group even exists
		public static void GET_GROUP_SIZE(int groupID, Any* p1, int* sizeInMembers) { Invoke(0x8DE69FE35CA09A45, V(groupID), V(p1), V(sizeInMembers)); }
		public static bool DOES_GROUP_EXIST(int groupId) { return Invoke<bool>(0x7C6B0C22F9F40BBE, V(groupId)); }
		// Returns the group id of which the specified ped is a member of.
		public static int GET_PED_GROUP_INDEX(Ped ped) { return Invoke<int>(0xF162E133B4E7A675, V(ped)); }
		public static bool IS_PED_IN_GROUP(Ped ped) { return Invoke<bool>(0x5891CAC5D4ACFF74, V(ped)); }
		public static Player GET_PLAYER_PED_IS_FOLLOWING(Ped ped) { return Invoke<Player>(0x6A3975DEA89F9A17, V(ped)); }
		// 0: Default
		// 1: Circle Around Leader
		// 2: Alternative Circle Around Leader
		// 3: Line, with Leader at center
		public static void SET_GROUP_FORMATION(int groupId, int formationType) { Invoke(0xCE2F5FC3AF7E8C1E, V(groupId), V(formationType)); }
		public static void SET_GROUP_FORMATION_SPACING(int groupId, float x, float y, float z) { Invoke(0x1D9D45004C28C916, V(groupId), V(x), V(y), V(z)); }
		public static void RESET_GROUP_FORMATION_DEFAULT_SPACING(int groupHandle) { Invoke(0x63DAB4CCB3273205, V(groupHandle)); }
		// Gets ID of vehicle player using. It means it can get ID at any interaction with vehicle. Enter\exit for example. And that means it is faster than GET_VEHICLE_PED_IS_IN but less safe.
		public static Vehicle GET_VEHICLE_PED_IS_USING(Ped ped) { return Invoke<Vehicle>(0x6094AD011A2EA87D, V(ped)); }
		public static Vehicle GET_VEHICLE_PED_IS_ENTERING(Ped ped) { return Invoke<Vehicle>(0xF92691AED837A5FC, V(ped)); }
		// enable or disable the gravity of a ped
		// 
		// Examples:
		// PED::SET_PED_GRAVITY(PLAYER::PLAYER_PED_ID(), 0x00000001);
		// PED::SET_PED_GRAVITY(Local_289[iVar0 /*20*/], 0x00000001);
		public static void SET_PED_GRAVITY(Ped ped, bool toggle) { Invoke(0x9FF447B6B6AD960A, V(ped), V(toggle)); }
		public static bool _SET_PED_SURVIVES_BEING_OUT_OF_WATER(Ped ped, bool toggle) { return Invoke<bool>(0x100CD221F572F6E1, V(ped), V(toggle)); }
		// damages a ped with the given amount
		public static void APPLY_DAMAGE_TO_PED(Ped ped, int damageAmount, bool p2, Any p3, Hash weaponType) { Invoke(0x697157CED63F18D4, V(ped), V(damageAmount), V(p2), V(p3), V(weaponType)); }
		public static int GET_TIME_PED_DAMAGED_BY_WEAPON(Ped ped, Hash weaponHash) { return Invoke<int>(0x36B77BB84687C318, V(ped), V(weaponHash)); }
		public static void SET_PED_ALLOWED_TO_DUCK(Ped ped, bool toggle) { Invoke(0xDA1F1B7BE1A8766F, V(ped), V(toggle)); }
		public static void SET_PED_NEVER_LEAVES_GROUP(Ped ped, bool toggle) { Invoke(0x3DBFC55D5C9BB447, V(ped), V(toggle)); }
		// https://alloc8or.re/gta5/doc/enums/ePedType.txt
		public static int GET_PED_TYPE(Ped ped) { return Invoke<int>(0xFF059E1E4C01E63C, V(ped)); }
		// Turns the desired ped into a cop. If you use this on the player ped, you will become almost invisible to cops dispatched for you. You will also report your own crimes, get a generic cop voice, get a cop-vision-cone on the radar, and you will be unable to shoot at other cops. SWAT and Army will still shoot at you. Toggling ped as "false" has no effect; you must change p0's ped model to disable the effect.
		public static void SET_PED_AS_COP(Ped ped, bool toggle) { Invoke(0xBB03C38DD3FB7FFD, V(ped), V(toggle)); }
		public static void SET_PED_HEALTH_PENDING_LAST_DAMAGE_EVENT_OVERRIDE_FLAG(bool toggle) { Invoke(0xB3352E018D6F89DF, V(toggle)); }
		// Sets the maximum health of a ped.
		public static void SET_PED_MAX_HEALTH(Ped ped, int value) { Invoke(0xF5F6378C4F3419D3, V(ped), V(value)); }
		public static int GET_PED_MAX_HEALTH(Ped ped) { return Invoke<int>(0x4700A416E8324EF3, V(ped)); }
		public static void SET_PED_MAX_TIME_IN_WATER(Ped ped, float value) { Invoke(0x43C851690662113D, V(ped), V(value)); }
		public static void SET_PED_MAX_TIME_UNDERWATER(Ped ped, float value) { Invoke(0x6BA428C528D9E522, V(ped), V(value)); }
		public static void SET_CORPSE_RAGDOLL_FRICTION(Ped ped, float p1) { Invoke(0x2735233A786B1BEF, V(ped), V(p1)); }
		// seatIndex must be <= 2
		public static void SET_PED_VEHICLE_FORCED_SEAT_USAGE(Ped ped, Vehicle vehicle, int seatIndex, int flags, Any p4) { Invoke(0x952F06BEECD775CC, V(ped), V(vehicle), V(seatIndex), V(flags), V(p4)); }
		public static void CLEAR_ALL_PED_VEHICLE_FORCED_SEAT_USAGE(Ped ped) { Invoke(0xE6CA85E7259CE16B, V(ped)); }
		// This native does absolutely nothing, just a nullsub
		public static void SET_PED_CAN_BE_KNOCKED_OFF_BIKE(Any p0, Any p1) { Invoke(0xB282749D5E028163, V(p0), V(p1)); }
		// state: https://alloc8or.re/gta5/doc/enums/eKnockOffVehicle.txt
		public static void SET_PED_CAN_BE_KNOCKED_OFF_VEHICLE(Ped ped, int state) { Invoke(0x7A6535691B477C48, V(ped), V(state)); }
		public static bool CAN_KNOCK_PED_OFF_VEHICLE(Ped ped) { return Invoke<bool>(0x51AC07A44D4F5B8A, V(ped)); }
		public static void KNOCK_PED_OFF_VEHICLE(Ped ped) { Invoke(0x45BBCBA77C29A841, V(ped)); }
		public static void SET_PED_COORDS_NO_GANG(Ped ped, float posX, float posY, float posZ) { Invoke(0x87052FE446E07247, V(ped), V(posX), V(posY), V(posZ)); }
		// from fm_mission_Controller->c4 (variable names changed for clarity):
		// 
		// int groupID = PLAYER::GET_PLAYER_GROUP(PLAYER::PLAYER_ID());
		// PED::GET_GROUP_SIZE(group, &unused, &groupSize);
		// if (groupSize >= 1) {
		// . . . . for (int memberNumber = 0; memberNumber < groupSize; memberNumber++) {
		// . . . . . . . . Ped ped1 = PED::GET_PED_AS_GROUP_MEMBER(groupID, memberNumber);
		// . . . . . . . . //and so on
		public static Ped GET_PED_AS_GROUP_MEMBER(int groupID, int memberNumber) { return Invoke<Ped>(0x51455483CF23ED97, V(groupID), V(memberNumber)); }
		public static Ped GET_PED_AS_GROUP_LEADER(int groupID) { return Invoke<Ped>(0x5CCE68DBD5FE93EC, V(groupID)); }
		public static void SET_PED_KEEP_TASK(Ped ped, bool toggle) { Invoke(0x971D38760FBC02EF, V(ped), V(toggle)); }
		public static void SET_PED_ALLOW_MINOR_REACTIONS_AS_MISSION_PED(Ped ped, bool toggle) { Invoke(0x49E50BDB8BA4DAB2, V(ped), V(toggle)); }
		public static bool IS_PED_SWIMMING(Ped ped) { return Invoke<bool>(0x9DE327631295B4C2, V(ped)); }
		public static bool IS_PED_SWIMMING_UNDER_WATER(Ped ped) { return Invoke<bool>(0xC024869A53992F34, V(ped)); }
		// teleports ped to coords along with the vehicle ped is in
		public static void SET_PED_COORDS_KEEP_VEHICLE(Ped ped, float posX, float posY, float posZ) { Invoke(0x9AFEFF481A85AB2E, V(ped), V(posX), V(posY), V(posZ)); }
		public static void SET_PED_DIES_IN_VEHICLE(Ped ped, bool toggle) { Invoke(0x2A30922C90C9B42C, V(ped), V(toggle)); }
		public static void SET_CREATE_RANDOM_COPS(bool toggle) { Invoke(0x102E68B2024D536D, V(toggle)); }
		public static void SET_CREATE_RANDOM_COPS_NOT_ON_SCENARIOS(bool toggle) { Invoke(0x8A4986851C4EF6E7, V(toggle)); }
		public static void SET_CREATE_RANDOM_COPS_ON_SCENARIOS(bool toggle) { Invoke(0x444CB7D7DBE6973D, V(toggle)); }
		public static bool CAN_CREATE_RANDOM_COPS() { return Invoke<bool>(0x5EE2CAFF7F17770D); }
		public static void SET_PED_AS_ENEMY(Ped ped, bool toggle) { Invoke(0x02A0C9720B854BFA, V(ped), V(toggle)); }
		public static void SET_PED_CAN_SMASH_GLASS(Ped ped, bool p1, bool p2) { Invoke(0x1CCE141467FF42A2, V(ped), V(p1), V(p2)); }
		public static bool IS_PED_IN_ANY_TRAIN(Ped ped) { return Invoke<bool>(0x6F972C1AB75A1ED0, V(ped)); }
		public static bool IS_PED_GETTING_INTO_A_VEHICLE(Ped ped) { return Invoke<bool>(0xBB062B2B5722478E, V(ped)); }
		public static bool IS_PED_TRYING_TO_ENTER_A_LOCKED_VEHICLE(Ped ped) { return Invoke<bool>(0x44D28D5DDFE5F68C, V(ped)); }
		// ped can not pull out a weapon when true
		public static void SET_ENABLE_HANDCUFFS(Ped ped, bool toggle) { Invoke(0xDF1AF8B5D56542FA, V(ped), V(toggle)); }
		// Used with SET_ENABLE_HANDCUFFS in decompiled scripts. From my observations, I have noticed that while being ragdolled you are not able to get up but you can still run. Your legs can also bend.
		public static void SET_ENABLE_BOUND_ANKLES(Ped ped, bool toggle) { Invoke(0xC52E0F855C58FC2E, V(ped), V(toggle)); }
		// Enables diving motion when underwater.
		public static void SET_ENABLE_SCUBA(Ped ped, bool toggle) { Invoke(0xF99F62004024D506, V(ped), V(toggle)); }
		// Setting ped to true allows the ped to shoot "friendlies".
		// 
		// p2 set to true when toggle is also true seams to make peds permanently unable to aim at, even if you set p2 back to false.
		// 
		// p1 = false & p2 = false for unable to aim at.
		// p1 = true & p2 = false for able to aim at. 
		public static void SET_CAN_ATTACK_FRIENDLY(Ped ped, bool toggle, bool p2) { Invoke(0xB3B1CB349FF9C75D, V(ped), V(toggle), V(p2)); }
		// Returns the ped's alertness (0-3).
		// 
		// Values : 
		// 
		// 0 : Neutral
		// 1 : Heard something (gun shot, hit, etc)
		// 2 : Knows (the origin of the evt)
		// 3 : Fully alerted (is facing the evt?)
		// 
		// If the Ped does not exist, returns -1.
		public static int GET_PED_ALERTNESS(Ped ped) { return Invoke<int>(0xF6AA118530443FD2, V(ped)); }
		// value ranges from 0 to 3.
		public static void SET_PED_ALERTNESS(Ped ped, int value) { Invoke(0xDBA71115ED9941A6, V(ped), V(value)); }
		public static void SET_PED_GET_OUT_UPSIDE_DOWN_VEHICLE(Ped ped, bool toggle) { Invoke(0xBC0ED94165A48BC2, V(ped), V(toggle)); }
		// transitionSpeed is the time in seconds it takes to transition from one movement clipset to another.	ransitionSpeed is usually 1.0f
		// 
		// List of movement clipsets:
		// Thanks to elsewhat for list.
		// 
		//  "ANIM_GROUP_MOVE_BALLISTIC"
		//  "ANIM_GROUP_MOVE_LEMAR_ALLEY"
		//  "clipset@move@trash_fast_turn"
		//  "FEMALE_FAST_RUNNER"
		//  "missfbi4prepp1_garbageman"
		//  "move_characters@franklin@fire"
		//  "move_characters@Jimmy@slow@"
		//  "move_characters@michael@fire"
		//  "move_f@flee@a"
		//  "move_f@scared"
		//  "move_f@sexy@a"
		//  "move_heist_lester"
		//  "move_injured_generic"
		//  "move_lester_CaneUp"
		//  "move_m@bag"
		//  "MOVE_M@BAIL_BOND_NOT_TAZERED"
		//  "MOVE_M@BAIL_BOND_TAZERED"
		//  "move_m@brave"
		//  "move_m@casual@d"
		//  "move_m@drunk@moderatedrunk"
		//  "MOVE_M@DRUNK@MODERATEDRUNK"
		//  "MOVE_M@DRUNK@MODERATEDRUNK_HEAD_UP"
		//  "MOVE_M@DRUNK@SLIGHTLYDRUNK"
		//  "MOVE_M@DRUNK@VERYDRUNK"
		//  "move_m@fire"
		//  "move_m@gangster@var_e"
		//  "move_m@gangster@var_f"
		//  "move_m@gangster@var_i"
		//  "move_m@JOG@"
		//  "MOVE_M@PRISON_GAURD"
		//  "MOVE_P_M_ONE"
		//  "MOVE_P_M_ONE_BRIEFCASE"
		//  "move_p_m_zero_janitor"
		//  "move_p_m_zero_slow"
		//  "move_ped_bucket"
		//  "move_ped_crouched"
		//  "move_ped_mop"
		//  "MOVE_M@FEMME@"
		//  "MOVE_F@FEMME@"
		//  "MOVE_M@GANGSTER@NG"
		//  "MOVE_F@GANGSTER@NG"
		//  "MOVE_M@POSH@"
		//  "MOVE_F@POSH@"
		//  "MOVE_M@TOUGH_GUY@"
		//  "MOVE_F@TOUGH_GUY@"
		// 
		// ~ NotCrunchyTaco
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static void SET_PED_MOVEMENT_CLIPSET(Ped ped, string clipSet, float transitionSpeed) { Invoke(0xAF8A94EDE7712BEF, V(ped), V(clipSet), V(transitionSpeed)); }
		// If p1 is 0.0, I believe you are back to normal. 
		// If p1 is 1.0, it looks like you can only rotate the ped, not walk.
		// 
		// Using the following code to reset back to normal
		// PED::RESET_PED_MOVEMENT_CLIPSET(PLAYER::PLAYER_PED_ID(), 0.0);
		public static void RESET_PED_MOVEMENT_CLIPSET(Ped ped, float p1) { Invoke(0xAA74EC0CB0AAEA2C, V(ped), V(p1)); }
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static void SET_PED_STRAFE_CLIPSET(Ped ped, string clipSet) { Invoke(0x29A28F3F8CF6D854, V(ped), V(clipSet)); }
		public static void RESET_PED_STRAFE_CLIPSET(Ped ped) { Invoke(0x20510814175EA477, V(ped)); }
		public static void SET_PED_WEAPON_MOVEMENT_CLIPSET(Ped ped, string clipSet) { Invoke(0x2622E35B77D3ACA2, V(ped), V(clipSet)); }
		public static void RESET_PED_WEAPON_MOVEMENT_CLIPSET(Ped ped) { Invoke(0x97B0DB5B4AA74E77, V(ped)); }
		public static void SET_PED_DRIVE_BY_CLIPSET_OVERRIDE(Ped ped, string clipset) { Invoke(0xED34AB6C5CB36520, V(ped), V(clipset)); }
		public static void CLEAR_PED_DRIVE_BY_CLIPSET_OVERRIDE(Ped ped) { Invoke(0x4AFE3690D7E0B5AC, V(ped)); }
		// Found in the b617d scripts:
		// PED::SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(v_7, "trevor_heist_cover_2h");
		public static void SET_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(Ped ped, string p1) { Invoke(0x9DBA107B4937F809, V(ped), V(p1)); }
		public static void CLEAR_PED_MOTION_IN_COVER_CLIPSET_OVERRIDE(Ped ped) { Invoke(0xC79196DCB36F6121, V(ped)); }
		public static void CLEAR_PED_FALL_UPPER_BODY_CLIPSET_OVERRIDE(Ped ped) { Invoke(0x80054D7FCC70EEC6, V(ped)); }
		// PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_PASSENGER"));
		// PED::SET_PED_IN_VEHICLE_CONTEXT(l_128, MISC::GET_HASH_KEY("MINI_PROSTITUTE_LOW_RESTRICTED_PASSENGER"));
		// PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT"));
		// PED::SET_PED_IN_VEHICLE_CONTEXT(l_3212, MISC::GET_HASH_KEY("MISS_FAMILY1_JIMMY_SIT_REAR"));
		// PED::SET_PED_IN_VEHICLE_CONTEXT(l_95, MISC::GET_HASH_KEY("MISS_FAMILY2_JIMMY_BICYCLE"));
		// PED::SET_PED_IN_VEHICLE_CONTEXT(num3, MISC::GET_HASH_KEY("MISSFBI2_MICHAEL_DRIVEBY"));
		// PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISS_ARMENIAN3_FRANKLIN_TENSE"));
		// PED::SET_PED_IN_VEHICLE_CONTEXT(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("MISSFBI5_TREVOR_DRIVING"));
		public static void SET_PED_IN_VEHICLE_CONTEXT(Ped ped, Hash context) { Invoke(0x530071295899A8C6, V(ped), V(context)); }
		public static void RESET_PED_IN_VEHICLE_CONTEXT(Ped ped) { Invoke(0x22EF8FF8778030EB, V(ped)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool IS_SCRIPTED_SCENARIO_PED_USING_CONDITIONAL_ANIM(Ped ped, string animDict, string anim) { return Invoke<bool>(0x6EC47A344923E1ED, V(ped), V(animDict), V(anim)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static void SET_PED_ALTERNATE_WALK_ANIM(Ped ped, string animDict, string animName, float p3, bool p4) { Invoke(0x6C60394CB4F75E9A, V(ped), V(animDict), V(animName), V(p3), V(p4)); }
		public static void CLEAR_PED_ALTERNATE_WALK_ANIM(Ped ped, float p1) { Invoke(0x8844BBFCE30AA9E9, V(ped), V(p1)); }
		// stance:
		// 0 = idle
		// 1 = walk
		// 2 = running
		// 
		// p5 = usually set to true
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static void SET_PED_ALTERNATE_MOVEMENT_ANIM(Ped ped, int stance, string animDictionary, string animationName, float p4, bool p5) { Invoke(0x90A43CC281FFAB46, V(ped), V(stance), V(animDictionary), V(animationName), V(p4), V(p5)); }
		public static void CLEAR_PED_ALTERNATE_MOVEMENT_ANIM(Ped ped, int stance, float p2) { Invoke(0xD8D19675ED5FBDCE, V(ped), V(stance), V(p2)); }
		// From the scripts:
		// PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
		// "ANIM_GROUP_GESTURE_MISS_FRA0");
		// PED::SET_PED_GESTURE_GROUP(PLAYER::PLAYER_PED_ID(),
		// "ANIM_GROUP_GESTURE_MISS_DocksSetup1");
		public static void SET_PED_GESTURE_GROUP(Ped ped, string animGroupGesture) { Invoke(0xDDF803377F94AAA8, V(ped), V(animGroupGesture)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static Vector3 GET_ANIM_INITIAL_OFFSET_POSITION(string animDict, string animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9) { return Invoke<Vector3>(0xBE22B26DD764C040, V(animDict), V(animName), V(x), V(y), V(z), V(xRot), V(yRot), V(zRot), V(p8), V(p9)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static Vector3 GET_ANIM_INITIAL_OFFSET_ROTATION(string animDict, string animName, float x, float y, float z, float xRot, float yRot, float zRot, float p8, int p9) { return Invoke<Vector3>(0x4B805E6046EE9E47, V(animDict), V(animName), V(x), V(y), V(z), V(xRot), V(yRot), V(zRot), V(p8), V(p9)); }
		// Ids
		// 0 - Head
		// 1 - Beard
		// 2 - Hair
		// 3 - Torso
		// 4 - Legs
		// 5 - Hands
		// 6 - Foot
		// 7 - ------
		// 8 - Accessories 1
		// 9 - Accessories 2
		// 10- Decals
		// 11 - Auxiliary parts for torso
		public static int GET_PED_DRAWABLE_VARIATION(Ped ped, int componentId) { return Invoke<int>(0x67F3780DD425D4FC, V(ped), V(componentId)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int GET_NUMBER_OF_PED_DRAWABLE_VARIATIONS(Ped ped, int componentId) { return Invoke<int>(0x27561561732A7842, V(ped), V(componentId)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int GET_PED_TEXTURE_VARIATION(Ped ped, int componentId) { return Invoke<int>(0x04A355E041E004E6, V(ped), V(componentId)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int GET_NUMBER_OF_PED_TEXTURE_VARIATIONS(Ped ped, int componentId, int drawableId) { return Invoke<int>(0x8F7156A3142A6BAD, V(ped), V(componentId), V(drawableId)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(Ped ped, int propId) { return Invoke<int>(0x5FAF9754E789FB47, V(ped), V(propId)); }
		// Need to check behavior when drawableId = -1
		// 
		// - Doofy.Ass
		// Why this function doesn't work and return nill value?
		// GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(PLAYER.PLAYER_PED_ID(), 0, 5)
		// 
		// tick: scripts/addins/menu_execute.lua:51: attempt to call field 'GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS' (a nil value)
		// 
		// 
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(Ped ped, int propId, int drawableId) { return Invoke<int>(0xA6E7F1CEB523E171, V(ped), V(propId), V(drawableId)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int GET_PED_PALETTE_VARIATION(Ped ped, int componentId) { return Invoke<int>(0xE3DD5F2A84B42281, V(ped), V(componentId)); }
		public static bool GET_MP_OUTFIT_DATA_FROM_METADATA(Any* p0, Any* p1) { return Invoke<bool>(0x9E30E91FB03A2CAF, V(p0), V(p1)); }
		public static int GET_FM_MALE_SHOP_PED_APPAREL_ITEM_INDEX(int p0) { return Invoke<int>(0x1E77FA7A62EE6C4C, V(p0)); }
		public static int GET_FM_FEMALE_SHOP_PED_APPAREL_ITEM_INDEX(int p0) { return Invoke<int>(0xF033419D1B81FAE8, V(p0)); }
		// Checks if the component variation is valid, this works great for randomizing components using loops.
		// 
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		// 
		// Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
		public static bool IS_PED_COMPONENT_VARIATION_VALID(Ped ped, int componentId, int drawableId, int textureId) { return Invoke<bool>(0xE825F6B6CEA7671D, V(ped), V(componentId), V(drawableId), V(textureId)); }
		// paletteId: 0 to 3.
		// 
		// componentId:
		// enum ePedVarComp
		// {
		// 	PV_COMP_INVALID = -1,
		// 	PV_COMP_HEAD,
		// 	PV_COMP_BERD,
		// 	PV_COMP_HAIR,
		// 	PV_COMP_UPPR,
		// 	PV_COMP_LOWR,
		// 	PV_COMP_HAND,
		// 	PV_COMP_FEET,
		// 	PV_COMP_TEEF,
		// 	PV_COMP_ACCS,
		// 	PV_COMP_TASK,
		// 	PV_COMP_DECL,
		// 	PV_COMP_JBIB,
		// 	PV_COMP_MAX
		// };
		// 
		// Examples: https://gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		// 
		// Full list of ped components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedComponentVariations.json
		public static void SET_PED_COMPONENT_VARIATION(Ped ped, int componentId, int drawableId, int textureId, int paletteId) { Invoke(0x262B14F48D29DE80, V(ped), V(componentId), V(drawableId), V(textureId), V(paletteId)); }
		// p1 is always 0 in R* scripts.
		// 
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static void SET_PED_RANDOM_COMPONENT_VARIATION(Ped ped, int p1) { Invoke(0xC8A9481A01E63C28, V(ped), V(p1)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static void SET_PED_RANDOM_PROPS(Ped ped) { Invoke(0xC44AA05345C992C6, V(ped)); }
		// Sets Ped Default Clothes
		public static void SET_PED_DEFAULT_COMPONENT_VARIATION(Ped ped) { Invoke(0x45EEE61580806D63, V(ped)); }
		public static void SET_PED_BLEND_FROM_PARENTS(Ped ped, Any p1, Any p2, float p3, float p4) { Invoke(0x137BBD05230DB22D, V(ped), V(p1), V(p2), V(p3), V(p4)); }
		// The "shape" parameters control the shape of the ped's face. The "skin" parameters control the skin tone. ShapeMix and skinMix control how much the first and second IDs contribute,(typically mother and father.) ThirdMix overrides the others in favor of the third IDs. IsParent is set for "children" of the player character's grandparents during old-gen character creation. It has unknown effect otherwise.
		// 
		// The IDs start at zero and go Male Non-DLC, Female Non-DLC, Male DLC, and Female DLC.
		// 
		// !!!Can someone add working example for this???
		// 
		// try this:
		//        headBlendData headData;
		//        GET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), &headData);
		// 
		//        SET_PED_HEAD_BLEND_DATA(PLAYER_PED_ID(), headData.shapeFirst, headData.shapeSecond, headData.shapeThird, headData.skinFirst, headData.skinSecond
		//           , headData.skinThird, headData.shapeMix, headData.skinMix, headData.skinThird, 0);
		// 
		// 
		// For more info please refer to this topic. 
		// gtaforums.com/topic/858970-all-gtao-face-ids-pedset-ped-head-blend-data-explained
		public static void SET_PED_HEAD_BLEND_DATA(Ped ped, int shapeFirstID, int shapeSecondID, int shapeThirdID, int skinFirstID, int skinSecondID, int skinThirdID, float shapeMix, float skinMix, float thirdMix, bool isParent) { Invoke(0x9414E18B9434C2FE, V(ped), V(shapeFirstID), V(shapeSecondID), V(shapeThirdID), V(skinFirstID), V(skinSecondID), V(skinThirdID), V(shapeMix), V(skinMix), V(thirdMix), V(isParent)); }
		// The pointer is to a padded struct that matches the arguments to SET_PED_HEAD_BLEND_DATA(...). There are 4 bytes of padding after each field.
		// pass this struct in the second parameter 
		// struct headBlendData
		// {
		//     int shapeFirst;
		//     int padding1;
		//     int shapeSecond;
		//     int padding2;
		//     int shapeThird;
		//     int padding3;
		//     int skinFirst;
		//     int padding4;
		//     int skinSecond;
		//     int padding5;
		//     int skinThird;
		//     int padding6;
		//     float shapeMix;
		//     int padding7;
		//     float skinMix;
		//     int padding8;
		//     float thirdMix;
		//     int padding9;
		//     bool isParent;
		// };
		public static bool GET_PED_HEAD_BLEND_DATA(Ped ped, Any* headBlendData) { return Invoke<bool>(0x2746BD9D88C5C5D0, V(ped), V(headBlendData)); }
		// See SET_PED_HEAD_BLEND_DATA().
		public static void UPDATE_PED_HEAD_BLEND_DATA(Ped ped, float shapeMix, float skinMix, float thirdMix) { Invoke(0x723538F61C647C5A, V(ped), V(shapeMix), V(skinMix), V(thirdMix)); }
		// Used for freemode (online) characters.
		// 
		// For some reason, the scripts use a rounded float for the index.
		// Indexes:
		// 1. black
		// 2. very light blue/green
		// 3. dark blue
		// 4. brown
		// 5. darker brown
		// 6. light brown
		// 7. blue
		// 8. light blue
		// 9. pink
		// 10. yellow
		// 11. purple
		// 12. black
		// 13. dark green
		// 14. light brown
		// 15. yellow/black pattern
		// 16. light colored spiral pattern
		// 17. shiny red
		// 18. shiny half blue/half red
		// 19. half black/half light blue
		// 20. white/red perimter
		// 21. green snake
		// 22. red snake
		// 23. dark blue snake
		// 24. dark yellow
		// 25. bright yellow
		// 26. all black
		// 28. red small pupil
		// 29. devil blue/black
		// 30. white small pupil
		// 31. glossed over
		public static void SET_HEAD_BLEND_EYE_COLOR(Ped ped, int index) { Invoke(0x50B56988B170AFDF, V(ped), V(index)); }
		// A getter for _SET_PED_EYE_COLOR. Returns -1 if fails to get.
		public static int GET_HEAD_BLEND_EYE_COLOR(Ped ped) { return Invoke<int>(0x76BBA2CEE66D47E9, V(ped)); }
		// OverlayID ranges from 0 to 12, index from 0 to _GET_NUM_OVERLAY_VALUES(overlayID)-1, and opacity from 0.0 to 1.0. 
		// 
		// overlayID       Part                  Index, to disable
		// 0               Blemishes             0 - 23, 255
		// 1               Facial Hair           0 - 28, 255
		// 2               Eyebrows              0 - 33, 255
		// 3               Ageing                0 - 14, 255
		// 4               Makeup                0 - 74, 255
		// 5               Blush                 0 - 6, 255
		// 6               Complexion            0 - 11, 255
		// 7               Sun Damage            0 - 10, 255
		// 8               Lipstick              0 - 9, 255
		// 9               Moles/Freckles        0 - 17, 255
		// 10              Chest Hair            0 - 16, 255
		// 11              Body Blemishes        0 - 11, 255
		// 12              Add Body Blemishes    0 - 1, 255
		public static void SET_PED_HEAD_OVERLAY(Ped ped, int overlayID, int index, float opacity) { Invoke(0x48F44967FA05CC1E, V(ped), V(overlayID), V(index), V(opacity)); }
		// Likely a char, if that overlay is not set, e.i. "None" option, returns 255;
		// 
		// This might be the once removed native GET_PED_HEAD_OVERLAY.
		public static int GET_PED_HEAD_OVERLAY(Ped ped, int overlayID) { return Invoke<int>(0xA60EF3B6461A4D43, V(ped), V(overlayID)); }
		public static int GET_PED_HEAD_OVERLAY_NUM(int overlayID) { return Invoke<int>(0xCF1CE768BB43480E, V(overlayID)); }
		// 
		// 
		// ColorType is 1 for eyebrows, beards, and chest hair; 2 for blush and lipstick; and 0 otherwise, though not called in those cases.
		// 
		// Called after SET_PED_HEAD_OVERLAY().
		public static void SET_PED_HEAD_OVERLAY_TINT(Ped ped, int overlayID, int colorType, int colorID, int secondColorID) { Invoke(0x497BF74A7B9CB952, V(ped), V(overlayID), V(colorType), V(colorID), V(secondColorID)); }
		public static void SET_PED_HAIR_TINT(Ped ped, int colorID, int highlightColorID) { Invoke(0x4CFFC65454C93A49, V(ped), V(colorID), V(highlightColorID)); }
		public static int GET_NUM_PED_HAIR_TINTS() { return Invoke<int>(0xE5C0CF872C2AD150); }
		public static int GET_NUM_PED_MAKEUP_TINTS() { return Invoke<int>(0xD1F7CA1535D22818); }
		// Input: Haircolor index, value between 0 and 63 (inclusive).
		// Output: RGB values for the haircolor specified in the input.
		// 
		// This is used with the hair color swatches scaleform.
		// Use `GET_PED_MAKEUP_TINT_COLOR` to get the makeup colors.
		public static void GET_PED_HAIR_TINT_COLOR(int hairColorIndex, int* outR, int* outG, int* outB) { Invoke(0x4852FC386E2E1BB5, V(hairColorIndex), V(outR), V(outG), V(outB)); }
		// Input: Makeup color index, value between 0 and 63 (inclusive).
		// Output: RGB values for the makeup color specified in the input.
		// 
		// This is used with the makeup color swatches scaleform.
		// Use `GET_PED_HAIR_TINT_COLOR` to get the hair colors.
		public static void GET_PED_MAKEUP_TINT_COLOR(int makeupColorIndex, int* outR, int* outG, int* outB) { Invoke(0x013E5CFC38CD5387, V(makeupColorIndex), V(outR), V(outG), V(outB)); }
		public static bool IS_PED_HAIR_TINT_FOR_CREATOR(int colorId) { return Invoke<bool>(0xED6D8E27A43B8CDE, V(colorId)); }
		public static int GET_DEFAULT_SECONDARY_TINT_FOR_CREATOR(int colorId) { return Invoke<int>(0xEA9960D07DADCF10, V(colorId)); }
		public static bool IS_PED_LIPSTICK_TINT_FOR_CREATOR(int colorId) { return Invoke<bool>(0x3E802F11FBE27674, V(colorId)); }
		public static bool IS_PED_BLUSH_TINT_FOR_CREATOR(int colorId) { return Invoke<bool>(0xF41B5D290C99A3D6, V(colorId)); }
		public static bool IS_PED_HAIR_TINT_FOR_BARBER(int colorID) { return Invoke<bool>(0xE0D36E5D9E99CC21, V(colorID)); }
		public static int GET_DEFAULT_SECONDARY_TINT_FOR_BARBER(int colorID) { return Invoke<int>(0xAAA6A3698A69E048, V(colorID)); }
		public static bool IS_PED_LIPSTICK_TINT_FOR_BARBER(int colorID) { return Invoke<bool>(0x0525A2C2562F3CD4, V(colorID)); }
		public static bool IS_PED_BLUSH_TINT_FOR_BARBER(int colorID) { return Invoke<bool>(0x604E810189EE3A59, V(colorID)); }
		public static bool IS_PED_BLUSH_FACEPAINT_TINT_FOR_BARBER(int colorId) { return Invoke<bool>(0x09E7ECA981D9B210, V(colorId)); }
		public static int GET_TINT_INDEX_FOR_LAST_GEN_HAIR_TEXTURE(Hash modelHash, int drawableId, int textureId) { return Invoke<int>(0xC56FBF2F228E1DAC, V(modelHash), V(drawableId), V(textureId)); }
		// Sets the various freemode face features, e.g. nose length, chin shape. Scale ranges from -1.0 to 1.0.
		// 
		// 
		// 
		// 0 - Nose Width (Thin/Wide)
		// 
		// 1 - Nose Peak (Up/Down)
		// 
		// 2 - Nose Length (Long/Short)
		// 
		// 3 - Nose Bone Curveness (Crooked/Curved)
		// 
		// 4 - Nose Tip (Up/Down)
		// 
		// 5 - Nose Bone Twist (Left/Right)
		// 
		// 6 - Eyebrow (Up/Down)
		// 
		// 7 - Eyebrow (In/Out)
		// 
		// 8 - Cheek Bones (Up/Down)
		// 
		// 9 - Cheek Sideways Bone Size (In/Out)
		// 
		// 10 - Cheek Bones Width (Puffed/Gaunt)
		// 
		// 11 - Eye Opening (Both) (Wide/Squinted)
		// 
		// 12 - Lip Thickness (Both) (Fat/Thin)
		// 
		// 13 - Jaw Bone Width (Narrow/Wide)
		// 
		// 14 - Jaw Bone Shape (Round/Square)
		// 
		// 15 - Chin Bone (Up/Down)
		// 
		// 16 - Chin Bone Length (In/Out or Backward/Forward)
		// 
		// 17 - Chin Bone Shape (Pointed/Square)
		// 
		// 18 - Chin Hole (Chin Bum)
		// 
		// 19 - Neck Thickness (Thin/Thick)
		public static void SET_PED_MICRO_MORPH(Ped ped, int index, float scale) { Invoke(0x71A5C1DBA060049E, V(ped), V(index), V(scale)); }
		public static bool HAS_PED_HEAD_BLEND_FINISHED(Ped ped) { return Invoke<bool>(0x654CD0A825161131, V(ped)); }
		public static void FINALIZE_HEAD_BLEND(Ped ped) { Invoke(0x4668D80430D6C299, V(ped)); }
		// p4 seems to vary from 0 to 3.
		// Preview: https://gfycat.com/MaleRareAmazonparrot
		public static void SET_HEAD_BLEND_PALETTE_COLOR(Ped ped, int r, int g, int b, int id) { Invoke(0xCC9682B8951C5229, V(ped), V(r), V(g), V(b), V(id)); }
		public static void DISABLE_HEAD_BLEND_PALETTE_COLOR(Ped ped) { Invoke(0xA21C118553BBDF02, V(ped)); }
		// Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
		// 
		// Used when calling SET_PED_HEAD_BLEND_DATA.
		public static int GET_PED_HEAD_BLEND_FIRST_INDEX(int type) { return Invoke<int>(0x68D353AB88B97E0C, V(type)); }
		// Type equals 0 for male non-dlc, 1 for female non-dlc, 2 for male dlc, and 3 for female dlc.
		public static int GET_PED_HEAD_BLEND_NUM_HEADS(int type) { return Invoke<int>(0x5EF37013A6539C9D, V(type)); }
		// from extreme3.c4
		// PED::SET_PED_PRELOAD_VARIATION_DATA(PLAYER::PLAYER_PED_ID(), 8, PED::GET_PED_DRAWABLE_VARIATION(PLAYER::PLAYER_PED_ID(), 8), PED::GET_PED_TEXTURE_VARIATION(PLAYER::PLAYER_PED_ID(), 8));
		// 
		// p1 is probably componentId
		public static int SET_PED_PRELOAD_VARIATION_DATA(Ped ped, int slot, int drawableId, int textureId) { return Invoke<int>(0x39D55A620FCB6A3A, V(ped), V(slot), V(drawableId), V(textureId)); }
		public static bool HAS_PED_PRELOAD_VARIATION_DATA_FINISHED(Ped ped) { return Invoke<bool>(0x66680A92700F43DF, V(ped)); }
		public static void RELEASE_PED_PRELOAD_VARIATION_DATA(Ped ped) { Invoke(0x5AAB586FFEC0FD96, V(ped)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int SET_PED_PRELOAD_PROP_DATA(Ped ped, int componentId, int drawableId, int TextureId) { return Invoke<int>(0x2B16A3BFF1FBCE49, V(ped), V(componentId), V(drawableId), V(TextureId)); }
		public static bool HAS_PED_PRELOAD_PROP_DATA_FINISHED(Ped ped) { return Invoke<bool>(0x784002A632822099, V(ped)); }
		public static void RELEASE_PED_PRELOAD_PROP_DATA(Ped ped) { Invoke(0xF79F9DEF0AADE61A, V(ped)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int GET_PED_PROP_INDEX(Ped ped, int componentId, Any p2) { return Invoke<int>(0x898CC20EA75BACD8, V(ped), V(componentId), V(p2)); }
		// ComponentId can be set to various things based on what category you're wanting to set
		// enum PedPropsData
		// {
		//     PED_PROP_HATS = 0,
		//     PED_PROP_GLASSES = 1,
		//  PED_PROP_EARS = 2,
		//     PED_PROP_WATCHES = 3,
		// };
		// Usage: SET_PED_PROP_INDEX(playerPed, PED_PROP_HATS, GET_NUMBER_OF_PED_PROP_DRAWABLE_VARIATIONS(playerPed, PED_PROP_HATS), GET_NUMBER_OF_PED_PROP_TEXTURE_VARIATIONS(playerPed, PED_PROP_HATS, 0), TRUE);
		// 
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static void SET_PED_PROP_INDEX(Ped ped, int componentId, int drawableId, int TextureId, bool attach, Any p5) { Invoke(0x93376B65A266EB5F, V(ped), V(componentId), V(drawableId), V(TextureId), V(attach), V(p5)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static void KNOCK_OFF_PED_PROP(Ped ped, bool p1, bool p2, bool p3, bool p4) { Invoke(0x6FD7816A36615F48, V(ped), V(p1), V(p2), V(p3), V(p4)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static void CLEAR_PED_PROP(Ped ped, int propId, Any p2) { Invoke(0x0943E5B8E078E76E, V(ped), V(propId), V(p2)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static void CLEAR_ALL_PED_PROPS(Ped ped, Any p1) { Invoke(0xCD8A7537A9B52F06, V(ped), V(p1)); }
		public static void DROP_AMBIENT_PROP(Ped ped) { Invoke(0xAFF4710E2A0A6C12, V(ped)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static int GET_PED_PROP_TEXTURE_INDEX(Ped ped, int componentId) { return Invoke<int>(0xE131A28626F81AB2, V(ped), V(componentId)); }
		public static void CLEAR_PED_PARACHUTE_PACK_VARIATION(Ped ped) { Invoke(0x1280804F7CFD2D6C, V(ped)); }
		// This native sets a scuba mask for freemode models and an oxygen bottle for player_* models. It works on freemode and player_* models.
		public static void SET_PED_SCUBA_GEAR_VARIATION(Ped ped) { Invoke(0x36C6984C3ED0C911, V(ped)); }
		// Removes the scubagear (for mp male: component id: 8, drawableId: 123, textureId: any) from peds. Does not play the 'remove scuba gear' animation, but instantly removes it.
		public static void CLEAR_PED_SCUBA_GEAR_VARIATION(Ped ped) { Invoke(0xB50EB4CCB29704AC, V(ped)); }
		public static bool IS_USING_PED_SCUBA_GEAR_VARIATION(Any p0) { return Invoke<bool>(0xFEC9A3B1820F3331, V(p0)); }
		// works with TASK::TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS to make a ped completely oblivious to all events going on around him
		public static void SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(Ped ped, bool toggle) { Invoke(0x9F8AA94D6D97DBF4, V(ped), V(toggle)); }
		public static void SET_PED_BOUNDS_ORIENTATION(Ped ped, float p1, float p2, float x, float y, float z) { Invoke(0x4F5F651ACCC9C4CF, V(ped), V(p1), V(p2), V(x), V(y), V(z)); }
		// PED::REGISTER_TARGET(l_216, PLAYER::PLAYER_PED_ID()); from re_prisonbreak.txt.
		// 
		// l_216 = RECSBRobber1
		public static void REGISTER_TARGET(Ped ped, Ped target) { Invoke(0x2F25D9AEFA34FBA2, V(ped), V(target)); }
		// Based on TASK_COMBAT_HATED_TARGETS_AROUND_PED, the parameters are likely similar (PedHandle, and area to attack in).
		public static void REGISTER_HATED_TARGETS_AROUND_PED(Ped ped, float radius) { Invoke(0x9222F300BF8354FE, V(ped), V(radius)); }
		// Gets a random ped in the x/y/zRadius near the x/y/z coordinates passed. 
		// 
		// Ped Types:
		// Any = -1
		// Player = 1
		// Male = 4 
		// Female = 5 
		// Cop = 6
		// Human = 26
		// SWAT = 27 
		// Animal = 28
		// Army = 29
		public static Ped GET_RANDOM_PED_AT_COORD(float x, float y, float z, float xRadius, float yRadius, float zRadius, int pedType) { return Invoke<Ped>(0x876046A8E3A4B71C, V(x), V(y), V(z), V(xRadius), V(yRadius), V(zRadius), V(pedType)); }
		// Gets the closest ped in a radius.
		// 
		// Ped Types:
		// Any ped = -1
		// Player = 1
		// Male = 4 
		// Female = 5 
		// Cop = 6
		// Human = 26
		// SWAT = 27 
		// Animal = 28
		// Army = 29
		// 
		// ------------------
		// P4 P5 P7 P8
		// 1  0  x  x  = return nearest walking Ped
		// 1  x  0  x  = return nearest walking Ped
		// x  1  1  x  = return Ped you are using
		// 0  0  x  x  = no effect
		// 0  x  0  x  = no effect
		// 
		// x = can be 1 or 0. Does not have any obvious changes.
		// 
		// This function does not return ped who is:
		// 1. Standing still
		// 2. Driving
		// 3. Fleeing
		// 4. Attacking
		// 
		// This function only work if the ped is:
		// 1. walking normally.
		// 2. waiting to cross a road.
		// 
		// Note: PED::GET_PED_NEARBY_PEDS works for more peds.
		public static bool GET_CLOSEST_PED(float x, float y, float z, float radius, bool p4, bool p5, Ped* outPed, bool p7, bool p8, int pedType) { return Invoke<bool>(0xC33AB876A77F8164, V(x), V(y), V(z), V(radius), V(p4), V(p5), V(outPed), V(p7), V(p8), V(pedType)); }
		// Sets a value indicating whether scenario peds should be returned by the next call to a command that returns peds. Eg. GET_CLOSEST_PED.
		public static void SET_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND(bool value) { Invoke(0x14F19A8782C8071E, V(value)); }
		public static bool GET_CAN_PED_BE_GRABBED_BY_SCRIPT(Ped ped, bool p1, bool p2, bool p3, bool p4, bool p5, bool p6, bool p7, Any p8) { return Invoke<bool>(0x03EA03AF85A85CB7, V(ped), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		// Scripts use 0.2, 0.5 and 1.0. Value must be >= 0.0 && <= 1.0
		public static void SET_DRIVER_RACING_MODIFIER(Ped driver, float modifier) { Invoke(0xDED5AF5A0EA4B297, V(driver), V(modifier)); }
		// The function specifically verifies the value is equal to, or less than 1.0f. If it is greater than 1.0f, the function does nothing at all.
		public static void SET_DRIVER_ABILITY(Ped driver, float ability) { Invoke(0xB195FFA8042FC5C3, V(driver), V(ability)); }
		// range 0.0f - 1.0f
		public static void SET_DRIVER_AGGRESSIVENESS(Ped driver, float aggressiveness) { Invoke(0xA731F608CA104E3C, V(driver), V(aggressiveness)); }
		// Prevents the ped from going limp.
		// 
		// [Example: Can prevent peds from falling when standing on moving vehicles.]
		public static bool CAN_PED_RAGDOLL(Ped ped) { return Invoke<bool>(0x128F79EDCECE4FD5, V(ped)); }
		// p4/p5: Unused in TU27
		// Ragdoll Types:
		// **0**: CTaskNMRelax
		// **1**: CTaskNMScriptControl: Hardcoded not to work in networked environments.
		// **Else**: CTaskNMBalance
		// time1- Time(ms) Ped is in ragdoll mode; only applies to ragdoll types 0 and not 1.
		// 
		// time2- Unknown time, in milliseconds
		// 
		// ragdollType-
		// 0 : Normal ragdoll
		// 1 : Falls with stiff legs/body
		// 2 : Narrow leg stumble(may not fall)
		// 3 : Wide leg stumble(may not fall)
		// 
		// p4, p5, p6- No idea. In R*'s scripts they are usually either "true, true, false" or "false, false, false".
		// 
		// 
		// 
		// 
		// EDIT 3/11/16: unclear what 'mircoseconds' mean-- a microsecond is 1000x a ms, so time2 must be 1000x time1?  more testing needed.  -sob
		// 
		// Edit Mar 21, 2017: removed part about time2 being the microseconds version of time1. this just isn't correct. time2 is in milliseconds, and time1 and time2 don't seem to be connected in any way.
		public static bool SET_PED_TO_RAGDOLL(Ped ped, int time1, int time2, int ragdollType, bool p4, bool p5, bool p6) { return Invoke<bool>(0xAE99FB955581844A, V(ped), V(time1), V(time2), V(ragdollType), V(p4), V(p5), V(p6)); }
		// Return variable is never used in R*'s scripts.
		// 
		// Not sure what p2 does. It seems like it would be a time judging by it's usage in R*'s scripts, but didn't seem to affect anything in my testings.
		// 
		// enum eRagdollType
		// {
		//  RD_MALE=0,
		//  RD_FEMALE = 1,
		//  RD_MALE_LARGE = 2,
		//  RD_CUSTOM = 3,
		// }
		// 
		// x, y, and z are coordinates, most likely to where the ped will fall.
		// 
		// p8 to p13 are always 0f in R*'s scripts.
		// 
		// (Simplified) Example of the usage of the function from R*'s scripts:
		// ped::set_ped_to_ragdoll_with_fall(ped, 1500, 2000, 1, -entity::get_entity_forward_vector(ped), 1f, 0f, 0f, 0f, 0f, 0f, 0f);
		// 
		public static bool SET_PED_TO_RAGDOLL_WITH_FALL(Ped ped, int time, int p2, int ragdollType, float x, float y, float z, float velocity, float p8, float p9, float p10, float p11, float p12, float p13) { return Invoke<bool>(0xD76632D99E4966C8, V(ped), V(time), V(p2), V(ragdollType), V(x), V(y), V(z), V(velocity), V(p8), V(p9), V(p10), V(p11), V(p12), V(p13)); }
		// Causes Ped to ragdoll on collision with any obj (e.g Running into trashcan). If applied to player you will sometimes trip on the sidewalk.
		public static void SET_PED_RAGDOLL_ON_COLLISION(Ped ped, bool toggle) { Invoke(0xF0A4F1BBF4FA7497, V(ped), V(toggle)); }
		// If the ped handle passed through the parenthesis is in a ragdoll state this will return true.
		public static bool IS_PED_RAGDOLL(Ped ped) { return Invoke<bool>(0x47E4E977581C5B55, V(ped)); }
		public static bool IS_PED_RUNNING_RAGDOLL_TASK(Ped ped) { return Invoke<bool>(0xE3B6097CC25AA69E, V(ped)); }
		public static void SET_PED_RAGDOLL_FORCE_FALL(Ped ped) { Invoke(0x01F6594B923B9251, V(ped)); }
		public static void RESET_PED_RAGDOLL_TIMER(Ped ped) { Invoke(0x9FA4664CF62E47E8, V(ped)); }
		public static void SET_PED_CAN_RAGDOLL(Ped ped, bool toggle) { Invoke(0xB128377056A54E2A, V(ped), V(toggle)); }
		public static bool IS_PED_RUNNING_MELEE_TASK(Ped ped) { return Invoke<bool>(0xD1871251F3B5ACD7, V(ped)); }
		public static bool IS_PED_RUNNING_MOBILE_PHONE_TASK(Ped ped) { return Invoke<bool>(0x2AFE52F782F25775, V(ped)); }
		public static bool IS_MOBILE_PHONE_TO_PED_EAR(Ped ped) { return Invoke<bool>(0xA3F3564A5B3646C0, V(ped)); }
		// Works for both player and peds,
		// 
		// enum eRagdollBlockingFlags
		// {
		//  RBF_BULLET_IMPACT = 0,
		//  RBF_VEHICLE_IMPACT = 1,
		//  RBF_FIRE = 2,
		//  RBF_ELECTROCUTION = 3,
		//  RBF_PLAYER_IMPACT = 4,
		//  RBF_EXPLOSION = 5,0
		//  RBF_IMPACT_OBJECT = 6,
		//  RBF_MELEE = 7,
		//  RBF_RUBBER_BULLET = 8,
		//  RBF_FALLING = 9,
		//  RBF_WATER_JET = 10,
		//  RBF_DROWNING = 11,
		//  _0x9F52E2C4 = 12,
		//  RBF_PLAYER_BUMP = 13,
		//  RBF_PLAYER_RAGDOLL_BUMP = 14,
		//  RBF_PED_RAGDOLL_BUMP = 15,
		//  RBF_VEHICLE_GRAB = 16,
		//  RBF_SMOKE_GRENADE = 17,
		// };
		// 
		// 
		public static void SET_RAGDOLL_BLOCKING_FLAGS(Ped ped, int blockingFlag) { Invoke(0x26695EC767728D84, V(ped), V(blockingFlag)); }
		// See SET_RAGDOLL_BLOCKING_FLAGS for flags
		public static void CLEAR_RAGDOLL_BLOCKING_FLAGS(Ped ped, int blockingFlag) { Invoke(0xD86D101FCFD00A4B, V(ped), V(blockingFlag)); }
		public static void SET_PED_ANGLED_DEFENSIVE_AREA(Ped ped, float p1, float p2, float p3, float p4, float p5, float p6, float p7, bool p8, bool p9) { Invoke(0xC7F76DF27A5045A1, V(ped), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9)); }
		public static void SET_PED_SPHERE_DEFENSIVE_AREA(Ped ped, float x, float y, float z, float radius, bool p5, bool p6) { Invoke(0x9D3151A373974804, V(ped), V(x), V(y), V(z), V(radius), V(p5), V(p6)); }
		public static void SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_PED(Ped ped, Ped target, float xOffset, float yOffset, float zOffset, float radius, bool p6) { Invoke(0xF9B8F91AAD3B953E, V(ped), V(target), V(xOffset), V(yOffset), V(zOffset), V(radius), V(p6)); }
		public static void SET_PED_DEFENSIVE_SPHERE_ATTACHED_TO_VEHICLE(Ped ped, Vehicle target, float xOffset, float yOffset, float zOffset, float radius, bool p6) { Invoke(0xE4723DB6E736CCFF, V(ped), V(target), V(xOffset), V(yOffset), V(zOffset), V(radius), V(p6)); }
		public static void SET_PED_DEFENSIVE_AREA_ATTACHED_TO_PED(Ped ped, Ped attachPed, float p2, float p3, float p4, float p5, float p6, float p7, float p8, bool p9, bool p10) { Invoke(0x4EF47FE21698A8B6, V(ped), V(attachPed), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10)); }
		public static void SET_PED_DEFENSIVE_AREA_DIRECTION(Ped ped, float p1, float p2, float p3, bool p4) { Invoke(0x413C6C763A4AFFAD, V(ped), V(p1), V(p2), V(p3), V(p4)); }
		// Ped will no longer get angry when you stay near him.
		public static void REMOVE_PED_DEFENSIVE_AREA(Ped ped, bool toggle) { Invoke(0x74D4E028107450A9, V(ped), V(toggle)); }
		public static Vector3 GET_PED_DEFENSIVE_AREA_POSITION(Ped ped, bool p1) { return Invoke<Vector3>(0x3C06B8786DD94CD1, V(ped), V(p1)); }
		public static bool IS_PED_DEFENSIVE_AREA_ACTIVE(Ped ped, bool p1) { return Invoke<bool>(0xBA63D9FE45412247, V(ped), V(p1)); }
		public static void SET_PED_PREFERRED_COVER_SET(Ped ped, Any itemSet) { Invoke(0x8421EB4DA7E391B9, V(ped), V(itemSet)); }
		public static void REMOVE_PED_PREFERRED_COVER_SET(Ped ped) { Invoke(0xFDDB234CF74073D9, V(ped)); }
		// It will revive/cure the injured ped. The condition is ped must not be dead.
		// 
		// Upon setting and converting the health int, found, if health falls below 5, the ped will lay on the ground in pain(Maximum default health is 100).
		// 
		// This function is well suited there.
		public static void REVIVE_INJURED_PED(Ped ped) { Invoke(0x8D8ACD8388CD99CE, V(ped)); }
		// This function will simply bring the dead person back to life.
		// 
		// Try not to use it alone, since using this function alone, will make peds fall through ground in hell(well for the most of the times).
		// 
		// Instead, before calling this function, you may want to declare the position, where your Resurrected ped to be spawn at.(For instance, Around 2 floats of Player's current position.) 
		// 
		// Also, disabling any assigned task immediately helped in the number of scenarios, where If you want peds to perform certain decided tasks.
		public static void RESURRECT_PED(Ped ped) { Invoke(0x71BC8E838B9C6035, V(ped)); }
		// NOTE: Debugging functions are not present in the retail version of the game.
		// 
		// *untested but char *name could also be a hash for a localized string
		public static void SET_PED_NAME_DEBUG(Ped ped, string name) { Invoke(0x98EFA132A4117BE1, V(ped), V(name)); }
		// Gets the offset the specified ped has moved since the previous tick.
		// 
		// If worldSpace is false, the returned offset is relative to the ped. That is, if the ped has moved 1 meter right and 5 meters forward, it'll return 1,5,0.
		// 
		// If worldSpace is true, the returned offset is relative to the world. That is, if the ped has moved 1 meter on the X axis and 5 meters on the Y axis, it'll return 1,5,0.
		public static Vector3 GET_PED_EXTRACTED_DISPLACEMENT(Ped ped, bool worldSpace) { return Invoke<Vector3>(0xE0AF41401ADF87E3, V(ped), V(worldSpace)); }
		public static void SET_PED_DIES_WHEN_INJURED(Ped ped, bool toggle) { Invoke(0x5BA7919BED300023, V(ped), V(toggle)); }
		public static void SET_PED_ENABLE_WEAPON_BLOCKING(Ped ped, bool toggle) { Invoke(0x97A790315D3831FD, V(ped), V(toggle)); }
		// p1 was always 1 (true).
		// 
		// Kicks the ped from the current vehicle and keeps the rendering-focus on this ped (also disables its collision). If doing this for your player ped, you'll still be able to drive the vehicle.
		public static void SPECIAL_FUNCTION_DO_NOT_USE(Ped ped, bool p1) { Invoke(0xF9ACF4A08098EA25, V(ped), V(p1)); }
		public static void RESET_PED_VISIBLE_DAMAGE(Ped ped) { Invoke(0x3AC1F7B898F30C05, V(ped)); }
		public static void APPLY_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, Any p1, float p2, float p3, Any p4) { Invoke(0x816F6981C60BF53B, V(ped), V(p1), V(p2), V(p3), V(p4)); }
		// woundTypes:
		// - soak_splat
		// - wound_sheet
		// - BulletSmall
		// - BulletLarge
		// - ShotgunSmall
		// - ShotgunSmallMonolithic
		// - ShotgunLarge
		// - ShotgunLargeMonolithic
		// - NonFatalHeadshot
		// - stab
		// - BasicSlash
		// - Scripted_Ped_Splash_Back
		// - BackSplash
		public static void APPLY_PED_BLOOD(Ped ped, int boneIndex, float xRot, float yRot, float zRot, string woundType) { Invoke(0x83F7E01C7B769A26, V(ped), V(boneIndex), V(xRot), V(yRot), V(zRot), V(woundType)); }
		public static void APPLY_PED_BLOOD_BY_ZONE(Ped ped, int p1, float p2, float p3, string p4) { Invoke(0x3311E47B91EDCBBC, V(ped), V(p1), V(p2), V(p3), V(p4)); }
		public static void APPLY_PED_BLOOD_SPECIFIC(Ped ped, int p1, float p2, float p3, float p4, float p5, int p6, float p7, string p8) { Invoke(0xEF0D582CBF2D9B0F, V(ped), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		// enum eDamageZone
		// {
		// 	DZ_Torso = 0,
		// 	DZ_Head,
		// 	DZ_LeftArm,
		// 	DZ_RightArm,
		// 	DZ_LeftLeg,
		// 	DZ_RightLeg,
		// };
		// 
		// Decal Names:
		// scar
		// blushing
		// cs_flush_anger
		// cs_flush_anger_face
		// bruise
		// bruise_large
		// herpes
		// ArmorBullet
		// basic_dirt_cloth
		// basic_dirt_skin
		// cs_trev1_dirt
		// 
		// APPLY_PED_DAMAGE_DECAL(ped, 1, 0.5f, 0.513f, 0f, 1f, unk, 0, 0, "blushing");
		public static void APPLY_PED_DAMAGE_DECAL(Ped ped, int damageZone, float xOffset, float yOffset, float heading, float scale, float alpha, int variation, bool fadeIn, string decalName) { Invoke(0x397C38AA7B4A5F83, V(ped), V(damageZone), V(xOffset), V(yOffset), V(heading), V(scale), V(alpha), V(variation), V(fadeIn), V(decalName)); }
		// Damage Packs:
		// 
		// "SCR_TrevorTreeBang"
		// "HOSPITAL_0"
		// "HOSPITAL_1"
		// "HOSPITAL_2"
		// "HOSPITAL_3"
		// "HOSPITAL_4"
		// "HOSPITAL_5"
		// "HOSPITAL_6"
		// "HOSPITAL_7"
		// "HOSPITAL_8"
		// "HOSPITAL_9"
		// "SCR_Dumpster"
		// "BigHitByVehicle"
		// "SCR_Finale_Michael_Face"
		// "SCR_Franklin_finb"
		// "SCR_Finale_Michael"
		// "SCR_Franklin_finb2"
		// "Explosion_Med"
		// "SCR_Torture"
		// "SCR_TracySplash"
		// "Skin_Melee_0"
		// 
		// Additional damage packs:
		// 
		// gist.github.com/alexguirre/f3f47f75ddcf617f416f3c8a55ae2227
		// Full list of ped damage packs by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedDamagePacks.json
		public static void APPLY_PED_DAMAGE_PACK(Ped ped, string damagePack, float damage, float mult) { Invoke(0x46DF918788CB093F, V(ped), V(damagePack), V(damage), V(mult)); }
		public static void CLEAR_PED_BLOOD_DAMAGE(Ped ped) { Invoke(0x8FE22675A5A45817, V(ped)); }
		// Somehow related to changing ped's clothes.
		public static void CLEAR_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, int p1) { Invoke(0x56E3B78C5408D9F4, V(ped), V(p1)); }
		public static void HIDE_PED_BLOOD_DAMAGE_BY_ZONE(Ped ped, Any p1, bool p2) { Invoke(0x62AB793144DE75DC, V(ped), V(p1), V(p2)); }
		// p1: from 0 to 5 in the b617d scripts.
		// p2: "blushing" and "ALL" found in the b617d scripts.
		public static void CLEAR_PED_DAMAGE_DECAL_BY_ZONE(Ped ped, int p1, string p2) { Invoke(0x523C79AEEFCC4A2A, V(ped), V(p1), V(p2)); }
		public static int GET_PED_DECORATIONS_STATE(Ped ped) { return Invoke<int>(0x71EAB450D86954A1, V(ped)); }
		public static void MARK_PED_DECORATIONS_AS_CLONED_FROM_LOCAL_PLAYER(Ped ped, bool p1) { Invoke(0x2B694AFCF64E6994, V(ped), V(p1)); }
		// It clears the wetness of the selected Ped/Player. Clothes have to be wet to notice the difference.
		public static void CLEAR_PED_WETNESS(Ped ped) { Invoke(0x9C720776DAA43E7E, V(ped)); }
		// It adds the wetness level to the player clothing/outfit. As if player just got out from water surface.
		// 
		// 
		public static void SET_PED_WETNESS_HEIGHT(Ped ped, float height) { Invoke(0x44CB6447D2571AA0, V(ped), V(height)); }
		// combined with PED::SET_PED_WETNESS_HEIGHT(), this native makes the ped drenched in water up to the height specified in the other function
		public static void SET_PED_WETNESS_ENABLED_THIS_FRAME(Ped ped) { Invoke(0xB5485E4907B53019, V(ped)); }
		public static void SET_PED_WETNESS(Ped ped, float wetLevel) { Invoke(0xAC0BB4D87777CAE2, V(ped), V(wetLevel)); }
		public static void CLEAR_PED_ENV_DIRT(Ped ped) { Invoke(0x6585D955A68452A5, V(ped)); }
		// Sweat is set to 100.0 or 0.0 in the decompiled scripts.
		public static void SET_PED_SWEAT(Ped ped, float sweat) { Invoke(0x27B0405F59637D1F, V(ped), V(sweat)); }
		// Applies an Item from a PedDecorationCollection to a ped. These include tattoos and shirt decals.
		// 
		// collection - PedDecorationCollection filename hash
		// overlay - Item name hash
		// 
		// Example:
		// Entry inside "mpbeach_overlays.xml" -
		// <Item>
		//   <uvPos x="0.500000" y="0.500000" />
		//   <scale x="0.600000" y="0.500000" />
		//   <rotation value="0.000000" />
		//   <nameHash>FM_Hair_Fuzz</nameHash>
		//   <txdHash>mp_hair_fuzz</txdHash>
		//   <txtHash>mp_hair_fuzz</txtHash>
		//   <zone>ZONE_HEAD</zone>
		//   <type>TYPE_TATTOO</type>
		//   <faction>FM</faction>
		//   <garment>All</garment>
		//   <gender>GENDER_DONTCARE</gender>
		//   <award />
		//   <awardLevel />
		// </Item>
		// 
		// Code:
		// PED::ADD_PED_DECORATION_FROM_HASHES(PLAYER::PLAYER_PED_ID(), MISC::GET_HASH_KEY("mpbeach_overlays"), MISC::GET_HASH_KEY("fm_hair_fuzz"))
		// 
		// Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
		public static void ADD_PED_DECORATION_FROM_HASHES(Ped ped, Hash collection, Hash overlay) { Invoke(0x5F5D1665E352A839, V(ped), V(collection), V(overlay)); }
		// Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
		public static void ADD_PED_DECORATION_FROM_HASHES_IN_CORONA(Ped ped, Hash collection, Hash overlay) { Invoke(0x5619BFA07CFD7833, V(ped), V(collection), V(overlay)); }
		// Returns the zoneID for the overlay if it is a member of collection.
		// enum ePedDecorationZone
		// {
		// 	ZONE_TORSO = 0,
		// 	ZONE_HEAD = 1,
		// 	ZONE_LEFT_ARM = 2,
		// 	ZONE_RIGHT_ARM = 3,
		// 	ZONE_LEFT_LEG = 4,
		// 	ZONE_RIGHT_LEG = 5,
		// 	ZONE_MEDALS = 6,
		// 	ZONE_INVALID = 7
		// };
		// 
		// Full list of ped overlays / decorations by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/pedOverlayCollections.json
		public static int GET_PED_DECORATION_ZONE_FROM_HASHES(Hash collection, Hash overlay) { return Invoke<int>(0x9FD452BFBE7A7A8B, V(collection), V(overlay)); }
		public static void CLEAR_PED_DECORATIONS(Ped ped) { Invoke(0x0E5173C163976E38, V(ped)); }
		public static void CLEAR_PED_DECORATIONS_LEAVE_SCARS(Ped ped) { Invoke(0xE3B27E70CEAB9F0C, V(ped)); }
		// Despite this function's name, it simply returns whether the specified handle is a Ped.
		public static bool WAS_PED_SKELETON_UPDATED(Ped ped) { return Invoke<bool>(0x11B499C1E0FF8559, V(ped)); }
		// Gets the position of the specified bone of the specified ped.
		// 
		// ped: The ped to get the position of a bone from.
		// boneId: The ID of the bone to get the position from. This is NOT the index.
		// offsetX: The X-component of the offset to add to the position relative to the bone's rotation.
		// offsetY: The Y-component of the offset to add to the position relative to the bone's rotation.
		// offsetZ: The Z-component of the offset to add to the position relative to the bone's rotation.
		public static Vector3 GET_PED_BONE_COORDS(Ped ped, int boneId, float offsetX, float offsetY, float offsetZ) { return Invoke<Vector3>(0x17C07FC640E86B4E, V(ped), V(boneId), V(offsetX), V(offsetY), V(offsetZ)); }
		// Creates a new NaturalMotion message.
		// 
		// startImmediately: If set to true, the character will perform the message the moment it receives it by GIVE_PED_NM_MESSAGE. If false, the Ped will get the message but won't perform it yet. While it's a boolean value, if negative, the message will not be initialized.
		// messageId: The ID of the NaturalMotion message.
		// 
		// If a message already exists, this function does nothing. A message exists until the point it has been successfully dispatched by GIVE_PED_NM_MESSAGE.
		public static void CREATE_NM_MESSAGE(bool startImmediately, int messageId) { Invoke(0x418EF2A1BCE56685, V(startImmediately), V(messageId)); }
		// Sends the message that was created by a call to CREATE_NM_MESSAGE to the specified Ped.
		// 
		// If a message hasn't been created already, this function does nothing.
		// If the Ped is not ragdolled with Euphoria enabled, this function does nothing.
		// The following call can be used to ragdoll the Ped with Euphoria enabled: SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
		// 
		// Call order:
		// SET_PED_TO_RAGDOLL
		// CREATE_NM_MESSAGE
		// GIVE_PED_NM_MESSAGE
		// 
		// Multiple messages can be chained. Eg. to make the ped stagger and swing his arms around, the following calls can be made:
		// SET_PED_TO_RAGDOLL(ped, 4000, 5000, 1, 1, 1, 0);
		// CREATE_NM_MESSAGE(true, 0); // stopAllBehaviours - Stop all other behaviours, in case the Ped is already doing some Euphoria stuff.
		// GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
		// CREATE_NM_MESSAGE(true, 1151); // staggerFall - Attempt to walk while falling.
		// GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
		// CREATE_NM_MESSAGE(true, 372); // armsWindmill - Swing arms around.
		// GIVE_PED_NM_MESSAGE(ped); // Dispatch message to Ped.
		public static void GIVE_PED_NM_MESSAGE(Ped ped) { Invoke(0xB158DFCCC56E5C5B, V(ped)); }
		public static int ADD_SCENARIO_BLOCKING_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool p6, bool p7, bool p8, bool p9, Any p10) { return Invoke<int>(0x1B5C85C612E5256E, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p6), V(p7), V(p8), V(p9), V(p10)); }
		public static void REMOVE_SCENARIO_BLOCKING_AREAS() { Invoke(0xD37401D78A929A49); }
		public static void REMOVE_SCENARIO_BLOCKING_AREA(Any p0, bool p1) { Invoke(0x31D16B74C6E29D66, V(p0), V(p1)); }
		public static void SET_SCENARIO_PEDS_SPAWN_IN_SPHERE_AREA(float x, float y, float z, float range, int p4) { Invoke(0x28157D43CF600981, V(x), V(y), V(z), V(range), V(p4)); }
		public static bool DOES_SCENARIO_BLOCKING_AREA_EXISTS(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<bool>(0x8A24B067D175A7BD, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		// Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
		public static bool IS_PED_USING_SCENARIO(Ped ped, string scenario) { return Invoke<bool>(0x1BF094736DD62C2E, V(ped), V(scenario)); }
		public static bool IS_PED_USING_ANY_SCENARIO(Ped ped) { return Invoke<bool>(0x57AB4A3080F85143, V(ped)); }
		public static bool SET_PED_PANIC_EXIT_SCENARIO(Any p0, Any p1, Any p2, Any p3) { return Invoke<bool>(0xFE07FF6495D52E2A, V(p0), V(p1), V(p2), V(p3)); }
		public static void TOGGLE_SCENARIO_PED_COWER_IN_PLACE(Ped ped, bool toggle) { Invoke(0x9A77DFD295E29B09, V(ped), V(toggle)); }
		public static bool TRIGGER_PED_SCENARIO_PANICEXITTOFLEE(Any p0, Any p1, Any p2, Any p3) { return Invoke<bool>(0x25361A96E0F7E419, V(p0), V(p1), V(p2), V(p3)); }
		public static bool SET_PED_SHOULD_PLAY_DIRECTED_NORMAL_SCENARIO_EXIT(Any p0, Any p1, Any p2, Any p3) { return Invoke<bool>(0xEC6935EBE0847B90, V(p0), V(p1), V(p2), V(p3)); }
		public static void SET_PED_SHOULD_PLAY_NORMAL_SCENARIO_EXIT(Ped ped) { Invoke(0xA3A9299C4F2ADB98, V(ped)); }
		public static void SET_PED_SHOULD_PLAY_IMMEDIATE_SCENARIO_EXIT(Ped ped) { Invoke(0xF1C03A5352243A30, V(ped)); }
		public static bool SET_PED_SHOULD_PLAY_FLEE_SCENARIO_EXIT(Ped ped, Any p1, Any p2, Any p3) { return Invoke<bool>(0xEEED8FAFEC331A70, V(ped), V(p1), V(p2), V(p3)); }
		public static void SET_PED_SHOULD_IGNORE_SCENARIO_EXIT_COLLISION_CHECKS(Ped ped, bool p1) { Invoke(0x425AECF167663F48, V(ped), V(p1)); }
		public static void SET_PED_SHOULD_IGNORE_SCENARIO_NAV_CHECKS(Any p0, bool p1) { Invoke(0x5B6010B3CBC29095, V(p0), V(p1)); }
		public static void SET_PED_SHOULD_PROBE_FOR_SCENARIO_EXITS_IN_ONE_FRAME(Any p0, bool p1) { Invoke(0xCEDA60A74219D064, V(p0), V(p1)); }
		public static bool IS_PED_GESTURING(Any p0) { return Invoke<bool>(0xC30BDAEE47256C13, V(p0)); }
		public static void RESET_FACIAL_IDLE_ANIM(Ped ped) { Invoke(0x007FDE5A7897E426, V(ped)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void PLAY_FACIAL_ANIM(Ped ped, string animName, string animDict) { Invoke(0xE1E65CA8AC9C00ED, V(ped), V(animName), V(animDict)); }
		// Clipsets:
		// facials@gen_female@base1
		// facials@gen_male@base1
		// facials@p_m_zero@base1
		// 
		// Typically followed with SET_FACIAL_IDLE_ANIM_OVERRIDE:
		// mood_drunk_1
		// mood_stressed_1
		// mood_happy_1
		// mood_talking_1
		// 
		public static void SET_FACIAL_CLIPSET(Ped ped, string animDict) { Invoke(0x5687C7F05B39E401, V(ped), V(animDict)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void SET_FACIAL_IDLE_ANIM_OVERRIDE(Ped ped, string animName, string animDict) { Invoke(0xFFC24B988B938B38, V(ped), V(animName), V(animDict)); }
		public static void CLEAR_FACIAL_IDLE_ANIM_OVERRIDE(Ped ped) { Invoke(0x726256CC1EEB182F, V(ped)); }
		public static void SET_PED_CAN_PLAY_GESTURE_ANIMS(Ped ped, bool toggle) { Invoke(0xBAF20C5432058024, V(ped), V(toggle)); }
		// p2 usually 0
		public static void SET_PED_CAN_PLAY_VISEME_ANIMS(Ped ped, bool toggle, bool p2) { Invoke(0xF833DDBA3B104D43, V(ped), V(toggle), V(p2)); }
		public static void SET_PED_IS_IGNORED_BY_AUTO_OPEN_DOORS(Ped ped, bool p1) { Invoke(0x33A60D8BDD6E508C, V(ped), V(p1)); }
		public static void SET_PED_CAN_PLAY_AMBIENT_ANIMS(Ped ped, bool toggle) { Invoke(0x6373D1349925A70E, V(ped), V(toggle)); }
		public static void SET_PED_CAN_PLAY_AMBIENT_BASE_ANIMS(Ped ped, bool toggle) { Invoke(0x0EB0585D15254740, V(ped), V(toggle)); }
		public static void TRIGGER_IDLE_ANIMATION_ON_PED(Ped ped) { Invoke(0xC2EE020F5FB4DB53, V(ped)); }
		public static void SET_PED_CAN_ARM_IK(Ped ped, bool toggle) { Invoke(0x6C3B4D6D13B4C841, V(ped), V(toggle)); }
		public static void SET_PED_CAN_HEAD_IK(Ped ped, bool toggle) { Invoke(0xC11C18092C5530DC, V(ped), V(toggle)); }
		public static void SET_PED_CAN_LEG_IK(Ped ped, bool toggle) { Invoke(0x73518ECE2485412B, V(ped), V(toggle)); }
		public static void SET_PED_CAN_TORSO_IK(Ped ped, bool toggle) { Invoke(0xF2B7106D37947CE0, V(ped), V(toggle)); }
		public static void SET_PED_CAN_TORSO_REACT_IK(Ped ped, bool p1) { Invoke(0xF5846EDB26A98A24, V(ped), V(p1)); }
		public static void SET_PED_CAN_TORSO_VEHICLE_IK(Ped ped, bool p1) { Invoke(0x6647C5F6F5792496, V(ped), V(p1)); }
		public static void SET_PED_CAN_USE_AUTO_CONVERSATION_LOOKAT(Ped ped, bool toggle) { Invoke(0xEC4686EC06434678, V(ped), V(toggle)); }
		public static bool IS_PED_HEADTRACKING_PED(Ped ped1, Ped ped2) { return Invoke<bool>(0x5CD3CB88A7F8850D, V(ped1), V(ped2)); }
		public static bool IS_PED_HEADTRACKING_ENTITY(Ped ped, Entity entity) { return Invoke<bool>(0x813A0A7C9D2E831F, V(ped), V(entity)); }
		// This is only called once in the scripts.
		// 
		// sub_1CD9(&l_49, 0, getElem(3, &l_34, 4), "MICHAEL", 0, 1);
		//                     sub_1CA8("WORLD_HUMAN_SMOKING", 2);
		//                     PED::SET_PED_PRIMARY_LOOKAT(getElem(3, &l_34, 4), PLAYER::PLAYER_PED_ID());
		public static void SET_PED_PRIMARY_LOOKAT(Ped ped, Ped lookAt) { Invoke(0xCD17B554996A8D9E, V(ped), V(lookAt)); }
		public static void SET_PED_CLOTH_PIN_FRAMES(Any p0, Any p1) { Invoke(0x78C4E9961DB3EB5B, V(p0), V(p1)); }
		public static void SET_PED_CLOTH_PACKAGE_INDEX(Any p0, Any p1) { Invoke(0x82A3D6D9CC2CB8E3, V(p0), V(p1)); }
		public static void SET_PED_CLOTH_PRONE(Any p0, bool p1) { Invoke(0xA660FAF550EB37E5, V(p0), V(p1)); }

		public enum PedConfigFlags
		{
			NoCriticalHits = 2,
			DrownsInWater = 3,
			DisableReticuleFixedLockon = 4,
			UpperBodyDamageAnimsOnly = 7,
			NeverLeavesGroup = 13,
			BlockNonTemporaryEvents = 17,
			IgnoreSeenMelee = 24,
			GetOutUndriveableVehicle = 29,
			WillFlyThruWindscreen = 32,
			DieWhenRagdoll = 33,
			HasHelmet = 34,
			UseHelmet = 35,
			DontTakeOffHelmet = 36,
			DisableEvasiveDives = 39,
			DontInfluenceWantedLevel = 42,
			DisablePlayerLockon = 43,
			DisableLockonToRandomPeds = 44,
			AllowLockonToFriendlyPlayers = 45,
			PedBeingDeleted = 47,
			BlockWeaponSwitching = 48,
			IsFiring = 58,
			WasFiring = 59,
			IsStanding = 60,
			WasStanding = 61,
			InVehicle = 62,
			OnMount = 63,
			AttachedToVehicle = 64,
			IsSwimming = 65,
			WasSwimming = 66,
			IsSkiing = 67,
			IsSitting = 68,
			KilledByStealth = 69,
			KilledByTakedown = 70,
			Knockedout = 71,
			UsingCoverPoint = 75,
			IsInTheAir = 76,
			IsAimingGun = 78,
			ForcePedLoadCover = 93,
			VaultFromCover = 97,
			IsDrunk = 100,
			ForcedAim = 101,
			OpenDoorArmIK = 104,
			ForceReload = 105,
			DontActivateRagdollFromVehicleImpact = 106,//布娃娃
			DontActivateRagdollFromBulletImpact = 107,
			DontActivateRagdollFromExplosions = 108,
			DontActivateRagdollFromFire = 109,
			DontActivateRagdollFromElectrocution = 110,
			KeepWeaponHolsteredUnlessFired = 113,
			GetOutBurningVehicle = 116,
			BumpedByPlayer = 117,
			RunFromFiresAndExplosions = 118,
			TreatAsPlayerDuringTargeting = 119,
			IsHandCuffed = 120,
			IsAnkleCuffed = 121,
			DisableMelee = 122,
			DisableUnarmedDrivebys = 123,
			JustGetsPulledOutWhenElectrocuted = 124,
			WillNotHotwireLawEnforcementVehicle = 126,
			WillCommandeerRatherThanJack = 127,
			CanBeAgitated = 128,
			ForcePedToFaceLeftInCover = 129,
			ForcePedToFaceRightInCover = 130,
			BlockPedFromTurningInCover = 131,
			KeepRelationshipGroupAfterCleanUp = 132,
			ForcePedToBeDragged = 133,
			PreventPedFromReactingToBeingJacked = 134,
			IsScuba = 135,
			WillArrestRatherThanJack = 136,
			RemoveDeadExtraFarAway = 137,
			RidingTrain = 138,
			ArrestResult = 139,
			CanAttackFriendly = 140,
			WillJackAnyPlayer = 141, //劫持
			WillJackWantedPlayersRatherThanStealCar = 144,
			ShootingAnimFlag = 145,
			DisableLadderClimbing = 146,
			StairsDetected = 147,
			SlopeDetected = 148,
			CowerInsteadOfFlee = 150,
			CanActivateRagdollWhenVehicleUpsideDown = 151,
			AlwaysRespondToCriesForHelp = 152,
			DisableBloodPoolCreation = 153,
			ShouldFixIfNoCollision = 154,
			CanPerformArrest = 155,
			CanPerformUncuff = 156,
			CanBeArrested = 157,
			PlayerPreferFrontSeatMP = 159,
			IsInjured = 166,
			DontEnterVehiclesInPlayersGroup = 167,
			PreventAllMeleeTaunts = 169,
			ForceDirectEntry = 170,
			AlwaysSeeApproachingVehicles = 171,
			CanDiveAwayFromApproachingVehicles = 172,
			AllowPlayerToInterruptVehicleEntryExit = 173,
			OnlyAttackLawIfPlayerIsWanted = 174,
			PedsJackingMeDontGetIn = 177,
			PedIgnoresAnimInterruptEvents = 179,
			IsInCustody = 180,
			ForceStandardBumpReactionThresholds = 181,
			LawWillOnlyAttackIfPlayerIsWanted = 182,
			IsAgitated = 183,
			PreventAutoShuffleToDriversSeat = 184,
			UseKinematicModeWhenStationary = 185,
			EnableWeaponBlocking = 186,
			HasHurtStarted = 187,
			DisableHurt = 188,
			PlayerIsWeird = 189,
			DoNothingWhenOnFootByDefault = 193,
			UsingScenario = 194,
			VisibleOnScreen = 195,
			DontActivateRagdollOnVehicleCollisionWhenDead = 199,
			HasBeenInArmedCombat = 200,
			Avoidance_Ignore_All = 202,
			Avoidance_Ignored_by_All = 203,
			Avoidance_Ignore_Group1 = 204,
			Avoidance_Member_of_Group1 = 205,
			ForcedToUseSpecificGroupSeatIndex = 206,
			DisableExplosionReactions = 208,
			DodgedPlayer = 209,
			WaitingForPlayerControlInterrupt = 210,
			ForcedToStayInCover = 211,
			GeneratesSoundEvents = 212,
			ListensToSoundEvents = 213,
			AllowToBeTargetedInAVehicle = 214,
			WaitForDirectEntryPointToBeFreeWhenExiting = 215,
			OnlyRequireOnePressToExitVehicle = 216,
			ForceExitToSkyDive = 217,
			DontEnterLeadersVehicle = 220,
			DisableExitToSkyDive = 221,
			Shrink = 223,
			DisablePotentialToBeWalkedIntoResponse = 225,
			DisablePedAvoidance = 226,
			ForceRagdollUponDeath = 227,
			DisablePanicInVehicle = 229,
			AllowedToDetachTrailer = 230,
			IsHoldingProp = 236,
			BlocksPathingWhenDead = 237,
			ForceSkinCharacterCloth = 240,
			LeaveEngineOnWhenExitingVehicles = 241,
			PhoneDisableTextingAnimations = 242,
			PhoneDisableTalkingAnimations = 243,
			PhoneDisableCameraAnimations = 244,
			DisableBlindFiringInShotReactions = 245,
			AllowNearbyCoverUsage = 246,
			CanPlayInCarIdles = 248,
			CanAttackNonWantedPlayerAsLaw = 249,
			WillTakeDamageWhenVehicleCrashes = 250,
			AICanDrivePlayerAsRearPassenger = 251,
			PlayerCanJackFriendlyPlayers = 252,
			OnStairs = 253,
			AIDriverAllowFriendlyPassengerSeatEntry = 255,
			AllowMissionPedToUseInjuredMovement = 257,
			PreventUsingLowerPrioritySeats = 261,
			TeleportToLeaderVehicle = 268,
			Avoidance_Ignore_WeirdPedBuffer = 269,
			OnStairSlope = 270,
			DontBlipCop = 272,
			ClimbedShiftedFence = 273,
			KillWhenTrapped = 275,
			EdgeDetected = 276,
			AvoidTearGas = 279,
			DisableGoToWritheWhenInjured = 281,
			OnlyUseForcedSeatWhenEnteringHeliInGroup = 282,
			DisableWeirdPedEvents = 285,
			ShouldChargeNow = 286,
			RagdollingOnBoat = 287,
			HasBrandishedWeapon = 288,
			FreezePosition = 292, // 0x7403D216
			DisableShockingEvents = 294,
			NeverReactToPedOnRoof = 296,
			DisableShockingDrivingOnPavementEvents = 299,
			DisablePedConstraints = 301,
			ForceInitialPeekInCover = 302,
			DisableJumpingFromVehiclesAfterLeader = 305,
			IsInCluster = 310,
			ShoutToGroupOnPlayerMelee = 311,
			IgnoredByAutoOpenDoors = 312,
			ForceIgnoreMeleeActiveCombatant = 314,
			CheckLoSForSoundEvents = 315,
			CanSayFollowedByPlayerAudio = 317,
			ActivateRagdollFromMinorPlayerContact = 318,
			ForcePoseCharacterCloth = 320,
			HasClothCollisionBounds = 321,
			HasHighHeels = 322,
			DontBehaveLikeLaw = 324,
			DisablePoliceInvestigatingBody = 326,
			DisableWritheShootFromGround = 327,
			LowerPriorityOfWarpSeats = 328,
			DisableTalkTo = 329,
			DontBlip = 330,
			IsSwitchingWeapon = 331,
			IgnoreLegIkRestrictions = 332,
			AllowTaskDoNothingTimeslicing = 339,
			NotAllowedToJackAnyPlayers = 342,
			AlwaysLeaveTrainUponArrival = 345,
			OnlyWritheFromWeaponDamage = 347,
			UseSloMoBloodVfx = 348,
			EquipJetpack = 349,
			PreventDraggedOutOfCarThreatResponse = 350,
			ForceDeepSurfaceCheck = 356,
			DisableDeepSurfaceAnims = 357,
			DontBlipNotSynced = 358,
			IsDuckingInVehicle = 359,
			PreventAutoShuffleToTurretSeat = 360,
			DisableEventInteriorStatusCheck = 361,
			HasReserveParachute = 362,
			UseReserveParachute = 363,
			TreatDislikeAsHateWhenInCombat = 364,
			OnlyUpdateTargetWantedIfSeen = 365,
			AllowAutoShuffleToDriversSeat = 366,
			PreventReactingToSilencedCloneBullets = 372,
			DisableInjuredCryForHelpEvents = 373,
			NeverLeaveTrain = 374,
			DontDropJetpackOnDeath = 375,
			DisableAutoEquipHelmetsInBikes = 380,
			IsClimbingLadder = 388,
			HasBareFeet = 389,
			UNUSED_REPLACE_ME_2 = 390,
			GoOnWithoutVehicleIfItIsUnableToGetBackToRoad = 391,
			BlockDroppingHealthSnacksOnDeath = 392,
			ForceThreatResponseToNonFriendToFriendMeleeActions = 394,
			DontRespondToRandomPedsDamage = 395,
			AllowContinuousThreatResponseWantedLevelUpdates = 396,
			KeepTargetLossResponseOnCleanup = 397,
			PlayersDontDragMeOutOfCar = 398,
			BroadcastRepondedToThreatWhenGoingToPointShooting = 399,
			IgnorePedTypeForIsFriendlyWith = 400,
			TreatNonFriendlyAsHateWhenInCombat = 401,
			DontLeaveVehicleIfLeaderNotInVehicle = 402,
			AllowMeleeReactionIfMeleeProofIsOn = 404,
			UseNormalExplosionDamageWhenBlownUpInVehicle = 407,
			DisableHomingMissileLockForVehiclePedInside = 408,
			DisableTakeOffScubaGear = 409,
			IgnoreMeleeFistWeaponDamageMult = 410,
			LawPedsCanFleeFromNonWantedPlayer = 411,
			ForceBlipSecurityPedsIfPlayerIsWanted = 412,
			IsHolsteringWeapon = 413,
			UseGoToPointForScenarioNavigation = 414,
			DontClearLocalPassengersWantedLevel = 415,
			BlockAutoSwapOnWeaponPickups = 416,
			ThisPedIsATargetPriorityForAI = 417,
			IsSwitchingHelmetVisor = 418,
			ForceHelmetVisorSwitch = 419,
			UseOverrideFootstepPtFx = 421,
			DisableVehicleCombat = 422,
			FallsLikeAircraft = 424,
			UseLockpickVehicleEntryAnimations = 426,
			IgnoreInteriorCheckForSprinting = 427,
			SwatHeliSpawnWithinLastSpottedLocation = 428,
			DisableStartEngine = 429,
			IgnoreBeingOnFire = 430,
			DisableTurretOrRearSeatPreference = 431,
			DisableWantedHelicopterSpawning = 432,
			UseTargetPerceptionForCreatingAimedAtEvents = 433,
			DisableHomingMissileLockon = 434,
			ForceIgnoreMaxMeleeActiveSupportCombatants = 435,
			StayInDefensiveAreaWhenInVehicle = 436,
			DontShoutTargetPosition = 437,
			DisableHelmetArmor = 438,
			PreventVehExitDueToInvalidWeapon = 441,
			IgnoreNetSessionFriendlyFireCheckForAllowDamage = 442,
			DontLeaveCombatIfTargetPlayerIsAttackedByPolice = 443,
			CheckLockedBeforeWarp = 444,
			DontShuffleInVehicleToMakeRoom = 445,
			GiveWeaponOnGetup = 446,
			DontHitVehicleWithProjectiles = 447,
			DisableForcedEntryForOpenVehiclesFromTryLockedDoor = 448,
			FiresDummyRockets = 449,
			PedIsArresting = 450,
			IsDecoyPed = 451,
			HasEstablishedDecoy = 452,
			BlockDispatchedHelicoptersFromLanding = 453,
			DontCryForHelpOnStun = 454,
			CanBeIncapacitated = 456,
			DontChangeTargetFromMelee = 458,
		}
		public static void SET_PED_CONFIG_FLAG(Ped ped, PedConfigFlags flagId, bool value) { Invoke(0x1913FE4CBF41C463, V(ped), V((int)flagId), V(value)); }
		// PED::SET_PED_RESET_FLAG(PLAYER::PLAYER_PED_ID(), 240, 1);
		// Known values:
		// PRF_PreventGoingIntoStillInVehicleState = 236 *(fanatic2.c)*
		public static void SET_PED_RESET_FLAG(Ped ped, PedConfigFlags flagId, bool doReset) { Invoke(0xC1E8A365BF3B29F2, V(ped), V((int)flagId), V(doReset)); }
		// See SET_PED_CONFIG_FLAG
		public static bool GET_PED_CONFIG_FLAG(Ped ped, PedConfigFlags flagId, bool p2) { return Invoke<bool>(0x7EE53118C892B513, V(ped), V((int)flagId), V(p2)); }
		public static bool GET_PED_RESET_FLAG(Ped ped, PedConfigFlags flagId) { return Invoke<bool>(0xAF9E59B1B1FBF2A0, V(ped), V((int)flagId)); }
		public static void SET_PED_GROUP_MEMBER_PASSENGER_INDEX(Ped ped, int index) { Invoke(0x0BDDB8D9EC6BCF3C, V(ped), V(index)); }
		public static void SET_PED_CAN_EVASIVE_DIVE(Ped ped, bool toggle) { Invoke(0x6B7A646C242A7059, V(ped), V(toggle)); }
		// Presumably returns the Entity that the Ped is currently diving out of the way of.
		// 
		// var num3;
		//     if (PED::IS_PED_EVASIVE_DIVING(A_0, &num3) != 0)
		//         if (ENTITY::IS_ENTITY_A_VEHICLE(num3) != 0)
		public static bool IS_PED_EVASIVE_DIVING(Ped ped, Entity* evadingEntity) { return Invoke<bool>(0x414641C26E105898, V(ped), V(evadingEntity)); }
		public static void SET_PED_SHOOTS_AT_COORD(Ped ped, float x, float y, float z, bool toggle) { Invoke(0x96A05E4FB321B1BA, V(ped), V(x), V(y), V(z), V(toggle)); }
		// Full list of peds by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/peds.json
		public static void SET_PED_MODEL_IS_SUPPRESSED(Hash modelHash, bool toggle) { Invoke(0xE163A4BCE4DE6F11, V(modelHash), V(toggle)); }
		public static void STOP_ANY_PED_MODEL_BEING_SUPPRESSED() { Invoke(0xB47BD05FA66B40CF); }
		public static void SET_PED_CAN_BE_TARGETED_WHEN_INJURED(Ped ped, bool toggle) { Invoke(0x638C03B0F9878F57, V(ped), V(toggle)); }
		public static void SET_PED_GENERATES_DEAD_BODY_EVENTS(Ped ped, bool toggle) { Invoke(0x7FB17BA2E7DECA5B, V(ped), V(toggle)); }
		public static void BLOCK_PED_FROM_GENERATING_DEAD_BODY_EVENTS_WHEN_DEAD(Ped ped, bool toggle) { Invoke(0xE43A13C9E4CCCBCF, V(ped), V(toggle)); }
		public static void SET_PED_WILL_ONLY_ATTACK_WANTED_PLAYER(Any p0, Any p1) { Invoke(0x3E9679C1DFCF422C, V(p0), V(p1)); }
		public static void SET_PED_CAN_RAGDOLL_FROM_PLAYER_IMPACT(Ped ped, bool toggle) { Invoke(0xDF993EE5E90ABA25, V(ped), V(toggle)); }
		// PoliceMotorcycleHelmet   1024    
		// RegularMotorcycleHelmet   4096    
		// FiremanHelmet 16384   
		// PilotHeadset  32768   
		// PilotHelmet   65536
		// --
		// p2 is generally 4096 or 16384 in the scripts. p1 varies between 1 and 0.
		public static void GIVE_PED_HELMET(Ped ped, bool cannotRemove, int helmetFlag, int textureIndex) { Invoke(0x54C7C4A94367717E, V(ped), V(cannotRemove), V(helmetFlag), V(textureIndex)); }
		public static void REMOVE_PED_HELMET(Ped ped, bool instantly) { Invoke(0xA7B2458D0AD6DED8, V(ped), V(instantly)); }
		public static bool IS_PED_TAKING_OFF_HELMET(Ped ped) { return Invoke<bool>(0x14590DDBEDB1EC85, V(ped)); }
		public static void SET_PED_HELMET(Ped ped, bool canWearHelmet) { Invoke(0x560A43136EB58105, V(ped), V(canWearHelmet)); }
		public static void SET_PED_HELMET_FLAG(Ped ped, int helmetFlag) { Invoke(0xC0E78D5C2CE3EB25, V(ped), V(helmetFlag)); }
		// List of component/props ID
		// gtaxscripting.blogspot.com/2016/04/gta-v-peds-component-and-props.html
		public static void SET_PED_HELMET_PROP_INDEX(Ped ped, int propIndex, bool p2) { Invoke(0x26D83693ED99291C, V(ped), V(propIndex), V(p2)); }
		public static void SET_PED_HELMET_VISOR_PROP_INDICES(Ped ped, bool p1, int p2, int p3) { Invoke(0x3F7325574E41B44D, V(ped), V(p1), V(p2), V(p3)); }
		public static bool IS_PED_HELMET_VISOR_UP(Ped ped) { return Invoke<bool>(0xB9496CE47546DB2C, V(ped)); }
		public static void SET_PED_HELMET_TEXTURE_INDEX(Ped ped, int textureIndex) { Invoke(0xF1550C4BD22582E2, V(ped), V(textureIndex)); }
		// Returns true if the ped passed through the parenthesis is wearing a helmet.
		public static bool IS_PED_WEARING_HELMET(Ped ped) { return Invoke<bool>(0xF33BDFE19B309B19, V(ped)); }
		public static void CLEAR_PED_STORED_HAT_PROP(Ped ped) { Invoke(0x687C0B594907D2E8, V(ped)); }
		public static int GET_PED_HELMET_STORED_HAT_PROP_INDEX(Ped ped) { return Invoke<int>(0x451294E859ECC018, V(ped)); }
		public static int GET_PED_HELMET_STORED_HAT_TEX_INDEX(Ped ped) { return Invoke<int>(0x9D728C1E12BF5518, V(ped)); }
		public static bool IS_CURRENT_HEAD_PROP_A_HELMET(Any p0) { return Invoke<bool>(0xF2385935BFFD4D92, V(p0)); }
		public static void SET_PED_TO_LOAD_COVER(Ped ped, bool toggle) { Invoke(0x332B562EEDA62399, V(ped), V(toggle)); }
		// It simply makes the said ped to cower behind cover obj(wall, desk, car)
		// 
		// Peds flee attributes must be set to not to flee, first. Else, most of the peds, will just flee from gunshot sounds or any other panic situations.
		public static void SET_PED_CAN_COWER_IN_COVER(Ped ped, bool toggle) { Invoke(0xCB7553CDCEF4A735, V(ped), V(toggle)); }
		public static void SET_PED_CAN_PEEK_IN_COVER(Ped ped, bool toggle) { Invoke(0xC514825C507E3736, V(ped), V(toggle)); }
		// This native does absolutely nothing, just a nullsub
		public static void SET_PED_PLAYS_HEAD_ON_HORN_ANIM_WHEN_DIES_IN_VEHICLE(Ped ped, bool toggle) { Invoke(0x94D94BF1A75AED3D, V(ped), V(toggle)); }
		// "IK" stands for "Inverse kinematics." I assume this has something to do with how the ped uses his legs to balance. In the scripts, the second parameter is always an int with a value of 2, 0, or sometimes 1
		public static void SET_PED_LEG_IK_MODE(Ped ped, int mode) { Invoke(0xC396F5B86FF9FEBD, V(ped), V(mode)); }
		public static void SET_PED_MOTION_BLUR(Ped ped, bool toggle) { Invoke(0x0A986918B102B448, V(ped), V(toggle)); }
		public static void SET_PED_CAN_SWITCH_WEAPON(Ped ped, bool toggle) { Invoke(0xED7F7EFE9FABF340, V(ped), V(toggle)); }
		public static void SET_PED_DIES_INSTANTLY_IN_WATER(Ped ped, bool toggle) { Invoke(0xEEB64139BA29A7CF, V(ped), V(toggle)); }
		// Only appears in lamar1 script.
		public static void SET_LADDER_CLIMB_INPUT_STATE(Ped ped, int p1) { Invoke(0x1A330D297AAC6BC1, V(ped), V(p1)); }
		public static bool IS_PED_IN_SPHERE_AREA_OF_ANY_ENEMY_PEDS(Ped ped, float x, float y, float z, float range) { return Invoke<bool>(0x082D79E15302F0C2, V(ped), V(x), V(y), V(z), V(range)); }
		public static void STOP_PED_WEAPON_FIRING_WHEN_DROPPED(Ped ped) { Invoke(0xC158D28142A34608, V(ped)); }
		public static void SET_SCRIPTED_ANIM_SEAT_OFFSET(Ped ped, float p1) { Invoke(0x5917BBA32D06C230, V(ped), V(p1)); }
		// enum eCombatMovement // 0x4F456B61
		// {
		// 	CM_Stationary,
		// 	CM_Defensive,
		// 	CM_WillAdvance,
		// 	CM_WillRetreat
		// };
		public static void SET_PED_COMBAT_MOVEMENT(Ped ped, int combatMovement) { Invoke(0x4D9CA1009AFBD057, V(ped), V(combatMovement)); }
		// See SET_PED_COMBAT_MOVEMENT
		public static int GET_PED_COMBAT_MOVEMENT(Ped ped) { return Invoke<int>(0xDEA92412FCAEB3F5, V(ped)); }
		// enum eCombatAbility // 0xE793438C
		// {
		// 	CA_Poor,
		// 	CA_Average,
		// 	CA_Professional,
		// 	CA_NumTypes
		// };
		public static void SET_PED_COMBAT_ABILITY(Ped ped, int abilityLevel) { Invoke(0xC7622C0D36B2FDA8, V(ped), V(abilityLevel)); }
		// enum eCombatRange // 0xB69160F5
		// {
		// 	CR_Near,
		// 	CR_Medium,
		// 	CR_Far,
		// 	CR_VeryFar,
		// 	CR_NumRanges
		// };
		public static void SET_PED_COMBAT_RANGE(Ped ped, int combatRange) { Invoke(0x3C606747B23E497B, V(ped), V(combatRange)); }
		// See SET_PED_COMBAT_RANGE
		public static int GET_PED_COMBAT_RANGE(Ped ped) { return Invoke<int>(0xF9D9F7F2DB8E2FA0, V(ped)); }
		// enum eCombatAttributes // 0x0E8E7201
		// {
		// 	BF_CanUseCover = 0,
		// 	BF_CanUseVehicles = 1,
		// 	BF_CanDoDrivebys = 2,
		// 	BF_CanLeaveVehicle = 3,
		// 	BF_CanUseDynamicStrafeDecisions = 4,
		// 	BF_AlwaysFight = 5,
		// 	BF_0x66BB9FCC = 6,
		// 	BF_0x6837DA41 = 7,
		// 	BF_0xB4A13A5A = 8,
		// 	BF_0xEE326AAD = 9,
		// 	BF_0x7DF2CCFA = 10,
		// 	BF_0x0036D422 = 11,
		// 	BF_BlindFireWhenInCover = 12,
		// 	BF_Aggressive = 13,
		// 	BF_CanInvestigate = 14,
		// 	BF_HasRadio = 15,
		// 	BF_0x6BDE28D1 = 16,
		// 	BF_AlwaysFlee = 17,
		// 	BF_0x7852797D = 18,
		// 	BF_0x33497B95 = 19,
		// 	BF_CanTauntInVehicle = 20,
		// 	BF_CanChaseTargetOnFoot = 21,
		// 	BF_WillDragInjuredPedsToSafety = 22,
		// 	BF_0xCD7168B8 = 23,
		// 	BF_UseProximityFiringRate = 24,
		// 	BF_0x48F914F8 = 25,
		// 	BF_0x2EA543D0 = 26,
		// 	BF_PerfectAccuracy = 27,
		// 	BF_CanUseFrustratedAdvance = 28,
		// 	BF_0x3D131AC1 = 29,
		// 	BF_0x3AD95F27 = 30,
		// 	BF_MaintainMinDistanceToTarget = 31,
		// 	BF_0xEAD68AD2 = 32,
		// 	BF_0xA206C2E0 = 33,
		// 	BF_CanUsePeekingVariations = 34,
		// 	BF_0xA5715184 = 35,
		// 	BF_0xD5265533 = 36,
		// 	BF_0x2B84C2BF = 37,
		// 	BF_DisableBulletReactions = 38,
		// 	BF_CanBust = 39,
		// 	BF_0xAA525726 = 40,
		// 	BF_CanCommandeerVehicles = 41,
		// 	BF_CanFlank = 42,
		// 	BF_SwitchToAdvanceIfCantFindCover = 43,
		// 	BF_SwitchToDefensiveIfInCover = 44,
		// 	BF_0xEB4786A0 = 45,
		// 	BF_CanFightArmedPedsWhenNotArmed = 46,
		// 	BF_0xA08E9402 = 47,
		// 	BF_0x952EAD7D = 48,
		// 	BF_UseEnemyAccuracyScaling = 49,
		// 	BF_CanCharge = 50,
		// 	BF_0xDA8C2BD3 = 51,
		// 	BF_0x6562F017 = 52,
		// 	BF_0xA2C3D53B = 53,
		// 	BF_AlwaysEquipBestWeapon = 54,
		// 	BF_CanSeeUnderwaterPeds = 55,
		// 	BF_0xF619486B = 56,
		// 	BF_0x61EB63A3 = 57,
		// 	BF_DisableFleeFromCombat = 58,
		// 	BF_0x8976D12B = 59,
		// 	BF_CanThrowSmokeGrenade = 60,
		// 	BF_NonMissionPedsFleeFromThisPedUnlessArmed = 61,
		// 	BF_0x5452A10C = 62,
		// 	BF_FleesFromInvincibleOpponents = 63,
		// 	BF_DisableBlockFromPursueDuringVehicleChase = 64,
		// 	BF_DisableSpinOutDuringVehicleChase = 65,
		// 	BF_DisableCruiseInFrontDuringBlockDuringVehicleChase = 66,
		// 	BF_0x0B404731 = 67,
		// 	BF_DisableReactToBuddyShot = 68,
		// 	BF_0x7FFD6AEB = 69,
		// 	BF_0x51F4AEF8 = 70,
		// 	BF_PermitChargeBeyondDefensiveArea = 71,
		// 	BF_0x63E0A8E2 = 72,
		// 	BF_0xDF974436 = 73,
		// 	BF_0x556C080B = 74,
		// 	BF_0xA4D50035 = 75,
		// 	BF_SetDisableShoutTargetPositionOnCombatStart = 76,
		// 	BF_DisableRespondedToThreatBroadcast = 77,
		// 	BF_0xCBB01765 = 78,
		// 	BF_0x4F862ED4 = 79,
		// 	BF_0xEF9C7C40 = 80,
		// 	BF_0xE51B494F = 81,
		// 	BF_0x054D0199 = 82,
		// 	BF_0xD36BCE94 = 83,
		// 	BF_0xFB11F690 = 84,
		// 	BF_0xD208A9AD = 85,
		// 	BF_AllowDogFighting = 86,
		// 	BF_0x07A6E531 = 87,
		// 	BF_0x34F9317B = 88,
		// 	BF_0x4240F5A9 = 89,
		// 	BF_0xEE129DBD = 90,
		// 	BF_0x053AEAD9 = 91
		// };
		public static void SET_PED_COMBAT_ATTRIBUTES(Ped ped, int attributeId, bool enabled) { Invoke(0x9F7794730795E019, V(ped), V(attributeId), V(enabled)); }
		// enum eTargetLossResponseType
		// {
		// 	TLR_ExitTask,
		// 	TLR_NeverLoseTarget,
		// 	TLR_SearchForTarget
		// };
		public static void SET_PED_TARGET_LOSS_RESPONSE(Ped ped, int responseType) { Invoke(0x0703B9079823DA4A, V(ped), V(responseType)); }
		public static bool IS_PED_PERFORMING_MELEE_ACTION(Ped ped) { return Invoke<bool>(0xDCCA191DF9980FD7, V(ped)); }
		public static bool IS_PED_PERFORMING_STEALTH_KILL(Ped ped) { return Invoke<bool>(0xFD4CCDBCC59941B7, V(ped)); }
		public static bool IS_PED_PERFORMING_A_COUNTER_ATTACK(Ped ped) { return Invoke<bool>(0xEBD0EDBA5BE957CF, V(ped)); }
		public static bool IS_PED_BEING_STEALTH_KILLED(Ped ped) { return Invoke<bool>(0x863B23EFDE9C5DF2, V(ped)); }
		public static Ped GET_MELEE_TARGET_FOR_PED(Ped ped) { return Invoke<Ped>(0x18A3E9EE1297FD39, V(ped)); }
		public static bool WAS_PED_KILLED_BY_STEALTH(Ped ped) { return Invoke<bool>(0xF9800AA1A771B000, V(ped)); }
		public static bool WAS_PED_KILLED_BY_TAKEDOWN(Ped ped) { return Invoke<bool>(0x7F08E26039C7347C, V(ped)); }
		public static bool WAS_PED_KNOCKED_OUT(Ped ped) { return Invoke<bool>(0x61767F73EACEED21, V(ped)); }
		// bit 1 (0x2) = use vehicle
		// bit 15 (0x8000) = force cower
		public static void SET_PED_FLEE_ATTRIBUTES(Ped ped, int attributeFlags, bool enable) { Invoke(0x70A2D1137C8ED7C9, V(ped), V(attributeFlags), V(enable)); }
		// p1: Only "CODE_HUMAN_STAND_COWER" found in the b617d scripts.
		public static void SET_PED_COWER_HASH(Ped ped, string p1) { Invoke(0xA549131166868ED3, V(ped), V(p1)); }
		public static void SET_PED_STEERS_AROUND_DEAD_BODIES(Ped ped, bool toggle) { Invoke(0x2016C603D6B8987C, V(ped), V(toggle)); }
		public static void SET_PED_STEERS_AROUND_PEDS(Ped ped, bool toggle) { Invoke(0x46F2193B3AD1D891, V(ped), V(toggle)); }
		public static void SET_PED_STEERS_AROUND_OBJECTS(Ped ped, bool toggle) { Invoke(0x1509C089ADC208BF, V(ped), V(toggle)); }
		public static void SET_PED_STEERS_AROUND_VEHICLES(Ped ped, bool toggle) { Invoke(0xEB6FB9D48DDE23EC, V(ped), V(toggle)); }
		public static void SET_PED_IS_AVOIDED_BY_OTHERS(Any p0, bool p1) { Invoke(0xA9B61A329BFDCBEA, V(p0), V(p1)); }
		public static void SET_PED_INCREASED_AVOIDANCE_RADIUS(Ped ped) { Invoke(0x570389D1C3DE3C6B, V(ped)); }
		public static void SET_PED_BLOCKS_PATHING_WHEN_DEAD(Ped ped, bool toggle) { Invoke(0x576594E8D64375E2, V(ped), V(toggle)); }
		public static void SET_PED_NO_TIME_DELAY_BEFORE_SHOT(Any p0) { Invoke(0xA52D5247A4227E14, V(p0)); }
		public static bool IS_ANY_PED_NEAR_POINT(float x, float y, float z, float radius) { return Invoke<bool>(0x083961498679DC9F, V(x), V(y), V(z), V(radius)); }
		public static void FORCE_PED_AI_AND_ANIMATION_UPDATE(Ped ped, bool p1, bool p2) { Invoke(0x2208438012482A1A, V(ped), V(p1), V(p2)); }
		public static bool IS_PED_HEADING_TOWARDS_POSITION(Ped ped, float x, float y, float z, float p4) { return Invoke<bool>(0xFCF37A457CB96DC0, V(ped), V(x), V(y), V(z), V(p4)); }
		public static void REQUEST_PED_VISIBILITY_TRACKING(Ped ped) { Invoke(0x7D7A2E43E74E2EB8, V(ped)); }
		public static void REQUEST_PED_VEHICLE_VISIBILITY_TRACKING(Ped ped, bool p1) { Invoke(0x2BC338A7B21F4608, V(ped), V(p1)); }
		public static void REQUEST_PED_RESTRICTED_VEHICLE_VISIBILITY_TRACKING(Ped ped, bool p1) { Invoke(0xCD018C591F94CB43, V(ped), V(p1)); }
		public static void REQUEST_PED_USE_SMALL_BBOX_VISIBILITY_TRACKING(Ped ped, bool p1) { Invoke(0x75BA1CB3B7D40CAF, V(ped), V(p1)); }
		// returns whether or not a ped is visible within your FOV, not this check auto's to false after a certain distance.
		// 
		// 
		// Target needs to be tracked.. won't work otherwise.
		public static bool IS_TRACKED_PED_VISIBLE(Ped ped) { return Invoke<bool>(0x91C8E617F64188AC, V(ped)); }
		public static int GET_TRACKED_PED_PIXELCOUNT(Ped ped) { return Invoke<int>(0x511F1A683387C7E2, V(ped)); }
		public static bool IS_PED_TRACKED(Ped ped) { return Invoke<bool>(0x4C5E1F087CD10BB7, V(ped)); }
		public static bool HAS_PED_RECEIVED_EVENT(Ped ped, int eventId) { return Invoke<bool>(0x8507BCB710FA6DC0, V(ped), V(eventId)); }
		public static bool CAN_PED_SEE_HATED_PED(Ped ped1, Ped ped2) { return Invoke<bool>(0x6CD5A433374D4CFB, V(ped1), V(ped2)); }
		public static bool CAN_PED_SHUFFLE_TO_OR_FROM_TURRET_SEAT(Ped ped, int* p1) { return Invoke<bool>(0x9C6A6C19B6C0C496, V(ped), V(p1)); }
		public static bool CAN_PED_SHUFFLE_TO_OR_FROM_EXTRA_SEAT(Ped ped, int* p1) { return Invoke<bool>(0x2DFC81C9B9608549, V(ped), V(p1)); }
		// no bone= -1
		// 
		// boneIds:
		//         SKEL_ROOT = 0x0,
		//    SKEL_Pelvis = 0x2e28,
		//  SKEL_L_Thigh = 0xe39f,
		//     SKEL_L_Calf = 0xf9bb,
		//  SKEL_L_Foot = 0x3779,
		//  SKEL_L_Toe0 = 0x83c,
		//   IK_L_Foot = 0xfedd,
		//    PH_L_Foot = 0xe175,
		//    MH_L_Knee = 0xb3fe,
		//    SKEL_R_Thigh = 0xca72,
		//     SKEL_R_Calf = 0x9000,
		//  SKEL_R_Foot = 0xcc4d,
		//  SKEL_R_Toe0 = 0x512d,
		//  IK_R_Foot = 0x8aae,
		//    PH_R_Foot = 0x60e6,
		//    MH_R_Knee = 0x3fcf,
		//    RB_L_ThighRoll = 0x5c57,
		//   RB_R_ThighRoll = 0x192a,
		//   SKEL_Spine_Root = 0xe0fd,
		//  SKEL_Spine0 = 0x5c01,
		//  SKEL_Spine1 = 0x60f0,
		//  SKEL_Spine2 = 0x60f1,
		//  SKEL_Spine3 = 0x60f2,
		//  SKEL_L_Clavicle = 0xfcd9,
		//  SKEL_L_UpperArm = 0xb1c5,
		//  SKEL_L_Forearm = 0xeeeb,
		//   SKEL_L_Hand = 0x49d9,
		//  SKEL_L_Finger00 = 0x67f2,
		//  SKEL_L_Finger01 = 0xff9,
		//   SKEL_L_Finger02 = 0xffa,
		//   SKEL_L_Finger10 = 0x67f3,
		//  SKEL_L_Finger11 = 0x1049,
		//  SKEL_L_Finger12 = 0x104a,
		//  SKEL_L_Finger20 = 0x67f4,
		//  SKEL_L_Finger21 = 0x1059,
		//  SKEL_L_Finger22 = 0x105a,
		//  SKEL_L_Finger30 = 0x67f5,
		//  SKEL_L_Finger31 = 0x1029,
		//  SKEL_L_Finger32 = 0x102a,
		//  SKEL_L_Finger40 = 0x67f6,
		//  SKEL_L_Finger41 = 0x1039,
		//  SKEL_L_Finger42 = 0x103a,
		//  PH_L_Hand = 0xeb95,
		//    IK_L_Hand = 0x8cbd,
		//    RB_L_ForeArmRoll = 0xee4f,
		//     RB_L_ArmRoll = 0x1470,
		//     MH_L_Elbow = 0x58b7,
		//   SKEL_R_Clavicle = 0x29d2,
		//  SKEL_R_UpperArm = 0x9d4d,
		//  SKEL_R_Forearm = 0x6e5c,
		//   SKEL_R_Hand = 0xdead,
		//  SKEL_R_Finger00 = 0xe5f2,
		//  SKEL_R_Finger01 = 0xfa10,
		//  SKEL_R_Finger02 = 0xfa11,
		//  SKEL_R_Finger10 = 0xe5f3,
		//  SKEL_R_Finger11 = 0xfa60,
		//  SKEL_R_Finger12 = 0xfa61,
		//  SKEL_R_Finger20 = 0xe5f4,
		//  SKEL_R_Finger21 = 0xfa70,
		//  SKEL_R_Finger22 = 0xfa71,
		//  SKEL_R_Finger30 = 0xe5f5,
		//  SKEL_R_Finger31 = 0xfa40,
		//  SKEL_R_Finger32 = 0xfa41,
		//  SKEL_R_Finger40 = 0xe5f6,
		//  SKEL_R_Finger41 = 0xfa50,
		//  SKEL_R_Finger42 = 0xfa51,
		//  PH_R_Hand = 0x6f06,
		//    IK_R_Hand = 0x188e,
		//    RB_R_ForeArmRoll = 0xab22,
		//     RB_R_ArmRoll = 0x90ff,
		//     MH_R_Elbow = 0xbb0,
		//    SKEL_Neck_1 = 0x9995,
		//  SKEL_Head = 0x796e,
		//    IK_Head = 0x322c,
		//  FACIAL_facialRoot = 0xfe2c,
		//    FB_L_Brow_Out_000 = 0xe3db,
		//    FB_L_Lid_Upper_000 = 0xb2b6,
		//   FB_L_Eye_000 = 0x62ac,
		//     FB_L_CheekBone_000 = 0x542e,
		//   FB_L_Lip_Corner_000 = 0x74ac,
		//  FB_R_Lid_Upper_000 = 0xaa10,
		//   FB_R_Eye_000 = 0x6b52,
		//     FB_R_CheekBone_000 = 0x4b88,
		//   FB_R_Brow_Out_000 = 0x54c,
		//     FB_R_Lip_Corner_000 = 0x2ba6,
		//  FB_Brow_Centre_000 = 0x9149,
		//   FB_UpperLipRoot_000 = 0x4ed2,
		//  FB_UpperLip_000 = 0xf18f,
		//  FB_L_Lip_Top_000 = 0x4f37,
		//     FB_R_Lip_Top_000 = 0x4537,
		//     FB_Jaw_000 = 0xb4a0,
		//   FB_LowerLipRoot_000 = 0x4324,
		//  FB_LowerLip_000 = 0x508f,
		//  FB_L_Lip_Bot_000 = 0xb93b,
		//     FB_R_Lip_Bot_000 = 0xc33b,
		//     FB_Tongue_000 = 0xb987,
		//    RB_Neck_1 = 0x8b93,
		//    IK_Root = 0xdd1c
		public static int GET_PED_BONE_INDEX(Ped ped, int boneId) { return Invoke<int>(0x3F428D08BE5AAE31, V(ped), V(boneId)); }
		public static int GET_PED_RAGDOLL_BONE_INDEX(Ped ped, int bone) { return Invoke<int>(0x2057EF813397A772, V(ped), V(bone)); }
		// Values look to be between 0.0 and 1.0
		// From decompiled scripts: 0.0, 0.6, 0.65, 0.8, 1.0
		// 
		// You are correct, just looked in IDA it breaks from the function if it's less than 0.0f or greater than 1.0f.
		public static void SET_PED_ENVEFF_SCALE(Ped ped, float value) { Invoke(0xBF29516833893561, V(ped), V(value)); }
		public static float GET_PED_ENVEFF_SCALE(Ped ped) { return Invoke<float>(0x9C14D30395A51A3C, V(ped)); }
		public static void SET_ENABLE_PED_ENVEFF_SCALE(Ped ped, bool toggle) { Invoke(0xD2C5AA0C0E8D0F1E, V(ped), V(toggle)); }
		// In agency_heist3b.c4, its like this 90% of the time:
		// 
		// PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.099);
		// PED::SET_PED_ENVEFF_SCALE(ped, 1.0);
		// PED::SET_PED_ENVEFF_CPV_ADD(ped, 87, 81, 68);
		// PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
		// 
		// and its like this 10% of the time:
		// 
		// PED::SET_PED_ENVEFF_CPV_ADD(ped, 0.2);
		// PED::SET_PED_ENVEFF_SCALE(ped, 0.65);
		// PED::SET_PED_ENVEFF_COLOR_MODULATOR(ped, 74, 69, 60);
		// PED::SET_ENABLE_PED_ENVEFF_SCALE(ped, 1);
		public static void SET_PED_ENVEFF_CPV_ADD(Ped ped, float p1) { Invoke(0x110F526AB784111F, V(ped), V(p1)); }
		// Something related to the environmental effects natives.
		// In the "agency_heist3b" script, p1 - p3 are always under 100 - usually they are {87, 81, 68}. If SET_PED_ENVEFF_SCALE is set to 0.65 (instead of the usual 1.0), they use {74, 69, 60}
		public static void SET_PED_ENVEFF_COLOR_MODULATOR(Ped ped, int p1, int p2, int p3) { Invoke(0xD69411AA0CEBF9E9, V(ped), V(p1), V(p2), V(p3)); }
		// intensity: 0.0f - 1.0f
		// 
		// This native sets the emissive intensity for the given ped. It is used for different 'glow' levels on illuminated clothing.
		public static void SET_PED_EMISSIVE_SCALE(Ped ped, float intensity) { Invoke(0x4E90D746056E273D, V(ped), V(intensity)); }
		// Use 0x4E90D746056E273D to set the illuminated clothing glow intensity for a specific ped.
		// Returns a float between 0.0 and 1.0 representing the current illuminated clothing glow intensity.
		public static float GET_PED_EMISSIVE_SCALE(Ped ped) { return Invoke<float>(0x1461B28A06717D68, V(ped)); }
		public static bool IS_PED_SHADER_READY(Ped ped) { return Invoke<bool>(0x81AA517FBBA05D39, V(ped)); }
		public static void SET_PED_ENABLE_CREW_EMBLEM(Ped ped, bool toggle) { Invoke(0xE906EC930F5FE7C8, V(ped), V(toggle)); }
		// This native does absolutely nothing, just a nullsub
		public static void REQUEST_RAGDOLL_BOUNDS_UPDATE(Any p0, Any p1) { Invoke(0x1216E0BFA72CC703, V(p0), V(p1)); }
		// Enable/disable ped shadow (ambient occlusion). https://gfycat.com/thankfulesteemedgecko
		public static void SET_PED_AO_BLOB_RENDERING(Ped ped, bool toggle) { Invoke(0x2B5AA717A181FB4C, V(ped), V(toggle)); }
		public static bool IS_PED_SHELTERED(Ped ped) { return Invoke<bool>(0xB8B52E498014F5B0, V(ped)); }
		// p6 always 2 (but it doesnt seem to matter...)
		// 
		// roll and pitch 0
		// yaw to Ped.rotation
		public static int CREATE_SYNCHRONIZED_SCENE(float x, float y, float z, float roll, float pitch, float yaw, int p6) { return Invoke<int>(0x8C18E0F9080ADD73, V(x), V(y), V(z), V(roll), V(pitch), V(yaw), V(p6)); }
		public static int CREATE_SYNCHRONIZED_SCENE_AT_MAP_OBJECT(float x, float y, float z, float radius, Hash obj) { return Invoke<int>(0x62EC273D00187DCA, V(x), V(y), V(z), V(radius), V(obj)); }
		// Returns true if a synchronized scene is running
		public static bool IS_SYNCHRONIZED_SCENE_RUNNING(int sceneId) { return Invoke<bool>(0x25D39B935A038A26, V(sceneId)); }
		public static void SET_SYNCHRONIZED_SCENE_ORIGIN(int sceneID, float x, float y, float z, float roll, float pitch, float yaw, bool p7) { Invoke(0x6ACF6B7225801CD7, V(sceneID), V(x), V(y), V(z), V(roll), V(pitch), V(yaw), V(p7)); }
		public static void SET_SYNCHRONIZED_SCENE_PHASE(int sceneID, float phase) { Invoke(0x734292F4F0ABF6D0, V(sceneID), V(phase)); }
		public static float GET_SYNCHRONIZED_SCENE_PHASE(int sceneID) { return Invoke<float>(0xE4A310B1D7FA73CC, V(sceneID)); }
		public static void SET_SYNCHRONIZED_SCENE_RATE(int sceneID, float rate) { Invoke(0xB6C49F8A5E295A5D, V(sceneID), V(rate)); }
		public static float GET_SYNCHRONIZED_SCENE_RATE(int sceneID) { return Invoke<float>(0xD80932D577274D40, V(sceneID)); }
		public static void SET_SYNCHRONIZED_SCENE_LOOPED(int sceneID, bool toggle) { Invoke(0xD9A897A4C6C2974F, V(sceneID), V(toggle)); }
		public static bool IS_SYNCHRONIZED_SCENE_LOOPED(int sceneID) { return Invoke<bool>(0x62522002E0C391BA, V(sceneID)); }
		public static void SET_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(int sceneID, bool toggle) { Invoke(0x394B9CD12435C981, V(sceneID), V(toggle)); }
		public static bool IS_SYNCHRONIZED_SCENE_HOLD_LAST_FRAME(int sceneID) { return Invoke<bool>(0x7F2F4F13AC5257EF, V(sceneID)); }
		public static void ATTACH_SYNCHRONIZED_SCENE_TO_ENTITY(int sceneID, Entity entity, int boneIndex) { Invoke(0x272E4723B56A3B96, V(sceneID), V(entity), V(boneIndex)); }
		public static void DETACH_SYNCHRONIZED_SCENE(int sceneID) { Invoke(0x6D38F1F04CBB37EA, V(sceneID)); }
		public static void TAKE_OWNERSHIP_OF_SYNCHRONIZED_SCENE(int scene) { Invoke(0xCD9CC7E200A52A6F, V(scene)); }
		// Regarding p2, p3 and p4: Most common is 0, 0, 0); followed by 0, 1, 0); and 1, 1, 0); in R* scripts. p4 is very rarely something other than 0.
		// 
		// enum eMotionState // 0x92A659FE
		// {
		// 	MotionState_None = 0xEE717723,
		// 	MotionState_Idle = 0x9072A713,
		// 	MotionState_Walk = 0xD827C3DB,
		// 	MotionState_Run = 0xFFF7E7A4,
		// 	MotionState_Sprint = 0xBD8817DB,
		// 	MotionState_Crouch_Idle = 0x43FB099E,
		// 	MotionState_Crouch_Walk = 0x08C31A98,
		// 	MotionState_Crouch_Run = 0x3593CF09,
		// 	MotionState_DoNothing = 0x0EC17E58,
		// 	MotionState_AnimatedVelocity = 0x551AAC43,
		// 	MotionState_InVehicle = 0x94D9D58D,
		// 	MotionState_Aiming = 0x3F67C6AF,
		// 	MotionState_Diving_Idle = 0x4848CDED,
		// 	MotionState_Diving_Swim = 0x916E828C,
		// 	MotionState_Swimming_TreadWater = 0xD1BF11C7,
		// 	MotionState_Dead = 0x0DBB071C,
		// 	MotionState_Stealth_Idle = 0x422D7A25,
		// 	MotionState_Stealth_Walk = 0x042AB6A2,
		// 	MotionState_Stealth_Run = 0xFB0B79E1,
		// 	MotionState_Parachuting = 0xBAC0F10B,
		// 	MotionState_ActionMode_Idle = 0xDA40A0DC,
		// 	MotionState_ActionMode_Walk = 0xD2905EA7,
		// 	MotionState_ActionMode_Run = 0x31BADE14,
		// 	MotionState_Jetpack = 0x535E6A5E
		// };
		public static bool FORCE_PED_MOTION_STATE(Ped ped, Hash motionStateHash, bool p2, int p3, bool p4) { return Invoke<bool>(0xF28965D04F570DCA, V(ped), V(motionStateHash), V(p2), V(p3), V(p4)); }
		public static bool GET_PED_CURRENT_MOVE_BLEND_RATIO(Ped ped, float* speedX, float* speedY) { return Invoke<bool>(0xF60165E1D2C5370B, V(ped), V(speedX), V(speedY)); }
		public static void SET_PED_MAX_MOVE_BLEND_RATIO(Ped ped, float value) { Invoke(0x433083750C5E064A, V(ped), V(value)); }
		public static void SET_PED_MIN_MOVE_BLEND_RATIO(Ped ped, float value) { Invoke(0x01A898D26E2333DD, V(ped), V(value)); }
		// Min: 0.00
		// Max: 10.00
		// 
		// Can be used in combo with fast run cheat.
		// 
		// When value is set to 10.00:
		// Sprinting without fast run cheat: 66 m/s
		// Sprinting with fast run cheat: 77 m/s
		// 
		// Needs to be looped!
		// 
		// Note: According to IDA for the Xbox360 xex, when they check bgt they seem to have the min to 0.0f, but the max set to 1.15f not 10.0f.
		public static void SET_PED_MOVE_RATE_OVERRIDE(Ped ped, float value) { Invoke(0x085BF80FA50A39D1, V(ped), V(value)); }
		public static void SET_PED_MOVE_RATE_IN_WATER_OVERRIDE(Ped ped, float p1) { Invoke(0x0B3E35AC043707D9, V(ped), V(p1)); }
		// Checks if the specified sexiness flag is set
		// 
		// enum eSexinessFlags
		// {
		//  SF_JEER_AT_HOT_PED = 0,
		//  SF_HURRIEDFEMALES_SEXY = 1,
		//  SF_HOT_PERSON = 2,
		//  };
		public static bool PED_HAS_SEXINESS_FLAG_SET(Ped ped, int sexinessFlag) { return Invoke<bool>(0x46B05BCAE43856B0, V(ped), V(sexinessFlag)); }
		// Returns size of array, passed into the second variable.
		// 
		// See below for usage information.
		// 
		// This function actually requires a struct, where the first value is the maximum number of elements to return.  Here is a sample of how I was able to get it to work correctly, without yet knowing the struct format.
		// 
		// //Setup the array
		//  const int numElements = 10;
		//    const int arrSize = numElements * 2 + 2;
		//   Any veh[arrSize];
		//  //0 index is the size of the array
		//     veh[0] = numElements;
		// 
		//    int count = PED::GET_PED_NEARBY_VEHICLES(PLAYER::PLAYER_PED_ID(), veh);
		// 
		//  if (veh != NULL)
		//   {
		//      //Simple loop to go through results
		//        for (int i = 0; i < count; i++)
		//         {
		//          int offsettedID = i * 2 + 2;
		//           //Make sure it exists
		//          if (veh[offsettedID] != NULL && ENTITY::DOES_ENTITY_EXIST(veh[offsettedID]))
		//           {
		//              //Do something
		//             }
		//      }
		//  }  
		public static int GET_PED_NEARBY_VEHICLES(Ped ped, Any* sizeAndVehs) { return Invoke<int>(0xCFF869CBFA210D82, V(ped), V(sizeAndVehs)); }
		// sizeAndPeds - is a pointer to an array. The array is filled with peds found nearby the ped supplied to the first argument.
		// ignore - ped type to ignore
		// 
		// Return value is the number of peds found and added to the array passed.
		// 
		// -----------------------------------
		// 
		// To make this work in most menu bases at least in C++ do it like so,
		// 
		//  Formatted Example: https://pastebin.com/D8an9wwp
		// 
		// -----------------------------------
		// 
		// Example: gtaforums.com/topic/789788-function-args-to-pedget-ped-nearby-peds/?p=1067386687
		public static int GET_PED_NEARBY_PEDS(Ped ped, Any* sizeAndPeds, int ignore) { return Invoke<int>(0x23F8F5FC7E8C4A6B, V(ped), V(sizeAndPeds), V(ignore)); }
		public static bool HAVE_ALL_STREAMING_REQUESTS_COMPLETED(Ped ped) { return Invoke<bool>(0x7350823473013C02, V(ped)); }
		public static bool IS_PED_USING_ACTION_MODE(Ped ped) { return Invoke<bool>(0x00E73468D085F745, V(ped)); }
		// p2 is usually -1 in the scripts. action is either 0 or "DEFAULT_ACTION".
		public static void SET_PED_USING_ACTION_MODE(Ped ped, bool p1, int p2, string action) { Invoke(0xD75ACCF5E0FB5367, V(ped), V(p1), V(p2), V(action)); }
		// name: "MP_FEMALE_ACTION" found multiple times in the b617d scripts.
		public static void SET_MOVEMENT_MODE_OVERRIDE(Ped ped, string name) { Invoke(0x781DE8FA214E87D2, V(ped), V(name)); }
		// Overrides the ped's collision capsule radius for the current tick.
		// Must be called every tick to be effective.
		// 
		// Setting this to 0.001 will allow warping through some objects.
		public static void SET_PED_CAPSULE(Ped ped, float value) { Invoke(0x364DF566EC833DE2, V(ped), V(value)); }
		// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		public static int REGISTER_PEDHEADSHOT(Ped ped) { return Invoke<int>(0x4462658788425076, V(ped)); }
		public static int REGISTER_PEDHEADSHOT_HIRES(Ped ped) { return Invoke<int>(0xBA8805A1108A2515, V(ped)); }
		// Similar to REGISTER_PEDHEADSHOT but creates a transparent background instead of black. Example: https://i.imgur.com/iHz8ztn.png
		public static int REGISTER_PEDHEADSHOT_TRANSPARENT(Ped ped) { return Invoke<int>(0x953563CE563143AF, V(ped)); }
		// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		public static void UNREGISTER_PEDHEADSHOT(int id) { Invoke(0x96B1361D9B24C2FF, V(id)); }
		// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		public static bool IS_PEDHEADSHOT_VALID(int id) { return Invoke<bool>(0xA0A9668F158129A2, V(id)); }
		// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		public static bool IS_PEDHEADSHOT_READY(int id) { return Invoke<bool>(0x7085228842B13A67, V(id)); }
		// gtaforums.com/topic/885580-ped-headshotmugshot-txd/
		public static byte* GET_PEDHEADSHOT_TXD_STRING(int id) { return PInvoke<byte>(0xDB4EACD4AD0A5D6B, V(id)); }
		public static bool REQUEST_PEDHEADSHOT_IMG_UPLOAD(int id) { return Invoke<bool>(0xF0DAEF2F545BEE25, V(id)); }
		public static void RELEASE_PEDHEADSHOT_IMG_UPLOAD(int id) { Invoke(0x5D517B27CF6ECD04, V(id)); }
		public static bool IS_PEDHEADSHOT_IMG_UPLOAD_AVAILABLE() { return Invoke<bool>(0xEBB376779A760AA8); }
		public static bool HAS_PEDHEADSHOT_IMG_UPLOAD_FAILED() { return Invoke<bool>(0x876928DDDFCCC9CD); }
		public static bool HAS_PEDHEADSHOT_IMG_UPLOAD_SUCCEEDED() { return Invoke<bool>(0xE8A169E666CBC541); }
		public static void SET_PED_HEATSCALE_OVERRIDE(Ped ped, float heatScale) { Invoke(0xC1F6EBF9A3D55538, V(ped), V(heatScale)); }
		public static void DISABLE_PED_HEATSCALE_OVERRIDE(Ped ped) { Invoke(0x600048C60D5C2C51, V(ped)); }
		public static void SPAWNPOINTS_START_SEARCH(float p0, float p1, float p2, float p3, float p4, int interiorFlags, float scale, int duration) { Invoke(0x2DF9038C90AD5264, V(p0), V(p1), V(p2), V(p3), V(p4), V(interiorFlags), V(scale), V(duration)); }
		public static void SPAWNPOINTS_START_SEARCH_IN_ANGLED_AREA(float x1, float y1, float z1, float x2, float y2, float z2, float width, int interiorFlags, float scale, int duration) { Invoke(0xB2AFF10216DEFA2F, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(width), V(interiorFlags), V(scale), V(duration)); }
		public static void SPAWNPOINTS_CANCEL_SEARCH() { Invoke(0xFEE4A5459472A9F8); }
		public static bool SPAWNPOINTS_IS_SEARCH_ACTIVE() { return Invoke<bool>(0x3C67506996001F5E); }
		public static bool SPAWNPOINTS_IS_SEARCH_COMPLETE() { return Invoke<bool>(0xA586FBEB32A53DBB); }
		public static bool SPAWNPOINTS_IS_SEARCH_FAILED() { return Invoke<bool>(0xF445DE8DA80A1792); }
		public static int SPAWNPOINTS_GET_NUM_SEARCH_RESULTS() { return Invoke<int>(0xA635C11B8C44AFC2); }
		public static void SPAWNPOINTS_GET_SEARCH_RESULT(int randomInt, float* x, float* y, float* z) { Invoke(0x280C7E3AC7F56E90, V(randomInt), V(x), V(y), V(z)); }
		public static void SPAWNPOINTS_GET_SEARCH_RESULT_FLAGS(int p0, int* p1) { Invoke(0xB782F8238512BAD5, V(p0), V(p1)); }
		public static void SET_IK_TARGET(Ped ped, int ikIndex, Entity entityLookAt, int boneLookAt, float offsetX, float offsetY, float offsetZ, Any p7, int blendInDuration, int blendOutDuration) { Invoke(0xC32779C16FCEECD9, V(ped), V(ikIndex), V(entityLookAt), V(boneLookAt), V(offsetX), V(offsetY), V(offsetZ), V(p7), V(blendInDuration), V(blendOutDuration)); }
		public static void FORCE_INSTANT_LEG_IK_SETUP(Ped ped) { Invoke(0xED3C76ADFA6D07C4, V(ped)); }
		public static void REQUEST_ACTION_MODE_ASSET(string asset) { Invoke(0x290E2780BB7AA598, V(asset)); }
		public static bool HAS_ACTION_MODE_ASSET_LOADED(string asset) { return Invoke<bool>(0xE4B5F4BF2CB24E65, V(asset)); }
		public static void REMOVE_ACTION_MODE_ASSET(string asset) { Invoke(0x13E940F88470FA51, V(asset)); }
		public static void REQUEST_STEALTH_MODE_ASSET(string asset) { Invoke(0x2A0A62FCDEE16D4F, V(asset)); }
		public static bool HAS_STEALTH_MODE_ASSET_LOADED(string asset) { return Invoke<bool>(0xE977FC5B08AF3441, V(asset)); }
		public static void REMOVE_STEALTH_MODE_ASSET(string asset) { Invoke(0x9219857D21F0E842, V(asset)); }
		public static void SET_PED_LOD_MULTIPLIER(Ped ped, float multiplier) { Invoke(0xDC2C5C242AAC342B, V(ped), V(multiplier)); }
		public static void SET_PED_CAN_LOSE_PROPS_ON_DAMAGE(Ped ped, bool toggle, int p2) { Invoke(0xE861D0B05C7662B8, V(ped), V(toggle), V(p2)); }
		public static void SET_FORCE_FOOTSTEP_UPDATE(Ped ped, bool toggle) { Invoke(0x129466ED55140F8D, V(ped), V(toggle)); }
		public static void SET_FORCE_STEP_TYPE(Ped ped, bool p1, int type, int p3) { Invoke(0xCB968B53FC7F916D, V(ped), V(p1), V(type), V(p3)); }
		public static bool IS_ANY_HOSTILE_PED_NEAR_POINT(Ped ped, float x, float y, float z, float radius) { return Invoke<bool>(0x68772DB2B2526F9F, V(ped), V(x), V(y), V(z), V(radius)); }
		// Toggles config flag _CanPlayInCarIdles.
		public static void SET_PED_CAN_PLAY_IN_CAR_IDLES(Ped ped, bool toggle) { Invoke(0x820E9892A77E97CD, V(ped), V(toggle)); }
		public static bool IS_TARGET_PED_IN_PERCEPTION_AREA(Ped ped, Ped targetPed, float p2, float p3, float p4, float p5) { return Invoke<bool>(0x06087579E7AA85A9, V(ped), V(targetPed), V(p2), V(p3), V(p4), V(p5)); }
		// Min and max are usually 100.0 and 200.0
		public static void SET_POP_CONTROL_SPHERE_THIS_FRAME(float x, float y, float z, float min, float max) { Invoke(0xD8C3BE3EE94CAF2D, V(x), V(y), V(z), V(min), V(max)); }
		public static void FORCE_ZERO_MASS_IN_COLLISIONS(Ped ped) { Invoke(0xD33DAA36272177C4, V(ped)); }
		public static void SET_DISABLE_HIGH_FALL_DEATH(Ped ped, bool toggle) { Invoke(0x711794453CFD692B, V(ped), V(toggle)); }
		public static void SET_PED_PHONE_PALETTE_IDX(Any p0, Any p1) { Invoke(0x83A169EABCDB10A2, V(p0), V(p1)); }
		public static void SET_PED_STEER_BIAS(Ped ped, float value) { Invoke(0x288DF530C92DAD6F, V(ped), V(value)); }
		public static bool IS_PED_SWITCHING_WEAPON(Ped Ped) { return Invoke<bool>(0x3795688A307E1EB6, V(Ped)); }
		public static void SET_PED_TREATED_AS_FRIENDLY(Any p0, Any p1, Any p2) { Invoke(0x0F62619393661D6E, V(p0), V(p1), V(p2)); }
		public static void SET_DISABLE_PED_MAP_COLLISION(Ped ped) { Invoke(0xDFE68C4B787E1BFB, V(ped)); }
		public static void ENABLE_MP_LIGHT(Ped ped, bool toggle) { Invoke(0xEE2476B9EE4A094F, V(ped), V(toggle)); }
		public static bool GET_MP_LIGHT_ENABLED(Ped ped) { return Invoke<bool>(0x88274C11CF0D866D, V(ped)); }
		public static void CLEAR_COVER_POINT_FOR_PED(Ped ped) { Invoke(0x637822DC2AFEEBF8, V(ped)); }
		public static void SET_ALLOW_STUNT_JUMP_CAMERA(Ped ped, bool toggle) { Invoke(0xFAB944D4D481ACCB, V(ped), V(toggle)); }




		// Creates a rope at the specific position, that extends in the specified direction when not attached to any entities.
		// __
		// 
		// Add_Rope(pos.x,pos.y,pos.z,0.0,0.0,0.0,20.0,4,20.0,1.0,0.0,false,false,false,5.0,false,NULL)
		// 
		// When attached, Position<vector> does not matter
		// When attached, Angle<vector> does not matter
		// 
		// Rope Type:
		// 4 and bellow is a thick rope
		// 5 and up are small metal wires
		// 0 crashes the game
		// 
		// Max_length - Rope is forced to this length, generally best to keep this the same as your rope length.
		// 
		// windingSpeed - Speed the Rope is being winded, using native START_ROPE_WINDING. Set positive for winding and negative for unwinding.
		// 
		// Rigid - If max length is zero, and this is set to false the rope will become rigid (it will force a specific distance, what ever length is, between the objects).
		// 
		// breakable - Whether or not shooting the rope will break it.
		// 
		// unkPtr - unknown ptr, always 0 in orig scripts
		// __
		// 
		// Lengths can be calculated like so:
		// 
		// float distance = abs(x1 - x2) + abs(y1 - y2) + abs(z1 - z2); // Rope length
		// 
		// 
		// NOTES:
		// 
		// Rope does NOT interact with anything you attach it to, in some cases it make interact with the world AFTER it breaks (seems to occur if you set the type to -1).
		// 
		// Rope will sometimes contract and fall to the ground like you'd expect it to, but since it doesn't interact with the world the effect is just jaring.
		public static int ADD_ROPE(float x, float y, float z, float rotX, float rotY, float rotZ, float length, int ropeType, float maxLength, float minLength, float windingSpeed, bool p11, bool p12, bool rigid, float p14, bool breakWhenShot, Any* unkPtr) { return Invoke<int>(V(0xE832D760399EB220), V(x), V(y), V(z), V(rotX), V(rotY), V(rotZ), V(length), V(ropeType), V(maxLength), V(minLength), V(windingSpeed), V(p11), V(p12), V(rigid), V(p14), V(breakWhenShot), V(unkPtr)); }
		public static void DELETE_ROPE(int* ropeId) { Invoke(0x52B4829281364649, V(ropeId)); }
		public static void DELETE_CHILD_ROPE(int ropeId) { Invoke(0xAA5D6B1888E4DB20, V(ropeId)); }
		public static bool DOES_ROPE_EXIST(int* ropeId) { return Invoke<bool>(0xFD5448BE3111ED96, V(ropeId)); }
		public static void ROPE_DRAW_ENABLED(int* ropeId, bool p1) { Invoke(0xA1AE736541B0FCA3, V(ropeId), V(p1)); }
		public static void ROPE_DRAW_SHADOW_ENABLED(int* ropeId, bool toggle) { Invoke(0xF159A63806BB5BA8, V(ropeId), V(toggle)); }
		// Rope presets can be found in the gamefiles. One example is "ropeFamily3", it is NOT a hash but rather a string.
		public static void LOAD_ROPE_DATA(int ropeId, string rope_preset) { Invoke(0xCBB203C04D1ABD27, V(ropeId), V(rope_preset)); }
		public static void PIN_ROPE_VERTEX(int ropeId, int vertex, float x, float y, float z) { Invoke(0x2B320CF14146B69A, V(ropeId), V(vertex), V(x), V(y), V(z)); }
		public static void UNPIN_ROPE_VERTEX(int ropeId, int vertex) { Invoke(0x4B5AE2EEE4A8F180, V(ropeId), V(vertex)); }
		public static int GET_ROPE_VERTEX_COUNT(int ropeId) { return Invoke<int>(0x3655F544CD30F0B5, V(ropeId)); }
		// Attaches entity 1 to entity 2.
		public static void ATTACH_ENTITIES_TO_ROPE(int ropeId, Entity ent1, Entity ent2, float ent1_x, float ent1_y, float ent1_z, float ent2_x, float ent2_y, float ent2_z, float length, bool p10, bool p11, Any* p12, Any* p13) { Invoke(0x3D95EC8B6D940AC3, V(ropeId), V(ent1), V(ent2), V(ent1_x), V(ent1_y), V(ent1_z), V(ent2_x), V(ent2_y), V(ent2_z), V(length), V(p10), V(p11), V(p12), V(p13)); }
		// The position supplied can be anywhere, and the entity should anchor relative to that point from it's origin.
		public static void ATTACH_ROPE_TO_ENTITY(int ropeId, Entity entity, float x, float y, float z, bool p5) { Invoke(0x4B490A6832559A65, V(ropeId), V(entity), V(x), V(y), V(z), V(p5)); }
		public static void DETACH_ROPE_FROM_ENTITY(int ropeId, Entity entity) { Invoke(0xBCF3026912A8647D, V(ropeId), V(entity)); }
		public static void ROPE_SET_UPDATE_PINVERTS(int ropeId) { Invoke(0xC8D667EE52114ABA, V(ropeId)); }
		public static void ROPE_SET_UPDATE_ORDER(int ropeId, Any p1) { Invoke(0xDC57A637A20006ED, V(ropeId), V(p1)); }
		public static void ROPE_SET_SMOOTH_REELIN(int ropeId, bool p1) { Invoke(0x36CCB9BE67B970FD, V(ropeId), V(p1)); }
		public static bool IS_ROPE_ATTACHED_AT_BOTH_ENDS(int* ropeId) { return Invoke<bool>(0x84DE3B5FB3E666F0, V(ropeId)); }
		public static Vector3 GET_ROPE_LAST_VERTEX_COORD(int ropeId) { return Invoke<Vector3>(0x21BB0FBD3E217C2D, V(ropeId)); }
		public static Vector3 GET_ROPE_VERTEX_COORD(int ropeId, int vertex) { return Invoke<Vector3>(0xEA61CA8E80F09E4D, V(ropeId), V(vertex)); }
		public static void START_ROPE_WINDING(int ropeId) { Invoke(0x1461C72C889E343E, V(ropeId)); }
		public static void STOP_ROPE_WINDING(int ropeId) { Invoke(0xCB2D4AB84A19AA7C, V(ropeId)); }
		public static void START_ROPE_UNWINDING_FRONT(int ropeId) { Invoke(0x538D1179EC1AA9A9, V(ropeId)); }
		public static void STOP_ROPE_UNWINDING_FRONT(int ropeId) { Invoke(0xFFF3A50779EFBBB3, V(ropeId)); }
		public static void ROPE_CONVERT_TO_SIMPLE(int ropeId) { Invoke(0x5389D48EFA2F079A, V(ropeId)); }
		// Loads rope textures for all ropes in the current scene.
		public static void ROPE_LOAD_TEXTURES() { Invoke(0x9B9039DBF2D258C1); }
		public static bool ROPE_ARE_TEXTURES_LOADED() { return Invoke<bool>(0xF2D0E6A75CC05597); }
		// Unloads rope textures for all ropes in the current scene.
		public static void ROPE_UNLOAD_TEXTURES() { Invoke(0x6CE36C35C1AC8163); }
		public static bool DOES_SCRIPT_OWN_ROPE(int ropeId) { return Invoke<bool>(0x271C9D3ACA5D6409, V(ropeId)); }
		public static void ROPE_ATTACH_VIRTUAL_BOUND_GEOM(int ropeId, int p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float p9, float p10, float p11, float p12, float p13) { Invoke(0xBC0CE682D4D05650, V(ropeId), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10), V(p11), V(p12), V(p13)); }
		public static void ROPE_CHANGE_SCRIPT_OWNER(Any p0, bool p1, bool p2) { Invoke(0xB1B6216CA2E7B55E, V(p0), V(p1), V(p2)); }
		public static void ROPE_SET_REFFRAMEVELOCITY_COLLIDERORDER(int ropeId, int p1) { Invoke(0xB743F735C03D7810, V(ropeId), V(p1)); }
		public static float ROPE_GET_DISTANCE_BETWEEN_ENDS(int ropeId) { return Invoke<float>(0x73040398DFF9A4A6, V(ropeId)); }
		// Forces a rope to a certain length.
		public static void ROPE_FORCE_LENGTH(int ropeId, float length) { Invoke(0xD009F759A723DB1B, V(ropeId), V(length)); }
		// Reset a rope to a certain length.
		public static void ROPE_RESET_LENGTH(int ropeId, float length) { Invoke(0xC16DE94D9BEA14A0, V(ropeId), V(length)); }
		public static void APPLY_IMPULSE_TO_CLOTH(float posX, float posY, float posZ, float vecX, float vecY, float vecZ, float impulse) { Invoke(0xE37F721824571784, V(posX), V(posY), V(posZ), V(vecX), V(vecY), V(vecZ), V(impulse)); }
		public static void SET_DAMPING(Entity entity, int vertex, float value) { Invoke(0xEEA3B200A6FEB65B, V(entity), V(vertex), V(value)); }
		public static Vector3 GET_DAMPING(Entity entity, int type) { return Invoke<Vector3>(0x8C520A929415BCD2, V(entity), V(type)); }
		public static void ACTIVATE_PHYSICS(Entity entity) { Invoke(0x710311ADF0E20730, V(entity)); }
		public static void SET_CGOFFSET(Entity entity, float x, float y, float z) { Invoke(0xD8FA3908D7B86904, V(entity), V(x), V(y), V(z)); }
		public static Vector3 GET_CGOFFSET(Entity entity) { return Invoke<Vector3>(0x8214A4B5A7A33612, V(entity)); }
		public static void SET_CG_AT_BOUNDCENTER(Entity entity) { Invoke(0xBE520D9761FF811F, V(entity)); }
		public static void BREAK_ENTITY_GLASS(Entity entity, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, Any p9, bool p10) { Invoke(0x2E648D16F6E308F3, V(entity), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10)); }
		public static bool GET_IS_ENTITY_A_FRAG(Obj obj) { return Invoke<bool>(0x0C112765300C7E1E, V(obj)); }
		public static void SET_DISABLE_BREAKING(Obj obj, bool toggle) { Invoke(0x5CEC1A84620E7D5B, V(obj), V(toggle)); }
		public static void RESET_DISABLE_BREAKING(Obj obj) { Invoke(0xCC6E963682533882, V(obj)); }
		public static void SET_DISABLE_FRAG_DAMAGE(Obj obj, bool toggle) { Invoke(0x01BA3AED21C16CFB, V(obj), V(toggle)); }
		// PED_RAGDOLL_BUMP Proof?
		public static void SET_USE_KINEMATIC_PHYSICS(Entity entity, bool toggle) { Invoke(0x15F944730C832252, V(entity), V(toggle)); }
		public static void SET_IN_STUNT_MODE(bool p0) { Invoke(0x9EBD751E5787BAF2, V(p0)); }
		// Related to the lower-end of a vehicles fTractionCurve, e.g., from standing starts and acceleration from low/zero speeds.
		public static void SET_IN_ARENA_MODE(bool toggle) { Invoke(0xAA6A6098851C396F, V(toggle)); }




		// Gets the ped for a specified player index.
		public static Ped GET_PLAYER_PED(Player player) { return Invoke<Ped>(0x43A66C31C68491C0, V(player)); }
		// Does the same like PLAYER::GET_PLAYER_PED
		public static Ped GET_PLAYER_PED_SCRIPT_INDEX(Player player) { return Invoke<Ped>(0x50FAC3A3E030A6E1, V(player)); }
		// Set the model for a specific Player. Be aware that this will destroy the current Ped for the Player and create a new one, any reference to the old ped should be reset
		// Make sure to request the model first and wait until it has loaded.
		public static void SET_PLAYER_MODEL(Player player, Hash model) { Invoke(0x00A1CADD00108836, V(player), V(model)); }
		public static void CHANGE_PLAYER_PED(Player player, Ped ped, bool p2, bool resetDamage) { Invoke(0x048189FAC643DEEE, V(player), V(ped), V(p2), V(resetDamage)); }
		public static void GET_PLAYER_RGB_COLOUR(Player player, int* r, int* g, int* b) { Invoke(0xE902EF951DCE178F, V(player), V(r), V(g), V(b)); }
		// Gets the number of players in the current session.
		// If not multiplayer, always returns 1.
		public static int GET_NUMBER_OF_PLAYERS() { return Invoke<int>(0x407C7F91DDB46C16); }
		// Gets the player's team.
		// Does nothing in singleplayer.
		public static int GET_PLAYER_TEAM(Player player) { return Invoke<int>(0x37039302F4E0A008, V(player)); }
		// Set player team on deathmatch and last team standing..
		public static void SET_PLAYER_TEAM(Player player, int team) { Invoke(0x0299FA38396A4940, V(player), V(team)); }
		public static int GET_NUMBER_OF_PLAYERS_IN_TEAM(int team) { return Invoke<int>(0x1FC200409F10E6F1, V(team)); }
		public static byte* GET_PLAYER_NAME(Player player) { return PInvoke<byte>(0x6D0DE6A7B5DA71F8, V(player)); }
		// Remnant from GTA IV. Does nothing in GTA V.
		public static float GET_WANTED_LEVEL_RADIUS(Player player) { return Invoke<float>(0x085DEB493BE80812, V(player)); }
		public static Vector3 GET_PLAYER_WANTED_CENTRE_POSITION(Player player) { return Invoke<Vector3>(0x0C92BA89F1AF26F8, V(player)); }
		// # Predominant call signatures
		// PLAYER::SET_PLAYER_WANTED_CENTRE_POSITION(PLAYER::PLAYER_ID(), ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1));
		// 
		// # Parameter value ranges
		// P0: PLAYER::PLAYER_ID()
		// P1: ENTITY::GET_ENTITY_COORDS(PLAYER::PLAYER_PED_ID(), 1)
		// P2: Not set by any call
		public static void SET_PLAYER_WANTED_CENTRE_POSITION(Player player, Vector3* position, bool p2, bool p3) { Invoke(0x520E541A97A13354, V(player), V(position), V(p2), V(p3)); }
		// Drft
		public static int GET_WANTED_LEVEL_THRESHOLD(int wantedLevel) { return Invoke<int>(0xFDD179EAF45B556C, V(wantedLevel)); }
		// Call SET_PLAYER_WANTED_LEVEL_NOW for immediate effect
		// 
		// wantedLevel is an integer value representing 0 to 5 stars even though the game supports the 6th wanted level but no police will appear since no definitions are present for it in the game files
		// 
		// disableNoMission-  Disables When Off Mission- appears to always be false
		// 
		public static void SET_PLAYER_WANTED_LEVEL(Player player, int wantedLevel, bool disableNoMission) { Invoke(0x39FF19C64EF7DA5B, V(player), V(wantedLevel), V(disableNoMission)); }
		// p2 is always false in R* scripts
		public static void SET_PLAYER_WANTED_LEVEL_NO_DROP(Player player, int wantedLevel, bool p2) { Invoke(0x340E61DE7F471565, V(player), V(wantedLevel), V(p2)); }
		// Forces any pending wanted level to be applied to the specified player immediately.
		// 
		// Call SET_PLAYER_WANTED_LEVEL with the desired wanted level, followed by SET_PLAYER_WANTED_LEVEL_NOW.
		// 
		// Second parameter is unknown (always false).
		public static void SET_PLAYER_WANTED_LEVEL_NOW(Player player, bool p1) { Invoke(0xE0A7D1E497FFCD6F, V(player), V(p1)); }
		public static bool ARE_PLAYER_FLASHING_STARS_ABOUT_TO_DROP(Player player) { return Invoke<bool>(0xAFAF86043E5874E9, V(player)); }
		public static bool ARE_PLAYER_STARS_GREYED_OUT(Player player) { return Invoke<bool>(0x0A6EB355EE14A2DB, V(player)); }
		public static bool IS_WANTED_AND_HAS_BEEN_SEEN_BY_COPS(Player player) { return Invoke<bool>(0x7E07C78925D5FD96, V(player)); }
		public static void SET_DISPATCH_COPS_FOR_PLAYER(Player player, bool toggle) { Invoke(0xDB172424876553F4, V(player), V(toggle)); }
		public static bool IS_PLAYER_WANTED_LEVEL_GREATER(Player player, int wantedLevel) { return Invoke<bool>(0x238DB2A2C23EE9EF, V(player), V(wantedLevel)); }
		// This executes at the same as speed as PLAYER::SET_PLAYER_WANTED_LEVEL(player, 0, false);
		// 
		// PLAYER::GET_PLAYER_WANTED_LEVEL(player); executes in less than half the time. Which means that it's worth first checking if the wanted level needs to be cleared before clearing. However, this is mostly about good code practice and can important in other situations. The difference in time in this example is negligible. 
		public static void CLEAR_PLAYER_WANTED_LEVEL(Player player) { Invoke(0xB302540597885499, V(player)); }
		public static bool IS_PLAYER_DEAD(Player player) { return Invoke<bool>(0x424D4687FA1E5652, V(player)); }
		public static bool IS_PLAYER_PRESSING_HORN(Player player) { return Invoke<bool>(0xFA1E2BF8B10598F9, V(player)); }
		// Flags:
		// SPC_AMBIENT_SCRIPT = (1 << 1),
		// SPC_CLEAR_TASKS = (1 << 2),
		// SPC_REMOVE_FIRES = (1 << 3),
		// SPC_REMOVE_EXPLOSIONS = (1 << 4),
		// SPC_REMOVE_PROJECTILES = (1 << 5),
		// SPC_DEACTIVATE_GADGETS = (1 << 6),
		// SPC_REENABLE_CONTROL_ON_DEATH = (1 << 7),
		// SPC_LEAVE_CAMERA_CONTROL_ON = (1 << 8),
		// SPC_ALLOW_PLAYER_DAMAGE = (1 << 9),
		// SPC_DONT_STOP_OTHER_CARS_AROUND_PLAYER = (1 << 10),
		// SPC_PREVENT_EVERYBODY_BACKOFF = (1 << 11),
		// SPC_ALLOW_PAD_SHAKE = (1 << 12)
		// 
		// See: https://alloc8or.re/gta5/doc/enums/eSetPlayerControlFlag.txt
		public static void SET_PLAYER_CONTROL(Player player, bool bHasControl, int flags) { Invoke(0x8D32347D6D4C40A2, V(player), V(bHasControl), V(flags)); }
		public static int GET_PLAYER_WANTED_LEVEL(Player player) { return Invoke<int>(0xE28E54788CE8F12D, V(player)); }
		public static void SET_MAX_WANTED_LEVEL(int maxWantedLevel) { Invoke(0xAA5F02DB48D704B9, V(maxWantedLevel)); }
		// If toggle is set to false:
		//  The police won't be shown on the (mini)map
		// 
		// If toggle is set to true:
		//  The police will be shown on the (mini)map
		public static void SET_POLICE_RADAR_BLIPS(bool toggle) { Invoke(0x43286D561B72B8BF, V(toggle)); }
		// The player will be ignored by the police if toggle is set to true
		public static void SET_POLICE_IGNORE_PLAYER(Player player, bool toggle) { Invoke(0x32C62AA929C2DA6A, V(player), V(toggle)); }
		// Checks whether the specified player has a Ped, the Ped is not dead, is not injured and is not arrested.
		public static bool IS_PLAYER_PLAYING(Player player) { return Invoke<bool>(0x5E9564D8246B909A, V(player)); }
		public static void SET_EVERYONE_IGNORE_PLAYER(Player player, bool toggle) { Invoke(0x8EEDA153AD141BA4, V(player), V(toggle)); }
		public static void SET_ALL_RANDOM_PEDS_FLEE(Player player, bool toggle) { Invoke(0x056E0FE8534C2949, V(player), V(toggle)); }
		public static void SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME(Player player) { Invoke(0x471D2FF42A94B4F2, V(player)); }
		public static void SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE(Player player, bool toggle) { Invoke(0xDE45D1A1EF45EE61, V(player), V(toggle)); }
		// - This is called after SET_ALL_RANDOM_PEDS_FLEE_THIS_FRAME
		// 
		public static void SET_ALL_NEUTRAL_RANDOM_PEDS_FLEE_THIS_FRAME(Player player) { Invoke(0xC3376F42B1FACCC6, V(player)); }
		public static void SET_LAW_PEDS_CAN_ATTACK_NON_WANTED_PLAYER_THIS_FRAME(Player player) { Invoke(0xFAC75988A7D078D3, V(player)); }
		public static void SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS(Player player, bool toggle) { Invoke(0x596976B02B6B5700, V(player), V(toggle)); }
		public static void SET_WANTED_LEVEL_MULTIPLIER(float multiplier) { Invoke(0x020E5F00CDA207BA, V(multiplier)); }
		// Max value is 1.0
		public static void SET_WANTED_LEVEL_DIFFICULTY(Player player, float difficulty) { Invoke(0x9B0BB33B04405E7A, V(player), V(difficulty)); }
		public static void RESET_WANTED_LEVEL_DIFFICULTY(Player player) { Invoke(0xB9D0DD990DC141DD, V(player)); }
		public static int GET_WANTED_LEVEL_TIME_TO_ESCAPE() { return Invoke<int>(0xA72200F51875FEA4); }
		public static void SET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(Player player, int wantedLevel, int lossTime) { Invoke(0x49B856B1360C47C7, V(player), V(wantedLevel), V(lossTime)); }
		public static void RESET_WANTED_LEVEL_HIDDEN_ESCAPE_TIME(Player player) { Invoke(0x823EC8E82BA45986, V(player)); }
		public static void START_FIRING_AMNESTY(int duration) { Invoke(0xBF9BD71691857E48, V(duration)); }
		// PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(), 37, PLAYER::GET_WANTED_LEVEL_THRESHOLD(1));
		// 
		// From am_armybase.ysc.c4:
		// 
		// PLAYER::REPORT_CRIME(PLAYER::PLAYER_ID(4), 36, PLAYER::GET_WANTED_LEVEL_THRESHOLD(4));
		// 
		// -----
		// 
		// This was taken from the GTAV.exe v1.334. The function is called sub_140592CE8. For a full decompilation of the function, see here: https://pastebin.com/09qSMsN7 
		// 
		// -----
		// crimeType:
		// 1: Firearms possession
		// 2: Person running a red light ("5-0-5")
		// 3: Reckless driver
		// 4: Speeding vehicle (a "5-10")
		// 5: Traffic violation (a "5-0-5")
		// 6: Motorcycle rider without a helmet
		// 7: Vehicle theft (a "5-0-3")
		// 8: Grand Theft Auto
		// 9: ???
		// 10: ???
		// 11: Assault on a civilian (a "2-40")
		// 12: Assault on an officer
		// 13: Assault with a deadly weapon (a "2-45")
		// 14: Officer shot (a "2-45")
		// 15: Pedestrian struck by a vehicle
		// 16: Officer struck by a vehicle
		// 17: Helicopter down (an "AC"?)
		// 18: Civilian on fire (a "2-40")
		// 19: Officer set on fire (a "10-99")
		// 20: Car on fire
		// 21: Air unit down (an "AC"?)
		// 22: An explosion (a "9-96")
		// 23: A stabbing (a "2-45") (also something else I couldn't understand)
		// 24: Officer stabbed (also something else I couldn't understand)
		// 25: Attack on a vehicle ("MDV"?)
		// 26: Damage to property
		// 27: Suspect threatening officer with a firearm
		// 28: Shots fired
		// 29: ???
		// 30: ???
		// 31: ???
		// 32: ???
		// 33: ???
		// 34: A "2-45"
		// 35: ???
		// 36: A "9-25"
		// 37: ???
		// 38: ???
		// 39: ???
		// 40: ???
		// 41: ???
		// 42: ???
		// 43: Possible disturbance
		// 44: Civilian in need of assistance
		// 45: ???
		// 46: ???
		public static void REPORT_CRIME(Player player, int crimeType, int wantedLvlThresh) { Invoke(0xE9B09589827545E7, V(player), V(crimeType), V(wantedLvlThresh)); }
		// crimeType: see REPORT_CRIME
		public static void SUPPRESS_CRIME_THIS_FRAME(Player player, int crimeType) { Invoke(0x9A987297ED8BD838, V(player), V(crimeType)); }
		// This native is used in both singleplayer and multiplayer scripts.
		// 
		// Always used like this in scripts
		// PLAYER::UPDATE_WANTED_POSITION_THIS_FRAME(PLAYER::PLAYER_ID());
		public static void UPDATE_WANTED_POSITION_THIS_FRAME(Player player) { Invoke(0xBC9490CA15AEA8FB, V(player)); }
		// This has been found in use in the decompiled files.
		public static void SUPPRESS_LOSING_WANTED_LEVEL_IF_HIDDEN_THIS_FRAME(Player player) { Invoke(0x4669B3ED80F24B4E, V(player)); }
		public static void ALLOW_EVASION_HUD_IF_DISABLING_HIDDEN_EVASION_THIS_FRAME(Player player, Any p1) { Invoke(0x2F41A3BAE005E5FA, V(player), V(p1)); }
		// This has been found in use in the decompiled files.
		public static void FORCE_START_HIDDEN_EVASION(Player player) { Invoke(0xAD73CE5A09E42D12, V(player)); }
		public static void SUPPRESS_WITNESSES_CALLING_POLICE_THIS_FRAME(Player player) { Invoke(0x36F1B38855F2A8DF, V(player)); }
		public static void REPORT_POLICE_SPOTTED_PLAYER(Player player) { Invoke(0xDC64D2C53493ED12, V(player)); }
		// PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE(rPtr((&l_122) + 71)); // Found in decompilation
		// 
		// ***
		// 
		// In "am_hold_up.ysc" used once:
		// 
		// l_8d._f47 = MISC::GET_RANDOM_FLOAT_IN_RANGE(18.0, 28.0);
		// PLAYER::SET_LAW_RESPONSE_DELAY_OVERRIDE((l_8d._f47));
		public static void SET_LAW_RESPONSE_DELAY_OVERRIDE(float p0) { Invoke(0xB45EFF719D8427A6, V(p0)); }
		// 2 matches in 1 script - am_hold_up
		// 
		// Used in multiplayer scripts?
		public static void RESET_LAW_RESPONSE_DELAY_OVERRIDE() { Invoke(0x0032A6DBA562C518); }
		public static bool CAN_PLAYER_START_MISSION(Player player) { return Invoke<bool>(0xDE7465A27D403C06, V(player)); }
		public static bool IS_PLAYER_READY_FOR_CUTSCENE(Player player) { return Invoke<bool>(0x908CBECC2CAA3690, V(player)); }
		public static bool IS_PLAYER_TARGETTING_ENTITY(Player player, Entity entity) { return Invoke<bool>(0x7912F7FC4F6264B6, V(player), V(entity)); }
		// Assigns the handle of locked-on melee target to *entity that you pass it.
		// Returns false if no entity found.
		public static bool GET_PLAYER_TARGET_ENTITY(Player player, Entity* entity) { return Invoke<bool>(0x13EDE1A5DBF797C9, V(player), V(entity)); }
		// Gets a value indicating whether the specified player is currently aiming freely.
		public static bool IS_PLAYER_FREE_AIMING(Player player) { return Invoke<bool>(0x2E397FD2ECD37C87, V(player)); }
		// Gets a value indicating whether the specified player is currently aiming freely at the specified entity.
		public static bool IS_PLAYER_FREE_AIMING_AT_ENTITY(Player player, Entity entity) { return Invoke<bool>(0x3C06B5C839B38F7B, V(player), V(entity)); }
		// Returns TRUE if it found an entity in your crosshair within range of your weapon. Assigns the handle of the target to the *entity that you pass it.
		// Returns false if no entity found.
		public static bool GET_ENTITY_PLAYER_IS_FREE_AIMING_AT(Player player, Entity* entity) { return Invoke<bool>(0x2975C866E6713290, V(player), V(entity)); }
		// Affects the range of auto aim target.
		public static void SET_PLAYER_LOCKON_RANGE_OVERRIDE(Player player, float range) { Invoke(0x29961D490E5814FD, V(player), V(range)); }
		// Set whether this player should be able to do drive-bys.
		// 
		// "A drive-by is when a ped is aiming/shooting from vehicle. This includes middle finger taunts. By setting this value to false I confirm the player is unable to do all that. Tested on tick."
		// 
		public static void SET_PLAYER_CAN_DO_DRIVE_BY(Player player, bool toggle) { Invoke(0x6E8834B52EC20C77, V(player), V(toggle)); }
		// Sets whether this player can be hassled by gangs.
		public static void SET_PLAYER_CAN_BE_HASSLED_BY_GANGS(Player player, bool toggle) { Invoke(0xD5E460AD7020A246, V(player), V(toggle)); }
		// Sets whether this player can take cover.
		public static void SET_PLAYER_CAN_USE_COVER(Player player, bool toggle) { Invoke(0xD465A8599DFF6814, V(player), V(toggle)); }
		// Gets the maximum wanted level the player can get.
		// Ranges from 0 to 5.
		public static int GET_MAX_WANTED_LEVEL() { return Invoke<int>(0x462E0DB9B137DC5F); }
		public static bool IS_PLAYER_TARGETTING_ANYTHING(Player player) { return Invoke<bool>(0x78CFE51896B6B8A4, V(player)); }
		public static void SET_PLAYER_SPRINT(Player player, bool toggle) { Invoke(0xA01B8075D8B92DF4, V(player), V(toggle)); }
		public static void RESET_PLAYER_STAMINA(Player player) { Invoke(0xA6F312FCCE9C1DFE, V(player)); }
		public static void RESTORE_PLAYER_STAMINA(Player player, float p1) { Invoke(0xA352C1B864CAFD33, V(player), V(p1)); }
		public static float GET_PLAYER_SPRINT_STAMINA_REMAINING(Player player) { return Invoke<float>(0x3F9F16F8E65A7ED7, V(player)); }
		public static float GET_PLAYER_SPRINT_TIME_REMAINING(Player player) { return Invoke<float>(0x1885BC9B108B4C99, V(player)); }
		public static float GET_PLAYER_UNDERWATER_TIME_REMAINING(Player player) { return Invoke<float>(0xA1FCF8E6AF40B731, V(player)); }
		public static float SET_PLAYER_UNDERWATER_BREATH_PERCENT_REMAINING(Player player, float time) { return Invoke<float>(0xA0D3E4F7AAFB7E78, V(player), V(time)); }
		// Returns the group ID the player is member of.
		public static int GET_PLAYER_GROUP(Player player) { return Invoke<int>(0x0D127585F77030AF, V(player)); }
		public static int GET_PLAYER_MAX_ARMOUR(Player player) { return Invoke<int>(0x92659B4CE1863CB3, V(player)); }
		// Can the player control himself, used to disable controls for player for things like a cutscene.
		// 
		// ---
		// 
		// You can't disable controls with this, use SET_PLAYER_CONTROL(...) for this. 
		public static bool IS_PLAYER_CONTROL_ON(Player player) { return Invoke<bool>(0x49C32D60007AFA47, V(player)); }
		// Returns true when the player is not able to control the cam i.e. when running a benchmark test, switching the player or viewing a cutscene.
		// 
		// Note: I am not 100% sure if the native actually checks if the cam control is disabled but it seems promising.
		public static bool GET_ARE_CAMERA_CONTROLS_DISABLED() { return Invoke<bool>(0x7C814D2FB49F40C0); }
		public static bool IS_PLAYER_SCRIPT_CONTROL_ON(Player player) { return Invoke<bool>(0x8A876A65283DD7D7, V(player)); }
		// Returns TRUE if the player ('s ped) is climbing at the moment.
		public static bool IS_PLAYER_CLIMBING(Player player) { return Invoke<bool>(0x95E8F73DC65EFB9C, V(player)); }
		// Return true while player is being arrested / busted.
		// 
		// If atArresting is set to 1, this function will return 1 when player is being arrested (while player is putting his hand up, but still have control)
		// 
		// If atArresting is set to 0, this function will return 1 only when the busted screen is shown.
		public static bool IS_PLAYER_BEING_ARRESTED(Player player, bool atArresting) { return Invoke<bool>(0x388A47C51ABDAC8E, V(player), V(atArresting)); }
		public static void RESET_PLAYER_ARREST_STATE(Player player) { Invoke(0x2D03E13C460760D6, V(player)); }
		// Alternative: GET_VEHICLE_PED_IS_IN(PLAYER_PED_ID(), 1);
		public static Vehicle GET_PLAYERS_LAST_VEHICLE() { return Invoke<Vehicle>(0xB6997A7EB3F5C8C0); }
		// Returns the same as PLAYER_ID and NETWORK_PLAYER_ID_TO_INT
		public static Player GET_PLAYER_INDEX() { return Invoke<Player>(0xA5EDC40EF369B48D); }
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		public static Player INT_TO_PLAYERINDEX(int value) { return Invoke<Player>(0x41BD2A6B006AF756, V(value)); }
		// Simply returns whatever is passed to it (Regardless of whether the handle is valid or not).
		// --------------------------------------------------------
		// if (NETWORK::NETWORK_IS_PARTICIPANT_ACTIVE(PLAYER::INT_TO_PARTICIPANTINDEX(i)))
		// 
		public static int INT_TO_PARTICIPANTINDEX(int value) { return Invoke<int>(0x9EC6603812C24710, V(value)); }
		public static int GET_TIME_SINCE_PLAYER_HIT_VEHICLE(Player player) { return Invoke<int>(0x5D35ECF3A81A0EE0, V(player)); }
		public static int GET_TIME_SINCE_PLAYER_HIT_PED(Player player) { return Invoke<int>(0xE36A25322DC35F42, V(player)); }
		public static int GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT(Player player) { return Invoke<int>(0xD559D2BE9E37853B, V(player)); }
		public static int GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC(Player player) { return Invoke<int>(0xDB89591E290D9182, V(player)); }
		public static bool IS_PLAYER_FREE_FOR_AMBIENT_TASK(Player player) { return Invoke<bool>(0xDCCFD3F106C36AB4, V(player)); }
		// This returns YOUR 'identity' as a Player type.
		// 
		// Always returns 0 in story mode.
		public static Player PLAYER_ID() { return Invoke<Player>(0x4F8644AF03D0E0D6); }
		// Returns current player ped
		public static Ped PLAYER_PED_ID() { return Invoke<Ped>(0xD80958FC74E988A6); }
		// Does exactly the same thing as PLAYER_ID()
		public static int NETWORK_PLAYER_ID_TO_INT() { return Invoke<int>(0xEE68096F9F37341E); }
		public static bool HAS_FORCE_CLEANUP_OCCURRED(int cleanupFlags) { return Invoke<bool>(0xC968670BFACE42D9, V(cleanupFlags)); }
		// used with 1,2,8,64,128 in the scripts
		public static void FORCE_CLEANUP(int cleanupFlags) { Invoke(0xBC8983F38F78ED51, V(cleanupFlags)); }
		// PLAYER::FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME("pb_prostitute", 1); // Found in decompilation
		public static void FORCE_CLEANUP_FOR_ALL_THREADS_WITH_THIS_NAME(string name, int cleanupFlags) { Invoke(0x4C68DDDDF0097317, V(name), V(cleanupFlags)); }
		public static void FORCE_CLEANUP_FOR_THREAD_WITH_THIS_ID(int id, int cleanupFlags) { Invoke(0xF745B37630DF176B, V(id), V(cleanupFlags)); }
		public static int GET_CAUSE_OF_MOST_RECENT_FORCE_CLEANUP() { return Invoke<int>(0x9A41CF4674A12272); }
		public static void SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE(Player player, Vehicle vehicle) { Invoke(0x8026FF78F208978A, V(player), V(vehicle)); }
		public static void SET_PLAYER_MAY_NOT_ENTER_ANY_VEHICLE(Player player) { Invoke(0x1DE37BBF9E9CC14A, V(player)); }
		// 1 - Welcome to Los Santos
		// 2 - A Friendship Resurrected
		// 3 - A Fair Day's Pay
		// 4 - The Moment of Truth
		// 5 - To Live or Die in Los Santos
		// 6 - Diamond Hard
		// 7 - Subversive
		// 8 - Blitzed
		// 9 - Small Town, Big Job
		// 10 - The Government Gimps
		// 11 - The Big One!
		// 12 - Solid Gold, Baby!
		// 13 - Career Criminal
		// 14 - San Andreas Sightseer
		// 15 - All's Fare in Love and War
		// 16 - TP Industries Arms Race
		// 17 - Multi-Disciplined
		// 18 - From Beyond the Stars
		// 19 - A Mystery, Solved
		// 20 - Waste Management
		// 21 - Red Mist
		// 22 - Show Off
		// 23 - Kifflom!
		// 24 - Three Man Army
		// 25 - Out of Your Depth
		// 26 - Altruist Acolyte
		// 27 - A Lot of Cheddar
		// 28 - Trading Pure Alpha
		// 29 - Pimp My Sidearm
		// 30 - Wanted: Alive Or Alive
		// 31 - Los Santos Customs
		// 32 - Close Shave
		// 33 - Off the Plane
		// 34 - Three-Bit Gangster
		// 35 - Making Moves
		// 36 - Above the Law
		// 37 - Numero Uno
		// 38 - The Midnight Club
		// 39 - Unnatural Selection
		// 40 - Backseat Driver
		// 41 - Run Like The Wind
		// 42 - Clean Sweep
		// 43 - Decorated
		// 44 - Stick Up Kid
		// 45 - Enjoy Your Stay
		// 46 - Crew Cut
		// 47 - Full Refund
		// 48 - Dialling Digits
		// 49 - American Dream
		// 50 - A New Perspective
		// 51 - Be Prepared
		// 52 - In the Name of Science
		// 53 - Dead Presidents
		// 54 - Parole Day
		// 55 - Shot Caller
		// 56 - Four Way
		// 57 - Live a Little
		// 58 - Can't Touch This
		// 59 - Mastermind
		// 60 - Vinewood Visionary
		// 61 - Majestic
		// 62 - Humans of Los Santos
		// 63 - First Time Director
		// 64 - Animal Lover
		// 65 - Ensemble Piece
		// 66 - Cult Movie
		// 67 - Location Scout
		// 68 - Method Actor
		// 69 - Cryptozoologist
		// 70 - Getting Started
		// 71 - The Data Breaches
		// 72 - The Bogdan Problem
		// 73 - The Doomsday Scenario
		// 74 - A World Worth Saving
		// 75 - Orbital Obliteration
		// 76 - Elitist
		// 77 - Masterminds
		public static bool GIVE_ACHIEVEMENT_TO_PLAYER(int achievementId) { return Invoke<bool>(0xBEC7076D64130195, V(achievementId)); }
		// For Steam.
		// Does nothing and always returns false in the retail version of the game.
		public static bool SET_ACHIEVEMENT_PROGRESS(int achievementId, int progress) { return Invoke<bool>(0xC2AFFFDABBDC2C5C, V(achievementId), V(progress)); }
		// For Steam.
		// Always returns 0 in retail version of the game.
		public static int GET_ACHIEVEMENT_PROGRESS(int achievementId) { return Invoke<int>(0x1C186837D0619335, V(achievementId)); }
		// See GIVE_ACHIEVEMENT_TO_PLAYER
		public static bool HAS_ACHIEVEMENT_BEEN_PASSED(int achievementId) { return Invoke<bool>(0x867365E111A3B6EB, V(achievementId)); }
		// Returns TRUE if the game is in online mode and FALSE if in offline mode.
		// 
		// This is an alias for NETWORK_IS_SIGNED_ONLINE.
		public static bool IS_PLAYER_ONLINE() { return Invoke<bool>(0xF25D331DC2627BBC); }
		// this function is hard-coded to always return 0.
		public static bool IS_PLAYER_LOGGING_IN_NP() { return Invoke<bool>(0x74556E1420867ECA); }
		// Purpose of the bool currently unknown.
		// Both, true and false, work
		public static void DISPLAY_SYSTEM_SIGNIN_UI(bool p0) { Invoke(0x94DD7888C10A979E, V(p0)); }
		public static bool IS_SYSTEM_UI_BEING_DISPLAYED() { return Invoke<bool>(0x5D511E3867C87139); }
		// Simply sets you as invincible (Health will not deplete).
		// 
		// Use 0x733A643B5B0C53C1 instead if you want Ragdoll enabled, which is equal to:
		// *(DWORD *)(playerPedAddress + 0x188) |= (1 << 9);
		public static void SET_PLAYER_INVINCIBLE(Player player, bool toggle) { Invoke(0x239528EACDC3E7DE, V(player), V(toggle)); }
		// Returns the Player's Invincible status.
		// 
		// This function will always return false if 0x733A643B5B0C53C1 is used to set the invincibility status. To always get the correct result, use this:
		// 
		//  bool IsPlayerInvincible(Player player)
		//     {
		//      auto addr = getScriptHandleBaseAddress(GET_PLAYER_PED(player)); 
		// 
		//         if (addr)
		//      {
		//          DWORD flag = *(DWORD *)(addr + 0x188);
		//             return ((flag & (1 << 8)) != 0) || ((flag & (1 << 9)) != 0);
		//       }
		// 
		//        return false;
		//  }
		// 
		// 
		public static bool GET_PLAYER_INVINCIBLE(Player player) { return Invoke<bool>(0xB721981B2B939E07, V(player)); }
		// Always returns false.
		public static bool GET_PLAYER_DEBUG_INVINCIBLE(Player player) { return Invoke<bool>(0xDCC07526B8EC45AF, V(player)); }
		public static void SET_PLAYER_INVINCIBLE_BUT_HAS_REACTIONS(Player player, bool toggle) { Invoke(0x6BC97F4F4BB3C04B, V(player), V(toggle)); }
		public static void SET_PLAYER_CAN_COLLECT_DROPPED_MONEY(Player player, bool p1) { Invoke(0xCAC57395B151135F, V(player), V(p1)); }
		public static void REMOVE_PLAYER_HELMET(Player player, bool p2) { Invoke(0xF3AC26D3CC576528, V(player), V(p2)); }
		public static void GIVE_PLAYER_RAGDOLL_CONTROL(Player player, bool toggle) { Invoke(0x3C49C870E66F0A28, V(player), V(toggle)); }
		// Example from fm_mission_controler.ysc.c4:
		// 
		// PLAYER::SET_PLAYER_LOCKON(PLAYER::PLAYER_ID(), 1);
		// 
		// All other decompiled scripts using this seem to be using the player id as the first parameter, so I feel the need to confirm it as so.
		// 
		// No need to confirm it says PLAYER_ID() so it uses PLAYER_ID() lol.
		public static void SET_PLAYER_LOCKON(Player player, bool toggle) { Invoke(0x5C8B2F450EE4328E, V(player), V(toggle)); }
		// Sets your targeting mode.
		// 0 = Assisted Aim - Full
		// 1 = Assisted Aim - Partial
		// 2 = Free Aim - Assisted
		// 3 = Free Aim
		public static void SET_PLAYER_TARGETING_MODE(int targetMode) { Invoke(0xB1906895227793F3, V(targetMode)); }
		public static void SET_PLAYER_TARGET_LEVEL(int targetLevel) { Invoke(0x5702B917B99DB1CD, V(targetLevel)); }
		// Returns profile setting 237.
		public static bool GET_IS_USING_FPS_THIRD_PERSON_COVER() { return Invoke<bool>(0xB9CF1F793A9F1BF1); }
		// Returns profile setting 243.
		public static bool GET_IS_USING_HOOD_CAMERA() { return Invoke<bool>(0xCB645E85E97EA48B); }
		public static void CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED(Player player) { Invoke(0xF0B67A4DE6AB5F98, V(player)); }
		public static bool HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED(Player player) { return Invoke<bool>(0x20CE80B0C2BF4ACC, V(player)); }
		public static void CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(Player player) { Invoke(0x4AACB96203D11A31, V(player)); }
		public static bool HAS_PLAYER_DAMAGED_AT_LEAST_ONE_NON_ANIMAL_PED(Player player) { return Invoke<bool>(0xE4B90F367BD81752, V(player)); }
		// This can be between 1.0f - 14.9f 
		// 
		// You can change the max in IDA from 15.0. I say 15.0 as the function blrs if what you input is greater than or equal to 15.0 hence why it's 14.9 max default.
		// 
		// 
		public static void SET_AIR_DRAG_MULTIPLIER_FOR_PLAYERS_VEHICLE(Player player, float multiplier) { Invoke(0xCA7DC8329F0A1E9E, V(player), V(multiplier)); }
		// Swim speed multiplier.
		// Multiplier goes up to 1.49
		// 
		// Just call it one time, it is not required to be called once every tick. - Note copied from below native.
		// 
		// Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and RUN_SPRINT below. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
		public static void SET_SWIM_MULTIPLIER_FOR_PLAYER(Player player, float multiplier) { Invoke(0xA91C6F0FF7D16A13, V(player), V(multiplier)); }
		// Multiplier goes up to 1.49 any value above will be completely overruled by the game and the multiplier will not take effect, this can be edited in memory however.
		// 
		// Just call it one time, it is not required to be called once every tick.
		// 
		// Note: At least the IDA method if you change the max float multiplier from 1.5 it will change it for both this and SWIM above. I say 1.5 as the function blrs if what you input is greater than or equal to 1.5 hence why it's 1.49 max default.
		public static void SET_RUN_SPRINT_MULTIPLIER_FOR_PLAYER(Player player, float multiplier) { Invoke(0x6DB47AA77FD94E09, V(player), V(multiplier)); }
		// Returns the time since the character was arrested in (ms) milliseconds.
		// 
		// example
		// 
		// var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_ARREST();
		// 
		// UI.DrawSubtitle(time.ToString());
		// 
		// if player has not been arrested, the int returned will be -1.
		public static int GET_TIME_SINCE_LAST_ARREST() { return Invoke<int>(0x5063F92F07C2A316); }
		// Returns the time since the character died in (ms) milliseconds.
		// 
		// example
		// 
		// var time = Function.call<int>(Hash.GET_TIME_SINCE_LAST_DEATH();
		// 
		// UI.DrawSubtitle(time.ToString());
		// 
		// if player has not died, the int returned will be -1.
		public static int GET_TIME_SINCE_LAST_DEATH() { return Invoke<int>(0xC7034807558DDFCA); }
		public static void ASSISTED_MOVEMENT_CLOSE_ROUTE() { Invoke(0xAEBF081FFC0A0E5E); }
		public static void ASSISTED_MOVEMENT_FLUSH_ROUTE() { Invoke(0x8621390F0CDCFE1F); }
		public static void SET_PLAYER_FORCED_AIM(Player player, bool toggle) { Invoke(0x0FEE4F80AC44A726, V(player), V(toggle)); }
		public static void SET_PLAYER_FORCED_ZOOM(Player player, bool toggle) { Invoke(0x75E7D505F2B15902, V(player), V(toggle)); }
		public static void SET_PLAYER_FORCE_SKIP_AIM_INTRO(Player player, bool toggle) { Invoke(0x7651BC64AE59E128, V(player), V(toggle)); }
		// Inhibits the player from using any method of combat including melee and firearms.
		// 
		// NOTE: Only disables the firing for one frame
		public static void DISABLE_PLAYER_FIRING(Player player, bool toggle) { Invoke(0x5E6CC07646BBEAB8, V(player), V(toggle)); }
		// Used only once in R* scripts (freemode.ysc).
		public static void DISABLE_PLAYER_THROW_GRENADE_WHILE_USING_GUN() { Invoke(0xB885852C39CC265D); }
		public static void SET_DISABLE_AMBIENT_MELEE_MOVE(Player player, bool toggle) { Invoke(0x2E8AABFA40A84F8C, V(player), V(toggle)); }
		// Default is 100. Use player id and not ped id. For instance: PLAYER::SET_PLAYER_MAX_ARMOUR(PLAYER::PLAYER_ID(), 100); // main_persistent.ct4
		public static void SET_PLAYER_MAX_ARMOUR(Player player, int value) { Invoke(0x77DFCCF5948B8C71, V(player), V(value)); }
		// p1 is always 0 in the scripts
		public static void SPECIAL_ABILITY_ACTIVATE(Player player, int p1) { Invoke(0x821FDC827D6F4090, V(player), V(p1)); }
		public static void SET_SPECIAL_ABILITY_MP(Player player, int p1, Any p2) { Invoke(0xB214D570EAD7F81A, V(player), V(p1), V(p2)); }
		// p1 is always 0 in the scripts
		public static void SPECIAL_ABILITY_DEACTIVATE_MP(Player player, int p1) { Invoke(0x17F7471EACA78290, V(player), V(p1)); }
		public static void SPECIAL_ABILITY_DEACTIVATE(Player player, Any p1) { Invoke(0xD6A953C6D1492057, V(player), V(p1)); }
		public static void SPECIAL_ABILITY_DEACTIVATE_FAST(Player player, Any p1) { Invoke(0x9CB5CE07A3968D5A, V(player), V(p1)); }
		public static void SPECIAL_ABILITY_RESET(Player player, Any p1) { Invoke(0x375F0E738F861A94, V(player), V(p1)); }
		public static void SPECIAL_ABILITY_CHARGE_ON_MISSION_FAILED(Player player, Any p1) { Invoke(0xC9A763D8FE87436A, V(player), V(p1)); }
		// Every occurrence of p1 & p2 were both true.
		public static void SPECIAL_ABILITY_CHARGE_SMALL(Player player, bool p1, bool p2, Any p3) { Invoke(0x2E7B9B683481687D, V(player), V(p1), V(p2), V(p3)); }
		// Only 1 match. Both p1 & p2 were true.
		public static void SPECIAL_ABILITY_CHARGE_MEDIUM(Player player, bool p1, bool p2, Any p3) { Invoke(0xF113E3AA9BC54613, V(player), V(p1), V(p2), V(p3)); }
		// 2 matches. p1 was always true.
		public static void SPECIAL_ABILITY_CHARGE_LARGE(Player player, bool p1, bool p2, Any p3) { Invoke(0xF733F45FA4497D93, V(player), V(p1), V(p2), V(p3)); }
		// p1 appears to always be 1 (only comes up twice)
		public static void SPECIAL_ABILITY_CHARGE_CONTINUOUS(Player player, Ped p1, Any p2) { Invoke(0xED481732DFF7E997, V(player), V(p1), V(p2)); }
		// p1 appears as 5, 10, 15, 25, or 30. p2 is always true.
		public static void SPECIAL_ABILITY_CHARGE_ABSOLUTE(Player player, int p1, bool p2, Any p3) { Invoke(0xB7B0870EB531D08D, V(player), V(p1), V(p2), V(p3)); }
		// 
		// normalizedValue is from 0.0 - 1.0
		// p2 is always 1
		public static void SPECIAL_ABILITY_CHARGE_NORMALIZED(Player player, float normalizedValue, bool p2, Any p3) { Invoke(0xA0696A65F009EE18, V(player), V(normalizedValue), V(p2), V(p3)); }
		// Also known as _RECHARGE_SPECIAL_ABILITY
		public static void SPECIAL_ABILITY_FILL_METER(Player player, bool p1, Any p2) { Invoke(0x3DACA8DDC6FD4980, V(player), V(p1), V(p2)); }
		// p1 was always true.
		public static void SPECIAL_ABILITY_DEPLETE_METER(Player player, bool p1, Any p2) { Invoke(0x1D506DBBBC51E64B, V(player), V(p1), V(p2)); }
		public static void SPECIAL_ABILITY_LOCK(Hash playerModel, Any p1) { Invoke(0x6A09D0D590A47D13, V(playerModel), V(p1)); }
		public static void SPECIAL_ABILITY_UNLOCK(Hash playerModel, Any p1) { Invoke(0xF145F3BE2EFA9A3B, V(playerModel), V(p1)); }
		public static bool IS_SPECIAL_ABILITY_UNLOCKED(Hash playerModel) { return Invoke<bool>(0xC6017F6A6CDFA694, V(playerModel)); }
		public static bool IS_SPECIAL_ABILITY_ACTIVE(Player player, Any p1) { return Invoke<bool>(0x3E5F7FC85D854E15, V(player), V(p1)); }
		public static bool IS_SPECIAL_ABILITY_METER_FULL(Player player, Any p1) { return Invoke<bool>(0x05A1FE504B7F2587, V(player), V(p1)); }
		public static void ENABLE_SPECIAL_ABILITY(Player player, bool toggle, Any p2) { Invoke(0x181EC197DAEFE121, V(player), V(toggle), V(p2)); }
		public static bool IS_SPECIAL_ABILITY_ENABLED(Player player, Any p1) { return Invoke<bool>(0xB1D200FE26AEF3CB, V(player), V(p1)); }
		public static void SET_SPECIAL_ABILITY_MULTIPLIER(float multiplier) { Invoke(0xA49C426ED0CA4AB7, V(multiplier)); }
		public static void UPDATE_SPECIAL_ABILITY_FROM_STAT(Player player, Any p1) { Invoke(0xFFEE8FA29AB9A18E, V(player), V(p1)); }
		// Appears once in "re_dealgonewrong"
		public static bool GET_IS_PLAYER_DRIVING_ON_HIGHWAY(Player player) { return Invoke<bool>(0x5FC472C501CCADB3, V(player)); }
		// Only 1 occurrence. p1 was 2.
		public static bool GET_IS_PLAYER_DRIVING_WRECKLESS(Player player, int p1) { return Invoke<bool>(0xF10B44FD479D69F3, V(player), V(p1)); }
		// 2 occurrences in agency_heist3a. p1 was 0.7f then 0.4f.
		public static bool GET_IS_MOPPING_AREA_FREE_IN_FRONT_OF_PLAYER(Player player, float p1) { return Invoke<bool>(0xDD2620B7B9D16FF1, V(player), V(p1)); }
		// `findCollisionLand`: This teleports the player to land when set to true and will not consider the Z coordinate parameter provided by you. It will automatically put the Z coordinate so that you don't fall from sky.
		public static void START_PLAYER_TELEPORT(Player player, float x, float y, float z, float heading, bool p5, bool findCollisionLand, bool p7) { Invoke(0xAD15F075A4DA0FDE, V(player), V(x), V(y), V(z), V(heading), V(p5), V(findCollisionLand), V(p7)); }
		public static bool UPDATE_PLAYER_TELEPORT(Player player) { return Invoke<bool>(0xE23D5873C2394C61, V(player)); }
		// Disables the player's teleportation
		public static void STOP_PLAYER_TELEPORT() { Invoke(0xC449EDED9D73009C); }
		public static bool IS_PLAYER_TELEPORT_ACTIVE() { return Invoke<bool>(0x02B15662D7F8886F); }
		public static float GET_PLAYER_CURRENT_STEALTH_NOISE(Player player) { return Invoke<float>(0x2F395D61F3A1F877, V(player)); }
		// `regenRate`: The recharge multiplier, a value between 0.0 and 1.0.
		// Use 1.0 to reset it back to normal
		public static void SET_PLAYER_HEALTH_RECHARGE_MULTIPLIER(Player player, float regenRate) { Invoke(0x5DB660B38DD98A31, V(player), V(regenRate)); }
		public static float GET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(Player player) { return Invoke<float>(0x8BC515BAE4AAF8FF, V(player)); }
		public static void SET_PLAYER_HEALTH_RECHARGE_MAX_PERCENT(Player player, float limit) { Invoke(0xC388A0F065F5BC34, V(player), V(limit)); }
		// Needs to be called every frame.
		public static void DISABLE_PLAYER_HEALTH_RECHARGE(Player player) { Invoke(0xBCB06442F7E52666, V(player)); }
		public static void SET_PLAYER_FALL_DISTANCE_TO_TRIGGER_RAGDOLL_OVERRIDE(Player player, float p1) { Invoke(0xEFD79FA81DFBA9CB, V(player), V(p1)); }
		// This modifies the damage value of your weapon. Whether it is a multiplier or base1 damage is unknown. 
		// 
		// Based on tests, it is unlikely to be a multiplier.
		// 
		// modifier's min value is 0.1
		public static void SET_PLAYER_WEAPON_DAMAGE_MODIFIER(Player player, float modifier) { Invoke(0xCE07B9F7817AADA3, V(player), V(modifier)); }
		// modifier's min value is 0.1
		public static void SET_PLAYER_WEAPON_DEFENSE_MODIFIER(Player player, float modifier) { Invoke(0x2D83BC011CA14A3C, V(player), V(modifier)); }
		// modifier's min value is 0.1
		public static void SET_PLAYER_WEAPON_MINIGUN_DEFENSE_MODIFIER(Player player, float modifier) { Invoke(0xBCFDE9EDE4CF27DC, V(player), V(modifier)); }
		// modifier's min value is 0.1
		public static void SET_PLAYER_MELEE_WEAPON_DAMAGE_MODIFIER(Player player, float modifier, bool p2) { Invoke(0x4A3DC7ECCC321032, V(player), V(modifier), V(p2)); }
		// modifier's min value is 0.1
		public static void SET_PLAYER_MELEE_WEAPON_DEFENSE_MODIFIER(Player player, float modifier) { Invoke(0xAE540335B4ABC4E2, V(player), V(modifier)); }
		// modifier's min value is 0.1
		public static void SET_PLAYER_VEHICLE_DAMAGE_MODIFIER(Player player, float modifier) { Invoke(0xA50E117CDDF82F0C, V(player), V(modifier)); }
		// modifier's min value is 0.1
		public static void SET_PLAYER_VEHICLE_DEFENSE_MODIFIER(Player player, float modifier) { Invoke(0x4C60E6EFDAFF2462, V(player), V(modifier)); }
		public static void SET_PLAYER_MAX_EXPLOSIVE_DAMAGE(Player player, float p1) { Invoke(0x8D768602ADEF2245, V(player), V(p1)); }
		public static void SET_PLAYER_EXPLOSIVE_DAMAGE_MODIFIER(Player player, Any p1) { Invoke(0xD821056B9ACF8052, V(player), V(p1)); }
		public static void SET_PLAYER_WEAPON_TAKEDOWN_DEFENSE_MODIFIER(Player player, float p1) { Invoke(0x31E90B8873A4CD3B, V(player), V(p1)); }
		// Tints:
		//    None = -1,
		//     Rainbow = 0,
		//   Red = 1,
		//   SeasideStripes = 2,
		//    WidowMaker = 3,
		//    Patriot = 4,
		//   Blue = 5,
		//  Black = 6,
		//     Hornet = 7,
		//    AirFocce = 8,
		//  Desert = 9,
		//    Shadow = 10,
		//   HighAltitude = 11,
		//     Airbone = 12,
		//  Sunrise = 13,
		// 
		public static void SET_PLAYER_PARACHUTE_TINT_INDEX(Player player, int tintIndex) { Invoke(0xA3D0E54541D9A5E5, V(player), V(tintIndex)); }
		// Tints:
		//   None = -1,
		//     Rainbow = 0,
		//   Red = 1,
		//   SeasideStripes = 2,
		//    WidowMaker = 3,
		//    Patriot = 4,
		//   Blue = 5,
		//  Black = 6,
		//     Hornet = 7,
		//    AirFocce = 8,
		//  Desert = 9,
		//    Shadow = 10,
		//   HighAltitude = 11,
		//     Airbone = 12,
		//  Sunrise = 13,
		public static void GET_PLAYER_PARACHUTE_TINT_INDEX(Player player, int* tintIndex) { Invoke(0x75D3F7A1B0D9B145, V(player), V(tintIndex)); }
		// Tints:
		//    None = -1,
		//     Rainbow = 0,
		//   Red = 1,
		//   SeasideStripes = 2,
		//    WidowMaker = 3,
		//    Patriot = 4,
		//   Blue = 5,
		//  Black = 6,
		//     Hornet = 7,
		//    AirFocce = 8,
		//  Desert = 9,
		//    Shadow = 10,
		//   HighAltitude = 11,
		//     Airbone = 12,
		//  Sunrise = 13,
		public static void SET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(Player player, int index) { Invoke(0xAF04C87F5DC1DF38, V(player), V(index)); }
		// Tints:
		//   None = -1,
		//     Rainbow = 0,
		//   Red = 1,
		//   SeasideStripes = 2,
		//    WidowMaker = 3,
		//    Patriot = 4,
		//   Blue = 5,
		//  Black = 6,
		//     Hornet = 7,
		//    AirFocce = 8,
		//  Desert = 9,
		//    Shadow = 10,
		//   HighAltitude = 11,
		//     Airbone = 12,
		//  Sunrise = 13,
		public static void GET_PLAYER_RESERVE_PARACHUTE_TINT_INDEX(Player player, int* index) { Invoke(0xD5A016BC3C09CF40, V(player), V(index)); }
		// tints 0- 13
		// 0 - unkown
		// 1 - unkown
		// 2 - unkown
		// 3 - unkown
		// 4 - unkown
		public static void SET_PLAYER_PARACHUTE_PACK_TINT_INDEX(Player player, int tintIndex) { Invoke(0x93B0FB27C9A04060, V(player), V(tintIndex)); }
		public static void GET_PLAYER_PARACHUTE_PACK_TINT_INDEX(Player player, int* tintIndex) { Invoke(0x6E9C742F340CE5A2, V(player), V(tintIndex)); }
		public static void SET_PLAYER_HAS_RESERVE_PARACHUTE(Player player) { Invoke(0x7DDAB28D31FAC363, V(player)); }
		public static bool GET_PLAYER_HAS_RESERVE_PARACHUTE(Player player) { return Invoke<bool>(0x5DDFE2FF727F3CA3, V(player)); }
		public static void SET_PLAYER_CAN_LEAVE_PARACHUTE_SMOKE_TRAIL(Player player, bool enabled) { Invoke(0xF401B182DBA8AF53, V(player), V(enabled)); }
		public static void SET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(Player player, int r, int g, int b) { Invoke(0x8217FD371A4625CF, V(player), V(r), V(g), V(b)); }
		public static void GET_PLAYER_PARACHUTE_SMOKE_TRAIL_COLOR(Player player, int* r, int* g, int* b) { Invoke(0xEF56DBABD3CD4887, V(player), V(r), V(g), V(b)); }
		// example:
		// 
		// flags: 0-6
		// 
		// PLAYER::SET_PLAYER_RESET_FLAG_PREFER_REAR_SEATS(PLAYER::PLAYER_ID(), 6);
		// 
		// wouldnt the flag be the seatIndex?
		public static void SET_PLAYER_PHONE_PALETTE_IDX(Player player, int flags) { Invoke(0x11D5F725F0E780E0, V(player), V(flags)); }
		public static void SET_PLAYER_NOISE_MULTIPLIER(Player player, float multiplier) { Invoke(0xDB89EF50FF25FCE9, V(player), V(multiplier)); }
		// Values around 1.0f to 2.0f used in game scripts.
		public static void SET_PLAYER_SNEAKING_NOISE_MULTIPLIER(Player player, float multiplier) { Invoke(0xB2C1A29588A9F47C, V(player), V(multiplier)); }
		public static bool CAN_PED_HEAR_PLAYER(Player player, Ped ped) { return Invoke<bool>(0xF297383AA91DCA29, V(player), V(ped)); }
		// This is to make the player walk without accepting input from INPUT.
		// 
		// gaitType is in increments of 100s. 2000, 500, 300, 200, etc.
		// 
		// p4 is always 1 and p5 is always 0.
		// 
		// C# Example :
		// 
		// Function.Call(Hash.SIMULATE_PLAYER_INPUT_GAIT, Game.Player, 1.0f, 100, 1.0f, 1, 0); //Player will go forward for 100ms
		public static void SIMULATE_PLAYER_INPUT_GAIT(Player player, float amount, int gaitType, float speed, bool p4, bool p5, Any p6) { Invoke(0x477D5D63E63ECA5D, V(player), V(amount), V(gaitType), V(speed), V(p4), V(p5), V(p6)); }
		public static void RESET_PLAYER_INPUT_GAIT(Player player) { Invoke(0x19531C47A2ABD691, V(player)); }
		public static void SET_AUTO_GIVE_PARACHUTE_WHEN_ENTER_PLANE(Player player, bool toggle) { Invoke(0x9F343285A00B4BB6, V(player), V(toggle)); }
		public static void SET_AUTO_GIVE_SCUBA_GEAR_WHEN_EXIT_VEHICLE(Player player, bool toggle) { Invoke(0xD2B315B6689D537D, V(player), V(toggle)); }
		public static void SET_PLAYER_STEALTH_PERCEPTION_MODIFIER(Player player, float value) { Invoke(0x4E9021C1FCDD507A, V(player), V(value)); }
		public static bool IS_REMOTE_PLAYER_IN_NON_CLONED_VEHICLE(Player player) { return Invoke<bool>(0x690A61A6D13583F6, V(player)); }
		public static void INCREASE_PLAYER_JUMP_SUPPRESSION_RANGE(Player player) { Invoke(0x9EDD76E87D5D51BA, V(player)); }
		public static void SET_PLAYER_SIMULATE_AIMING(Player player, bool toggle) { Invoke(0xC54C95DA968EC5B5, V(player), V(toggle)); }
		public static void SET_PLAYER_CLOTH_PIN_FRAMES(Player player, int p1) { Invoke(0x749FADDF97DFE930, V(player), V(p1)); }
		// Every occurrence was either 0 or 2.
		public static void SET_PLAYER_CLOTH_PACKAGE_INDEX(int index) { Invoke(0x9F7BBA2EA6372500, V(index)); }
		// 6 matches across 4 scripts. 5 occurrences were 240. The other was 255.
		public static void SET_PLAYER_CLOTH_LOCK_COUNTER(int value) { Invoke(0x14D913B777DFF5DA, V(value)); }
		// Only 1 match. ob_sofa_michael.
		// 
		// PLAYER::PLAYER_ATTACH_VIRTUAL_BOUND(-804.5928f, 173.1801f, 71.68436f, 0f, 0f, 0.590625f, 1f, 0.7f);1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
		public static void PLAYER_ATTACH_VIRTUAL_BOUND(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7) { Invoke(0xED51733DC73AED51, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7)); }
		// 1.0.335.2, 1.0.350.1/2, 1.0.372.2, 1.0.393.2, 1.0.393.4, 1.0.463.1;
		public static void PLAYER_DETACH_VIRTUAL_BOUND() { Invoke(0x1DD5897E2FA6E7C9); }
		public static bool HAS_PLAYER_BEEN_SPOTTED_IN_STOLEN_VEHICLE(Player player) { return Invoke<bool>(0xD705740BB0A1CF4C, V(player)); }
		// Returns true if an unk value is greater than 0.0f
		public static bool IS_PLAYER_BATTLE_AWARE(Player player) { return Invoke<bool>(0x38D28DA81E4E9BF9, V(player)); }
		public static bool GET_PLAYER_RECEIVED_BATTLE_EVENT_RECENTLY(Player player, int p1, bool p2) { return Invoke<bool>(0xBC0753C9CA14B506, V(player), V(p1), V(p2)); }
		// Appears only 3 times in the scripts, more specifically in michael1.ysc
		// 
		// -
		// This can be used to prevent dying if you are "out of the world"
		public static void EXTEND_WORLD_BOUNDARY_FOR_PLAYER(float x, float y, float z) { Invoke(0x5006D96C995A5827, V(x), V(y), V(z)); }
		public static void RESET_WORLD_BOUNDARY_FOR_PLAYER() { Invoke(0xDA1DF03D5A315F4E); }
		// Returns true if the player is riding a train.
		public static bool IS_PLAYER_RIDING_TRAIN(Player player) { return Invoke<bool>(0x4EC12697209F2196, V(player)); }
		public static bool HAS_PLAYER_LEFT_THE_WORLD(Player player) { return Invoke<bool>(0xD55DDFB47991A294, V(player)); }
		public static void SET_PLAYER_LEAVE_PED_BEHIND(Player player, bool toggle) { Invoke(0xFF300C7649724A0B, V(player), V(toggle)); }
		// p1 was always 5.
		// p4 was always false.
		public static void SET_PLAYER_PARACHUTE_VARIATION_OVERRIDE(Player player, int p1, Any p2, Any p3, bool p4) { Invoke(0xD9284A8C0D48352C, V(player), V(p1), V(p2), V(p3), V(p4)); }
		public static void CLEAR_PLAYER_PARACHUTE_VARIATION_OVERRIDE(Player player) { Invoke(0x0F4CC924CF8C7B21, V(player)); }
		public static void SET_PLAYER_PARACHUTE_MODEL_OVERRIDE(Player player, Hash model) { Invoke(0x977DB4641F6FC3DB, V(player), V(model)); }
		public static void SET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(Player player, Hash model) { Invoke(0x0764486AEDE748DB, V(player), V(model)); }
		public static Hash GET_PLAYER_PARACHUTE_MODEL_OVERRIDE(Player player) { return Invoke<Hash>(0xC219887CA3E65C41, V(player)); }
		public static Hash GET_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(Player player) { return Invoke<Hash>(0x37FAAA68DCA9D08D, V(player)); }
		public static void CLEAR_PLAYER_PARACHUTE_MODEL_OVERRIDE(Player player) { Invoke(0x8753997EB5F6EE3F, V(player)); }
		public static void CLEAR_PLAYER_RESERVE_PARACHUTE_MODEL_OVERRIDE(Player player) { Invoke(0x290D248E25815AE8, V(player)); }
		public static void SET_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(Player player, Hash model) { Invoke(0xDC80A4C2F18A2B64, V(player), V(model)); }
		public static void CLEAR_PLAYER_PARACHUTE_PACK_MODEL_OVERRIDE(Player player) { Invoke(0x10C54E4389C12B42, V(player)); }
		public static void DISABLE_PLAYER_VEHICLE_REWARDS(Player player) { Invoke(0xC142BE3BB9CE125F, V(player)); }
		public static void SET_PLAYER_SPECTATED_VEHICLE_RADIO_OVERRIDE(bool p0) { Invoke(0x2F7CEB6520288061, V(p0)); }
		public static void SET_PLAYER_BLUETOOTH_STATE(Player player, bool state) { Invoke(0x5DC40A8869C22141, V(player), V(state)); }
		public static bool IS_PLAYER_BLUETOOTH_ENABLE(Player player) { return Invoke<bool>(0x65FAEE425DE637B0, V(player)); }
		public static void DISABLE_CAMERA_VIEW_MODE_CYCLE(Player player) { Invoke(0x5501B7A5CDB79D37, V(player)); }
		public static int GET_PLAYER_FAKE_WANTED_LEVEL(Player player) { return Invoke<int>(0x56105E599CAB0EFA, V(player)); }
		public static void SET_PLAYER_CAN_DAMAGE_PLAYER(Player player1, Player player2, bool toggle) { Invoke(0x55FCC0C390620314, V(player1), V(player2), V(toggle)); }
		public static void SET_APPLY_WAYPOINT_OF_PLAYER(Player player, int hudColor) { Invoke(0x2382AB11450AE7BA, V(player), V(hudColor)); }
		public static bool IS_PLAYER_VEHICLE_WEAPON_TOGGLED_TO_NON_HOMING(Any p0) { return Invoke<bool>(0x6E4361FF3E8CD7CA, V(p0)); }
		// Unsets playerPed+330 if the current weapon has certain flags.
		public static void SET_PLAYER_VEHICLE_WEAPON_TO_NON_HOMING(Any p0) { Invoke(0x237440E46D918649, V(p0)); }
		public static void SET_PLAYER_HOMING_DISABLED_FOR_ALL_VEHICLE_WEAPONS(Any p0, Any p1) { Invoke(0xEE4EBDD2593BA844, V(p0), V(p1)); }
		public static void ADD_PLAYER_TARGETABLE_ENTITY(Player player, Entity entity) { Invoke(0x9097EB6D4BB9A12A, V(player), V(entity)); }
		public static void REMOVE_PLAYER_TARGETABLE_ENTITY(Player player, Entity entity) { Invoke(0x9F260BFB59ADBCA3, V(player), V(entity)); }
		public static void SET_PLAYER_PREVIOUS_VARIATION_DATA(Player player, int p1, int p2, Any p3, Any p4, Any p5) { Invoke(0x7BAE68775557AE0B, V(player), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		// Resets values set by SET_SCRIPT_FIRE_POSITION
		public static void REMOVE_SCRIPT_FIRE_POSITION() { Invoke(0x7148E0F43D11F0D9); }
		public static void SET_SCRIPT_FIRE_POSITION(float coordX, float coordY, float coordZ) { Invoke(0x70A382ADEC069DD3, V(coordX), V(coordY), V(coordZ)); }




		public static void REPLAY_START_EVENT(int p0) { Invoke(0x48621C9FCA3EBD28, V(p0)); }
		public static void REPLAY_STOP_EVENT() { Invoke(0x81CBAE94390F9F89); }
		public static void REPLAY_CANCEL_EVENT() { Invoke(0x13B350B8AD0EEE10); }
		public static void REPLAY_RECORD_BACK_FOR_TIME(float p0, float p1, int p2) { Invoke(0x293220DA1B46CEBC, V(p0), V(p1), V(p2)); }
		// -This function appears to be deprecated/ unused. Tracing the call internally leads to a _nullsub -
		// 
		// first one seems to be a string of a mission name, second one seems to be a bool/toggle
		// 
		// p1 was always 0.
		// 
		public static void REPLAY_CHECK_FOR_EVENT_THIS_FRAME(string missionNameLabel, Any p1) { Invoke(0x208784099002BC30, V(missionNameLabel), V(p1)); }
		// This disable the recording feature and has to be called every frame.
		public static void REPLAY_PREVENT_RECORDING_THIS_FRAME() { Invoke(0xEB2D525B57F42B40); }
		public static void REPLAY_RESET_EVENT_INFO() { Invoke(0xF854439EFBB3B583); }
		// This will disable the ability to make camera changes in R* Editor.
		public static void REPLAY_DISABLE_CAMERA_MOVEMENT_THIS_FRAME() { Invoke(0xAF66DCEE6609B148); }
		// Does nothing (it's a nullsub).
		public static void RECORD_GREATEST_MOMENT(int p0, int p1, int p2) { Invoke(0x66972397E0757E7A, V(p0), V(p1), V(p2)); }
		// Starts recording a replay.
		// If mode is 0, turns on action replay.
		// If mode is 1, starts recording.
		// If already recording a replay, does nothing.
		public static void START_REPLAY_RECORDING(int mode) { Invoke(0xC3AC2FFF9612AC81, V(mode)); }
		// Stops recording and saves the recorded clip.
		public static void STOP_REPLAY_RECORDING() { Invoke(0x071A5197D6AFC8B3); }
		// Stops recording and discards the recorded clip.
		public static void CANCEL_REPLAY_RECORDING() { Invoke(0x88BB3507ED41A240); }
		public static bool SAVE_REPLAY_RECORDING() { return Invoke<bool>(0x644546EC5287471B); }
		// Checks if you're recording, returns TRUE when you start recording (F1) or turn on action replay (F2)
		// 
		// mov al, cs:g_bIsRecordingGameplay // byte_141DD0CD0 in b944
		// retn
		public static bool IS_REPLAY_RECORDING() { return Invoke<bool>(0x1897CA71995A90B4); }
		public static bool IS_REPLAY_INITIALIZED() { return Invoke<bool>(0xDF4B952F7D381B95); }
		public static bool IS_REPLAY_AVAILABLE() { return Invoke<bool>(0x4282E08174868BE3); }
		public static bool IS_REPLAY_RECORD_SPACE_AVAILABLE(bool p0) { return Invoke<bool>(0x33D47E85B476ABCD, V(p0)); }




		// Does nothing (it's a nullsub).
		public static void REGISTER_EFFECT_FOR_REPLAY_EDITOR(string p0, bool p1) { Invoke(0x7E2BD3EF6C205F09, V(p0), V(p1)); }
		// Returns a bool if interior rendering is disabled, if yes, all "normal" rendered interiors are invisible
		public static bool REPLAY_SYSTEM_HAS_REQUESTED_A_SCRIPT_CLEANUP() { return Invoke<bool>(0x95AB8B5C992C7B58); }
		// Disables some other rendering (internal)
		public static void SET_SCRIPTS_HAVE_CLEANED_UP_FOR_REPLAY_SYSTEM() { Invoke(0x5AD3932DAEB1E5D3); }
		public static void SET_REPLAY_SYSTEM_PAUSED_FOR_SAVE(bool p0) { Invoke(0xE058175F8EAFE79A, V(p0)); }
		// Sets (almost, not sure) all Rockstar Editor values (bIsRecording etc) to 0.
		public static void REPLAY_CONTROL_SHUTDOWN() { Invoke(0x3353D13F09307691); }
		// Please note that you will need to call DO_SCREEN_FADE_IN after exiting the Rockstar Editor when you call this.
		public static void ACTIVATE_ROCKSTAR_EDITOR(int p0) { Invoke(0x49DA8145672B2725, V(p0)); }




		public static bool SAVEMIGRATION_IS_MP_ENABLED() { return Invoke<bool>(0x84B418E93894AC1C); }
		public static bool SAVEMIGRATION_MP_REQUEST_ACCOUNTS() { return Invoke<bool>(0x85F41F9225D08C72); }
		public static int SAVEMIGRATION_MP_GET_ACCOUNTS_STATUS() { return Invoke<int>(0xC8CB5999919EA2CA); }
		public static int SAVEMIGRATION_MP_NUM_ACCOUNTS() { return Invoke<int>(0x77A16200E18E0C55); }
		public static bool SAVEMIGRATION_MP_GET_ACCOUNT(int p0, Any* p1) { return Invoke<bool>(0xFCE2747EEF1D05FC, V(p0), V(p1)); }
		public static bool SAVEMIGRATION_MP_REQUEST_STATUS() { return Invoke<bool>(0xE5E9746A66359F9D); }
		public static int SAVEMIGRATION_MP_GET_STATUS() { return Invoke<int>(0x690B76BD2763E068); }




		public static void REQUEST_SCRIPT(string scriptName) { Invoke(0x6EB5F71AA68F2E8E, V(scriptName)); }
		public static void SET_SCRIPT_AS_NO_LONGER_NEEDED(string scriptName) { Invoke(0xC90D2DCACD56184C, V(scriptName)); }
		// Returns if a script has been loaded into the game. Used to see if a script was loaded after requesting.
		public static bool HAS_SCRIPT_LOADED(string scriptName) { return Invoke<bool>(0xE6CC9F3BA0FB9EF1, V(scriptName)); }
		public static bool DOES_SCRIPT_EXIST(string scriptName) { return Invoke<bool>(0xFC04745FBE67C19A, V(scriptName)); }
		// formerly _REQUEST_STREAMED_SCRIPT
		public static void REQUEST_SCRIPT_WITH_NAME_HASH(Hash scriptHash) { Invoke(0xD62A67D26D9653E6, V(scriptHash)); }
		public static void SET_SCRIPT_WITH_NAME_HASH_AS_NO_LONGER_NEEDED(Hash scriptHash) { Invoke(0xC5BC038960E9DB27, V(scriptHash)); }
		public static bool HAS_SCRIPT_WITH_NAME_HASH_LOADED(Hash scriptHash) { return Invoke<bool>(0x5F0F0C783EB16C04, V(scriptHash)); }
		public static bool DOES_SCRIPT_WITH_NAME_HASH_EXIST(Hash scriptHash) { return Invoke<bool>(0xF86AA3C56BA31381, V(scriptHash)); }
		public static void TERMINATE_THREAD(int threadId) { Invoke(0xC8B189ED9138BCD4, V(threadId)); }
		public static bool IS_THREAD_ACTIVE(int threadId) { return Invoke<bool>(0x46E9AE36D8FA6417, V(threadId)); }
		public static byte* GET_NAME_OF_SCRIPT_WITH_THIS_ID(int threadId) { return PInvoke<byte>(0x05A42BA9FC8DA96B, V(threadId)); }
		// Starts a new iteration of the current threads.
		// Call this first, then SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID (0x30B4FA1C82DD4B9F)
		public static void SCRIPT_THREAD_ITERATOR_RESET() { Invoke(0xDADFADA5A20143A8); }
		// If the function returns 0, the end of the iteration has been reached.
		public static int SCRIPT_THREAD_ITERATOR_GET_NEXT_THREAD_ID() { return Invoke<int>(0x30B4FA1C82DD4B9F); }
		public static int GET_ID_OF_THIS_THREAD() { return Invoke<int>(0xC30338E8088E2E21); }
		public static void TERMINATE_THIS_THREAD() { Invoke(0x1090044AD1DA76FA); }
		// Gets the number of instances of the specified script is currently running.
		// 
		// Actually returns numRefs - 1.
		// if (program)
		// 	v3 = rage::scrProgram::GetNumRefs(program) - 1;
		// return v3;
		public static int GET_NUMBER_OF_THREADS_RUNNING_THE_SCRIPT_WITH_THIS_HASH(Hash scriptHash) { return Invoke<int>(0x2C83A9DA6BFFC4F9, V(scriptHash)); }
		public static byte* GET_THIS_SCRIPT_NAME() { return PInvoke<byte>(0x442E0A7EDE4A738A); }
		public static Hash GET_HASH_OF_THIS_SCRIPT_NAME() { return Invoke<Hash>(0x8A1C8B1738FFE87E); }
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		public static int GET_NUMBER_OF_EVENTS(int eventGroup) { return Invoke<int>(0x5F92A689A06620AA, V(eventGroup)); }
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		public static bool GET_EVENT_EXISTS(int eventGroup, int eventIndex) { return Invoke<bool>(0x936E6168A9BCEDB5, V(eventGroup), V(eventIndex)); }
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		public static int GET_EVENT_AT_INDEX(int eventGroup, int eventIndex) { return Invoke<int>(0xD8F66A3A60C62153, V(eventGroup), V(eventIndex)); }
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		// 
		// Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
		public static bool GET_EVENT_DATA(int eventGroup, int eventIndex, Any* eventData, int eventDataSize) { return Invoke<bool>(0x2902843FCD2B2D79, V(eventGroup), V(eventIndex), V(eventData), V(eventDataSize)); }
		// eventGroup: 0 = SCRIPT_EVENT_QUEUE_AI (CEventGroupScriptAI), 1 = SCRIPT_EVENT_QUEUE_NETWORK (CEventGroupScriptNetwork)
		// 
		// Note: eventDataSize is NOT the size in bytes, it is the size determined by the SIZE_OF operator (RAGE Script operator, not C/C++ sizeof). That is, the size in bytes divided by 8 (script variables are always 8-byte aligned!).
		// 
		// playerBits (also known as playersToBroadcastTo) is a bitset that indicates which players this evt should be sent to. In order to send the evt to specific players only, use (1 << playerIndex). Set all bits if it should be broadcast to all players.
		public static void TRIGGER_SCRIPT_EVENT(int eventGroup, Any* eventData, int eventDataSize, int playerBits) { Invoke(0x5AE99C571D5BBE5D, V(eventGroup), V(eventData), V(eventDataSize), V(playerBits)); }
		public static void SHUTDOWN_LOADING_SCREEN() { Invoke(0x078EBE9809CCD637); }
		public static void SET_NO_LOADING_SCREEN(bool toggle) { Invoke(0x5262CC1995D07E09, V(toggle)); }
		public static bool GET_NO_LOADING_SCREEN() { return Invoke<bool>(0x18C1270EA7F199BC); }
		public static void COMMIT_TO_LOADINGSCREEN_SELCTION() { Invoke(0xB1577667C3708F9B); }
		// Returns true if bit 0 in GtaThread+0x154 is set.
		public static bool BG_IS_EXITFLAG_SET() { return Invoke<bool>(0x836B62713E0534CA); }
		// Sets bit 1 in GtaThread+0x154
		public static void BG_SET_EXITFLAG_RESPONSE() { Invoke(0x760910B49D2B98EA); }
		// Hashed version of BG_START_CONTEXT.
		public static void BG_START_CONTEXT_HASH(Hash contextHash) { Invoke(0x75B18E49607874C7, V(contextHash)); }
		// Hashed version of BG_END_CONTEXT.
		public static void BG_END_CONTEXT_HASH(Hash contextHash) { Invoke(0x107E5CC7CA942BC1, V(contextHash)); }
		// Inserts the given context into the background scripts context map.
		public static void BG_START_CONTEXT(string contextName) { Invoke(0x9D5A25BADB742ACD, V(contextName)); }
		// Deletes the given context from the background scripts context map.
		public static void BG_END_CONTEXT(string contextName) { Invoke(0xDC2BACD920D0A0DD, V(contextName)); }
		public static bool BG_DOES_LAUNCH_PARAM_EXIST(int scriptIndex, string p1) { return Invoke<bool>(0x0F6F1EBBC4E1D5E6, V(scriptIndex), V(p1)); }
		public static int BG_GET_LAUNCH_PARAM_VALUE(int scriptIndex, string p1) { return Invoke<int>(0x22E21FBCFC88C149, V(scriptIndex), V(p1)); }
		public static int BG_GET_SCRIPT_ID_FROM_NAME_HASH(Hash p0) { return Invoke<int>(0x829CD22E043A2577, V(p0)); }
		// New variant of SEND_TU_SCRIPT_EVENT that automatically initializes the evt data header.
		// See TRIGGER_SCRIPT_EVENT for more info.
		public static void _SEND_TU_SCRIPT_EVENT_NEW(int eventGroup, Any* eventData, int eventDataSize, int playerBits, Hash eventType) { Invoke(0x71A6F836422FDD2B, V(eventGroup), V(eventData), V(eventDataSize), V(playerBits), V(eventType)); }




		// Registers a protected variable that will be checked for modifications by the anticheat
		public static void REGISTER_SCRIPT_VARIABLE(Any* variable) { Invoke(0x40EB1EFD921822BC, V(variable)); }
		public static void UNREGISTER_SCRIPT_VARIABLE(Any* variable) { Invoke(0x340A36A700E99699, V(variable)); }
		public static void FORCE_CHECK_SCRIPT_VARIABLES() { Invoke(0x8E580AB902917360); }




		// Asynchronously starts a line-of-sight (raycast) world probe shape test.
		// 
		// Use the handle with 0x3D87450E15D98694 or 0x65287525D951F6BE until it returns 0 or 2.
		// 
		// p8 is a bit mask with bits 1, 2 and/or 4, relating to collider types; 4 should usually be used.
		public static int START_SHAPE_TEST_LOS_PROBE(float x1, float y1, float z1, float x2, float y2, float z2, int flags, Entity entity, int p8) { return Invoke<int>(0x7EE9F5D83DD4F90E, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(flags), V(entity), V(p8)); }
		// Does the same as 0x7EE9F5D83DD4F90E, except blocking until the shape test completes.
		public static int START_EXPENSIVE_SYNCHRONOUS_SHAPE_TEST_LOS_PROBE(float x1, float y1, float z1, float x2, float y2, float z2, int flags, Entity entity, int p8) { return Invoke<int>(0x377906D8A31E5586, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(flags), V(entity), V(p8)); }
		public static int START_SHAPE_TEST_BOUNDING_BOX(Entity entity, int flags1, int flags2) { return Invoke<int>(0x052837721A854EC7, V(entity), V(flags1), V(flags2)); }
		public static int START_SHAPE_TEST_BOX(float x, float y, float z, float dimX, float dimY, float dimZ, float rotX, float rotY, float rotZ, Any p9, int flags, Entity entity, Any p12) { return Invoke<int>(0xFE466162C4401D18, V(x), V(y), V(z), V(dimX), V(dimY), V(dimZ), V(rotX), V(rotY), V(rotZ), V(p9), V(flags), V(entity), V(p12)); }
		public static int START_SHAPE_TEST_BOUND(Entity entity, int flags1, int flags2) { return Invoke<int>(0x37181417CE7C8900, V(entity), V(flags1), V(flags2)); }
		// Raycast from point to point, where the ray has a radius. 
		// 
		// flags:
		// vehicles=10
		// peds =12
		// 
		// Iterating through flags yields many ped / vehicle/ obj combinations
		// 
		// p9 = 7, but no idea what it does
		// 
		// Entity is an entity to ignore
		public static int START_SHAPE_TEST_CAPSULE(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, Entity entity, int p9) { return Invoke<int>(0x28579D1B8F8AAC80, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(radius), V(flags), V(entity), V(p9)); }
		public static int START_SHAPE_TEST_SWEPT_SPHERE(float x1, float y1, float z1, float x2, float y2, float z2, float radius, int flags, Entity entity, Any p9) { return Invoke<int>(0xE6AC6C45FBE83004, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(radius), V(flags), V(entity), V(p9)); }
		// Returns a ShapeTest handle that can be used with GET_SHAPE_TEST_RESULT.
		// 
		// In its only usage in game scripts its called with flag set to 511, entity to player_ped_id and flag2 set to 7
		public static int START_SHAPE_TEST_MOUSE_CURSOR_LOS_PROBE(Vector3* pVec1, Vector3* pVec2, int flag, Entity entity, int flag2) { return Invoke<int>(0xFF6BE494C7987F34, V(pVec1), V(pVec2), V(flag), V(entity), V(flag2)); }
		// Returns the result of a shape test: 0 if the handle is invalid, 1 if the shape test is still pending, or 2 if the shape test has completed, and the handle should be invalidated.
		// 
		// When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
		public static int GET_SHAPE_TEST_RESULT(int shapeTestHandle, bool* hit, Vector3* endCoords, Vector3* surfaceNormal, Entity* entityHit) { return Invoke<int>(0x3D87450E15D98694, V(shapeTestHandle), V(hit), V(endCoords), V(surfaceNormal), V(entityHit)); }
		// Returns the result of a shape test, also returning the material of any touched surface.
		// 
		// When used with an asynchronous shape test, this native should be looped until returning 0 or 2, after which the handle is invalidated.
		// 
		// Unless the return value is 2, the other return values are undefined.
		public static int GET_SHAPE_TEST_RESULT_INCLUDING_MATERIAL(int shapeTestHandle, bool* hit, Vector3* endCoords, Vector3* surfaceNormal, Hash* materialHash, Entity* entityHit) { return Invoke<int>(0x65287525D951F6BE, V(shapeTestHandle), V(hit), V(endCoords), V(surfaceNormal), V(materialHash), V(entityHit)); }
		// Invalidates the entity handle passed by removing the fwScriptGuid from the entity. This should be used when receiving an ambient entity from shape testing natives, but can also be used for other natives returning an 'irrelevant' entity handle.
		public static void RELEASE_SCRIPT_GUID_FROM_ENTITY(Entity entityHit) { Invoke(0x2B3334BCA57CD799, V(entityHit)); }




		public static int SC_INBOX_GET_TOTAL_NUM_MESSAGES() { return Invoke<int>(0x03A93FF1A2CA0864); }
		public static Hash SC_INBOX_GET_MESSAGE_TYPE_AT_INDEX(int msgIndex) { return Invoke<Hash>(0xBB8EA16ECBC976C4, V(msgIndex)); }
		public static bool SC_INBOX_GET_MESSAGE_IS_READ_AT_INDEX(int msgIndex) { return Invoke<bool>(0x93028F1DB42BFD08, V(msgIndex)); }
		public static bool SC_INBOX_SET_MESSAGE_AS_READ_AT_INDEX(int msgIndex) { return Invoke<bool>(0x2C015348CF19CA1D, V(msgIndex)); }
		public static bool SC_INBOX_MESSAGE_GET_DATA_INT(int p0, string context, int* outV) { return Invoke<bool>(0xA00EFE4082C4056E, V(p0), V(context), V(outV)); }
		public static bool SC_INBOX_MESSAGE_GET_DATA_BOOL(int p0, string p1) { return Invoke<bool>(0xFFE5C16F402D851D, V(p0), V(p1)); }
		public static bool SC_INBOX_MESSAGE_GET_DATA_STRING(int p0, string context, char* outV) { return Invoke<bool>(0x7572EF42FC6A9B6D, V(p0), V(context), V(outV)); }
		public static bool SC_INBOX_MESSAGE_DO_APPLY(int p0) { return Invoke<bool>(0x9A2C8064B6C1E41A, V(p0)); }
		public static byte* SC_INBOX_MESSAGE_GET_RAW_TYPE_AT_INDEX(int p0) { return PInvoke<byte>(0xF3E31D16CBDCB304, V(p0)); }
		public static void SC_INBOX_MESSAGE_PUSH_GAMER_T0_RECIP_LIST(Any* gamerHandle) { Invoke(0xDA024BDBD600F44A, V(gamerHandle)); }
		public static void SC_INBOX_SEND_UGCSTATUPDATE_TO_RECIP_LIST(Any* data) { Invoke(0xA68D3D229F4F3B06, V(data)); }
		public static bool SC_INBOX_MESSAGE_GET_UGCDATA(int p0, Any* p1) { return Invoke<bool>(0x69D82604A1A5A254, V(p0), V(p1)); }
		public static bool SC_INBOX_GET_BOUNTY_DATA_AT_INDEX(int index, Any* outData) { return Invoke<bool>(0x87E0052F08BD64E6, V(index), V(outData)); }
		public static void SC_EMAIL_RETRIEVE_EMAILS(int offset, int limit) { Invoke(0x040ADDCBAFA1018A, V(offset), V(limit)); }
		public static int SC_EMAIL_GET_RETRIEVAL_STATUS() { return Invoke<int>(0x16DA8172459434AA); }
		public static int SC_EMAIL_GET_NUM_RETRIEVED_EMAILS() { return Invoke<int>(0x7DB18CA8CAD5B098); }
		public static bool SC_EMAIL_GET_EMAIL_AT_INDEX(int p0, Any* p1) { return Invoke<bool>(0x4737980E8A283806, V(p0), V(p1)); }
		public static void _SC_EMAIL_MARKETING_EMAIL_OPENED(int index, Hash type) { Invoke(0x69AA35F3F391CDBA, V(index), V(type)); }
		public static void SC_EMAIL_DELETE_EMAILS(Any* p0, Any p1) { Invoke(0x44ACA259D67651DB, V(p0), V(p1)); }
		public static void SC_EMAIL_MESSAGE_PUSH_GAMER_TO_RECIP_LIST(Any* gamerHandle) { Invoke(0x2330C12A7A605D16, V(gamerHandle)); }
		public static void SC_EMAIL_MESSAGE_CLEAR_RECIP_LIST() { Invoke(0x55DF6DB45179236E); }
		public static void SC_EMAIL_SEND_EMAIL(string p0) { Invoke(0x116FB94DC4B79F17, V(p0)); }
		public static bool SC_EMAIL_SET_CURRENT_EMAIL_TAG(Any p0) { return Invoke<bool>(0x07DBD622D9533857, V(p0)); }
		public static void SC_CACHE_NEW_ROCKSTAR_MSGS(bool toggle) { Invoke(0xBFA0A56A817C6C7D, V(toggle)); }
		public static bool SC_HAS_NEW_ROCKSTAR_MSG() { return Invoke<bool>(0xBC1CC91205EC8D6E); }
		public static byte* SC_GET_NEW_ROCKSTAR_MSG() { return PInvoke<byte>(0xDF649C4E9AFDD788); }
		public static bool SC_PRESENCE_ATTR_SET_INT(Hash attrHash, int value) { return Invoke<bool>(0x1F1E9682483697C7, V(attrHash), V(value)); }
		public static bool SC_PRESENCE_ATTR_SET_FLOAT(Hash attrHash, float value) { return Invoke<bool>(0xC4C4575F62534A24, V(attrHash), V(value)); }
		public static bool SC_PRESENCE_ATTR_SET_STRING(Hash attrHash, string value) { return Invoke<bool>(0x287F1F75D2803595, V(attrHash), V(value)); }
		public static bool SC_PRESENCE_SET_ACTIVITY_RATING(Any p0, float p1) { return Invoke<bool>(0x487912FD248EFDDF, V(p0), V(p1)); }
		public static bool SC_GAMERDATA_GET_INT(string name, int* value) { return Invoke<bool>(0xC85A7127E7AD02AA, V(name), V(value)); }
		public static bool SC_GAMERDATA_GET_FLOAT(string name, float* value) { return Invoke<bool>(0xA770C8EEC6FB2AC5, V(name), V(value)); }
		public static bool SC_GAMERDATA_GET_BOOL(string name) { return Invoke<bool>(0x8416FE4E4629D7D7, V(name)); }
		public static bool SC_GAMERDATA_GET_STRING(string name, char* value) { return Invoke<bool>(0x7FFCBFEE44ECFABF, V(name), V(value)); }
		public static bool SC_GAMERDATA_GET_ACTIVE_XP_BONUS(float* value) { return Invoke<bool>(0x2D874D4AE612A65F, V(value)); }
		// Starts a task to check an entered string for profanity on the ROS/Social Club services.
		// 
		// See also: 1753344C770358AE, 82E4A58BABC15AE7.
		public static bool SC_PROFANITY_CHECK_STRING(string str, int* token) { return Invoke<bool>(0x75632C5ECD7ED843, V(str), V(token)); }
		public static bool SC_PROFANITY_CHECK_STRING_UGC(string str, int* token) { return Invoke<bool>(0xEB2BF817463DFA28, V(str), V(token)); }
		public static bool SC_PROFANITY_GET_CHECK_IS_VALID(int token) { return Invoke<bool>(0x1753344C770358AE, V(token)); }
		public static bool SC_PROFANITY_GET_CHECK_IS_PENDING(int token) { return Invoke<bool>(0x82E4A58BABC15AE7, V(token)); }
		public static bool SC_PROFANITY_GET_STRING_PASSED(int token) { return Invoke<bool>(0x85535ACF97FC0969, V(token)); }
		public static int SC_PROFANITY_GET_STRING_STATUS(int token) { return Invoke<int>(0x930DE22F07B1CCE3, V(token)); }
		// Retrieves the profane part of the string with max size of 128.
		// Returns true if profane term was retrieved.
		public static bool SC_PROFANITY_GET_PROFANE_WORD(int token, char* outProfaneWord) { return Invoke<bool>(0x75CC8931A11128C9, V(token), V(outProfaneWord)); }
		public static bool SC_LICENSEPLATE_CHECK_STRING(string p0, int* p1) { return Invoke<bool>(0xF6BAAAF762E1BF40, V(p0), V(p1)); }
		public static bool SC_LICENSEPLATE_GET_CHECK_IS_VALID(Any p0) { return Invoke<bool>(0xF22CA0FD74B80E7A, V(p0)); }
		public static bool SC_LICENSEPLATE_GET_CHECK_IS_PENDING(Any p0) { return Invoke<bool>(0x9237E334F6E43156, V(p0)); }
		public static int SC_LICENSEPLATE_GET_COUNT(int token) { return Invoke<int>(0x700569DBA175A77C, V(token)); }
		public static byte* SC_LICENSEPLATE_GET_PLATE(int token, int plateIndex) { return PInvoke<byte>(0x1D4446A62D35B0D0, V(token), V(plateIndex)); }
		public static byte* SC_LICENSEPLATE_GET_PLATE_DATA(int token, int plateIndex) { return PInvoke<byte>(0x2E89990DDFF670C3, V(token), V(plateIndex)); }
		public static bool SC_LICENSEPLATE_SET_PLATE_DATA(string oldPlateText, string newPlateText, Any* plateData) { return Invoke<bool>(0xD0EE05FE193646EA, V(oldPlateText), V(newPlateText), V(plateData)); }
		public static bool SC_LICENSEPLATE_ADD(string plateText, Any* plateData, int* token) { return Invoke<bool>(0x1989C6E6F67E76A8, V(plateText), V(plateData), V(token)); }
		public static bool SC_LICENSEPLATE_GET_ADD_IS_PENDING(int token) { return Invoke<bool>(0x07C61676E5BB52CD, V(token)); }
		public static int SC_LICENSEPLATE_GET_ADD_STATUS(int token) { return Invoke<int>(0x8147FFF6A718E1AD, V(token)); }
		public static bool SC_LICENSEPLATE_ISVALID(string plateText, int* token) { return Invoke<bool>(0x0F73393BAC7E6730, V(plateText), V(token)); }
		public static bool SC_LICENSEPLATE_GET_ISVALID_IS_PENDING(int token) { return Invoke<bool>(0xD302E99EDF0449CF, V(token)); }
		public static int SC_LICENSEPLATE_GET_ISVALID_STATUS(int token) { return Invoke<int>(0x5C4EBFFA98BDB41C, V(token)); }
		public static bool SC_COMMUNITY_EVENT_IS_ACTIVE() { return Invoke<bool>(0xFF8F3A92B75ED67A); }
		public static int SC_COMMUNITY_EVENT_GET_EVENT_ID() { return Invoke<int>(0x4ED9C8D6DA297639); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT(string p0, int* p1) { return Invoke<bool>(0x710BCDA8071EDED1, V(p0), V(p1)); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT(string p0, float* p1) { return Invoke<bool>(0x50A8A36201DBF83E, V(p0), V(p1)); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING(string p0, char* p1) { return Invoke<bool>(0x9DE5D2F723575ED0, V(p0), V(p1)); }
		public static bool SC_COMMUNITY_EVENT_GET_DISPLAY_NAME(char* p0) { return Invoke<bool>(0xC2C97EA97711D1AE, V(p0)); }
		public static bool SC_COMMUNITY_EVENT_IS_ACTIVE_FOR_TYPE(string p0) { return Invoke<bool>(0x450819D8CF90C416, V(p0)); }
		public static int SC_COMMUNITY_EVENT_GET_EVENT_ID_FOR_TYPE(string p0) { return Invoke<int>(0x4A7D6E727F941747, V(p0)); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_FOR_TYPE(string p0, int* p1, string p2) { return Invoke<bool>(0xE75A4A2E5E316D86, V(p0), V(p1), V(p2)); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_FOR_TYPE(string p0, float* p1, string p2) { return Invoke<bool>(0x2570E26BE63964E3, V(p0), V(p1), V(p2)); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_FOR_TYPE(string p0, char* p1, string p2) { return Invoke<bool>(0x1D12A56FC95BE92E, V(p0), V(p1), V(p2)); }
		public static bool SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_FOR_TYPE(char* p0, string p1) { return Invoke<bool>(0x33DF47CC0642061B, V(p0), V(p1)); }
		public static bool SC_COMMUNITY_EVENT_IS_ACTIVE_BY_ID(int p0) { return Invoke<bool>(0xA468E0BE12B12C70, V(p0)); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_INT_BY_ID(int p0, string p1, int* p2) { return Invoke<bool>(0x8CC469AB4D349B7C, V(p0), V(p1), V(p2)); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_FLOAT_BY_ID(int p0, string p1, float* p2) { return Invoke<bool>(0xC5A35C73B68F3C49, V(p0), V(p1), V(p2)); }
		public static bool SC_COMMUNITY_EVENT_GET_EXTRA_DATA_STRING_BY_ID(int p0, string p1, char* p2) { return Invoke<bool>(0x699E4A5C8C893A18, V(p0), V(p1), V(p2)); }
		public static bool SC_COMMUNITY_EVENT_GET_DISPLAY_NAME_BY_ID(int p0, char* p1) { return Invoke<bool>(0x19853B5B17D77BCA, V(p0), V(p1)); }
		public static bool SC_TRANSITION_NEWS_SHOW(Any p0) { return Invoke<bool>(0x6BFB12CE158E3DD4, V(p0)); }
		public static bool SC_TRANSITION_NEWS_SHOW_TIMED(Any p0, Any p1) { return Invoke<bool>(0xFE4C1D0D3B9CC17E, V(p0), V(p1)); }
		public static bool SC_TRANSITION_NEWS_SHOW_NEXT_ITEM() { return Invoke<bool>(0xD8122C407663B995); }
		public static bool SC_TRANSITION_NEWS_HAS_EXTRA_DATA_TU() { return Invoke<bool>(0x3001BEF2FECA3680); }
		public static bool SC_TRANSITION_NEWS_GET_EXTRA_DATA_INT_TU(string p0, int* p1) { return Invoke<bool>(0x92DA6E70EF249BD1, V(p0), V(p1)); }
		public static void SC_TRANSITION_NEWS_END() { Invoke(0x675721C9F644D161); }
		public static bool SC_PAUSE_NEWS_INIT_STARTER_PACK(Any p0) { return Invoke<bool>(0xE4F6E8D07A2F0F51, V(p0)); }
		// Fills some 0x30 sized struct
		public static bool SC_PAUSE_NEWS_GET_PENDING_STORY(Any p0) { return Invoke<bool>(0x8A4416C0DB05FA66, V(p0)); }
		public static void SC_PAUSE_NEWS_SHUTDOWN() { Invoke(0xEA95C0853A27888E); }
		// Returns the nickname of the logged-in Rockstar Social Club account.
		public static byte* SC_ACCOUNT_INFO_GET_NICKNAME() { return PInvoke<byte>(0x198D161F458ECC7F); }
		public static bool SC_ACHIEVEMENT_INFO_STATUS(int* p0) { return Invoke<bool>(0x225798743970412B, V(p0)); }
		// Same as HAS_ACHIEVEMENT_BEEN_PASSED
		public static bool SC_HAS_ACHIEVEMENT_BEEN_PASSED(int achievementId) { return Invoke<bool>(0x418DC16FAE452C1C, V(achievementId)); }




		// Example:
		// 
		// for (v_2 = 0; v_2 <= 4; v_2 += 1) {
		//     STATS::STAT_CLEAR_SLOT_FOR_RELOAD(v_2);
		// }
		public static bool STAT_CLEAR_SLOT_FOR_RELOAD(int statSlot) { return Invoke<bool>(0xEB0A72181D4AA4AD, V(statSlot)); }
		public static bool STAT_LOAD(int statSlot) { return Invoke<bool>(0xA651443F437B1CE6, V(statSlot)); }
		public static bool STAT_SAVE(int p0, bool p1, int p2, bool p3) { return Invoke<bool>(0xE07BCA305B82D2FD, V(p0), V(p1), V(p2), V(p3)); }
		public static void STAT_SET_OPEN_SAVETYPE_IN_JOB(int p0) { Invoke(0x5688585E6D563CD8, V(p0)); }
		public static bool STAT_LOAD_PENDING(int statSlot) { return Invoke<bool>(0xA1750FFAFA181661, V(statSlot)); }
		public static bool STAT_SAVE_PENDING() { return Invoke<bool>(0x7D3A583856F2C5AC); }
		public static bool STAT_SAVE_PENDING_OR_REQUESTED() { return Invoke<bool>(0xBBB6AD006F1BBEA3); }
		// p0 is characterSlot? seems range from 0 to 2
		public static bool STAT_DELETE_SLOT(int p0) { return Invoke<bool>(0x49A49BED12794D70, V(p0)); }
		public static bool STAT_SLOT_IS_LOADED(int statSlot) { return Invoke<bool>(0x0D0A9F0E7BD91E3C, V(statSlot)); }
		public static bool STAT_CLOUD_SLOT_LOAD_FAILED(int p0) { return Invoke<bool>(0x7F2C4CDF2E82DF4C, V(p0)); }
		public static int STAT_CLOUD_SLOT_LOAD_FAILED_CODE(Any p0) { return Invoke<int>(0xE496A53BA5F50A56, V(p0)); }
		public static void STAT_SET_BLOCK_SAVES(bool toggle) { Invoke(0xF434A10BA01C37D0, V(toggle)); }
		public static bool STAT_GET_BLOCK_SAVES() { return Invoke<bool>(0x6A7F19756F1A9016); }
		public static bool STAT_CLOUD_SLOT_SAVE_FAILED(Any p0) { return Invoke<bool>(0x7E6946F68A38B74F, V(p0)); }
		public static void STAT_CLEAR_PENDING_SAVES(Any p0) { Invoke(0xA8733668D1047B51, V(p0)); }
		public static bool STAT_LOAD_DIRTY_READ_DETECTED() { return Invoke<bool>(0xECB41AC6AB754401); }
		public static void STAT_CLEAR_DIRTY_READ_DETECTED() { Invoke(0x9B4BD21D69B1E609); }
		public static bool STAT_GET_LOAD_SAFE_TO_PROGRESS_TO_MP_FROM_SP() { return Invoke<bool>(0xC0E0D686DDFC6EAE); }
		// Returns stat hash based on dataType, statIndex/statId and characterSlot. Related to CStatsMpCharacterMappingData
		public static Hash _GET_STAT_HASH_FOR_CHARACTER_STAT(int dataType, int statIndex, int charSlot) { return Invoke<Hash>(0xD69CE161FE614531, V(dataType), V(statIndex), V(charSlot)); }
		// Example:
		//  STATS::STAT_SET_INT(MISC::GET_HASH_KEY("MPPLY_KILLS_PLAYERS"), 1337, true);
		public static bool STAT_SET_INT(Hash statName, int value, bool save) { return Invoke<bool>(0xB3271D7AB655B441, V(statName), V(value), V(save)); }
		// Example:
		//  STATS::STAT_SET_FLOAT(MISC::GET_HASH_KEY("MP0_WEAPON_ACCURACY"), 66.6f, true);
		public static bool STAT_SET_FLOAT(Hash statName, float value, bool save) { return Invoke<bool>(0x4851997F37FE9B3C, V(statName), V(value), V(save)); }
		// Example:
		//  STATS::STAT_SET_BOOL(MISC::GET_HASH_KEY("MPPLY_MELEECHLENGECOMPLETED"), trur, true);
		public static bool STAT_SET_BOOL(Hash statName, bool value, bool save) { return Invoke<bool>(0x4B33C4243DE0C432, V(statName), V(value), V(save)); }
		// The following values have been found in the decompiled scripts:
		// "RC_ABI1"
		// "RC_ABI2"
		// "RC_BA1"
		// "RC_BA2"
		// "RC_BA3"
		// "RC_BA3A"
		// "RC_BA3C"
		// "RC_BA4"
		// "RC_DRE1"
		// "RC_EPS1"
		// "RC_EPS2"
		// "RC_EPS3"
		// "RC_EPS4"
		// "RC_EPS5"
		// "RC_EPS6"
		// "RC_EPS7"
		// "RC_EPS8"
		// "RC_EXT1"
		// "RC_EXT2"
		// "RC_EXT3"
		// "RC_EXT4"
		// "RC_FAN1"
		// "RC_FAN2"
		// "RC_FAN3"
		// "RC_HAO1"
		// "RC_HUN1"
		// "RC_HUN2"
		// "RC_JOS1"
		// "RC_JOS2"
		// "RC_JOS3"
		// "RC_JOS4"
		// "RC_MAU1"
		// "RC_MIN1"
		// "RC_MIN2"
		// "RC_MIN3"
		// "RC_MRS1"
		// "RC_MRS2"
		// "RC_NI1"
		// "RC_NI1A"
		// "RC_NI1B"
		// "RC_NI1C"
		// "RC_NI1D"
		// "RC_NI2"
		// "RC_NI3"
		// "RC_OME1"
		// "RC_OME2"
		// "RC_PA1"
		// "RC_PA2"
		// "RC_PA3"
		// "RC_PA3A"
		// "RC_PA3B"
		// "RC_PA4"
		// "RC_RAM1"
		// "RC_RAM2"
		// "RC_RAM3"
		// "RC_RAM4"
		// "RC_RAM5"
		// "RC_SAS1"
		// "RC_TON1"
		// "RC_TON2"
		// "RC_TON3"
		// "RC_TON4"
		// "RC_TON5"
		public static bool STAT_SET_GXT_LABEL(Hash statName, string value, bool save) { return Invoke<bool>(0x17695002FD8B2AE0, V(statName), V(value), V(save)); }
		// 'value' is a structure to a structure, 'numFields' is how many fields there are in said structure (usually 7).
		// 
		// The structure looks like this:
		// 
		// int year
		// int month
		// int day
		// int hour
		// int minute
		// int second
		// int millisecond
		// 
		// The decompiled scripts use TIME::GET_POSIX_TIME to fill this structure.
		public static bool STAT_SET_DATE(Hash statName, Any* value, int numFields, bool save) { return Invoke<bool>(0x2C29BFB64F4FCBE4, V(statName), V(value), V(numFields), V(save)); }
		public static bool STAT_SET_STRING(Hash statName, string value, bool save) { return Invoke<bool>(0xA87B2335D12531D7, V(statName), V(value), V(save)); }
		public static bool STAT_SET_POS(Hash statName, float x, float y, float z, bool save) { return Invoke<bool>(0xDB283FDE680FE72E, V(statName), V(x), V(y), V(z), V(save)); }
		public static bool STAT_SET_MASKED_INT(Hash statName, int p1, int p2, int p3, bool save) { return Invoke<bool>(0x7BBB1B54583ED410, V(statName), V(p1), V(p2), V(p3), V(save)); }
		public static bool STAT_SET_USER_ID(Hash statName, string value, bool save) { return Invoke<bool>(0x8CDDF1E452BABE11, V(statName), V(value), V(save)); }
		// p1 always true.
		public static bool STAT_SET_CURRENT_POSIX_TIME(Hash statName, bool p1) { return Invoke<bool>(0xC2F84B7F9C4D0C61, V(statName), V(p1)); }
		// p2 appears to always be -1
		// 
		public static bool STAT_GET_INT(Hash statHash, int* outValue, int p2) { return Invoke<bool>(0x767FBC2AC802EF3D, V(statHash), V(outValue), V(p2)); }
		public static bool STAT_GET_FLOAT(Hash statHash, float* outValue, Any p2) { return Invoke<bool>(0xD7AE6C9C9C6AC54C, V(statHash), V(outValue), V(p2)); }
		public static bool STAT_GET_BOOL(Hash statHash, bool* outValue, Any p2) { return Invoke<bool>(0x11B5E6D2AE73F48E, V(statHash), V(outValue), V(p2)); }
		// p3 is probably characterSlot or bool save, always -1
		public static bool STAT_GET_DATE(Hash statHash, Any* outValue, int numFields, Any p3) { return Invoke<bool>(0x8B0FACEFC36C824B, V(statHash), V(outValue), V(numFields), V(p3)); }
		// p1 is always -1 in the script files
		public static byte* STAT_GET_STRING(Hash statHash, int p1) { return PInvoke<byte>(0xE50384ACC2C3DB74, V(statHash), V(p1)); }
		// p3 is probably characterSlot or bool save, always -1
		public static bool STAT_GET_POS(Hash statName, float* outX, float* outY, float* outZ, Any p4) { return Invoke<bool>(0x350F82CCB186AA1B, V(statName), V(outX), V(outY), V(outZ), V(p4)); }
		// p4 is probably characterSlot or bool save
		public static bool STAT_GET_MASKED_INT(Hash statHash, int* outValue, int p2, int p3, Any p4) { return Invoke<bool>(0x655185A06D9EEAAB, V(statHash), V(outValue), V(p2), V(p3), V(p4)); }
		// Returns the rockstar ID (user id) value of a given stat. Returns "STAT_UNKNOWN" if the statHash is invalid or the stat has no userId
		public static byte* STAT_GET_USER_ID(Hash statHash) { return PInvoke<byte>(0x2365C388E393BBE2, V(statHash)); }
		public static byte* STAT_GET_LICENSE_PLATE(Hash statName) { return PInvoke<byte>(0x5473D4195058B2E4, V(statName)); }
		public static bool STAT_SET_LICENSE_PLATE(Hash statName, string str) { return Invoke<bool>(0x69FF13266D7296DA, V(statName), V(str)); }
		public static void STAT_INCREMENT(Hash statName, float value) { Invoke(0x9B5A68C6489E9909, V(statName), V(value)); }
		public static bool STAT_COMMUNITY_START_SYNCH() { return Invoke<bool>(0x5A556B229A169402); }
		public static bool STAT_COMMUNITY_SYNCH_IS_PENDING() { return Invoke<bool>(0xB1D2BB1E1631F5B1); }
		public static bool STAT_COMMUNITY_GET_HISTORY(Hash statName, int p1, float* outValue) { return Invoke<bool>(0xBED9F5693F34ED17, V(statName), V(p1), V(outValue)); }
		// p0 seems to range from 0 to 7
		public static void STAT_RESET_ALL_ONLINE_CHARACTER_STATS(int p0) { Invoke(0x26D7399B9587FE89, V(p0)); }
		// p0 seems to range from 0 to 7
		public static void STAT_LOCAL_RESET_ALL_ONLINE_CHARACTER_STATS(int p0) { Invoke(0xA78B8FA58200DA56, V(p0)); }
		public static int STAT_GET_NUMBER_OF_DAYS(Hash statName) { return Invoke<int>(0xE0E854F5280FB769, V(statName)); }
		public static int STAT_GET_NUMBER_OF_HOURS(Hash statName) { return Invoke<int>(0xF2D4B2FE415AAFC3, V(statName)); }
		public static int STAT_GET_NUMBER_OF_MINUTES(Hash statName) { return Invoke<int>(0x7583B4BE4C5A41B5, V(statName)); }
		public static int STAT_GET_NUMBER_OF_SECONDS(Hash statName) { return Invoke<int>(0x2CE056FF3723F00B, V(statName)); }
		// Does not take effect immediately, unfortunately.
		// 
		// profileSetting seems to only be 936, 937 and 938 in scripts
		public static void STAT_SET_PROFILE_SETTING_VALUE(int profileSetting, int value) { Invoke(0x68F01422BE1D838F, V(profileSetting), V(value)); }
		// This native does absolutely nothing, just a nullsub
		public static void STATS_COMPLETED_CHARACTER_CREATION(Any p0) { Invoke(0xC01D2470F22CDE5A, V(p0)); }
		// Needs more research. Possibly used to calculate the "mask" when calling "STAT_SET_MASKED_INT"?
		public static int PACKED_STAT_GET_INT_STAT_INDEX(int p0) { return Invoke<int>(0x94F12ABF9C79E339, V(p0)); }
		public static Hash GET_PACKED_INT_STAT_KEY(int index, bool spStat, bool charStat, int character) { return Invoke<Hash>(0x61E111E323419E07, V(index), V(spStat), V(charStat), V(character)); }
		public static Hash GET_PACKED_TU_INT_STAT_KEY(int index, bool spStat, bool charStat, int character) { return Invoke<Hash>(0xD16C2AD6B8E32854, V(index), V(spStat), V(charStat), V(character)); }
		// Needs more research. Gets the stat name of a masked int?
		// 
		// section - values used in the decompiled scripts:
		// "_NGPSTAT_INT"
		// "_MP_NGPSTAT_INT"
		// "_MP_LRPSTAT_INT"
		// "_MP_APAPSTAT_INT"
		// "_MP_LR2PSTAT_INT"
		// "_MP_BIKEPSTAT_INT"
		// "_MP_IMPEXPPSTAT_INT"
		// "_MP_GUNRPSTAT_INT"
		// "_NGDLCPSTAT_INT"
		// "_MP_NGDLCPSTAT_INT"
		// "_DLCSMUGCHARPSTAT_INT"
		// "_GANGOPSPSTAT_INT"
		// "_BUSINESSBATPSTAT_INT"
		// "_ARENAWARSPSTAT_INT"
		// "_CASINOPSTAT_INT"
		// "_CASINOHSTPSTAT_INT"
		public static Hash GET_PACKED_NG_INT_STAT_KEY(int index, bool spStat, bool charStat, int character, string section) { return Invoke<Hash>(0x2B4CDCA6F07FF3DA, V(index), V(spStat), V(charStat), V(character), V(section)); }
		public static bool GET_PACKED_STAT_BOOL_CODE(int index, int characterSlot) { return Invoke<bool>(0xDA7EBFC49AE3F1B0, V(index), V(characterSlot)); }
		public static int GET_PACKED_STAT_INT_CODE(int index, int characterSlot) { return Invoke<int>(0x0BC900A6FE73770C, V(index), V(characterSlot)); }
		public static void SET_PACKED_STAT_BOOL_CODE(int index, bool value, int characterSlot) { Invoke(0xDB8A58AEAA67CD07, V(index), V(value), V(characterSlot)); }
		public static void SET_PACKED_STAT_INT_CODE(int index, int value, int characterSlot) { Invoke(0x1581503AE529CD2E, V(index), V(value), V(characterSlot)); }
		public static void PLAYSTATS_BACKGROUND_SCRIPT_ACTION(string action, int value) { Invoke(0x5009DFD741329729, V(action), V(value)); }
		public static void _PLAYSTATS_FLOW_LOW(float posX, float posY, float posZ, string action, bool p4, int p5) { Invoke(0xE6A27CDA42887F93, V(posX), V(posY), V(posZ), V(action), V(p4), V(p5)); }
		public static void _PLAYSTATS_FLOW_MEDIUM(float posX, float posY, float posZ, string action, bool p4, int p5) { Invoke(0xC4493521BAA12CCE, V(posX), V(posY), V(posZ), V(action), V(p4), V(p5)); }
		public static void _PLAYSTATS_FLOW_HIGH(float posX, float posY, float posZ, string action, bool p4, int p5) { Invoke(0xCFB0E9C3456319EA, V(posX), V(posY), V(posZ), V(action), V(p4), V(p5)); }
		public static void PLAYSTATS_NPC_INVITE(string p0) { Invoke(0x93054C88E6AA7C44, V(p0)); }
		public static void PLAYSTATS_AWARD_XP(int amount, Hash type, Hash category) { Invoke(0x46F917F6B4128FE4, V(amount), V(type), V(category)); }
		public static void PLAYSTATS_RANK_UP(int rank) { Invoke(0xC7F2DE41D102BFB4, V(rank)); }
		public static void PLAYSTATS_STARTED_SESSION_IN_OFFLINEMODE() { Invoke(0x098760C7461724CD); }
		public static void PLAYSTATS_ACTIVITY_DONE(int p0, int activityId, Any p2) { Invoke(0xA071E0ED98F91286, V(p0), V(activityId), V(p2)); }
		public static void PLAYSTATS_LEAVE_JOB_CHAIN(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0xC5BE134EC7BA96A0, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_MISSION_STARTED(string p0, Any p1, Any p2, bool p3) { Invoke(0xC19A2925C34D2231, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_MISSION_OVER(string p0, Any p1, Any p2, bool p3, bool p4, bool p5) { Invoke(0x7C4BB33A8CED7324, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void PLAYSTATS_MISSION_CHECKPOINT(string p0, Any p1, Any p2, Any p3) { Invoke(0xC900596A63978C1D, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_RANDOM_MISSION_DONE(string name, Any p1, Any p2, Any p3) { Invoke(0x71862B1D855F32E1, V(name), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_ROS_BET(int amount, int act, Player player, float cm) { Invoke(0x121FB4DDDC2D5291, V(amount), V(act), V(player), V(cm)); }
		public static void PLAYSTATS_RACE_CHECKPOINT(Vehicle p0, Any p1, int p2, int p3, Any p4) { Invoke(0x9C375C315099DDE4, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static bool PLAYSTATS_CREATE_MATCH_HISTORY_ID_2(int* playerAccountId, int* posixTime) { return Invoke<bool>(0x6DEE77AFF8C21BD1, V(playerAccountId), V(posixTime)); }
		public static void PLAYSTATS_MATCH_STARTED(Any p0, Any p1, Any p2) { Invoke(0xBC80E22DED931E3D, V(p0), V(p1), V(p2)); }
		public static void PLAYSTATS_SHOP_ITEM(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x176852ACAAC173D1, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_CRATE_DROP_MISSION_DONE(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) { Invoke(0x1CAE5D2E3F9A07F0, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7)); }
		public static void PLAYSTATS_CRATE_CREATED(float p0, float p1, float p2) { Invoke(0xAFC7E5E075A96F46, V(p0), V(p1), V(p2)); }
		public static void PLAYSTATS_HOLD_UP_MISSION_DONE(Any p0, Any p1, Any p2, Any p3) { Invoke(0xCB00196B31C39EB1, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_IMPORT_EXPORT_MISSION_DONE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x2B69F5074C894811, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_RACE_TO_POINT_MISSION_DONE(int p0, Any p1, Any p2, Any p3) { Invoke(0xADDD1C754E2E2914, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_ACQUIRED_HIDDEN_PACKAGE(Any p0) { Invoke(0x79AB33F0FBFAC40C, V(p0)); }
		public static void PLAYSTATS_WEBSITE_VISITED(Hash scaleformHash, int p1) { Invoke(0xDDF24D535060F811, V(scaleformHash), V(p1)); }
		public static void PLAYSTATS_FRIEND_ACTIVITY(int p0, bool p1) { Invoke(0x0F71DE29AB2258F1, V(p0), V(p1)); }
		// This native does absolutely nothing, just a nullsub
		public static void PLAYSTATS_ODDJOB_DONE(int totalTimeMs, int p1, bool p2) { Invoke(0x69DEA3E9DB727B4C, V(totalTimeMs), V(p1), V(p2)); }
		public static void PLAYSTATS_PROP_CHANGE(Ped p0, int p1, int p2, int p3) { Invoke(0xBA739D6D5A05D6E7, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_CLOTH_CHANGE(Ped p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x34B973047A2268B9, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		// This is a typo made by R*. It's supposed to be called PLAYSTATS_WEAPON_MOD_CHANGE.
		public static void PLAYSTATS_WEAPON_MODE_CHANGE(Hash weaponHash, Hash componentHashTo, Hash componentHashFrom) { Invoke(0xE95C8A1875A02CA4, V(weaponHash), V(componentHashTo), V(componentHashFrom)); }
		public static void PLAYSTATS_CHEAT_APPLIED(string cheat) { Invoke(0x6058665D72302D3F, V(cheat)); }
		public static void PLAYSTATS_JOB_ACTIVITY_END(Any* p0, Any* p1, Any* p2, Any* p3) { Invoke(0xF8C54A461C3E11DC, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_JOB_BEND(Any* p0, Any* p1, Any* p2, Any* p3) { Invoke(0xF5BB8DAC426A52C0, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_JOB_LTS_END(Any* p0, Any* p1, Any* p2, Any* p3) { Invoke(0xA736CF7FB7C5BFF4, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_JOB_LTS_ROUND_END(Any* p0, Any* p1, Any* p2, Any* p3) { Invoke(0x14E0B2D1AD1044E0, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_QUICKFIX_TOOL(int element, string item) { Invoke(0x90D0622866E80445, V(element), V(item)); }
		public static void PLAYSTATS_IDLE_KICK(int msStoodIdle) { Invoke(0x5DA3A8DE8CB6226F, V(msStoodIdle)); }
		public static void PLAYSTATS_SET_JOIN_TYPE(int joinType) { Invoke(0xD1032E482629049E, V(joinType)); }
		public static void PLAYSTATS_HEIST_SAVE_CHEAT(Hash hash, int p1) { Invoke(0xF4FF020A08BC8863, V(hash), V(p1)); }
		public static void PLAYSTATS_APPEND_DIRECTOR_METRIC(Any* p0) { Invoke(0x46326E13DA4E0546, V(p0)); }
		public static void PLAYSTATS_AWARD_BAD_SPORT(int id) { Invoke(0x47B32F5611E6E483, V(id)); }
		public static void PLAYSTATS_PEGASUS_AS_PERSONAL_AIRCRAFT(Hash modelHash) { Invoke(0x9572BD4DD6B72122, V(modelHash)); }
		public static void _PLAYSTATS_SHOPMENU_NAV(Any p0, Any p1, Any p2, Any p3) { Invoke(0xF96E9EA876D9DC92, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_FM_EVENT_CHALLENGES(Any p0) { Invoke(0x6A60E43998228229, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_VEHICLETARGET(Any p0) { Invoke(0xBFAFDB5FAAA5C5AB, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_URBANWARFARE(Any p0) { Invoke(0x8C9D11605E59D955, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_CHECKPOINTCOLLECTION(Any p0) { Invoke(0x3DE3AA516FB126A4, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_ATOB(Any p0) { Invoke(0xBAA2F0490E146BE8, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_PENNEDIN(Any p0) { Invoke(0x1A7CE7CD3E653485, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_PASSTHEPARCEL(Any p0) { Invoke(0x419615486BBF1956, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_HOTPROPERTY(Any p0) { Invoke(0x84DFC579C2FC214C, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_DEADDROP(Any p0) { Invoke(0x0A9C7F36E5D7B683, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_KINGOFTHECASTLE(Any p0) { Invoke(0x164C5FF663790845, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_CRIMINALDAMAGE(Any p0) { Invoke(0xEDBF6C9B0D2C65C8, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_COMPETITIVEURBANWARFARE(Any p0) { Invoke(0x6551B1F7F6CD46EA, V(p0)); }
		public static void PLAYSTATS_FM_EVENT_HUNTBEAST(Any p0) { Invoke(0x2CD90358F67D0AA8, V(p0)); }
		public static void PLAYSTATS_PIMENU_HIDE_OPTIONS(Any* data) { Invoke(0x203B381133817079, V(data)); }
		// Known text types: NAME_YACHT, NAME_ORG_OFFICE
		public static void _PLAYSTATS_NAMED_USER_CONTENT(bool isBoss, int bossType, int bossId1, int bossId2, int textType, string textString, int textSource) { Invoke(0xAA434D7D0A89A95C, V(isBoss), V(bossType), V(bossId1), V(bossId2), V(textType), V(textString), V(textSource)); }
		public static int LEADERBOARDS_GET_NUMBER_OF_COLUMNS(int p0, Any p1) { return Invoke<int>(0x117B45156D7EFF2E, V(p0), V(p1)); }
		public static int LEADERBOARDS_GET_COLUMN_ID(int p0, int p1, int p2) { return Invoke<int>(0xC4B5467A1886EA7E, V(p0), V(p1), V(p2)); }
		public static int LEADERBOARDS_GET_COLUMN_TYPE(int p0, Any p1, Any p2) { return Invoke<int>(0xBF4FEF46DB7894D3, V(p0), V(p1), V(p2)); }
		public static int LEADERBOARDS_READ_CLEAR_ALL() { return Invoke<int>(0xA34CB6E6F0DF4A0B); }
		public static int LEADERBOARDS_READ_CLEAR(Any p0, Any p1, Any p2) { return Invoke<int>(0x7CCE5C737A665701, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS_READ_PENDING(Any p0, Any p1, Any p2) { return Invoke<bool>(0xAC392C8483342AC2, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS_READ_ANY_PENDING() { return Invoke<bool>(0xA31FD15197B192BD); }
		public static bool LEADERBOARDS_READ_SUCCESSFUL(Any p0, Any p1, Any p2) { return Invoke<bool>(0x2FB19228983E832C, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS2_READ_FRIENDS_BY_ROW(Any* p0, Any* p1, Any p2, bool p3, Any p4, Any p5) { return Invoke<bool>(0x918B101666F9CB83, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static bool LEADERBOARDS2_READ_BY_HANDLE(Any* p0, Any* p1) { return Invoke<bool>(0xC30713A383BFBF0E, V(p0), V(p1)); }
		public static bool LEADERBOARDS2_READ_BY_RANK(Any* p0, Any p1, Any p2) { return Invoke<bool>(0xBA2C7DB0C129449A, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS2_READ_BY_RADIUS(Any* p0, Any p1, Any* p2) { return Invoke<bool>(0x5CE587FB5A42C8C4, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS2_READ_BY_SCORE_INT(Any* p0, Any p1, Any p2) { return Invoke<bool>(0x7EEC7E4F6984A16A, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS2_READ_BY_SCORE_FLOAT(Any* p0, float p1, Any p2) { return Invoke<bool>(0xE662C8B759D08F3C, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS2_READ_RANK_PREDICTION(Any* p0, Any* p1, Any* p2) { return Invoke<bool>(0xC38DC1E90D22547C, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS2_READ_BY_PLAFORM(Any* p0, string gamerHandleCsv, string platformName) { return Invoke<bool>(0xF1AE5DCDBFCA2721, V(p0), V(gamerHandleCsv), V(platformName)); }
		public static bool LEADERBOARDS2_READ_GET_ROW_DATA_START(Any* p0) { return Invoke<bool>(0xA0F93D5465B3094D, V(p0)); }
		public static void LEADERBOARDS2_READ_GET_ROW_DATA_END() { Invoke(0x71B008056E5692D6); }
		public static bool LEADERBOARDS2_READ_GET_ROW_DATA_INFO(Any p0, Any* p1) { return Invoke<bool>(0x34770B9CE0E03B91, V(p0), V(p1)); }
		public static int LEADERBOARDS2_READ_GET_ROW_DATA_INT(Any p0, Any p1) { return Invoke<int>(0x88578F6EC36B4A3A, V(p0), V(p1)); }
		public static float LEADERBOARDS2_READ_GET_ROW_DATA_FLOAT(Any p0, Any p1) { return Invoke<float>(0x38491439B6BA7F7D, V(p0), V(p1)); }
		public static bool LEADERBOARDS2_WRITE_DATA(Any* p0) { return Invoke<bool>(0xAE2206545888AE49, V(p0)); }
		public static void LEADERBOARDS_WRITE_ADD_COLUMN(Any p0, Any p1, float p2) { Invoke(0x0BCA1D2C47B0D269, V(p0), V(p1), V(p2)); }
		public static void LEADERBOARDS_WRITE_ADD_COLUMN_LONG(Any p0, Any p1, Any p2) { Invoke(0x2E65248609523599, V(p0), V(p1), V(p2)); }
		public static bool LEADERBOARDS_CACHE_DATA_ROW(Any* p0) { return Invoke<bool>(0xB9BB18E2C40142ED, V(p0)); }
		public static void LEADERBOARDS_CLEAR_CACHE_DATA() { Invoke(0xD4B02A6B476E1FDC); }
		public static void LEADERBOARDS_CLEAR_CACHE_DATA_ID(Any p0) { Invoke(0x8EC74CEB042E7CFF, V(p0)); }
		public static bool LEADERBOARDS_GET_CACHE_EXISTS(Any p0) { return Invoke<bool>(0x9C51349BE6CDFE2C, V(p0)); }
		public static int LEADERBOARDS_GET_CACHE_TIME(Any p0) { return Invoke<int>(0xF04C1C27DA35F6C8, V(p0)); }
		public static int LEADERBOARDS_GET_CACHE_NUMBER_OF_ROWS(Any p0) { return Invoke<int>(0x58A651CD201D89AD, V(p0)); }
		public static bool LEADERBOARDS_GET_CACHE_DATA_ROW(Any p0, Any p1, Any* p2) { return Invoke<bool>(0x9120E8DBA3D69273, V(p0), V(p1), V(p2)); }
		public static void PRESENCE_EVENT_UPDATESTAT_INT(Hash statHash, int value, int p2) { Invoke(0x11FF1C80276097ED, V(statHash), V(value), V(p2)); }
		public static void PRESENCE_EVENT_UPDATESTAT_FLOAT(Hash statHash, float value, int p2) { Invoke(0x30A6614C1F7799B8, V(statHash), V(value), V(p2)); }
		public static void PRESENCE_EVENT_UPDATESTAT_INT_WITH_STRING(Hash statHash, int value, int p2, string str) { Invoke(0x6483C25849031C4F, V(statHash), V(value), V(p2), V(str)); }
		public static bool GET_PLAYER_HAS_DRIVEN_ALL_VEHICLES() { return Invoke<bool>(0x5EAD2BF6484852E4); }
		public static void SET_HAS_POSTED_ALL_VEHICLES_DRIVEN() { Invoke(0xC141B8917E0017EC); }
		public static void SET_PROFILE_SETTING_PROLOGUE_COMPLETE() { Invoke(0xB475F27C6A994D65); }
		// Sets profile setting 939
		public static void SET_PROFILE_SETTING_SP_CHOP_MISSION_COMPLETE() { Invoke(0xC67E2DA1CBE759E2); }
		// Sets profile setting 933
		public static void SET_PROFILE_SETTING_CREATOR_RACES_DONE(int value) { Invoke(0xF1A1803D3476F215, V(value)); }
		// Sets profile setting 934
		public static void SET_PROFILE_SETTING_CREATOR_DM_DONE(int value) { Invoke(0x38BAAA5DD4C9D19F, V(value)); }
		// Sets profile setting 935
		public static void SET_PROFILE_SETTING_CREATOR_CTF_DONE(int value) { Invoke(0x55384438FC55AD8E, V(value)); }
		public static void SET_JOB_ACTIVITY_ID_STARTED(Any p0, int characterSlot) { Invoke(0x723C1CE13FBFDB67, V(p0), V(characterSlot)); }
		public static void SET_FREEMODE_PROLOGUE_DONE(Any p0, int characterSlot) { Invoke(0x0D01D20616FC73FB, V(p0), V(characterSlot)); }
		// Sets profile setting 940 and 941
		public static void SET_FREEMODE_STRAND_PROGRESSION_STATUS(int profileSetting, int settingValue) { Invoke(0x79D310A861697CC9, V(profileSetting), V(settingValue)); }
		public static void STAT_NETWORK_INCREMENT_ON_SUICIDE(Any p0, float p1) { Invoke(0x428EAF89E24F6C36, V(p0), V(p1)); }
		public static void STAT_SET_CHEAT_IS_ACTIVE() { Invoke(0x047CBED6F6F8B63C); }
		public static bool LEADERBOARDS2_WRITE_DATA_FOR_EVENT_TYPE(Any* p0, Any* p1) { return Invoke<bool>(0xC980E62E33DF1D5C, V(p0), V(p1)); }
		public static void FORCE_CLOUD_MP_STATS_DOWNLOAD_AND_OVERWRITE_LOCAL_SAVE() { Invoke(0x6F361B8889A792A3); }
		public static void STAT_MIGRATE_CLEAR_FOR_RESTART() { Invoke(0xC847B43F369AC0B5); }
		// platformName must be one of the following: ps3, xbox360, ps4, xboxone
		public static bool STAT_MIGRATE_SAVEGAME_START(string platformName) { return Invoke<bool>(0xA5C80D8E768A9E66, V(platformName)); }
		public static int STAT_MIGRATE_SAVEGAME_GET_STATUS() { return Invoke<int>(0x9A62EC95AE10E011); }
		public static bool STAT_MIGRATE_CHECK_ALREADY_DONE() { return Invoke<bool>(0x4C89FE2BDEB3F169); }
		public static bool STAT_MIGRATE_CHECK_START() { return Invoke<bool>(0xC6E0E2616A7576BB); }
		public static int STAT_MIGRATE_CHECK_GET_IS_PLATFORM_AVAILABLE(int p0) { return Invoke<int>(0x5BD5F255321C4AAF, V(p0)); }
		public static int STAT_MIGRATE_CHECK_GET_PLATFORM_STATUS(int p0, Any* p1) { return Invoke<int>(0xDEAAF77EB3687E97, V(p0), V(p1)); }
		public static int STAT_GET_SAVE_MIGRATION_STATUS(Any* data) { return Invoke<int>(0x886913BBEACA68C1, V(data)); }
		public static bool STAT_SAVE_MIGRATION_CANCEL_PENDING_OPERATION() { return Invoke<bool>(0x4FEF53183C3C6414); }
		public static int STAT_GET_CANCEL_SAVE_MIGRATION_STATUS() { return Invoke<int>(0x567384DFA67029E6); }
		public static bool STAT_SAVE_MIGRATION_CONSUME_CONTENT(Hash contentId, string srcPlatform, string srcGamerHandle) { return Invoke<bool>(0x3270F67EED31FBC1, V(contentId), V(srcPlatform), V(srcGamerHandle)); }
		public static int STAT_GET_SAVE_MIGRATION_CONSUME_CONTENT_STATUS(int* p0) { return Invoke<int>(0xCE5AA445ABA8DEE0, V(p0)); }
		public static void STAT_ENABLE_STATS_TRACKING() { Invoke(0x98E2BC1CA26287C3); }
		// Prevents updates to CStatsMgr (e.g., STAT_SET_* natives)
		public static void STAT_DISABLE_STATS_TRACKING() { Invoke(0x629526ABA383BCAA); }
		public static bool STAT_IS_STATS_TRACKING_ENABLED() { return Invoke<bool>(0xBE3DB208333D9844); }
		// enum StatTrackingType
		// {
		// 	LongestWheelie = 1,
		// 	LongestStoppie = 2,
		// 	NoCrashes = 3,
		// 	HighestSpeed = 4,
		// 	_MostFlips = 5,
		// 	_LongestSpin = 6,
		// 	_HighestJumpReached = 7,
		// 	LongestJump = 8,
		// 	_NearMissesNoCrash = 9,
		// 	LongestFallSurvived = 10,
		// 	LowestParachute = 11,
		// 	ReverseDriving = 12,
		// 	LongestFreefall = 13,
		// 	VehiclesStolen = 14,
		// 	_SomeCFireEventCount = 15,
		// 	_Unk16 = 16,
		// 	_LowFlyingTime = 17,
		// 	LowFlying = 18,
		// 	_InvertedFlyingTime = 19,
		// 	InvertedFlying = 20,
		// 	_PlaneSpinCount = 21,
		// 	MeleeKills = 22, // Players
		// 	_LongestSniperKill = 23,
		// 	SniperSkills = 24, // Players
		// 	DrivebyKills = 25, // Players
		// 	HeadshotKills = 26, // Players
		// 	LongestBail = 27,
		// 	_TotalRammedByCar = 28,
		// 	NearMissesPrecise = 29,
		// 	_FreefallTime = 30,
		// 	Unk31 = 31,
		// }
		// 
		// enum StatTrackingValueType
		// {
		// 	Total,
		// 	Max,
		// 	Min
		// }
		public static bool STAT_START_RECORD_STAT(int statType, int valueType) { return Invoke<bool>(0x33D72899E24C3365, V(statType), V(valueType)); }
		public static bool STAT_STOP_RECORD_STAT() { return Invoke<bool>(0xA761D4AC6115623D); }
		public static bool STAT_GET_RECORDED_VALUE(float* value) { return Invoke<bool>(0xF11F01D98113536A, V(value)); }
		public static bool STAT_IS_RECORDING_STAT() { return Invoke<bool>(0x8B9CDBD6C566C38C); }
		// Perform the most near misses with other vehicles in a land vehicle without crashing
		public static int STAT_GET_CURRENT_NEAR_MISS_NOCRASH_PRECISE() { return Invoke<int>(0xE8853FBCE7D8D0D6); }
		// Perform the longest wheelie on a motorcycle
		public static float STAT_GET_CURRENT_REAR_WHEEL_DISTANCE() { return Invoke<float>(0xA943FD1722E11EFD); }
		// Perform the longest stoppie on a motorcycle
		public static float STAT_GET_CURRENT_FRONT_WHEEL_DISTANCE() { return Invoke<float>(0x84A810B375E69C0E); }
		// Perform the longest jump in a land vehicle
		public static float STAT_GET_CURRENT_JUMP_DISTANCE() { return Invoke<float>(0x9EC8858184CD253A); }
		// Drive the furthest distance in a land vehicle without crashing
		public static float STAT_GET_CURRENT_DRIVE_NOCRASH_DISTANCE() { return Invoke<float>(0xBA9749CC94C1FD85); }
		// Achieve the highest speed in a land vehicle
		public static float STAT_GET_CURRENT_SPEED() { return Invoke<float>(0x55A8BECAF28A4EB7); }
		// Reverse the longest distance without crashing
		public static float STAT_GET_CURRENT_DRIVING_REVERSE_DISTANCE() { return Invoke<float>(0x32CAC93C9DE73D32); }
		// Fall the longest distance with a parachute before opening it
		public static float STAT_GET_CURRENT_SKYDIVING_DISTANCE() { return Invoke<float>(0xAFF47709F1D5DCCE); }
		// Fly low to the ground for the longest distance
		public static float STAT_GET_CHALLENGE_FLYING_DIST() { return Invoke<float>(0x6E0A5253375C4584); }
		public static bool STAT_GET_FLYING_ALTITUDE(float* outValue) { return Invoke<bool>(0x1A8EA222F9C67DBB, V(outValue)); }
		// Or non-flyable area
		public static bool STAT_IS_PLAYER_VEHICLE_ABOVE_OCEAN() { return Invoke<bool>(0xF9F2922717B819EC); }
		// Travel the furthest distance when bailing from a vehicle
		public static float STAT_GET_VEHICLE_BAIL_DISTANCE() { return Invoke<float>(0x0B8B7F74BF061C6D); }
		// This function is hard-coded to always return 1.
		public static bool STAT_ROLLBACK_SAVE_MIGRATION() { return Invoke<bool>(0xB3DA2606774A8E2D); }
		// Sets profile setting 866
		public static void SET_HAS_SPECIALEDITION_CONTENT(int value) { Invoke(0xDAC073C7901F9E15, V(value)); }
		// Sets profile setting 501
		public static void SET_SAVE_MIGRATION_TRANSACTION_ID_WARNING(int transactionId) { Invoke(0xF6792800AC95350D, V(transactionId)); }
		public static void GET_BOSS_GOON_UUID(int characterSlot, Any p1, Any p2) { Invoke(0x6BC0ACD0673ACEBE, V(characterSlot), V(p1), V(p2)); }
		public static void PLAYSTATS_BW_BOSSONBOSSDEATHMATCH(Any p0) { Invoke(0x8D8ADB562F09A245, V(p0)); }
		public static void PLAYSTATS_BW_YATCHATTACK(Any p0) { Invoke(0xD1A1EE3B4FA8E760, V(p0)); }
		public static void PLAYSTATS_BW_HUNT_THE_BOSS(Any p0) { Invoke(0x88087EE1F28024AE, V(p0)); }
		public static void PLAYSTATS_BW_SIGHTSEER(Any p0) { Invoke(0xFCC228E07217FCAC, V(p0)); }
		public static void PLAYSTATS_BW_ASSAULT(Any p0) { Invoke(0x678F86D8FC040BDB, V(p0)); }
		public static void PLAYSTATS_BW_BELLY_OF_THE_BEAST(Any p0) { Invoke(0xA6F54BB2FFCA35EA, V(p0)); }
		public static void PLAYSTATS_BW_HEAD_HUNTER(Any p0) { Invoke(0x5FF2C33B13A02A11, V(p0)); }
		public static void PLAYSTATS_BW_FRAGILE_GOODS(Any p0) { Invoke(0x282B6739644F4347, V(p0)); }
		public static void PLAYSTATS_BW_AIR_FREIGHT(Any p0) { Invoke(0xF06A6F41CB445443, V(p0)); }
		public static void PLAYSTATS_BC_CAR_JACKING(Any p0) { Invoke(0x7B18DA61F6BAE9D5, V(p0)); }
		public static void PLAYSTATS_BC_SMASH_AND_GRAB(Any p0) { Invoke(0x06EAF70AE066441E, V(p0)); }
		public static void PLAYSTATS_BC_PROTECTION_RACKET(Any p0) { Invoke(0x14EDA9EE27BD1626, V(p0)); }
		public static void PLAYSTATS_BC_MOST_WANTED(Any p0) { Invoke(0x930F504203F561C9, V(p0)); }
		public static void PLAYSTATS_BC_FINDERS_KEEPERS(Any p0) { Invoke(0xE3261D791EB44ACB, V(p0)); }
		public static void PLAYSTATS_BC_POINT_TO_POINT(Any p0) { Invoke(0x73001E34F85137F8, V(p0)); }
		public static void PLAYSTATS_BC_CASHING(Any p0) { Invoke(0x53CAE13E9B426993, V(p0)); }
		public static void PLAYSTATS_BC_SALVAGE(Any p0) { Invoke(0x7D36291161859389, V(p0)); }
		public static void PLAYSTATS_SPENT_PI_CUSTOM_LOADOUT(int amount) { Invoke(0xBE509B0A3693DE8B, V(amount)); }
		public static void PLAYSTATS_BUY_CONTRABAND_MISSION(Any* data) { Invoke(0xD6781E42755531F7, V(data)); }
		public static void PLAYSTATS_SELL_CONTRABAND_MISSION(Any* data) { Invoke(0xC729991A9065376E, V(data)); }
		public static void PLAYSTATS_DEFEND_CONTRABAND_MISSION(Any* data) { Invoke(0x2605663BD4F23B5D, V(data)); }
		public static void PLAYSTATS_RECOVER_CONTRABAND_MISSION(Any* data) { Invoke(0x04D90BA8207ADA2D, V(data)); }
		public static void PLAYSTATS_HIT_CONTRABAND_DESTROY_LIMIT(Any p0) { Invoke(0x60EEDC12AF66E846, V(p0)); }
		public static void START_BEING_BOSS(Any p0, Any p1, Any p2) { Invoke(0x3EBEAC6C3F81F6BD, V(p0), V(p1), V(p2)); }
		public static void START_BEING_GOON(Any p0, Any p1, Any p2) { Invoke(0x96E6D5150DBF1C09, V(p0), V(p1), V(p2)); }
		public static void END_BEING_BOSS(Any p0, Any p1, Any p2) { Invoke(0xA3C53804BDB68ED2, V(p0), V(p1), V(p2)); }
		public static void END_BEING_GOON(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x6BCCF9948492FD85, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void HIRED_LIMO(Any p0, Any p1) { Invoke(0x792271AB35C356A4, V(p0), V(p1)); }
		public static void ORDER_BOSS_VEHICLE(Any p0, Any p1, Hash vehicleHash) { Invoke(0xCEA553E35C2246E1, V(p0), V(p1), V(vehicleHash)); }
		public static void CHANGE_UNIFORM(Any p0, Any p1, Any p2) { Invoke(0xD1C9B92BDD3F151D, V(p0), V(p1), V(p2)); }
		public static void CHANGE_GOON_LOOKING_FOR_WORK(Any p0) { Invoke(0x44919CC079BB60BF, V(p0)); }
		public static void SEND_METRIC_GHOSTING_TO_PLAYER(Any p0) { Invoke(0x7033EEFD9B28088E, V(p0)); }
		public static void SEND_METRIC_VIP_POACH(Any p0, Any p1, Any p2) { Invoke(0xAA525DFF66BB82F5, V(p0), V(p1), V(p2)); }
		public static void SEND_METRIC_PUNISH_BODYGUARD(Any p0) { Invoke(0x015B03EE1C43E6EC, V(p0)); }
		// Allows CEventNetworkStuntPerformed to be triggered.
		public static void PLAYSTATS_START_TRACKING_STUNTS() { Invoke(0x928DBFB892638EF3); }
		// Disallows CEventNetworkStuntPerformed to be triggered.
		public static void PLAYSTATS_STOP_TRACKING_STUNTS() { Invoke(0x8A800DACCC0DA55D); }
		public static void PLAYSTATS_MISSION_ENDED(Any p0) { Invoke(0xBF371CD2B64212FD, V(p0)); }
		public static void PLAYSTATS_IMPEXP_MISSION_ENDED(Any p0) { Invoke(0x7D8BA05688AD64C7, V(p0)); }
		public static void PLAYSTATS_CHANGE_MC_ROLE(Any p0, Any p1, Any p2, Any p3, int role, int p5, Any p6) { Invoke(0x0B565B0AAE56A0E8, V(p0), V(p1), V(p2), V(p3), V(role), V(p5), V(p6)); }
		public static void PLAYSTATS_CHANGE_MC_OUTFIT(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x28ECB8AC2F607DB2, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_SWITCH_MC_EMBLEM(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x0A50D2604E05CB94, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_MC_REQUEST_BIKE(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0xCC25A4553DFBF9EA, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_MC_KILLED_RIVAL_MC_MEMBER(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0xF534D94DFA2EAD26, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_ABANDONED_MC(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0xD558BEC0BBA7E8D2, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_EARNED_MC_POINTS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { Invoke(0x501478855A6074CE, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void PLAYSTATS_MC_FORMATION_ENDS(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) { Invoke(0x03C2EEBB04B3FB72, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static void PLAYSTATS_MC_CLUBHOUSE_ACTIVITY(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7) { Invoke(0x8989CBD7B4E82534, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7)); }
		public static void PLAYSTATS_RIVAL_BEHAVIOR(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9) { Invoke(0x27AA1C973CACFE63, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9)); }
		public static void PLAYSTATS_COPY_RANK_INTO_NEW_SLOT(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) { Invoke(0xB7257BA2550EA10A, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static void PLAYSTATS_DUPE_DETECTED(Any* data) { Invoke(0x848B66100EE33B05, V(data)); }
		public static void PLAYSTATS_BAN_ALERT(int p0) { Invoke(0x516FC96EB88EEFE5, V(p0)); }
		public static void PLAYSTATS_GUNRUNNING_MISSION_ENDED(Any* data) { Invoke(0x0EACDF8487D5155A, V(data)); }
		public static void PLAYSTATS_GUNRUNNING_RND(Any p0) { Invoke(0xDAF80797FC534BEC, V(p0)); }
		public static void PLAYSTATS_BUSINESS_BATTLE_ENDED(Any p0) { Invoke(0x316DB59CD14C1774, V(p0)); }
		public static void PLAYSTATS_WAREHOUSE_MISSION_ENDED(Any p0) { Invoke(0x2D7A9B577E72385E, V(p0)); }
		public static void PLAYSTATS_NIGHTCLUB_MISSION_ENDED(Any p0) { Invoke(0x830C3A44EB3F2CF9, V(p0)); }
		public static void PLAYSTATS_DJ_USAGE(Any p0, Any p1) { Invoke(0xB26F670685631727, V(p0), V(p1)); }
		public static void PLAYSTATS_MINIGAME_USAGE(Any p0, Any p1, Any p2) { Invoke(0xC14BD9F5337219B2, V(p0), V(p1), V(p2)); }
		public static void PLAYSTATS_STONE_HATCHET_ENDED(Any* data) { Invoke(0x35E39E5570358630, V(data)); }
		public static void PLAYSTATS_SMUGGLER_MISSION_ENDED(Any* data) { Invoke(0x320C35147D5B5DDD, V(data)); }
		public static void PLAYSTATS_FM_HEIST_PREP_ENDED(Any* data) { Invoke(0xD8AFB345A9C5CCBB, V(data)); }
		public static void PLAYSTATS_INSTANCED_HEIST_ENDED(Any* data, Any p1, Any p2, Any p3) { Invoke(0x1E1497D0D2108115, V(data), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_DAR_CHECKPOINT(Any* data) { Invoke(0x0BC254FF3A911501, V(data)); }
		public static void PLAYSTATS_ENTER_SESSION_PACK(Any* data) { Invoke(0x878FF156D36E9956, V(data)); }
		public static void PLAYSTATS_DRONE_USAGE(int p0, int p1, int p2) { Invoke(0x66C7BB2416ED3FCE, V(p0), V(p1), V(p2)); }
		public static void PLAYSTATS_SPIN_WHEEL(int p0, int p1, int p2, int p3) { Invoke(0x6731DE84A38BFAD0, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_ARENA_WARS_SPECTATOR(int p0, int p1, int p2, int p3, int p4) { Invoke(0x6F4F599753F8200A, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_ARENA_WARS_ENDED(Any* data) { Invoke(0xB479D9F0D48A1BC5, V(data)); }
		public static void PLAYSTATS_SWITCH_PASSIVE_MODE(bool p0, int p1, int p2, int p3) { Invoke(0x35EEC6C2BC821A71, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_COLLECTIBLE_PICKED_UP(int p0, Hash objectHash, Any p2, Any p3, int moneyAmount, int rpAmount, int chipsAmount, Any p7, int p8, Any p9, Any p10) { Invoke(0xCD0A8A9338681CF2, V(p0), V(objectHash), V(p2), V(p3), V(moneyAmount), V(rpAmount), V(chipsAmount), V(p7), V(p8), V(p9), V(p10)); }
		public static void PLAYSTATS_CASINO_STORY_MISSION_ENDED(Any p0, Any p1) { Invoke(0xFCCCAC2BD3C1F180, V(p0), V(p1)); }
		public static void PLAYSTATS_CASINO_CHIP(Any p0) { Invoke(0x0999F3F090EC5012, V(p0)); }
		public static void PLAYSTATS_CASINO_ROULETTE(Any p0) { Invoke(0x95101C443A84E7F1, V(p0)); }
		public static void PLAYSTATS_CASINO_BLACKJACK(Any p0) { Invoke(0x3EAE97309727E7AD, V(p0)); }
		public static void PLAYSTATS_CASINO_THREE_CARD_POKER(Any p0) { Invoke(0xF740FB339D471C35, V(p0)); }
		public static void PLAYSTATS_CASINO_SLOT_MACHINE(Any p0) { Invoke(0xEF5EC67D392B830A, V(p0)); }
		public static void PLAYSTATS_CASINO_INSIDE_TRACK(Any p0) { Invoke(0x049F059625058A86, V(p0)); }
		public static void PLAYSTATS_CASINO_LUCKY_SEVEN(Any p0) { Invoke(0x0C432C1435F5E4FA, V(p0)); }
		public static void PLAYSTATS_CASINO_ROULETTE_LIGHT(Any p0) { Invoke(0x6572ABA3DE1197FC, V(p0)); }
		public static void PLAYSTATS_CASINO_BLACKJACK_LIGHT(Any p0) { Invoke(0xD5451C7BF151EB6F, V(p0)); }
		public static void PLAYSTATS_CASINO_THREE_CARD_POKER_LIGHT(Any p0) { Invoke(0xC9001364B4388F22, V(p0)); }
		public static void PLAYSTATS_CASINO_SLOT_MACHINE_LIGHT(Any p0) { Invoke(0xE60054A0FAE8227F, V(p0)); }
		public static void PLAYSTATS_CASINO_INSIDE_TRACK_LIGHT(Any p0) { Invoke(0x23A3CBCD50D54E47, V(p0)); }
		public static void PLAYSTATS_ARCADE_GAME(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6) { Invoke(0x533A7D1EA58DF958, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static void PLAYSTATS_ARCADE_LOVE_MATCH(Any p0, Any p1) { Invoke(0x4FCDBD3F0A813C25, V(p0), V(p1)); }
		public static void PLAYSTATS_FREEMODE_CASINO_MISSION_ENDED(Any* data) { Invoke(0x1A0D4A6C336B7BC5, V(data)); }
		public static void PLAYSTATS_HEIST3_DRONE(Any p0) { Invoke(0xDFBD93BF2943E29B, V(p0)); }
		public static void PLAYSTATS_HEIST3_HACK(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { Invoke(0x92FC0EEDFAC04A14, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void PLAYSTATS_NPC_PHONE(Any* p0) { Invoke(0x0077F15613D36993, V(p0)); }
		public static void PLAYSTATS_ARCADE_CABINET(Any p0) { Invoke(0xF9096193DF1F99D4, V(p0)); }
		public static void PLAYSTATS_HEIST3_FINALE(Any p0) { Invoke(0x2E0259BABC27A327, V(p0)); }
		public static void PLAYSTATS_HEIST3_PREP(Any p0) { Invoke(0x53C31853EC9531FF, V(p0)); }
		public static void PLAYSTATS_MASTER_CONTROL(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x810B5FCC52EC7FF0, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_QUIT_MODE(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x5BF29846C6527C54, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_MISSION_VOTE(Any p0) { Invoke(0xC03FAB2C2F92289B, V(p0)); }
		public static void PLAYSTATS_NJVS_VOTE(Any p0) { Invoke(0x5CDAED54B34B0ED0, V(p0)); }
		public static void PLAYSTATS_FM_MISSION_END(Any p0, Any p1, Any p2, Any p3) { Invoke(0x46A70777BE6CEAB9, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_HEIST4_PREP(Any p0) { Invoke(0xDFCDB14317A9B361, V(p0)); }
		public static void PLAYSTATS_HEIST4_FINALE(Any p0) { Invoke(0xC1E963C58664B556, V(p0)); }
		public static void PLAYSTATS_HEIST4_HACK(Any p0, Any p1, Any p2, Any p3, Any p4) { Invoke(0x2FA3173480008493, V(p0), V(p1), V(p2), V(p3), V(p4)); }
		public static void PLAYSTATS_SUB_WEAP(Any p0, Any p1, Any p2, Any p3) { Invoke(0xD4367D310F079DB0, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_FAST_TRVL(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8, Any p9, Any p10) { Invoke(0x4DC416F246A41FC8, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9), V(p10)); }
		public static void PLAYSTATS_HUB_ENTRY(Any p0) { Invoke(0x2818FF6638CB09DE, V(p0)); }
		public static void PLAYSTATS_DJ_MISSION_ENDED(Any p0) { Invoke(0xD6CA58B3B53A0F22, V(p0)); }
		public static void PLAYSTATS_ROBBERY_PREP(Any p0) { Invoke(0x1A67DFBF1F5C3835, V(p0)); }
		public static void PLAYSTATS_ROBBERY_FINALE(Any p0) { Invoke(0xBBA55BE9AAAABF44, V(p0)); }
		public static void PLAYSTATS_EXTRA_EVENT(Any p0) { Invoke(0xFA5B74BAB8A7EF99, V(p0)); }
		public static void PLAYSTATS_CARCLUB_POINTS(Any p0) { Invoke(0xFF14D6FEEC507BBE, V(p0)); }
		public static void PLAYSTATS_CARCLUB_CHALLENGE(Any p0, Any p1, Any p2, Any p3) { Invoke(0x1187CB58D7F3BED7, V(p0), V(p1), V(p2), V(p3)); }
		public static void PLAYSTATS_CARCLUB_PRIZE(int p0, Hash vehicleModel) { Invoke(0x69C922B677621428, V(p0), V(vehicleModel)); }
		public static void PLAYSTATS_AWARD_NAV(Any p0, Any p1, Any p2, Any p3) { Invoke(0x70F52471E758EBAE, V(p0), V(p1), V(p2), V(p3)); }
		public static void _PLAYSTATS_INIT_MULTIPLAYER(Any p0, Any p1, Any p2) { Invoke(0x7E5EED10B11CEDBA, V(p0), V(p1), V(p2)); }
		public static void PLAYSTATS_INST_MISSION_END(Any p0) { Invoke(0xFEA3F7E83C0610FA, V(p0)); }
		public static void PLAYSTATS_HUB_EXIT(Any p0) { Invoke(0x5A46ACE5C4661132, V(p0)); }
		public static void PLAYSTATS_VEH_DEL(int bossId1, int bossId2, int bossType, int vehicleID, int reason) { Invoke(0x10A691F5756416D0, V(bossId1), V(bossId2), V(bossType), V(vehicleID), V(reason)); }
		public static void PLAYSTATS_INVENTORY(Any p0) { Invoke(0x887DAD63CF5B7908, V(p0)); }
		public static void _PLAYSTATS_ACID_MISSION_END(Any p0) { Invoke(0x8A23D1324F6B2BAC, V(p0)); }
		public static void _PLAYSTATS_ACID_RND(Any p0) { Invoke(0xCEACCF0550FDC5BA, V(p0)); }
		public static void _PLAYSTATS_IDLE(Any p0, Any p1, Any p2) { Invoke(0xEC9553A178E8F1D1, V(p0), V(p1), V(p2)); }
		public static void _PLAYSTATS_PLAYER_STYLE(Any p0) { Invoke(0x48FAC5DC7AC6EA99, V(p0)); }
		public static void _PLAYSTATS_RANDOM_EVENT(Any p0) { Invoke(0x7EA06F970F999394, V(p0)); }
		public static void _PLAYSTATS_ALERT(Any* data) { Invoke(0x5649CA22AF74E019, V(data)); }
		public static void _PLAYSTATS_ATTRITION_STAGE_END(Any p0) { Invoke(0xBD642335A732F1A8, V(p0)); }
		public static void _PLAYSTATS_SHOWROOM_NAV(Any p0, Any p1, Hash entity) { Invoke(0x961D4157B9B428DB, V(p0), V(p1), V(entity)); }
		// Data struct contains various tunables related to test drives at Simeons Showroom or Luxury Showcase.
		public static void _PLAYSTATS_SHOWROOM_OVERVIEW(Any* data) { Invoke(0x151D6C04C9E2742F, V(data)); }
		public static void _PLAYSTATS_PIMENU_NAV(Any* data) { Invoke(0xE6D323A5E9EFFB76, V(data)); }
		public static void _PLAYSTATS_RECOVER_VEHICLE(Any* data) { Invoke(0xBEB0D930B3CCE4D5, V(data)); }




		public static void LOAD_ALL_OBJECTS_NOW() { Invoke(0xBD6E84632DD4CB3F); }
		public static void LOAD_SCENE(float x, float y, float z) { Invoke(0x4448EB75B4904BDB, V(x), V(y), V(z)); }
		public static bool NETWORK_UPDATE_LOAD_SCENE() { return Invoke<bool>(0xC4582015556D1C46); }
		public static bool IS_NETWORK_LOADING_SCENE() { return Invoke<bool>(0x41CA5A33160EA4AB); }
		public static void SET_INTERIOR_ACTIVE(int interiorID, bool toggle) { Invoke(0xE37B76C387BE28ED, V(interiorID), V(toggle)); }
		// Request a model to be loaded into memory.
		// 
		public static void REQUEST_MODEL(Hash model) { Invoke(0x963D27A58DF860AC, V(model)); }
		public static void REQUEST_MENU_PED_MODEL(Hash model) { Invoke(0xA0261AEF7ACFC51E, V(model)); }
		// Checks if the specified model has loaded into memory.
		public static bool HAS_MODEL_LOADED(Hash model) { return Invoke<bool>(0x98A4EB5D89A0C952, V(model)); }
		// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "V_FIB01_cur_elev");
		// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
		// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "V_Office_gnd_lifts");
		// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BB, "limbo");
		// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "v_fib01_jan_elev");
		// STREAMING::REQUEST_MODELS_IN_ROOM(l_13BC, "limbo");
		public static void REQUEST_MODELS_IN_ROOM(Interior interior, string roomName) { Invoke(0x8A7A40100EDFEC58, V(interior), V(roomName)); }
		// Unloads model from memory
		public static void SET_MODEL_AS_NO_LONGER_NEEDED(Hash model) { Invoke(0xE532F5D78798DAAB, V(model)); }
		// Check if model is in cdimage(rpf)
		public static bool IS_MODEL_IN_CDIMAGE(Hash model) { return Invoke<bool>(0x35B9E0803292B641, V(model)); }
		// Returns whether the specified model exists in the game.
		public static bool IS_MODEL_VALID(Hash model) { return Invoke<bool>(0xC0296A2EDF545E92, V(model)); }
		public static bool IS_MODEL_A_PED(Hash model) { return Invoke<bool>(0x75816577FEA6DAD5, V(model)); }
		// Returns whether the specified model represents a vehicle.
		public static bool IS_MODEL_A_VEHICLE(Hash model) { return Invoke<bool>(0x19AAC8F07BFEC53E, V(model)); }
		public static void REQUEST_COLLISION_AT_COORD(float x, float y, float z) { Invoke(0x07503F7948F491A7, V(x), V(y), V(z)); }
		public static void REQUEST_COLLISION_FOR_MODEL(Hash model) { Invoke(0x923CB32A3B874FCB, V(model)); }
		public static bool HAS_COLLISION_FOR_MODEL_LOADED(Hash model) { return Invoke<bool>(0x22CCA434E368F03A, V(model)); }
		// Alias of REQUEST_COLLISION_AT_COORD.
		public static void REQUEST_ADDITIONAL_COLLISION_AT_COORD(float x, float y, float z) { Invoke(0xC9156DC11411A9EA, V(x), V(y), V(z)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool DOES_ANIM_DICT_EXIST(string animDict) { return Invoke<bool>(0x2DA49C3B79856961, V(animDict)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void REQUEST_ANIM_DICT(string animDict) { Invoke(0xD3BD40951412FEF6, V(animDict)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static bool HAS_ANIM_DICT_LOADED(string animDict) { return Invoke<bool>(0xD031A9162D01088C, V(animDict)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void REMOVE_ANIM_DICT(string animDict) { Invoke(0xF66A602F829E2A06, V(animDict)); }
		// Starts loading the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static void REQUEST_ANIM_SET(string animSet) { Invoke(0x6EA47DAE7FAD0EED, V(animSet)); }
		// Gets whether the specified animation set has finished loading. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
		// 
		// Animation set and clip set are synonymous.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static bool HAS_ANIM_SET_LOADED(string animSet) { return Invoke<bool>(0xC4EA073D86FB29B0, V(animSet)); }
		// Unloads the specified animation set. An animation set provides movement animations for a ped. See SET_PED_MOVEMENT_CLIPSET.
		// 
		// Animation set and clip set are synonymous.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static void REMOVE_ANIM_SET(string animSet) { Invoke(0x16350528F93024B3, V(animSet)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static void REQUEST_CLIP_SET(string clipSet) { Invoke(0xD2A71E1A77418A49, V(clipSet)); }
		// Alias for HAS_ANIM_SET_LOADED.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static bool HAS_CLIP_SET_LOADED(string clipSet) { return Invoke<bool>(0x318234F4F3738AF3, V(clipSet)); }
		// Alias for REMOVE_ANIM_SET.
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// Full list of movement clipsets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/movementClipsetsCompact.json
		public static void REMOVE_CLIP_SET(string clipSet) { Invoke(0x01F73A131C18CD94, V(clipSet)); }
		// Exemple: REQUEST_IPL("TrevorsTrailerTrash");
		// 
		// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
		public static void REQUEST_IPL(string iplName) { Invoke(0x41B4893843BBDB74, V(iplName)); }
		// Removes an IPL from the map.
		// 
		// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
		// 
		// Example:
		// C#:
		// Function.Call(Hash.REMOVE_IPL, "trevorstrailertidy");
		// 
		// C++:
		// STREAMING::REMOVE_IPL("trevorstrailertidy");
		// 
		// iplName = Name of IPL you want to remove.
		public static void REMOVE_IPL(string iplName) { Invoke(0xEE6C5AD3ECE0A82D, V(iplName)); }
		// Full list of IPLs and interior entity sets by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/ipls.json
		public static bool IS_IPL_ACTIVE(string iplName) { return Invoke<bool>(0x88A741E44A2B3495, V(iplName)); }
		public static void SET_STREAMING(bool toggle) { Invoke(0x6E0C692677008888, V(toggle)); }
		// 0 - default
		// 1 - HeistIsland
		public static void LOAD_GLOBAL_WATER_FILE(int waterType) { Invoke(0x7E3F55ED251B76D3, V(waterType)); }
		public static int GET_GLOBAL_WATER_FILE() { return Invoke<int>(0xF741BD853611592D); }
		public static void SET_GAME_PAUSES_FOR_STREAMING(bool toggle) { Invoke(0x717CD6E6FAEBBEDC, V(toggle)); }
		public static void SET_REDUCE_PED_MODEL_BUDGET(bool toggle) { Invoke(0x77B5F9A36BF96710, V(toggle)); }
		public static void SET_REDUCE_VEHICLE_MODEL_BUDGET(bool toggle) { Invoke(0x80C527893080CCF3, V(toggle)); }
		// This is a NOP function. It does nothing at all.
		public static void SET_DITCH_POLICE_MODELS(bool toggle) { Invoke(0x42CBE54462D92634, V(toggle)); }
		public static int GET_NUMBER_OF_STREAMING_REQUESTS() { return Invoke<int>(0x4060057271CEBC89); }
		// maps script name (thread + 0xD0) by lookup via scriptfx.dat - does nothing when script name is empty
		public static void REQUEST_PTFX_ASSET() { Invoke(0x944955FB2A3935C8); }
		public static bool HAS_PTFX_ASSET_LOADED() { return Invoke<bool>(0xCA7D9B86ECA7481B); }
		public static void REMOVE_PTFX_ASSET() { Invoke(0x88C6814073DD4A73); }
		//  From the b678d decompiled scripts:
		// 
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("core_snow");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("fm_mission_controler");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("proj_xmas_firework");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_apartment_mp");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_biolab_heist");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_fireworks");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_parachute");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_indep_wheelsmoke");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_cig_plane");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_creator");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_mp_tankbattle");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_ornate_heist");
		//  STREAMING::REQUEST_NAMED_PTFX_ASSET("scr_prison_break_heist_station");
		public static void REQUEST_NAMED_PTFX_ASSET(string fxName) { Invoke(0xB80D8756B4668AB6, V(fxName)); }
		public static bool HAS_NAMED_PTFX_ASSET_LOADED(string fxName) { return Invoke<bool>(0x8702416E512EC454, V(fxName)); }
		public static void REMOVE_NAMED_PTFX_ASSET(string fxName) { Invoke(0x5F61EBBE1A00F96D, V(fxName)); }
		public static void SET_VEHICLE_POPULATION_BUDGET(int p0) { Invoke(0xCB9E1EB3BE2AF4E9, V(p0)); }
		// Control how many new (ambient?) peds will spawn in the game world.
		// Range for p0 seems to be 0-3, where 0 is none and 3 is the normal level.
		public static void SET_PED_POPULATION_BUDGET(int p0) { Invoke(0x8C95333CFC3340F3, V(p0)); }
		public static void CLEAR_FOCUS() { Invoke(0x31B73D1EA9F01DA2); }
		// Override the area where the camera will render the terrain.
		// p3, p4 and p5 are usually set to 0.0
		// 
		public static void SET_FOCUS_POS_AND_VEL(float x, float y, float z, float offsetX, float offsetY, float offsetZ) { Invoke(0xBB7454BAFF08FE25, V(x), V(y), V(z), V(offsetX), V(offsetY), V(offsetZ)); }
		// It seems to make the entity's coords mark the point from which LOD-distances are measured. In my testing, setting a vehicle as the focus entity and moving that vehicle more than 300 distance units away from the player will make the level of detail around the player go down drastically (shadows disappear, textures go extremely low res, etc). The player seems to be the default focus entity.
		public static void SET_FOCUS_ENTITY(Entity entity) { Invoke(0x198F77705FA0931D, V(entity)); }
		public static bool IS_ENTITY_FOCUS(Entity entity) { return Invoke<bool>(0x2DDFF3FB9075D747, V(entity)); }
		public static void SET_RESTORE_FOCUS_ENTITY(Entity p0) { Invoke(0x0811381EF5062FEC, V(p0)); }
		// Possible p0 values:
		// 
		// "prologue"
		// "Prologue_Main"
		public static void SET_MAPDATACULLBOX_ENABLED(string name, bool toggle) { Invoke(0xAF12610C644A35C9, V(name), V(toggle)); }
		// This native does absolutely nothing, just a nullsub
		public static void SET_ALL_MAPDATA_CULLED(Any p0) { Invoke(0x4E52E752C76E7E7A, V(p0)); }
		// Always returns zero.
		public static int STREAMVOL_CREATE_SPHERE(float x, float y, float z, float rad, Any p4, Any p5) { return Invoke<int>(0x219C7B8D53E429FD, V(x), V(y), V(z), V(rad), V(p4), V(p5)); }
		// Always returns zero.
		public static int STREAMVOL_CREATE_FRUSTUM(float p0, float p1, float p2, float p3, float p4, float p5, float p6, Any p7, Any p8) { return Invoke<int>(0x1F3F018BC3AFA77C, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		// Always returns zero.
		public static int STREAMVOL_CREATE_LINE(float p0, float p1, float p2, float p3, float p4, float p5, Any p6) { return Invoke<int>(0x0AD9710CEE2F590F, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static void STREAMVOL_DELETE(Any unused) { Invoke(0x1EE7D8DF4425F053, V(unused)); }
		public static bool STREAMVOL_HAS_LOADED(Any unused) { return Invoke<bool>(0x7D41E9D2D17C5B2D, V(unused)); }
		public static bool STREAMVOL_IS_VALID(Any unused) { return Invoke<bool>(0x07C313F94746702C, V(unused)); }
		public static bool IS_STREAMVOL_ACTIVE() { return Invoke<bool>(0xBC9823AB80A3DCAC); }
		// `radius` value is usually between `3f` and `7000f` in original 1868 scripts.
		// `p7` is 0, 1, 2, 3 or 4 used in decompiled scripts, 0 is by far the most common.
		// Returns True if success, used only 7 times in decompiled scripts of 1868
		public static bool NEW_LOAD_SCENE_START(float posX, float posY, float posZ, float offsetX, float offsetY, float offsetZ, float radius, int p7) { return Invoke<bool>(0x212A8D0D2BABFAC2, V(posX), V(posY), V(posZ), V(offsetX), V(offsetY), V(offsetZ), V(radius), V(p7)); }
		public static bool NEW_LOAD_SCENE_START_SPHERE(float x, float y, float z, float radius, Any p4) { return Invoke<bool>(0xACCFB4ACF53551B0, V(x), V(y), V(z), V(radius), V(p4)); }
		public static void NEW_LOAD_SCENE_STOP() { Invoke(0xC197616D221FF4A4); }
		public static bool IS_NEW_LOAD_SCENE_ACTIVE() { return Invoke<bool>(0xA41A05B6CB741B85); }
		public static bool IS_NEW_LOAD_SCENE_LOADED() { return Invoke<bool>(0x01B8247A7A8B9AD1); }
		public static bool IS_SAFE_TO_START_PLAYER_SWITCH() { return Invoke<bool>(0x71E7B2E657449AAD); }
		// // this enum comes directly from R* so don't edit this
		// enum ePlayerSwitchTypes
		// {
		//   SWITCH_TYPE_AUTO,
		//  SWITCH_TYPE_LONG,
		//  SWITCH_TYPE_MEDIUM,
		//    SWITCH_TYPE_SHORT
		// };
		// 
		// Use GET_IDEAL_PLAYER_SWITCH_TYPE for the best switch type.
		// 
		// ----------------------------------------------------
		// 
		// Examples from the decompiled scripts:
		// 
		// STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 0, 3);
		// STREAMING::START_PLAYER_SWITCH(l_832._f3, PLAYER::PLAYER_PED_ID(), 2050, 3);
		// STREAMING::START_PLAYER_SWITCH(PLAYER::PLAYER_PED_ID(), l_832._f3, 1024, 3);
		// STREAMING::START_PLAYER_SWITCH(g_141F27, PLAYER::PLAYER_PED_ID(), 513, v_14);
		// 
		// Note: DO NOT, use SWITCH_TYPE_LONG with flag 513. It leaves you stuck in the clouds. You'll have to call STOP_PLAYER_SWITCH() to return to your ped.
		// 
		// Flag 8 w/ SWITCH_TYPE_LONG will zoom out 3 steps, then zoom in 2/3 steps and stop on the 3rd and just hang there.
		// Flag 8 w/ SWITCH_TYPE_MEDIUM will zoom out 1 step, and just hang there.
		public static void START_PLAYER_SWITCH(Ped from, Ped to, int flags, int switchType) { Invoke(0xFAA23F2CBA159D67, V(from), V(to), V(flags), V(switchType)); }
		public static void STOP_PLAYER_SWITCH() { Invoke(0x95C0A5BBDC189AA1); }
		// Returns true if the player is currently switching, false otherwise.
		// (When the camera is in the sky moving from Trevor to Franklin for example)
		public static bool IS_PLAYER_SWITCH_IN_PROGRESS() { return Invoke<bool>(0xD9D2CFFF49FAB35F); }
		public static int GET_PLAYER_SWITCH_TYPE() { return Invoke<int>(0xB3C94A90D9FC9E62); }
		// x1, y1, z1 -- Coords of your ped model
		// x2, y2, z2 -- Coords of the ped you want to switch to
		public static int GET_IDEAL_PLAYER_SWITCH_TYPE(float x1, float y1, float z1, float x2, float y2, float z2) { return Invoke<int>(0xB5D7B26B45720E05, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2)); }
		public static int GET_PLAYER_SWITCH_STATE() { return Invoke<int>(0x470555300D10B2A5); }
		public static int GET_PLAYER_SHORT_SWITCH_STATE() { return Invoke<int>(0x20F898A5D9782800); }
		public static void SET_PLAYER_SHORT_SWITCH_STYLE(int p0) { Invoke(0x5F2013F8BC24EE69, V(p0)); }
		public static int GET_PLAYER_SWITCH_JUMP_CUT_INDEX() { return Invoke<int>(0x78C0D93253149435); }
		public static void SET_PLAYER_SWITCH_OUTRO(float cameraCoordX, float cameraCoordY, float cameraCoordZ, float camRotationX, float camRotationY, float camRotationZ, float camFov, float camFarClip, int rotationOrder) { Invoke(0xC208B673CE446B61, V(cameraCoordX), V(cameraCoordY), V(cameraCoordZ), V(camRotationX), V(camRotationY), V(camRotationZ), V(camFov), V(camFarClip), V(rotationOrder)); }
		// All names can be found in playerswitchestablishingshots.meta
		public static void SET_PLAYER_SWITCH_ESTABLISHING_SHOT(string name) { Invoke(0x0FDE9DBFC0A6BC65, V(name)); }
		public static void ALLOW_PLAYER_SWITCH_PAN() { Invoke(0x43D1680C6D19A8E9); }
		public static void ALLOW_PLAYER_SWITCH_OUTRO() { Invoke(0x74DE2E8739086740); }
		public static void ALLOW_PLAYER_SWITCH_ASCENT() { Invoke(0x8E2A065ABDAE6994); }
		public static void ALLOW_PLAYER_SWITCH_DESCENT() { Invoke(0xAD5FDF34B81BFE79); }
		public static bool IS_SWITCH_READY_FOR_DESCENT() { return Invoke<bool>(0xDFA80CB25D0A19B3); }
		public static void ENABLE_SWITCH_PAUSE_BEFORE_DESCENT() { Invoke(0xD4793DFF3AF2ABCD); }
		public static void DISABLE_SWITCH_OUTRO_FX() { Invoke(0xBD605B8E0E18B3BB); }
		// doesn't act normally when used on mount chilliad
		// Flags is a bitflag:
		// 2^n - Enabled Functionality:
		// 0 - Skip camera rotate up
		// 3 - Wait for SET_PLAYER_SWITCH_ESTABLISHING_SHOT / hang at last step. You will still need to run 0x74DE2E8739086740 to exit "properly" and then STOP_PLAYER_SWITCH
		// 6 - Invert Switch Direction (false = out, true = in)
		// 8 - Hang above ped
		// 
		// switchType: 0 - 3
		// 0: 1 step towards ped
		// 1: 3 steps out from ped
		// 2: 1 step out from ped
		// 3: 1 step towards ped
		public static void SWITCH_TO_MULTI_FIRSTPART(Ped ped, int flags, int switchType) { Invoke(0xAAB3200ED59016BC, V(ped), V(flags), V(switchType)); }
		public static void SWITCH_TO_MULTI_SECONDPART(Ped ped) { Invoke(0xD8295AF639FD9CB8, V(ped)); }
		public static bool IS_SWITCH_TO_MULTI_FIRSTPART_FINISHED() { return Invoke<bool>(0x933BBEEB8C61B5F4); }
		public static int GET_PLAYER_SWITCH_INTERP_OUT_DURATION() { return Invoke<int>(0x08C2D6C52A3104BB); }
		public static int GET_PLAYER_SWITCH_INTERP_OUT_CURRENT_TIME() { return Invoke<int>(0x5B48A06DD0E792A5); }
		public static bool IS_SWITCH_SKIPPING_DESCENT() { return Invoke<bool>(0x5B74EA8CFD5E3E7E); }
		public static void SET_SCENE_STREAMING_TRACKS_CAM_POS_THIS_FRAME() { Invoke(0x1E9057A74FD73E23); }
		public static float GET_LODSCALE() { return Invoke<float>(0x0C15B0E443B2349D); }
		// This allows you to override "extended distance scaling" setting. Needs to be called each frame.
		// Max scaling seems to be 200.0, normal is 1.0
		// See https://gfycat.com/DetailedHauntingIncatern
		public static void OVERRIDE_LODSCALE_THIS_FRAME(float scaling) { Invoke(0xA76359FC80B2438E, V(scaling)); }
		public static void REMAP_LODSCALE_RANGE_THIS_FRAME(float p0, float p1, float p2, float p3) { Invoke(0xBED8CA5FF5E04113, V(p0), V(p1), V(p2), V(p3)); }
		public static void SUPPRESS_HD_MAP_STREAMING_THIS_FRAME() { Invoke(0x472397322E92A856); }
		public static void SET_RENDER_HD_ONLY(bool toggle) { Invoke(0x40AEFD1A244741F2, V(toggle)); }
		public static void FORCE_ALLOW_TIME_BASED_FADING_THIS_FRAME() { Invoke(0x03F1A106BDA7DD3E); }
		public static void IPL_GROUP_SWAP_START(string iplName1, string iplName2) { Invoke(0x95A7DABDDBB78AE7, V(iplName1), V(iplName2)); }
		public static void IPL_GROUP_SWAP_CANCEL() { Invoke(0x63EB2B972A218CAC); }
		public static bool IPL_GROUP_SWAP_IS_READY() { return Invoke<bool>(0xFB199266061F820A); }
		public static void IPL_GROUP_SWAP_FINISH() { Invoke(0xF4A0DADB70F57FA6); }
		public static bool IPL_GROUP_SWAP_IS_ACTIVE() { return Invoke<bool>(0x5068F488DDB54DD8); }
		// This native is used to attribute the SRL that BEGIN_SRL is going to load. This is usually used for 'in-game' cinematics (not cutscenes but camera stuff) instead of SET_FOCUS_POS_AND_VEL because it loads a specific area of the map which is pretty useful when the camera moves from distant areas.
		// For instance, GTA:O opening cutscene.
		// https://pastebin.com/2EeKVeLA : a list of SRL found in srllist.meta
		// https://pastebin.com/zd9XYUWY here is the content of a SRL file opened with codewalker.
		public static void PREFETCH_SRL(string srl) { Invoke(0x3D245789CE12982C, V(srl)); }
		// Returns true when the srl from BEGIN_SRL is loaded.
		public static bool IS_SRL_LOADED() { return Invoke<bool>(0xD0263801A4C5B0BB); }
		public static void BEGIN_SRL() { Invoke(0x9BADDC94EF83B823); }
		// Clear the current srl and stop rendering the area selected by PREFETCH_SRL and started with BEGIN_SRL.
		public static void END_SRL() { Invoke(0x0A41540E63C9EE17); }
		public static void SET_SRL_TIME(float p0) { Invoke(0xA74A541C6884E7B8, V(p0)); }
		public static void SET_SRL_POST_CUTSCENE_CAMERA(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { Invoke(0xEF39EE20C537E98C, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }
		public static void SET_SRL_READAHEAD_TIMES(Any p0, Any p1, Any p2, Any p3) { Invoke(0xBEB2D9A1D9A8F55A, V(p0), V(p1), V(p2), V(p3)); }
		public static void SET_SRL_LONG_JUMP_MODE(bool p0) { Invoke(0x20C6C7E4EB082A7F, V(p0)); }
		public static void SET_SRL_FORCE_PRESTREAM(Any p0) { Invoke(0xF8155A7F03DDFC8E, V(p0)); }
		public static void SET_HD_AREA(float x, float y, float z, float radius) { Invoke(0xB85F26619073E775, V(x), V(y), V(z), V(radius)); }
		public static void CLEAR_HD_AREA() { Invoke(0xCE58B1CFB9290813); }
		public static void INIT_CREATOR_BUDGET() { Invoke(0xB5A4DB34FE89B88A); }
		public static void SHUTDOWN_CREATOR_BUDGET() { Invoke(0xCCE26000E9A6FAD7); }
		public static bool ADD_MODEL_TO_CREATOR_BUDGET(Hash modelHash) { return Invoke<bool>(0x0BC3144DEB678666, V(modelHash)); }
		public static void REMOVE_MODEL_FROM_CREATOR_BUDGET(Hash modelHash) { Invoke(0xF086AD9354FAC3A3, V(modelHash)); }
		// 0.0 = no memory used
		// 1.0 = all memory used
		// 
		// Maximum model memory (as defined in common\data\missioncreatordata.meta) is 100 MiB
		public static float GET_USED_CREATOR_BUDGET() { return Invoke<float>(0x3D3D8B3BE5A83D35); }
		// Enables the specified island. For more information, see islandhopper.meta
		public static void SET_ISLAND_ENABLED(string name, bool toggle) { Invoke(0x9A9D1BA639675CF1, V(name), V(toggle)); }




		// Stand still (?)
		public static void TASK_PAUSE(Ped ped, int ms) { Invoke(0xE73A266DB0CA9042, V(ped), V(ms)); }
		// Makes the specified ped stand still for (time) milliseconds.
		public static void TASK_STAND_STILL(Ped ped, int time) { Invoke(0x919BE13EED931959, V(ped), V(time)); }
		// Definition is wrong. This has 4 parameters (Not sure when they were added. v350 has 2, v678 has 4).
		// 
		// v350: Ped ped, bool unused
		// v678: Ped ped, bool unused, bool flag1, bool flag2
		// 
		// flag1 = super jump, flag2 = do nothing if flag1 is false and doubles super jump height if flag1 is true.
		public static void TASK_JUMP(Ped ped, bool usePlayerLaunchForce, bool doSuperJump, bool useFullSuperJumpForce) { Invoke(0x0AE4086104E067B1, V(ped), V(usePlayerLaunchForce), V(doSuperJump), V(useFullSuperJumpForce)); }
		public static void TASK_COWER(Ped ped, int duration) { Invoke(0x3EB1FE9E8E908E15, V(ped), V(duration)); }
		// In the scripts, p3 was always -1.
		// 
		// p3 seems to be duration or timeout of turn animation.
		// Also facingPed can be 0 or -1 so ped will just raise hands up.
		public static void TASK_HANDS_UP(Ped ped, int duration, Ped facingPed, int timeToFacePed, int flags) { Invoke(0xF2EAB31979A7F910, V(ped), V(duration), V(facingPed), V(timeToFacePed), V(flags)); }
		public static void UPDATE_TASK_HANDS_UP_DURATION(Ped ped, int duration) { Invoke(0xA98FCAFD7893C834, V(ped), V(duration)); }
		// The given ped will try to open the nearest door to 'seat'.
		// Example: telling the ped to open the door for the driver seat does not necessarily mean it will open the driver door, it may choose to open the passenger door instead if that one is closer.
		public static void TASK_OPEN_VEHICLE_DOOR(Ped ped, Vehicle vehicle, int timeOut, int seat, float speed) { Invoke(0x965791A9A488A062, V(ped), V(vehicle), V(timeOut), V(seat), V(speed)); }
		// speed 1.0 = walk, 2.0 = run
		// p5 1 = normal, 3 = teleport to vehicle, 16 = teleport directly into vehicle
		// p6 is always 0
		// 
		// Usage of seat 
		// -1 = driver
		// 0 = passenger
		// 1 = left back seat
		// 2 = right back seat
		// 3 = outside left
		// 4 = outside right
		public static void TASK_ENTER_VEHICLE(Ped ped, Vehicle vehicle, int timeout, int seat, float speed, int flag, string overrideEntryClipsetName, Any p7) { Invoke(0xC20E50AA46D09CA8, V(ped), V(vehicle), V(timeout), V(seat), V(speed), V(flag), V(overrideEntryClipsetName), V(p7)); }
		// Flags from decompiled scripts:
		// 0 = normal exit and closes door.
		// 1 = normal exit and closes door.
		// 16 = teleports outside, door kept closed.
		// 64 = normal exit and closes door, maybe a bit slower animation than 0.
		// 256 = normal exit but does not close the door.
		// 4160 = ped is throwing himself out, even when the vehicle is still.
		// 262144 = ped moves to passenger seat first, then exits normally
		// 
		// Others to be tried out: 320, 512, 131072.
		public static void TASK_LEAVE_VEHICLE(Ped ped, Vehicle vehicle, int flags) { Invoke(0xD3DBCE61A490BE02, V(ped), V(vehicle), V(flags)); }
		public static void TASK_GET_OFF_BOAT(Ped ped, Vehicle boat) { Invoke(0x9C00E77AF14B2DFF, V(ped), V(boat)); }
		public static void TASK_SKY_DIVE(Ped ped, bool instant) { Invoke(0x601736CFE536B0A0, V(ped), V(instant)); }
		// Second parameter is unused.
		// 
		// second parameter was for jetpack in the early stages of gta and the hard coded code is now removed
		public static void TASK_PARACHUTE(Ped ped, bool giveParachuteItem, bool instant) { Invoke(0xD2F1C53C97EE81AB, V(ped), V(giveParachuteItem), V(instant)); }
		// makes ped parachute to coords x y z. Works well with PATHFIND::GET_SAFE_COORD_FOR_PED
		public static void TASK_PARACHUTE_TO_TARGET(Ped ped, float x, float y, float z) { Invoke(0xB33E291AFA6BD03A, V(ped), V(x), V(y), V(z)); }
		public static void SET_PARACHUTE_TASK_TARGET(Ped ped, float x, float y, float z) { Invoke(0xC313379AF0FCEDA7, V(ped), V(x), V(y), V(z)); }
		public static void SET_PARACHUTE_TASK_THRUST(Ped ped, float thrust) { Invoke(0x0729BAC1B8C64317, V(ped), V(thrust)); }
		// minHeightAboveGround: the minimum height above ground the heli must be at before the ped can start rappelling
		// 
		// Only appears twice in the scripts.
		// 
		// TASK::TASK_RAPPEL_FROM_HELI(PLAYER::PLAYER_PED_ID(), 10.0f);
		// TASK::TASK_RAPPEL_FROM_HELI(a_0, 10.0f);
		public static void TASK_RAPPEL_FROM_HELI(Ped ped, float minHeightAboveGround) { Invoke(0x09693B0312F91649, V(ped), V(minHeightAboveGround)); }
		// info about driving modes: https://gtaforums.com/topic/822314-guide-driving-styles/
		public static void TASK_VEHICLE_DRIVE_TO_COORD(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, Any p6, Hash vehicleModel, int drivingMode, float stopRange, float straightLineDistance) { Invoke(0xE2A2AA2F659D77A7, V(ped), V(vehicle), V(x), V(y), V(z), V(speed), V(p6), V(vehicleModel), V(drivingMode), V(stopRange), V(straightLineDistance)); }
		public static void TASK_VEHICLE_DRIVE_TO_COORD_LONGRANGE(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int driveMode, float stopRange) { Invoke(0x158BB33F920D360C, V(ped), V(vehicle), V(x), V(y), V(z), V(speed), V(driveMode), V(stopRange)); }
		public static void TASK_VEHICLE_DRIVE_WANDER(Ped ped, Vehicle vehicle, float speed, int drivingStyle) { Invoke(0x480142959D337D00, V(ped), V(vehicle), V(speed), V(drivingStyle)); }
		// p6 always -1
		// p7 always 10.0
		// p8 always 1
		public static void TASK_FOLLOW_TO_OFFSET_OF_ENTITY(Ped ped, Entity entity, float offsetX, float offsetY, float offsetZ, float movementSpeed, int timeout, float stoppingRange, bool persistFollowing) { Invoke(0x304AE42E357B8C7E, V(ped), V(entity), V(offsetX), V(offsetY), V(offsetZ), V(movementSpeed), V(timeout), V(stoppingRange), V(persistFollowing)); }
		public static void TASK_GO_STRAIGHT_TO_COORD(Ped ped, float x, float y, float z, float speed, int timeout, float targetHeading, float distanceToSlide) { Invoke(0xD76B57B44F1E6F8B, V(ped), V(x), V(y), V(z), V(speed), V(timeout), V(targetHeading), V(distanceToSlide)); }
		public static void TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_ENTITY(Ped ped, Entity entity, float x, float y, float z, float moveBlendRatio, int time) { Invoke(0x61E360B7E040D12E, V(ped), V(entity), V(x), V(y), V(z), V(moveBlendRatio), V(time)); }
		// Makes the specified ped achieve the specified heading.
		// 
		// pedHandle: The handle of the ped to assign the task to.
		// heading: The desired heading.
		// timeout: The time, in milliseconds, to allow the task to complete. If the task times out, it is cancelled, and the ped will stay at the heading it managed to reach in the time.
		public static void TASK_ACHIEVE_HEADING(Ped ped, float heading, int timeout) { Invoke(0x93B93A37987F1F3D, V(ped), V(heading), V(timeout)); }
		// MulleKD19: Clears the current point route. Call this before TASK_EXTEND_ROUTE and TASK_FOLLOW_POINT_ROUTE.
		public static void TASK_FLUSH_ROUTE() { Invoke(0x841142A1376E9006); }
		// MulleKD19: Adds a new point to the current point route. Call TASK_FLUSH_ROUTE before the first call to this. Call TASK_FOLLOW_POINT_ROUTE to make the Ped go the route.
		// 
		// A maximum of 8 points can be added.
		public static void TASK_EXTEND_ROUTE(float x, float y, float z) { Invoke(0x1E7889778264843A, V(x), V(y), V(z)); }
		// MulleKD19: Makes the ped go on the created point route.
		// 
		// ped: The ped to give the task to.
		// speed: The speed to move at in m/s.
		// int: Unknown. Can be 0, 1, 2 or 3.
		// 
		// Example:
		// TASK_FLUSH_ROUTE();
		// TASK_EXTEND_ROUTE(0f, 0f, 70f);
		// TASK_EXTEND_ROUTE(10f, 0f, 70f);
		// TASK_EXTEND_ROUTE(10f, 10f, 70f);
		// TASK_FOLLOW_POINT_ROUTE(GET_PLAYER_PED(), 1f, 0);
		public static void TASK_FOLLOW_POINT_ROUTE(Ped ped, float speed, int mode) { Invoke(0x595583281858626E, V(ped), V(speed), V(mode)); }
		// The entity will move towards the target until time is over (duration) or get in target's range (distance). p5 and p6 are unknown, but you could leave p5 = 1073741824 or 100 or even 0 (didn't see any difference but on the decompiled scripts, they use 1073741824 mostly) and p6 = 0
		// 
		// Note: I've only tested it on entity -> ped and target -> vehicle. It could work differently on other entities, didn't try it yet.
		// 
		// Example: TASK::TASK_GO_TO_ENTITY(pedHandle, vehicleHandle, 5000, 4.0, 100, 1073741824, 0)
		// 
		// Ped will run towards the vehicle for 5 seconds and stop when time is over or when he gets 4 meters(?) around the vehicle (with duration = -1, the task duration will be ignored).
		// 
		// enum EGOTO_ENTITY_SCRIPT_FLAGS
		// {
		// 	EGOTO_ENTITY_NEVER_SLOW_FOR_PATH_LENGTH = 0x01,
		// };
		public static void TASK_GO_TO_ENTITY(Entity entity, Entity target, int duration, float distance, float moveBlendRatio, float slowDownDistance, int flags) { Invoke(0x6A071245EB0D1882, V(entity), V(target), V(duration), V(distance), V(moveBlendRatio), V(slowDownDistance), V(flags)); }
		// Makes the specified ped flee the specified distance from the specified position.
		public static void TASK_SMART_FLEE_COORD(Ped ped, float x, float y, float z, float distance, int time, bool preferPavements, bool quitIfOutOfRange) { Invoke(0x94587F17E9C365D5, V(ped), V(x), V(y), V(z), V(distance), V(time), V(preferPavements), V(quitIfOutOfRange)); }
		// Makes a ped run away from another ped (fleeTarget).
		// 
		// distance = ped will flee this distance.
		// fleeTime = ped will flee for this amount of time, set to "-1" to flee forever
		public static void TASK_SMART_FLEE_PED(Ped ped, Ped fleeTarget, float safeDistance, int fleeTime, bool preferPavements, bool updateToNearestHatedPed) { Invoke(0x22B0D0E37CCB840D, V(ped), V(fleeTarget), V(safeDistance), V(fleeTime), V(preferPavements), V(updateToNearestHatedPed)); }
		public static void TASK_REACT_AND_FLEE_PED(Ped ped, Ped fleeTarget) { Invoke(0x72C896464915D1B1, V(ped), V(fleeTarget)); }
		public static void TASK_SHOCKING_EVENT_REACT(Ped ped, int eventHandle) { Invoke(0x452419CBD838065B, V(ped), V(eventHandle)); }
		public static void TASK_WANDER_IN_AREA(Ped ped, float x, float y, float z, float radius, float minimalLength, float timeBetweenWalks) { Invoke(0xE054346CA3A0F315, V(ped), V(x), V(y), V(z), V(radius), V(minimalLength), V(timeBetweenWalks)); }
		// Makes ped walk around the area.
		// 
		// set p1 to 10.0f and p2 to 10 if you want the ped to walk anywhere without a duration.
		public static void TASK_WANDER_STANDARD(Ped ped, float heading, int flags) { Invoke(0xBB9CE077274F6A1B, V(ped), V(heading), V(flags)); }
		public static void TASK_WANDER_SPECIFIC(Ped ped, string conditionalAnimGroupStr, string conditionalAnimStr, float heading) { Invoke(0x6919A2F136426098, V(ped), V(conditionalAnimGroupStr), V(conditionalAnimStr), V(heading)); }
		// Modes:
		// 0 - ignore heading
		// 1 - park forward
		// 2 - park backwards
		// 
		// Depending on the angle of approach, the vehicle can park at the specified heading or at its exact opposite (-180) angle.
		// 
		// Radius seems to define how close the vehicle has to be -after parking- to the position for this task considered completed. If the value is too small, the vehicle will try to park again until it's exactly where it should be. 20.0 Works well but lower values don't, like the radius is measured in centimeters or something.
		public static void TASK_VEHICLE_PARK(Ped ped, Vehicle vehicle, float x, float y, float z, float heading, int mode, float radius, bool keepEngineOn) { Invoke(0x0F3E34E968EA374E, V(ped), V(vehicle), V(x), V(y), V(z), V(heading), V(mode), V(radius), V(keepEngineOn)); }
		// known "killTypes" are: "AR_stealth_kill_knife" and "AR_stealth_kill_a".
		public static void TASK_STEALTH_KILL(Ped killer, Ped target, Hash stealthKillActionResultHash, float desiredMoveBlendRatio, int stealthFlags) { Invoke(0xAA5DC05579D60BD9, V(killer), V(target), V(stealthKillActionResultHash), V(desiredMoveBlendRatio), V(stealthFlags)); }
		public static void TASK_PLANT_BOMB(Ped ped, float x, float y, float z, float heading) { Invoke(0x965FEC691D55E9BF, V(ped), V(x), V(y), V(z), V(heading)); }
		public static void TASK_SHARK_CIRCLE_COORD(Ped ped, float x, float y, float z, float moveBlendRatio, float radius) { Invoke(0x60A19CF85FF4CEFA, V(ped), V(x), V(y), V(z), V(moveBlendRatio), V(radius)); }
		// If no timeout, set timeout to -1.
		public static void TASK_FOLLOW_NAV_MESH_TO_COORD(Ped ped, float x, float y, float z, float moveBlendRatio, int time, float targetRadius, int flags, float targetHeading) { Invoke(0x15D3A79D4E44B913, V(ped), V(x), V(y), V(z), V(moveBlendRatio), V(time), V(targetRadius), V(flags), V(targetHeading)); }
		public static void TASK_FOLLOW_NAV_MESH_TO_COORD_ADVANCED(Ped ped, float x, float y, float z, float moveBlendRatio, int time, float targetRadius, int flags, float slideToCoordHeading, float maxSlopeNavigable, float clampMaxSearchDistance, float targetHeading) { Invoke(0x17F58B88D085DBAC, V(ped), V(x), V(y), V(z), V(moveBlendRatio), V(time), V(targetRadius), V(flags), V(slideToCoordHeading), V(maxSlopeNavigable), V(clampMaxSearchDistance), V(targetHeading)); }
		public static void SET_PED_PATH_CAN_USE_CLIMBOVERS(Ped ped, bool Toggle) { Invoke(0x8E06A6FE76C9EFF4, V(ped), V(Toggle)); }
		public static void SET_PED_PATH_CAN_USE_LADDERS(Ped ped, bool Toggle) { Invoke(0x77A5B103C87F476E, V(ped), V(Toggle)); }
		public static void SET_PED_PATH_CAN_DROP_FROM_HEIGHT(Ped ped, bool Toggle) { Invoke(0xE361C5C71C431A4F, V(ped), V(Toggle)); }
		// Default modifier is 1.0, minimum is 0.0 and maximum is 10.0.
		public static void SET_PED_PATH_CLIMB_COST_MODIFIER(Ped ped, float modifier) { Invoke(0x88E32DB8C1A4AA4B, V(ped), V(modifier)); }
		public static void SET_PED_PATH_MAY_ENTER_WATER(Ped ped, bool mayEnterWater) { Invoke(0xF35425A4204367EC, V(ped), V(mayEnterWater)); }
		public static void SET_PED_PATH_PREFER_TO_AVOID_WATER(Ped ped, bool avoidWater) { Invoke(0x38FE1EC73743793C, V(ped), V(avoidWater)); }
		public static void SET_PED_PATH_AVOID_FIRE(Ped ped, bool avoidFire) { Invoke(0x4455517B28441E60, V(ped), V(avoidFire)); }
		// Needs to be looped! And yes, it does work and is not a hash collision.
		// Birds will try to reach the given height.
		public static void SET_GLOBAL_MIN_BIRD_FLIGHT_HEIGHT(float height) { Invoke(0x6C6B148586F934F7, V(height)); }
		// Looks like the last parameter returns true if the path has been calculated, while the first returns the remaining distance to the end of the path.
		// Return value of native is the same as GET_NAVMESH_ROUTE_RESULT
		// Looks like the native returns an int for the path's state:
		// 1 - ???
		// 2 - ???
		// 3 - Finished Generating 
		public static int GET_NAVMESH_ROUTE_DISTANCE_REMAINING(Ped ped, float* distanceRemaining, bool* isPathReady) { return Invoke<int>(0xC6F5C0BCDC74D62D, V(ped), V(distanceRemaining), V(isPathReady)); }
		// See GET_NAVMESH_ROUTE_DISTANCE_REMAINING for more details.
		public static int GET_NAVMESH_ROUTE_RESULT(Ped ped) { return Invoke<int>(0x632E831F382A0FA8, V(ped)); }
		public static bool IS_CONTROLLED_VEHICLE_UNABLE_TO_GET_TO_ROAD(Ped ped) { return Invoke<bool>(0x3E38E28A1D80DDF6, V(ped)); }
		// example from fm_mission_controller
		// 
		// TASK::TASK_GO_TO_COORD_ANY_MEANS(l_649, sub_f7e86(-1, 0), 1.0, 0, 0, 786603, 0xbf800000);
		//  
		public static void TASK_GO_TO_COORD_ANY_MEANS(Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets) { Invoke(0x5BC448CB78FA3E88, V(ped), V(x), V(y), V(z), V(moveBlendRatio), V(vehicle), V(useLongRangeVehiclePathing), V(drivingFlags), V(maxRangeToShootTargets)); }
		public static void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS(Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets, float extraVehToTargetDistToPreferVehicle, float driveStraightLineDistance, int extraFlags, float warpTimerMS) { Invoke(0x1DD45F9ECFDB1BC9, V(ped), V(x), V(y), V(z), V(moveBlendRatio), V(vehicle), V(useLongRangeVehiclePathing), V(drivingFlags), V(maxRangeToShootTargets), V(extraVehToTargetDistToPreferVehicle), V(driveStraightLineDistance), V(extraFlags), V(warpTimerMS)); }
		public static void TASK_GO_TO_COORD_ANY_MEANS_EXTRA_PARAMS_WITH_CRUISE_SPEED(Ped ped, float x, float y, float z, float moveBlendRatio, Vehicle vehicle, bool useLongRangeVehiclePathing, int drivingFlags, float maxRangeToShootTargets, float extraVehToTargetDistToPreferVehicle, float driveStraightLineDistance, int extraFlags, float cruiseSpeed, float targetArriveDist) { Invoke(0xB8ECD61F531A7B02, V(ped), V(x), V(y), V(z), V(moveBlendRatio), V(vehicle), V(useLongRangeVehiclePathing), V(drivingFlags), V(maxRangeToShootTargets), V(extraVehToTargetDistToPreferVehicle), V(driveStraightLineDistance), V(extraFlags), V(cruiseSpeed), V(targetArriveDist)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		// 
		// float speed > normal speed is 8.0f
		// ----------------------
		// 
		// float speedMultiplier > multiply the playback speed
		// ----------------------
		// 
		// int duration: time in millisecond
		// ----------------------
		// -1 _ _ _ _ _ _ _> Default (see flag)
		// 0 _ _ _ _ _ _ _ > Not play at all
		// Small value _ _ > Slow down animation speed
		// Other _ _ _ _ _ > freeze player control until specific time (ms) has 
		// _ _ _ _ _ _ _ _ _ passed. (No effect if flag is set to be 
		// _ _ _ _ _ _ _ _ _ controllable.)
		// 
		// int flag:
		// ----------------------
		// enum eAnimationFlags
		// {
		//  ANIM_FLAG_NORMAL = 0,
		//    ANIM_FLAG_REPEAT = 1,
		//    ANIM_FLAG_STOP_LAST_FRAME = 2,
		//    ANIM_FLAG_UPPERBODY = 16,
		//    ANIM_FLAG_ENABLE_PLAYER_CONTROL = 32,
		//    ANIM_FLAG_CANCELABLE = 120,
		// };
		// Odd number : loop infinitely
		// Even number : Freeze at last frame
		// Multiple of 4: Freeze at last frame but controllable
		// 
		// 01 to 15 > Full body
		// 10 to 31 > Upper body
		// 32 to 47 > Full body > Controllable
		// 48 to 63 > Upper body > Controllable
		// ...
		// 001 to 255 > Normal
		// 256 to 511 > Garbled
		// ...
		// 
		// playbackRate:
		// 
		// values are between 0.0 and 1.0
		// 
		// 
		// lockX:  
		// 
		// 0 in most cases 1 for rcmepsilonism8 and rcmpaparazzo_3
		// > 1 for mini@sprunk
		//  
		// 
		// lockY:
		// 
		// 0 in most cases 
		// 1 for missfam5_yoga, missfra1mcs_2_crew_react
		// 
		// 
		// lockZ: 
		// 
		//     0 for single player 
		//     Can be 1 but only for MP 
		public static void TASK_PLAY_ANIM(Ped ped, string animDictionary, string animationName, float blendInSpeed, float blendOutSpeed, int duration, int flag, float playbackRate, bool lockX, bool lockY, bool lockZ) { Invoke(0xEA47FE3719165B94, V(ped), V(animDictionary), V(animationName), V(blendInSpeed), V(blendOutSpeed), V(duration), V(flag), V(playbackRate), V(lockX), V(lockY), V(lockZ)); }
		// It's similar to TASK_PLAY_ANIM, except the first 6 floats let you specify the initial position and rotation of the task. (Ped gets teleported to the position).
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void TASK_PLAY_ANIM_ADVANCED(Ped ped, string animDict, string animName, float posX, float posY, float posZ, float rotX, float rotY, float rotZ, float animEnterSpeed, float animExitSpeed, int duration, Any flag, float animTime, int rotOrder, int ikFlags) { Invoke(V(0x83CDB10EA29B370B), V(ped), V(animDict), V(animName), V(posX), V(posY), V(posZ), V(rotX), V(rotY), V(rotZ), V(animEnterSpeed), V(animExitSpeed), V(duration), V(flag), V(animTime), V(rotOrder), V(ikFlags)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void STOP_ANIM_TASK(Entity entity, string animDictionary, string animationName, float blendDelta) { Invoke(0x97FF36A1D40EA00A, V(entity), V(animDictionary), V(animationName), V(blendDelta)); }
		// From fm_mission_Controller->c:
		// reserve_network_mission_objects(get_num_reserved_mission_objects(0) + 1);
		//            vVar28 = {0.094f, 0.02f, -0.005f};
		//             vVar29 = {-92.24f, 63.64f, 150.24f};
		//           func_253(&uVar30, joaat("prop_ld_case_01"), Global_1592429.imm_34757[iParam1 <268>], 1, 1, 0, 1);
		//          set_entity_lod_dist(net_to_ent(uVar30), 500);
		//          attach_entity_to_entity(net_to_ent(uVar30), iParam0, get_ped_bone_index(iParam0, 28422), vVar28, vVar29, 1, 0, 0, 0, 2, 1);
		//            Var31.imm_4 = 1065353216;
		//          Var31.imm_5 = 1065353216;
		//          Var31.imm_9 = 1065353216;
		//          Var31.imm_10 = 1065353216;
		//             Var31.imm_14 = 1065353216;
		//             Var31.imm_15 = 1065353216;
		//             Var31.imm_17 = 1040187392;
		//             Var31.imm_18 = 1040187392;
		//             Var31.imm_19 = -1;
		//             Var32.imm_4 = 1065353216;
		//          Var32.imm_5 = 1065353216;
		//          Var32.imm_9 = 1065353216;
		//          Var32.imm_10 = 1065353216;
		//             Var32.imm_14 = 1065353216;
		//             Var32.imm_15 = 1065353216;
		//             Var32.imm_17 = 1040187392;
		//             Var32.imm_18 = 1040187392;
		//             Var32.imm_19 = -1;
		//             Var31 = 1;
		//             Var31.imm_1 = "weapons@misc@jerrycan@mp_male";
		//           Var31.imm_2 = "idle";
		//            Var31.imm_20 = 1048633;
		//            Var31.imm_4 = 0.5f;
		//            Var31.imm_16 = get_hash_key("BONEMASK_ARMONLY_R");
		//           task_scripted_animation(iParam0, &Var31, &Var32, &Var32, 0f, 0.25f);
		//           set_model_as_no_longer_needed(joaat("prop_ld_case_01"));
		//             remove_anim_dict("anim@heists@biolab@");
		public static void TASK_SCRIPTED_ANIMATION(Ped ped, int* priorityLowData, int* priorityMidData, int* priorityHighData, float blendInDelta, float blendOutDelta) { Invoke(0x126EF75F1E17ABE5, V(ped), V(priorityLowData), V(priorityMidData), V(priorityHighData), V(blendInDelta), V(blendOutDelta)); }
		public static void PLAY_ENTITY_SCRIPTED_ANIM(Entity entity, int* priorityLowData, int* priorityMidData, int* priorityHighData, float blendInDelta, float blendOutDelta) { Invoke(0x77A1EEC547E7FCF1, V(entity), V(priorityLowData), V(priorityMidData), V(priorityHighData), V(blendInDelta), V(blendOutDelta)); }
		// Looks like p1 may be a flag, still need to do some research, though.
		public static void STOP_ANIM_PLAYBACK(Entity entity, int priority, bool secondary) { Invoke(0xEE08C992D238C5D1, V(entity), V(priority), V(secondary)); }
		public static void SET_ANIM_WEIGHT(Entity entity, float weight, int priority, int index, bool secondary) { Invoke(0x207F1A47C0342F48, V(entity), V(weight), V(priority), V(index), V(secondary)); }
		public static void SET_ANIM_PHASE(Entity entity, float phase, int priority, bool secondary) { Invoke(0xDDF3CB5A0A4C0B49, V(entity), V(phase), V(priority), V(secondary)); }

		public static void SET_ANIM_RATE(Entity entity, float rate, int priority, bool secondary) { Invoke(0x032D49C5E359C847, V(entity), V(rate), V(priority), V(secondary)); }
		public static void SET_ANIM_LOOPED(Entity entity, bool looped, int priority, bool secondary) { Invoke(0x70033C3CC29A1FF4, V(entity), V(looped), V(priority), V(secondary)); }
		// Example from the scripts:
		// TASK::TASK_PLAY_PHONE_GESTURE_ANIMATION(PLAYER::PLAYER_PED_ID(), v_3, v_2, v_4, 0.25, 0.25, 0, 0);
		// 
		// =========================================================
		// ^^ No offense, but Idk how that would really help anyone.
		// 
		// As for the animDict & animation, they're both store in a global in all 5 scripts. So if anyone would be so kind as to read that global and comment what strings they use. Thanks.
		// 
		// Known boneMaskTypes'
		// "BONEMASK_HEADONLY"
		// "BONEMASK_HEAD_NECK_AND_ARMS"
		// "BONEMASK_HEAD_NECK_AND_L_ARM"
		// "BONEMASK_HEAD_NECK_AND_R_ARM"
		// 
		// p4 known args - 0.0f, 0.5f, 0.25f
		// p5 known args - 0.0f, 0.25f
		// p6 known args - 1 if a global if check is passed.
		// p7 known args - 1 if a global if check is passed.
		// 
		// The values found above, I found within the 5 scripts this is ever called in. (fmmc_launcher, fm_deathmatch_controller, fm_impromptu_dm_controller, fm_mission_controller, and freemode).
		// =========================================================
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void TASK_PLAY_PHONE_GESTURE_ANIMATION(Ped ped, string animDict, string animation, string boneMaskType, float blendInDuration, float blendOutDuration, bool isLooping, bool holdLastFrame) { Invoke(0x8FBB6758B3B3E9EC, V(ped), V(animDict), V(animation), V(boneMaskType), V(blendInDuration), V(blendOutDuration), V(isLooping), V(holdLastFrame)); }
		public static void TASK_STOP_PHONE_GESTURE_ANIMATION(Ped ped, float blendOutOverride) { Invoke(0x3FA00D4F4641BFAE, V(ped), V(blendOutOverride)); }
		public static bool IS_PLAYING_PHONE_GESTURE_ANIM(Ped ped) { return Invoke<bool>(0xB8EBB1E9D3588C10, V(ped)); }
		public static float GET_PHONE_GESTURE_ANIM_CURRENT_TIME(Ped ped) { return Invoke<float>(0x47619ABE8B268C60, V(ped)); }
		public static float GET_PHONE_GESTURE_ANIM_TOTAL_TIME(Ped ped) { return Invoke<float>(0x1EE0F68A7C25DEC6, V(ped)); }
		// Most probably plays a specific animation on vehicle. For example getting chop out of van etc...
		// 
		// Here's how its used - 
		// 
		// TASK::TASK_VEHICLE_PLAY_ANIM(l_325, "rcmnigel1b", "idle_speedo");
		// 
		// TASK::TASK_VEHICLE_PLAY_ANIM(l_556[0/*1*/], "missfra0_chop_drhome", "InCar_GetOutofBack_Speedo");
		// 
		// FYI : Speedo is the name of van in which chop was put in the mission.
		public static void TASK_VEHICLE_PLAY_ANIM(Vehicle vehicle, string animationSet, string animationName) { Invoke(0x69F5C3BD0F3EBD89, V(vehicle), V(animationSet), V(animationName)); }
		// enum eScriptLookatFlags
		// {
		// 	SLF_SLOW_TURN_RATE            = 1,    // turn the head toward the target slowly
		// 	SLF_FAST_TURN_RATE            = 2,    // turn the head toward the target quickly
		// 	SLF_EXTEND_YAW_LIMIT        = 4,    // wide yaw head limits
		// 	SLF_EXTEND_PITCH_LIMIT        = 8,    // wide pitch head limit
		// 	SLF_WIDEST_YAW_LIMIT        = 16,   // widest yaw head limit
		// 	SLF_WIDEST_PITCH_LIMIT        = 32,   // widest pitch head limit
		// 	SLF_NARROW_YAW_LIMIT        = 64,   // narrow yaw head limits
		// 	SLF_NARROW_PITCH_LIMIT        = 128,  // narrow pitch head limit
		// 	SLF_NARROWEST_YAW_LIMIT        = 256,  // narrowest yaw head limit
		// 	SLF_NARROWEST_PITCH_LIMIT    = 512,  // narrowest pitch head limit
		// 	SLF_USE_TORSO                = 1024, // use the torso aswell as the neck and head (currently disabled)
		// 	SLF_WHILE_NOT_IN_FOV        = 2048, // keep tracking the target even if they are not in the hard coded FOV
		// 	SLF_USE_CAMERA_FOCUS        = 4096, // use the camera as the target
		// 	SLF_USE_EYES_ONLY            = 8192, // only track the target with the eyes  
		// 	SLF_USE_LOOK_DIR            = 16384, // use information in look dir DOF
		// 	SLF_FROM_SCRIPT                = 32768, // internal use only
		// 	SLF_USE_REF_DIR_ABSOLUTE    = 65536  // use absolute reference direction mode for solver
		// };
		public static void TASK_LOOK_AT_COORD(Entity entity, float x, float y, float z, int duration, int flags, int priority) { Invoke(0x6FA46612594F7973, V(entity), V(x), V(y), V(z), V(duration), V(flags), V(priority)); }
		// For flags, please refer to TASK_LOOK_AT_COORD.
		public static void TASK_LOOK_AT_ENTITY(Ped ped, Entity lookAt, int duration, int flags, int priority) { Invoke(0x69F4BE8C8CC4796C, V(ped), V(lookAt), V(duration), V(flags), V(priority)); }
		public static void TASK_CLEAR_LOOK_AT(Ped ped) { Invoke(0x0F804F1DB19B9689, V(ped)); }
		public static void OPEN_SEQUENCE_TASK(int* taskSequenceId) { Invoke(0xE8854A4326B9E12B, V(taskSequenceId)); }
		public static void CLOSE_SEQUENCE_TASK(int taskSequenceId) { Invoke(0x39E72BC99E6360CB, V(taskSequenceId)); }
		public static void TASK_PERFORM_SEQUENCE(Ped ped, int taskSequenceId) { Invoke(0x5ABA3986D90D8A3B, V(ped), V(taskSequenceId)); }
		public static void TASK_PERFORM_SEQUENCE_LOCALLY(Ped ped, int taskSequenceId) { Invoke(0x8C33220C8D78CA0D, V(ped), V(taskSequenceId)); }
		public static void CLEAR_SEQUENCE_TASK(int* taskSequenceId) { Invoke(0x3841422E9C488D8C, V(taskSequenceId)); }
		public static void SET_SEQUENCE_TO_REPEAT(int taskSequenceId, bool repeat) { Invoke(0x58C70CF3A41E4AE7, V(taskSequenceId), V(repeat)); }
		// returned values:
		// 0 to 7 = task that's currently in progress, 0 meaning the first one.
		// -1 no task sequence in progress.
		public static int GET_SEQUENCE_PROGRESS(Ped ped) { return Invoke<int>(0x00A9010CFE1E3533, V(ped)); }
		// Task index enum: https://alloc8or.re/gta5/doc/enums/eTaskTypeIndex.txt
		public static bool GET_IS_TASK_ACTIVE(Ped ped, int taskIndex) { return Invoke<bool>(0xB0760331C7AA4155, V(ped), V(taskIndex)); }
		// Gets the status of a script-assigned task.
		// taskHash: https://alloc8or.re/gta5/doc/enums/eScriptTaskHash.txt
		public static int GET_SCRIPT_TASK_STATUS(Ped ped, Hash taskHash) { return Invoke<int>(0x77F1BEB8863288D5, V(ped), V(taskHash)); }
		// https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
		public static int GET_ACTIVE_VEHICLE_MISSION_TYPE(Vehicle vehicle) { return Invoke<int>(0x534AEBA6E5ED4CAB, V(vehicle)); }
		// Flags are the same flags used in TASK_LEAVE_VEHICLE
		public static void TASK_LEAVE_ANY_VEHICLE(Ped ped, int delayTime, int flags) { Invoke(0x504D54DF3F6F2247, V(ped), V(delayTime), V(flags)); }
		public static void TASK_AIM_GUN_SCRIPTED(Ped ped, Hash scriptTask, bool disableBlockingClip, bool instantBlendToAim) { Invoke(0x7A192BE16D373D00, V(ped), V(scriptTask), V(disableBlockingClip), V(instantBlendToAim)); }
		public static void TASK_AIM_GUN_SCRIPTED_WITH_TARGET(Ped ped, Ped target, float x, float y, float z, int gunTaskType, bool disableBlockingClip, bool forceAim) { Invoke(0x8605AF0DE8B3A5AC, V(ped), V(target), V(x), V(y), V(z), V(gunTaskType), V(disableBlockingClip), V(forceAim)); }
		public static void UPDATE_TASK_AIM_GUN_SCRIPTED_TARGET(Ped ped, Ped target, float x, float y, float z, bool disableBlockingClip) { Invoke(0x9724FB59A3E72AD0, V(ped), V(target), V(x), V(y), V(z), V(disableBlockingClip)); }
		public static byte* GET_CLIP_SET_FOR_SCRIPTED_GUN_TASK(int gunTaskType) { return PInvoke<byte>(0x3A8CADC7D37AACC5, V(gunTaskType)); }
		// duration: the amount of time in milliseconds to do the task.  -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
		public static void TASK_AIM_GUN_AT_ENTITY(Ped ped, Entity entity, int duration, bool instantBlendToAim) { Invoke(0x9B53BB6E8943AF53, V(ped), V(entity), V(duration), V(instantBlendToAim)); }
		// duration: the amount of time in milliseconds to do the task. -1 will keep the task going until either another task is applied, or CLEAR_ALL_TASKS() is called with the ped
		public static void TASK_TURN_PED_TO_FACE_ENTITY(Ped ped, Entity entity, int duration) { Invoke(0x5AD23D40115353AC, V(ped), V(entity), V(duration)); }
		public static void TASK_AIM_GUN_AT_COORD(Ped ped, float x, float y, float z, int time, bool instantBlendToAim, bool playAnimIntro) { Invoke(0x6671F3EEC681BDA1, V(ped), V(x), V(y), V(z), V(time), V(instantBlendToAim), V(playAnimIntro)); }
		// Firing Pattern Hash Information: https://pastebin.com/Px036isB
		public static void TASK_SHOOT_AT_COORD(Ped ped, float x, float y, float z, int duration, Hash firingPattern) { Invoke(0x46A6CC01E0826106, V(ped), V(x), V(y), V(z), V(duration), V(firingPattern)); }
		// Makes the specified ped shuffle to the next vehicle seat.
		// The ped MUST be in a vehicle and the vehicle parameter MUST be the ped's current vehicle.
		public static void TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT(Ped ped, Vehicle vehicle, bool useAlternateShuffle) { Invoke(0x7AA80209BDA643EB, V(ped), V(vehicle), V(useAlternateShuffle)); }
		public static void CLEAR_PED_TASKS(Ped ped) { Invoke(0xE1EF3C1216AFF2CD, V(ped)); }
		public static void CLEAR_PED_SCRIPT_TASK_IF_RUNNING_THREAT_RESPONSE_NON_TEMP_TASK(Ped ped) { Invoke(0xF6DC48E56BE1243A, V(ped)); }
		public static void CLEAR_PED_SECONDARY_TASK(Ped ped) { Invoke(0x176CECF6F920D707, V(ped)); }
		public static void TASK_EVERYONE_LEAVE_VEHICLE(Vehicle vehicle) { Invoke(0x7F93691AB4B92272, V(vehicle)); }
		// enum ESEEK_ENTITY_OFFSET_FLAGS
		// {
		// 	ESEEK_OFFSET_ORIENTATES_WITH_ENTITY = 0x01,
		// 	ESEEK_KEEP_TO_PAVEMENTS = 0x02
		// };
		public static void TASK_GOTO_ENTITY_OFFSET(Ped ped, Entity entity, int time, float seekRadius, float seekAngleDeg, float moveBlendRatio, int gotoEntityOffsetFlags) { Invoke(0xE39B4FF4FDEBDE27, V(ped), V(entity), V(time), V(seekRadius), V(seekAngleDeg), V(moveBlendRatio), V(gotoEntityOffsetFlags)); }
		public static void TASK_GOTO_ENTITY_OFFSET_XY(Ped ped, Entity entity, int duration, float targetRadius, float offsetX, float offsetY, float moveBlendRatio, int gotoEntityOffsetFlags) { Invoke(0x338E7EF52B6095A9, V(ped), V(entity), V(duration), V(targetRadius), V(offsetX), V(offsetY), V(moveBlendRatio), V(gotoEntityOffsetFlags)); }
		// duration in milliseconds
		public static void TASK_TURN_PED_TO_FACE_COORD(Ped ped, float x, float y, float z, int duration) { Invoke(0x1DDA930A0AC38571, V(ped), V(x), V(y), V(z), V(duration)); }
		// '1 - brake
		// '3 - brake + reverse
		// '4 - turn left 90 + braking
		// '5 - turn right 90 + braking
		// '6 - brake strong (handbrake?) until time ends
		// '7 - turn left + accelerate
		// '8 - turn right + accelerate
		// '9 - weak acceleration
		// '10 - turn left + restore wheel pos to center in the end
		// '11 - turn right + restore wheel pos to center in the end
		// '13 - turn left + go reverse
		// '14 - turn left + go reverse
		// '16 - crash the game after like 2 seconds :)
		// '17 - keep actual state, game crashed after few tries
		// '18 - game crash
		// '19 - strong brake + turn left/right
		// '20 - weak brake + turn left then turn right
		// '21 - weak brake + turn right then turn left
		// '22 - brake + reverse
		// '23 - accelerate fast
		// '24 - brake
		// '25 - brake turning left then when almost stopping it turns left more
		// '26 - brake turning right then when almost stopping it turns right more
		// '27 - brake until car stop or until time ends
		// '28 - brake + strong reverse acceleration
		// '30 - performs a burnout (brake until stop + brake and accelerate)
		// '31 - accelerate + handbrake
		// '32 - accelerate very strong
		// 
		// Seems to be this:
		// Works on NPCs, but overrides their current task. If inside a task sequence (and not being the last task), "time" will work, otherwise the task will be performed forever until tasked with something else
		public static void TASK_VEHICLE_TEMP_ACTION(Ped driver, Vehicle vehicle, int action, int time) { Invoke(0xC429DCEEB339E129, V(driver), V(vehicle), V(action), V(time)); }
		// missionType: https://alloc8or.re/gta5/doc/enums/eVehicleMissionType.txt
		public static void TASK_VEHICLE_MISSION(Ped driver, Vehicle vehicle, Vehicle vehicleTarget, int missionType, float cruiseSpeed, int drivingStyle, float targetReached, float straightLineDistance, bool DriveAgainstTraffic) { Invoke(0x659427E0EF36BCDE, V(driver), V(vehicle), V(vehicleTarget), V(missionType), V(cruiseSpeed), V(drivingStyle), V(targetReached), V(straightLineDistance), V(DriveAgainstTraffic)); }
		// See TASK_VEHICLE_MISSION
		public static void TASK_VEHICLE_MISSION_PED_TARGET(Ped ped, Vehicle vehicle, Ped pedTarget, int missionType, float maxSpeed, int drivingStyle, float minDistance, float straightLineDistance, bool DriveAgainstTraffic) { Invoke(0x9454528DF15D657A, V(ped), V(vehicle), V(pedTarget), V(missionType), V(maxSpeed), V(drivingStyle), V(minDistance), V(straightLineDistance), V(DriveAgainstTraffic)); }
		// See TASK_VEHICLE_MISSION
		public static void TASK_VEHICLE_MISSION_COORS_TARGET(Ped ped, Vehicle vehicle, float x, float y, float z, int mission, float cruiseSpeed, int drivingStyle, float targetReached, float straightLineDistance, bool DriveAgainstTraffic) { Invoke(0xF0AF20AA7731F8C3, V(ped), V(vehicle), V(x), V(y), V(z), V(mission), V(cruiseSpeed), V(drivingStyle), V(targetReached), V(straightLineDistance), V(DriveAgainstTraffic)); }
		// Makes a ped follow the targetVehicle with <minDistance> in between.
		// 
		// note: minDistance is ignored if drivingstyle is avoiding traffic, but Rushed is fine.
		// 
		// Mode: The mode defines the relative position to the targetVehicle. The ped will try to position its vehicle there.
		// -1 = behind
		// 0 = ahead
		// 1 = left
		// 2 = right
		// 3 = back left
		// 4 = back right
		// 
		// if the target is closer than noRoadsDistance, the driver will ignore pathing/roads and follow you directly.
		// 
		// Driving Styles guide: gtaforums.com/topic/822314-guide-driving-styles/
		public static void TASK_VEHICLE_ESCORT(Ped ped, Vehicle vehicle, Vehicle targetVehicle, int mode, float speed, int drivingStyle, float minDistance, int minHeightAboveTerrain, float noRoadsDistance) { Invoke(0x0FA6E4B75F302400, V(ped), V(vehicle), V(targetVehicle), V(mode), V(speed), V(drivingStyle), V(minDistance), V(minHeightAboveTerrain), V(noRoadsDistance)); }
		// Makes a ped in a vehicle follow an entity (ped, vehicle, etc.)
		// 
		// drivingStyle: http://gtaforums.com/topic/822314-guide-driving-styles/
		public static void TASK_VEHICLE_FOLLOW(Ped driver, Vehicle vehicle, Entity targetEntity, float speed, int drivingStyle, int minDistance) { Invoke(0xFC545A9F0626E3B6, V(driver), V(vehicle), V(targetEntity), V(speed), V(drivingStyle), V(minDistance)); }
		// chases targetEnt fast and aggressively
		// --
		// Makes ped (needs to be in vehicle) chase targetEnt.
		public static void TASK_VEHICLE_CHASE(Ped driver, Entity targetEnt) { Invoke(0x3C08A8E30363B353, V(driver), V(targetEnt)); }
		// pilot, vehicle and altitude are rather self-explanatory.
		// 
		// p4: is unused variable in the function.
		// 
		// entityToFollow: you can provide a Vehicle entity or a Ped entity, the heli will protect them.
		// 
		// 'targetSpeed':  The pilot will dip the nose AS MUCH AS POSSIBLE so as to reach this value AS FAST AS POSSIBLE.  As such, you'll want to modulate it as opposed to calling it via a hard-wired, constant #.
		// 
		// 'radius' isn't just "stop within radius of X of target" like with ground vehicles.  In this case, the pilot will fly an entire circle around 'radius' and continue to do so.
		// 
		// NOT CONFIRMED:  p7 appears to be a FlyingStyle enum.  Still investigating it as of this writing, but playing around with values here appears to result in different -behavior- as opposed to offsetting coordinates, altitude, target speed, etc.
		// 
		// NOTE: If the pilot finds enemies, it will engage them until it kills them, but will return to protect the ped/vehicle given shortly thereafter.
		public static void TASK_VEHICLE_HELI_PROTECT(Ped pilot, Vehicle vehicle, Entity entityToFollow, float targetSpeed, int drivingFlags, float radius, int altitude, int heliFlags) { Invoke(0x1E09C32048FEFD1C, V(pilot), V(vehicle), V(entityToFollow), V(targetSpeed), V(drivingFlags), V(radius), V(altitude), V(heliFlags)); }
		// Flag 8: Medium-aggressive boxing tactic with a bit of PIT
		// Flag 1: Aggressive ramming of suspect
		// Flag 2: Ram attempts
		// Flag 32: Stay back from suspect, no tactical contact. Convoy-like.
		// Flag 16: Ramming, seems to be slightly less aggressive than 1-2.
		public static void SET_TASK_VEHICLE_CHASE_BEHAVIOR_FLAG(Ped ped, int flag, bool set) { Invoke(0xCC665AAC360D31E7, V(ped), V(flag), V(set)); }
		public static void SET_TASK_VEHICLE_CHASE_IDEAL_PURSUIT_DISTANCE(Ped ped, float distance) { Invoke(0x639B642FACBE4EDD, V(ped), V(distance)); }
		// Ped pilot should be in a heli.
		// EntityToFollow can be a vehicle or Ped.
		// 
		// x,y,z appear to be how close to the EntityToFollow the heli should be. Scripts use 0.0, 0.0, 80.0. Then the heli tries to position itself 80 units above the EntityToFollow. If you reduce it to -5.0, it tries to go below (if the EntityToFollow is a heli or plane)
		// 
		// 
		// NOTE: If the pilot finds enemies, it will engage them, then remain there idle, not continuing to chase the Entity given.
		public static void TASK_HELI_CHASE(Ped pilot, Entity entityToFollow, float x, float y, float z) { Invoke(0xAC83B1DB38D0ADA0, V(pilot), V(entityToFollow), V(x), V(y), V(z)); }
		public static void TASK_PLANE_CHASE(Ped pilot, Entity entityToFollow, float x, float y, float z) { Invoke(0x2D2386F273FF7A25, V(pilot), V(entityToFollow), V(x), V(y), V(z)); }
		public static void TASK_PLANE_LAND(Ped pilot, Vehicle plane, float runwayStartX, float runwayStartY, float runwayStartZ, float runwayEndX, float runwayEndY, float runwayEndZ) { Invoke(0xBF19721FA34D32C0, V(pilot), V(plane), V(runwayStartX), V(runwayStartY), V(runwayStartZ), V(runwayEndX), V(runwayEndY), V(runwayEndZ)); }
		public static void CLEAR_DEFAULT_PRIMARY_TASK(Ped ped) { Invoke(0x6100B3CEFD43452E, V(ped)); }
		// This native is very useful when switching the player to a ped inside a vehicle that has a task assigned prior to the player switch.
		// It is necessary to clear the ped's tasks AND call this native with the vehicle the player is switching into in order to allow the player to control the vehicle after the player switches.
		public static void CLEAR_PRIMARY_VEHICLE_TASK(Vehicle vehicle) { Invoke(0xDBBC7A2432524127, V(vehicle)); }
		public static void CLEAR_VEHICLE_CRASH_TASK(Vehicle vehicle) { Invoke(0x53DDC75BC3AC0A90, V(vehicle)); }
		public static void TASK_PLANE_GOTO_PRECISE_VTOL(Ped ped, Vehicle vehicle, float x, float y, float z, int flightHeight, int minHeightAboveTerrain, bool useDesiredOrientation, float desiredOrientation, bool autopilot) { Invoke(0xF7F9DCCA89E7505B, V(ped), V(vehicle), V(x), V(y), V(z), V(flightHeight), V(minHeightAboveTerrain), V(useDesiredOrientation), V(desiredOrientation), V(autopilot)); }
		// Used in am_vehicle_spawn.ysc and am_mp_submarine.ysc.
		// 
		// p0 is always 0, p5 is always 1
		// 
		// p1 is the vehicle handle of the submarine. Submarine must have a driver, but the ped handle is not passed to the native.
		// 
		// Speed can be set by calling SET_DRIVE_TASK_CRUISE_SPEED after
		public static void TASK_SUBMARINE_GOTO_AND_STOP(Ped ped, Vehicle submarine, float x, float y, float z, bool autopilot) { Invoke(0xC22B40579A498CA4, V(ped), V(submarine), V(x), V(y), V(z), V(autopilot)); }
		// Must have targetVehicle, targetPed, OR destination X/Y/Z set
		// Will follow targeted vehicle/ped, or fly to destination
		// Set whichever is not being used to 0
		// 
		// 
		// Mission mode type:
		//  - 4, 7: Forces heli to snap to the heading if set, flies to destination or tracks specified entity (mode 4 only works for coordinates, 7 works for coordinates OR ped/vehicle)
		//  - 6: Attacks the target ped/vehicle with mounted weapons. If radius is set, will maintain that distance from target.
		//  - 8: Makes the heli flee from the ped/vehicle/coordinate
		//  - 9: Circles around target ped/vehicle, snaps to angle if set. Behavior flag (last parameter) of 2048 switches from counter-clockwise to clockwise circling. Does not work with coordinate destination.
		//  - 10, 11: Follows ped/vehicle target and imitates target heading. Only works with ped/vehicle target, not coord target
		//  - 19: Heli lands at specified coordinate, ignores heading (lands facing whatever direction it is facing when the task is started)
		//  - 20: Makes the heli land when near target ped. It won't resume chasing.
		//  - 21: Emulates a helicopter crash
		//  - 23: makes the heli circle erratically around ped
		// 
		// 
		// Heli will fly at maxSpeed (up to actual maximum speed defined by the model's handling config)
		// You can use SET_DRIVE_TASK_CRUISE_SPEED to modulate the speed based on distance to the target without having to re-Invoke the task native. Setting to 8.0 when close to the destination results in a much smoother approach.
		// 
		// If minHeight and maxHeight are set, heli will fly between those specified elevations, relative to ground level and any obstructions/buildings below. You can specify -1 for either if you only want to specify one. Usually it is easiest to leave maxHeight at -1, and specify a reasonable minHeight to ensure clearance over any obstacles. Note this MUST be passed as an INT, not a FLOAT. 
		// 
		// Radius affects how closely the heli will follow tracked ped/vehicle, and when circling (mission type 9) sets the radius (in meters) that it will circle the target from
		// 
		// Heading is -1.0 for default behavior, which will point the nose of the helicopter towards the destination. Set a heading and the heli will lock to that direction when near its destination/target, but may still turn towards the destination when flying at higher speed from a further distance.
		// 
		// Behavior Flags is a bitwise value that modifies the AI behavior. Not clear what all flags do, but here are some guesses/notes:
		//    1: Forces heading to face E
		//    2: Unknown
		//    4: Tight circles around coordinate destination
		//    8: Unknown
		//   16: Circles around coordinate destination facing towards destination
		//   32: Flys to normally, then lands at coordinate destination and stays on the ground (using mission type 4)
		//   64: Ignores obstacles when flying, will follow at specified minHeight above ground level but will not avoid buildings, vehicles, etc.
		//  128: Unknown
		//  256: Unknown
		//  512: Unknown
		// 1024: Unknown 
		// 2048: Reverses direction of circling (mission type 9) to clockwise
		// 4096: Hugs closer to the ground, maintains minHeight from ground generally, but barely clears buildings and dips down more between buildings instead of taking a more efficient/safe route
		// 8192: Unknown
		// 
		// Unk3 is a float value, you may see -1082130432 for this value in decompiled native scripts, this is the equivalent to -1.0f. Seems to affect acceleration/aggressiveness, but not sure exactly how it works. Higher value seems to result in lower acceleration/less aggressive flying. Almost always -1.0 in native scripts, occasionally 20.0 or 50.0. Setting to 400.0 seems to work well for making the pilot not overshoot the destination when using coordinate destination.
		// 
		// Notes updated by PNWParksFan, May 2021
		// 
		public static void TASK_HELI_MISSION(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float maxSpeed, float radius, float targetHeading, int maxHeight, int minHeight, float slowDownDistance, int behaviorFlags) { Invoke(V(0xDAD029E187A2BEB4), V(pilot), V(aircraft), V(targetVehicle), V(targetPed), V(destinationX), V(destinationY), V(destinationZ), V(missionFlag), V(maxSpeed), V(radius), V(targetHeading), V(maxHeight), V(minHeight), V(slowDownDistance), V(behaviorFlags)); }
		public static void TASK_HELI_ESCORT_HELI(Ped pilot, Vehicle heli1, Vehicle heli2, float offsetX, float offsetY, float offsetZ) { Invoke(0xB385523325077210, V(pilot), V(heli1), V(heli2), V(offsetX), V(offsetY), V(offsetZ)); }
		// EXAMPLE USAGE:
		// 
		// Fly around target (Precautiously, keeps high altitude):
		// Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, 200f);
		// 
		// Fly around target (Dangerously, keeps VERY low altitude):
		// Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -500f);
		// 
		// Fly directly into target:
		// Function.Call(Hash.TASK_PLANE_MISSION, pilot, selectedAirplane, 0, 0, Target.X, Target.Y, Target.Z, 4, 100f, 0f, 90f, 0, -5000f);
		// 
		// EXPANDED INFORMATION FOR ADVANCED USAGE (custom pilot)
		// 
		// 'physicsSpeed': (THIS IS NOT YOUR ORDINARY SPEED PARAMETER: READ!!)
		// Think of this -first- as a radius value, not a true speed value.  The ACTUAL effective speed of the plane will be that of the maximum speed permissible to successfully fly in a -circle- with a radius of 'physicsSpeed'.  This also means that the plane must complete a circle before it can begin its "bombing run", its straight line pass towards the target.  p9 appears to influence the angle at which a "bombing run" begins, although I can't confirm yet.
		// 
		// VERY IMPORTANT: A "bombing run" will only occur if a plane can successfully determine a possible navigable route (the slower the value of 'physicsSpeed', the more precise the pilot can be due to less influence of physics on flightpath).  Otherwise, the pilot will continue to patrol around Destination (be it a dynamic Entity position vector or a fixed world coordinate vector.)
		// 
		// 0 = Plane's physics are almost entirely frozen, plane appears to "orbit" around precise destination point
		// 1-299 = Blend of "frozen, small radius" vs. normal vs. "accelerated, hyperfast, large radius"
		// 300+ =  Vehicle behaves entirely like a normal gameplay plane.
		// 
		// 'patrolBlend' (The lower the value, the more the Destination is treated as a "fly AT" rather than a "fly AROUND point".)
		// 
		// Scenario: Destination is an Entity on ground level, wide open field
		// -5000 = Pilot kamikazes directly into Entity
		// -1000 = Pilot flies extremely low -around- Entity, very prone to crashing
		// -200 = Pilot flies lower than average around Entity.
		// 0 = Pilot flies around Entity, normal altitude
		// 200 = Pilot flies an extra eighty units or so higher than 0 while flying around Destination (this doesn't seem to correlate directly into distance units.)
		// 
		// -- Valid mission types found in the exe: --
		// 
		// 0 = None
		// 1 = Unk
		// 2 = CTaskVehicleRam
		// 3 = CTaskVehicleBlock
		// 4 = CTaskVehicleGoToPlane
		// 5 = CTaskVehicleStop
		// 6 = CTaskVehicleAttack
		// 7 = CTaskVehicleFollow
		// 8 = CTaskVehicleFleeAirborne
		// 9= CTaskVehicleCircle
		// 10 = CTaskVehicleEscort
		// 15 = CTaskVehicleFollowRecording
		// 16 = CTaskVehiclePoliceBehaviour
		// 17 = CTaskVehicleCrash
		public static void TASK_PLANE_MISSION(Ped pilot, Vehicle aircraft, Vehicle targetVehicle, Ped targetPed, float destinationX, float destinationY, float destinationZ, int missionFlag, float angularDrag, float targetReached, float targetHeading, float maxZ, float minZ, bool precise) { Invoke(0x23703CD154E83B88, V(pilot), V(aircraft), V(targetVehicle), V(targetPed), V(destinationX), V(destinationY), V(destinationZ), V(missionFlag), V(angularDrag), V(targetReached), V(targetHeading), V(maxZ), V(minZ), V(precise)); }
		public static void TASK_PLANE_TAXI(Ped pilot, Vehicle aircraft, float x, float y, float z, float cruiseSpeed, float targetReached) { Invoke(0x92C360B5F15D2302, V(pilot), V(aircraft), V(x), V(y), V(z), V(cruiseSpeed), V(targetReached)); }
		// You need to call PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS after TASK_BOAT_MISSION in order for the task to execute.
		// 
		// Working example
		// float vehicleMaxSpeed = VEHICLE::GET_VEHICLE_ESTIMATED_MAX_SPEED(ENTITY::GET_ENTITY_MODEL(pedVehicle));
		// TASK::TASK_BOAT_MISSION(pedDriver, pedVehicle, 0, 0, waypointCoord.x, waypointCoord.y, waypointCoord.z, 4, vehicleMaxSpeed, 786469, -1.0, 7);
		// PED::SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(pedDriver, 1);
		// 
		// P8 appears to be driving style flag - see gtaforums.com/topic/822314-guide-driving-styles/ for documentation
		public static void TASK_BOAT_MISSION(Ped pedDriver, Vehicle vehicle, Vehicle targetVehicle, Ped targetPed, float x, float y, float z, int mission, float maxSpeed, int drivingStyle, float targetReached, Any boatFlags) { Invoke(0x15C86013127CE63F, V(pedDriver), V(vehicle), V(targetVehicle), V(targetPed), V(x), V(y), V(z), V(mission), V(maxSpeed), V(drivingStyle), V(targetReached), V(boatFlags)); }
		// Example:
		// 
		// TASK::TASK_DRIVE_BY(l_467[1/*22*/], PLAYER::PLAYER_PED_ID(), 0, 0.0, 0.0, 2.0, 300.0, 100, 0, ${firing_pattern_burst_fire_driveby});
		// 
		// 
		// 
		// 
		// Needs working example. Doesn't seem to do anything.
		// 
		// I marked p2 as targetVehicle as all these shooting related tasks seem to have that in common.
		// I marked p6 as distanceToShoot as if you think of GTA's Logic with the native SET_VEHICLE_SHOOT natives, it won't shoot till it gets within a certain distance of the target.
		// I marked p7 as pedAccuracy as it seems it's mostly 100 (Completely Accurate), 75, 90, etc. Although this could be the ammo count within the gun, but I highly doubt it. I will change this comment once I find out if it's ammo count or not.
		public static void TASK_DRIVE_BY(Ped driverPed, Ped targetPed, Vehicle targetVehicle, float targetX, float targetY, float targetZ, float distanceToShoot, int pedAccuracy, bool pushUnderneathDrivingTaskIfDriving, Hash firingPattern) { Invoke(0x2F8AF0E82773A171, V(driverPed), V(targetPed), V(targetVehicle), V(targetX), V(targetY), V(targetZ), V(distanceToShoot), V(pedAccuracy), V(pushUnderneathDrivingTaskIfDriving), V(firingPattern)); }
		// For p1 & p2 (Ped, Vehicle). I could be wrong, as the only time this native is called in scripts is once and both are 0, but I assume this native will work like SET_MOUNTED_WEAPON_TARGET in which has the same exact amount of parameters and the 1st and last 3 parameters are right and the same for both natives.
		public static void SET_DRIVEBY_TASK_TARGET(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z) { Invoke(0xE5B302114D8162EE, V(shootingPed), V(targetPed), V(targetVehicle), V(x), V(y), V(z)); }
		public static void CLEAR_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(Ped ped) { Invoke(0xC35B5CDB2824CF69, V(ped)); }
		public static bool IS_DRIVEBY_TASK_UNDERNEATH_DRIVING_TASK(Ped ped) { return Invoke<bool>(0x8785E6E40C7A8818, V(ped)); }
		// Forces the ped to use the mounted weapon.
		// Returns false if task is not possible.
		public static bool CONTROL_MOUNTED_WEAPON(Ped ped) { return Invoke<bool>(0xDCFE42068FE0135A, V(ped)); }
		// Note: Look in decompiled scripts and the times that p1 and p2 aren't 0. They are filled with vars. If you look through out that script what other natives those vars are used in, you can tell p1 is a ped and p2 is a vehicle. Which most likely means if you want the mounted weapon to target a ped set targetVehicle to 0 or vice-versa.
		public static void SET_MOUNTED_WEAPON_TARGET(Ped shootingPed, Ped targetPed, Vehicle targetVehicle, float x, float y, float z, int taskMode, bool ignoreTargetVehDeadCheck) { Invoke(0xCCD892192C6D2BB9, V(shootingPed), V(targetPed), V(targetVehicle), V(x), V(y), V(z), V(taskMode), V(ignoreTargetVehDeadCheck)); }
		public static bool IS_MOUNTED_WEAPON_TASK_UNDERNEATH_DRIVING_TASK(Ped ped) { return Invoke<bool>(0xA320EF046186FA3B, V(ped)); }
		// Actually has 3 params, not 2.
		// 
		// p0: Ped
		// p1: int (or bool?)
		// p2: int
		public static void TASK_USE_MOBILE_PHONE(Ped ped, bool usePhone, int desiredPhoneMode) { Invoke(0xBD2A8EC3AF4DE7DB, V(ped), V(usePhone), V(desiredPhoneMode)); }
		public static void TASK_USE_MOBILE_PHONE_TIMED(Ped ped, int duration) { Invoke(0x5EE02954A14C69DB, V(ped), V(duration)); }
		// p2 tend to be 16, 17 or 1
		// p3 to p7 tend to be 0.0
		public static void TASK_CHAT_TO_PED(Ped ped, Ped target, int flags, float goToLocationX, float goToLocationY, float goToLocationZ, float headingDegs, float idleTime) { Invoke(0x8C338E0263E4FD19, V(ped), V(target), V(flags), V(goToLocationX), V(goToLocationY), V(goToLocationZ), V(headingDegs), V(idleTime)); }
		// Seat Numbers
		// -------------------------------
		// Driver = -1
		// Any = -2
		// Left-Rear = 1
		// Right-Front = 0
		// Right-Rear = 2
		// Extra seats = 3-14(This may differ from vehicle type e.g. Firetruck Rear Stand, Ambulance Rear)
		public static void TASK_WARP_PED_INTO_VEHICLE(Ped ped, Vehicle vehicle, int seat) { Invoke(0x9A7D091411C5F684, V(ped), V(vehicle), V(seat)); }
		// //this part of the code is to determine at which entity the player is aiming, for example if you want to create a mod where you give orders to peds
		// Entity aimedentity;
		// Player player = PLAYER::PLAYER_ID();
		// PLAYER::_GET_AIMED_ENTITY(player, &aimedentity);
		// 
		// //bg is an array of peds
		// TASK::TASK_SHOOT_AT_ENTITY(bg[i], aimedentity, 5000, MISC::GET_HASH_KEY("FIRING_PATTERN_FULL_AUTO"));
		// 
		// in practical usage, getting the entity the player is aiming at and then task the peds to shoot at the entity, at a button press evt would be better.
		// 
		// Firing Pattern Hash Information: https://pastebin.com/Px036isB
		public static void TASK_SHOOT_AT_ENTITY(Entity entity, Entity target, int duration, Hash firingPattern) { Invoke(0x08DA95E8298AE772, V(entity), V(target), V(duration), V(firingPattern)); }
		// Climbs or vaults the nearest thing.
		// usePlayerLaunchForce is unused.
		public static void TASK_CLIMB(Ped ped, bool usePlayerLaunchForce) { Invoke(0x89D9FCC2435112F1, V(ped), V(usePlayerLaunchForce)); }
		public static void TASK_CLIMB_LADDER(Ped ped, bool fast) { Invoke(0xB6C987F9285A3814, V(ped), V(fast)); }
		// Attaches a ped to a rope and allows player control to rappel down a wall. Disables all collisions while on the rope.
		// p10: Usually 1 in the scripts, clipSet: Clipset to use for the task, minZ: Minimum Z that the player can descend to, ropeHandle: Rope to attach this task to created with ADD_ROPE
		public static void TASK_RAPPEL_DOWN_WALL_USING_CLIPSET_OVERRIDE(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, float minZ, int ropeHandle, string clipSet, Any p10, Any p11) { Invoke(0xEAF66ACDDC794793, V(ped), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(minZ), V(ropeHandle), V(clipSet), V(p10), V(p11)); }
		public static int GET_TASK_RAPPEL_DOWN_WALL_STATE(Ped ped) { return Invoke<int>(0x9D252648778160DF, V(ped)); }
		// Immediately stops the pedestrian from whatever it's doing. They stop fighting, animations, etc. they forget what they were doing.
		public static void CLEAR_PED_TASKS_IMMEDIATELY(Ped ped) { Invoke(0xAAA34F8A7CB32098, V(ped)); }
		public static void TASK_PERFORM_SEQUENCE_FROM_PROGRESS(Ped ped, int taskIndex, int progress1, int progress2) { Invoke(0x89221B16730234F0, V(ped), V(taskIndex), V(progress1), V(progress2)); }
		// This native does absolutely nothing, just a nullsub
		// 
		// R* Comment:
		// SET_NEXT_DESIRED_MOVE_STATE - Function is deprecated - do not use anymore
		public static void SET_NEXT_DESIRED_MOVE_STATE(float nextMoveState) { Invoke(0xF1B9F16E89E2C93A, V(nextMoveState)); }
		public static void SET_PED_DESIRED_MOVE_BLEND_RATIO(Ped ped, float newMoveBlendRatio) { Invoke(0x1E982AC8716912C5, V(ped), V(newMoveBlendRatio)); }
		public static float GET_PED_DESIRED_MOVE_BLEND_RATIO(Ped ped) { return Invoke<float>(0x8517D4A6CA8513ED, V(ped)); }
		// eg
		// 
		//  TASK::TASK_GOTO_ENTITY_AIMING(v_2, PLAYER::PLAYER_PED_ID(), 5.0, 25.0);
		// 
		// ped = Ped you want to perform this task.
		// target = the Entity they should aim at.
		// distanceToStopAt = distance from the target, where the ped should stop to aim.
		// StartAimingDist = distance where the ped should start to aim.
		public static void TASK_GOTO_ENTITY_AIMING(Ped ped, Entity target, float distanceToStopAt, float StartAimingDist) { Invoke(0xA9DA48FAB8A76C12, V(ped), V(target), V(distanceToStopAt), V(StartAimingDist)); }
		// p1 is always GET_HASH_KEY("empty") in scripts, for the rare times this is used
		public static void TASK_SET_DECISION_MAKER(Ped ped, Hash decisionMakerId) { Invoke(0xEB8517DDA73720DA, V(ped), V(decisionMakerId)); }
		public static void TASK_SET_SPHERE_DEFENSIVE_AREA(Ped ped, float x, float y, float z, float radius) { Invoke(0x933C06518B52A9A4, V(ped), V(x), V(y), V(z), V(radius)); }
		public static void TASK_CLEAR_DEFENSIVE_AREA(Ped ped) { Invoke(0x95A6C46A31D1917D, V(ped)); }
		public static void TASK_PED_SLIDE_TO_COORD(Ped ped, float x, float y, float z, float heading, float speed) { Invoke(0xD04FE6765D990A06, V(ped), V(x), V(y), V(z), V(heading), V(speed)); }
		public static void TASK_PED_SLIDE_TO_COORD_HDG_RATE(Ped ped, float x, float y, float z, float heading, float speed, float headingChangeRate) { Invoke(0x5A4A6A6D3DC64F52, V(ped), V(x), V(y), V(z), V(heading), V(speed), V(headingChangeRate)); }
		public static ScrHandle ADD_COVER_POINT(float x, float y, float z, float direction, int usage, int height, int arc, bool isPriority) { return Invoke<ScrHandle>(0xD5C12A75C7B9497F, V(x), V(y), V(z), V(direction), V(usage), V(height), V(arc), V(isPriority)); }
		public static void REMOVE_COVER_POINT(ScrHandle coverpoint) { Invoke(0xAE287C923D891715, V(coverpoint)); }
		// Checks if there is a cover point at position
		public static bool DOES_SCRIPTED_COVER_POINT_EXIST_AT_COORDS(float x, float y, float z) { return Invoke<bool>(0xA98B8E3C088E5A31, V(x), V(y), V(z)); }
		public static Vector3 GET_SCRIPTED_COVER_POINT_COORDS(ScrHandle coverpoint) { return Invoke<Vector3>(0x594A1028FC2A3E85, V(coverpoint)); }
		public static void ADD_SCRIPTED_COVER_AREA(float x, float y, float z, float radius) { Invoke(0x28B7B9BFDAF274AA, V(x), V(y), V(z), V(radius)); }
		// Makes the specified ped attack the target ped.
		// p2 should be 0
		// p3 should be 16
		public static void TASK_COMBAT_PED(Ped ped, Ped targetPed, int combatFlags, int threatResponseFlags) { Invoke(0xF166E48407BAC484, V(ped), V(targetPed), V(combatFlags), V(threatResponseFlags)); }
		public static void TASK_COMBAT_PED_TIMED(Ped ped, Ped target, int time, int flags) { Invoke(0x944F30DCB7096BDE, V(ped), V(target), V(time), V(flags)); }
		public static void TASK_SEEK_COVER_FROM_POS(Ped ped, float x, float y, float z, int duration, bool allowPeekingAndFiring) { Invoke(0x75AC2B60386D89F2, V(ped), V(x), V(y), V(z), V(duration), V(allowPeekingAndFiring)); }
		public static void TASK_SEEK_COVER_FROM_PED(Ped ped, Ped target, int duration, bool allowPeekingAndFiring) { Invoke(0x84D32B3BEC531324, V(ped), V(target), V(duration), V(allowPeekingAndFiring)); }
		// p5 is always -1
		public static void TASK_SEEK_COVER_TO_COVER_POINT(Ped ped, ScrHandle coverpoint, float x, float y, float z, int time, bool allowPeekingAndFiring) { Invoke(0xD43D95C7A869447F, V(ped), V(coverpoint), V(x), V(y), V(z), V(time), V(allowPeekingAndFiring)); }
		// p8 causes the ped to take the shortest route to the cover position. It may have something to do with navmesh or pathfinding mechanics.
		// 
		// from michael2:
		// TASK::TASK_SEEK_COVER_TO_COORDS(ped, 967.5164794921875, -2121.603515625, 30.479299545288086, 978.94677734375, -2125.84130859375, 29.4752, -1, 1);
		// 
		// 
		// appears to be shorter variation
		// from michael3:
		// TASK::TASK_SEEK_COVER_TO_COORDS(ped, -2231.011474609375, 263.6326599121094, 173.60195922851562, -1, 0);
		public static void TASK_SEEK_COVER_TO_COORDS(Ped ped, float x1, float y1, float z1, float x2, float y2, float z2, int timeout, bool shortRoute) { Invoke(0x39246A6958EF072C, V(ped), V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(timeout), V(shortRoute)); }
		public static void TASK_PUT_PED_DIRECTLY_INTO_COVER(Ped ped, float x, float y, float z, int time, bool allowPeekingAndFiring, float blendInDuration, bool forceInitialFacingDirection, bool forceFaceLeft, int identifier, bool doEntry) { Invoke(0x4172393E6BE1FECE, V(ped), V(x), V(y), V(z), V(time), V(allowPeekingAndFiring), V(blendInDuration), V(forceInitialFacingDirection), V(forceFaceLeft), V(identifier), V(doEntry)); }
		public static void TASK_WARP_PED_DIRECTLY_INTO_COVER(Ped ped, int time, bool allowPeekingAndFiring, bool forceInitialFacingDirection, bool forceFaceLeft, int identifier) { Invoke(0x6E01E9E8D89F8276, V(ped), V(time), V(allowPeekingAndFiring), V(forceInitialFacingDirection), V(forceFaceLeft), V(identifier)); }
		// p1 is 1, 2, or 3 in scripts
		public static void TASK_EXIT_COVER(Ped ped, int exitType, float x, float y, float z) { Invoke(0x79B258E397854D29, V(ped), V(exitType), V(x), V(y), V(z)); }
		// from armenian3.c4
		// 
		// TASK::TASK_PUT_PED_DIRECTLY_INTO_MELEE(PlayerPed, armenianPed, 0.0, -1.0, 0.0, 0);
		// 
		public static void TASK_PUT_PED_DIRECTLY_INTO_MELEE(Ped ped, Ped meleeTarget, float blendInDuration, float timeInMelee, float strafePhaseSync, int aiCombatFlags) { Invoke(0x1C6CD14A876FFE39, V(ped), V(meleeTarget), V(blendInDuration), V(timeInMelee), V(strafePhaseSync), V(aiCombatFlags)); }
		// used in sequence task
		// 
		// both parameters seems to be always 0
		public static void TASK_TOGGLE_DUCK(Ped ped, int toggleType) { Invoke(0xAC96609B9995EDF8, V(ped), V(toggleType)); }
		// From re_prisonvanbreak:
		// 
		// TASK::TASK_GUARD_CURRENT_POSITION(l_DD, 35.0, 35.0, 1);
		public static void TASK_GUARD_CURRENT_POSITION(Ped ped, float maxPatrolProximity, float defensiveAreaRadius, bool setDefensiveArea) { Invoke(0x4A58A47A72E3FCB4, V(ped), V(maxPatrolProximity), V(defensiveAreaRadius), V(setDefensiveArea)); }
		public static void TASK_GUARD_ASSIGNED_DEFENSIVE_AREA(Ped ped, float x, float y, float z, float heading, float maxPatrolProximity, int timer) { Invoke(0xD2A207EEBDF9889B, V(ped), V(x), V(y), V(z), V(heading), V(maxPatrolProximity), V(timer)); }
		public static void TASK_GUARD_SPHERE_DEFENSIVE_AREA(Ped ped, float defendPositionX, float defendPositionY, float defendPositionZ, float heading, float maxPatrolProximity, int time, float x, float y, float z, float defensiveAreaRadius) { Invoke(0xC946FE14BE0EB5E2, V(ped), V(defendPositionX), V(defendPositionY), V(defendPositionZ), V(heading), V(maxPatrolProximity), V(time), V(x), V(y), V(z), V(defensiveAreaRadius)); }
		// scenarioName example: "WORLD_HUMAN_GUARD_STAND"
		public static void TASK_STAND_GUARD(Ped ped, float x, float y, float z, float heading, string scenarioName) { Invoke(0xAE032F8BBA959E90, V(ped), V(x), V(y), V(z), V(heading), V(scenarioName)); }
		public static void SET_DRIVE_TASK_CRUISE_SPEED(Ped driver, float cruiseSpeed) { Invoke(0x5C9B84BD7D31D908, V(driver), V(cruiseSpeed)); }
		public static void SET_DRIVE_TASK_MAX_CRUISE_SPEED(Ped ped, float speed, bool updateBaseTask) { Invoke(0x404A5AA9B9F0B746, V(ped), V(speed), V(updateBaseTask)); }
		// This native is used to set the driving style for specific ped.
		// 
		// Driving styles id seems to be:
		// 786468
		// 262144
		// 786469
		// 
		// http://gtaforums.com/topic/822314-guide-driving-styles/
		public static void SET_DRIVE_TASK_DRIVING_STYLE(Ped ped, int drivingStyle) { Invoke(0xDACE1BE37D88AF67, V(ped), V(drivingStyle)); }
		public static void ADD_COVER_BLOCKING_AREA(float startX, float startY, float startZ, float endX, float endY, float endZ, bool blockObjects, bool blockVehicles, bool blockMap, bool blockPlayer) { Invoke(0x45C597097DD7CB81, V(startX), V(startY), V(startZ), V(endX), V(endY), V(endZ), V(blockObjects), V(blockVehicles), V(blockMap), V(blockPlayer)); }
		public static void REMOVE_ALL_COVER_BLOCKING_AREAS() { Invoke(0xDB6708C0B46F56D8); }
		public static void REMOVE_COVER_BLOCKING_AREAS_AT_POSITION(float x, float y, float z) { Invoke(0xFA83CA6776038F64, V(x), V(y), V(z)); }
		public static void REMOVE_SPECIFIC_COVER_BLOCKING_AREAS(float startX, float startY, float startZ, float endX, float endY, float endZ, bool blockObjects, bool blockVehicles, bool blockMap, bool blockPlayer) { Invoke(0x1F351CF1C6475734, V(startX), V(startY), V(startZ), V(endX), V(endY), V(endZ), V(blockObjects), V(blockVehicles), V(blockMap), V(blockPlayer)); }
		// Plays a scenario on a Ped at their current location.
		// 
		// unkDelay - Usually 0 or -1, doesn't seem to have any effect. Might be a delay between sequences.
		// playEnterAnim - Plays the "Enter" anim if true, otherwise plays the "Exit" anim. Scenarios that don't have any "Enter" anims won't play if this is set to true.
		// 
		// ----
		// 
		// From "am_hold_up.ysc.c4" at line 339:
		// 
		// TASK::TASK_START_SCENARIO_IN_PLACE(NETWORK::NET_TO_PED(l_8D._f4), sub_adf(), 0, 1);
		// 
		// I'm unsure of what the last two parameters are, however sub_adf() randomly returns 1 of 3 scenarios, those being:
		// WORLD_HUMAN_SMOKING
		// WORLD_HUMAN_HANG_OUT_STREET
		// WORLD_HUMAN_STAND_MOBILE
		// 
		// This makes sense, as these are what I commonly see when going by a liquor store.
		// -------------------------
		// List of scenarioNames: https://pastebin.com/6mrYTdQv
		// (^ Thank you so fucking much for this)
		// 
		// Also these:
		// WORLD_FISH_FLEE
		// DRIVE
		// WORLD_HUMAN_HIKER
		// WORLD_VEHICLE_ATTRACTOR
		// WORLD_VEHICLE_BICYCLE_MOUNTAIN
		// WORLD_VEHICLE_BIKE_OFF_ROAD_RACE
		// WORLD_VEHICLE_BIKER
		// WORLD_VEHICLE_CONSTRUCTION_PASSENGERS
		// WORLD_VEHICLE_CONSTRUCTION_SOLO
		// WORLD_VEHICLE_DRIVE_PASSENGERS
		// WORLD_VEHICLE_DRIVE_SOLO
		// WORLD_VEHICLE_EMPTY
		// WORLD_VEHICLE_PARK_PARALLEL
		// WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN
		// WORLD_VEHICLE_POLICE_BIKE
		// WORLD_VEHICLE_POLICE_CAR
		// WORLD_VEHICLE_POLICE_NEXT_TO_CAR
		// WORLD_VEHICLE_SALTON_DIRT_BIKE
		// WORLD_VEHICLE_TRUCK_LOGS
		// 
		// Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
		public static void TASK_START_SCENARIO_IN_PLACE(Ped ped, string scenarioName, int unkDelay, bool playEnterAnim) { Invoke(0x142A02425FF02BD9, V(ped), V(scenarioName), V(unkDelay), V(playEnterAnim)); }
		// Full list of ped scenarios by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
		// 
		// Also a few more listed at TASK::TASK_START_SCENARIO_IN_PLACE just above.
		// ---------------
		// The first parameter in every scenario has always been a Ped of some sort. The second like TASK_START_SCENARIO_IN_PLACE is the name of the scenario. 
		// 
		// The next 4 parameters were harder to decipher. After viewing "hairdo_shop_mp.ysc.c4", and being confused from seeing the case in other scripts, they passed the first three of the arguments as one array from a function, and it looked like it was obviously x, y, and z.
		// 
		// I haven't seen the sixth parameter go to or over 360, making me believe that it is rotation, but I really can't confirm anything.
		// 
		// I have no idea what the last 3 parameters are, but I'll try to find out.
		// 
		// -going on the last 3 parameters, they appear to always be "0, 0, 1"
		// 
		// p6 -1 also used in scrips
		// 
		// p7 used for sitting scenarios
		// 
		// p8 teleports ped to position
		public static void TASK_START_SCENARIO_AT_POSITION(Ped ped, string scenarioName, float x, float y, float z, float heading, int duration, bool sittingScenario, bool teleport) { Invoke(0xFA4EFC79F69D4F07, V(ped), V(scenarioName), V(x), V(y), V(z), V(heading), V(duration), V(sittingScenario), V(teleport)); }
		// Updated variables
		// 
		// An alternative to TASK::TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP. Makes the ped walk to the scenario instead.
		public static void TASK_USE_NEAREST_SCENARIO_TO_COORD(Ped ped, float x, float y, float z, float distance, int duration) { Invoke(0x277F471BA9DB000B, V(ped), V(x), V(y), V(z), V(distance), V(duration)); }
		public static void TASK_USE_NEAREST_SCENARIO_TO_COORD_WARP(Ped ped, float x, float y, float z, float radius, int timeToLeave) { Invoke(0x58E2E0F23F6B76C3, V(ped), V(x), V(y), V(z), V(radius), V(timeToLeave)); }
		// p5 is always 0 in scripts
		public static void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD(Ped ped, float x, float y, float z, float maxRange, int timeToLeave) { Invoke(0x9FDA1B3D7E7028B3, V(ped), V(x), V(y), V(z), V(maxRange), V(timeToLeave)); }
		// p5 is always -1 or 0 in scripts
		public static void TASK_USE_NEAREST_SCENARIO_CHAIN_TO_COORD_WARP(Ped ped, float x, float y, float z, float radius, int timeToLeave) { Invoke(0x97A28E63F0BA5631, V(ped), V(x), V(y), V(z), V(radius), V(timeToLeave)); }
		public static bool DOES_SCENARIO_EXIST_IN_AREA(float x, float y, float z, float radius, bool mustBeFree) { return Invoke<bool>(0x5A59271FFADD33C1, V(x), V(y), V(z), V(radius), V(mustBeFree)); }
		public static bool DOES_SCENARIO_OF_TYPE_EXIST_IN_AREA(float x, float y, float z, string scenarioName, float radius, bool mustBeFree) { return Invoke<bool>(0x0A9D0C2A3BBC86C1, V(x), V(y), V(z), V(scenarioName), V(radius), V(mustBeFree)); }
		public static bool IS_SCENARIO_OCCUPIED(float x, float y, float z, float maxRange, bool onlyUsersActuallyAtScenario) { return Invoke<bool>(0x788756D73AC2E07C, V(x), V(y), V(z), V(maxRange), V(onlyUsersActuallyAtScenario)); }
		public static bool PED_HAS_USE_SCENARIO_TASK(Ped ped) { return Invoke<bool>(0x295E3CCEC879CCD7, V(ped)); }
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void PLAY_ANIM_ON_RUNNING_SCENARIO(Ped ped, string animDict, string animName) { Invoke(0x748040460F8DF5DC, V(ped), V(animDict), V(animName)); }
		// Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
		// Occurrences in the b617d scripts:
		// 
		// "ARMY_GUARD",
		// "ARMY_HELI",
		// "Cinema_Downtown",
		// "Cinema_Morningwood",
		// "Cinema_Textile",
		// "City_Banks",
		// "Countryside_Banks",
		// "DEALERSHIP",
		// "GRAPESEED_PLANES",
		// "KORTZ_SECURITY",
		// "LOST_BIKERS",
		// "LSA_Planes",
		// "LSA_Planes",
		// "MP_POLICE",
		// "Observatory_Bikers", 
		// "POLICE_POUND1",
		// "POLICE_POUND2",
		// "POLICE_POUND3",
		// "POLICE_POUND4",
		// "POLICE_POUND5"
		// "QUARRY",
		// "SANDY_PLANES",
		// "SCRAP_SECURITY",
		// "SEW_MACHINE",
		// "SOLOMON_GATE",
		// "Triathlon_1_Start", 
		// "Triathlon_2_Start", 
		// "Triathlon_3_Start"
		// 
		// Sometimes used with IS_SCENARIO_GROUP_ENABLED:
		// if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") && (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
		// else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
		// 
		public static bool DOES_SCENARIO_GROUP_EXIST(string scenarioGroup) { return Invoke<bool>(0xF9034C136C9E00D3, V(scenarioGroup)); }
		// Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
		// Occurrences in the b617d scripts: 
		// 
		//  "ARMY_GUARD",
		//  "ARMY_HELI",
		//  "BLIMP",
		//  "Cinema_Downtown",
		//  "Cinema_Morningwood",
		//  "Cinema_Textile",
		//  "City_Banks",
		//  "Countryside_Banks",
		//  "DEALERSHIP",
		//  "KORTZ_SECURITY",
		//  "LSA_Planes",
		//  "MP_POLICE",
		//  "Observatory_Bikers",
		//  "POLICE_POUND1",
		//  "POLICE_POUND2",
		//  "POLICE_POUND3",
		//  "POLICE_POUND4",
		//  "POLICE_POUND5",
		//  "Rampage1",
		//  "SANDY_PLANES",
		//  "SCRAP_SECURITY",
		//  "SEW_MACHINE",
		//  "SOLOMON_GATE"
		// 
		// Sometimes used with DOES_SCENARIO_GROUP_EXIST:
		// if (TASK::DOES_SCENARIO_GROUP_EXIST("Observatory_Bikers") &&   (!TASK::IS_SCENARIO_GROUP_ENABLED("Observatory_Bikers"))) {
		// else if (TASK::IS_SCENARIO_GROUP_ENABLED("BLIMP")) {
		public static bool IS_SCENARIO_GROUP_ENABLED(string scenarioGroup) { return Invoke<bool>(0x367A09DED4E05B99, V(scenarioGroup)); }
		// Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
		// Occurrences in the b617d scripts: https://pastebin.com/Tvg2PRHU
		public static void SET_SCENARIO_GROUP_ENABLED(string scenarioGroup, bool enabled) { Invoke(0x02C8E5B49848664E, V(scenarioGroup), V(enabled)); }
		public static void RESET_SCENARIO_GROUPS_ENABLED() { Invoke(0xDD902D0349AFAD3A); }
		// Full list of scenario groups used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenarioGroupNames.json
		// Groups found in the scripts used with this native:
		// 
		// "AMMUNATION",
		// "QUARRY",
		// "Triathlon_1",
		// "Triathlon_2",
		// "Triathlon_3"
		public static void SET_EXCLUSIVE_SCENARIO_GROUP(string scenarioGroup) { Invoke(0x535E97E1F7FC0C6A, V(scenarioGroup)); }
		public static void RESET_EXCLUSIVE_SCENARIO_GROUP() { Invoke(0x4202BBCB8684563D); }
		// Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
		// Occurrences in the b617d scripts:
		// "PROP_HUMAN_SEAT_CHAIR",
		// "WORLD_HUMAN_DRINKING",
		// "WORLD_HUMAN_HANG_OUT_STREET",
		// "WORLD_HUMAN_SMOKING",
		// "WORLD_MOUNTAIN_LION_WANDER",
		// "WORLD_HUMAN_DRINKING"
		// 
		// Sometimes used together with MISC::IS_STRING_NULL_OR_EMPTY in the scripts.
		// 
		// scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
		// 
		public static bool IS_SCENARIO_TYPE_ENABLED(string scenarioType) { return Invoke<bool>(0x3A815DB3EA088722, V(scenarioType)); }
		// Full list of scenario types used in scripts by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/scenariosCompact.json
		// seems to enable/disable specific scenario-types from happening in the game world.
		// 
		// Here are some scenario types from the scripts:
		// "WORLD_MOUNTAIN_LION_REST"                                             
		// "WORLD_MOUNTAIN_LION_WANDER"                                            
		// "DRIVE"                                                                  
		// "WORLD_VEHICLE_POLICE_BIKE"                                             
		// "WORLD_VEHICLE_POLICE_CAR"                                             
		// "WORLD_VEHICLE_POLICE_NEXT_TO_CAR"                                        
		// "WORLD_VEHICLE_DRIVE_SOLO"                                                 
		// "WORLD_VEHICLE_BIKER"                                                      
		// "WORLD_VEHICLE_DRIVE_PASSENGERS"                                           
		// "WORLD_VEHICLE_SALTON_DIRT_BIKE"                                           
		// "WORLD_VEHICLE_BICYCLE_MOUNTAIN"                                           
		// "PROP_HUMAN_SEAT_CHAIR"                                             
		// "WORLD_VEHICLE_ATTRACTOR"                                             
		// "WORLD_HUMAN_LEANING"                                                 
		// "WORLD_HUMAN_HANG_OUT_STREET"                                        
		// "WORLD_HUMAN_DRINKING"                                                
		// "WORLD_HUMAN_SMOKING"                                                
		// "WORLD_HUMAN_GUARD_STAND"                                            
		// "WORLD_HUMAN_CLIPBOARD"                                              
		// "WORLD_HUMAN_HIKER"                                                  
		// "WORLD_VEHICLE_EMPTY"                                                      
		// "WORLD_VEHICLE_BIKE_OFF_ROAD_RACE"                                      
		// "WORLD_HUMAN_PAPARAZZI"                                               
		// "WORLD_VEHICLE_PARK_PERPENDICULAR_NOSE_IN"                            
		// "WORLD_VEHICLE_PARK_PARALLEL"                                              
		// "WORLD_VEHICLE_CONSTRUCTION_SOLO"                               
		// "WORLD_VEHICLE_CONSTRUCTION_PASSENGERS"                                                                    
		// "WORLD_VEHICLE_TRUCK_LOGS"
		// 
		// scenarioType could be the same as scenarioName, used in for example TASK::TASK_START_SCENARIO_AT_POSITION.
		public static void SET_SCENARIO_TYPE_ENABLED(string scenarioType, bool toggle) { Invoke(0xEB47EC4E34FB7EE1, V(scenarioType), V(toggle)); }
		public static void RESET_SCENARIO_TYPES_ENABLED() { Invoke(0x0D40EE2A7F2B2D6D); }
		public static bool IS_PED_ACTIVE_IN_SCENARIO(Ped ped) { return Invoke<bool>(0xAA135F9482C82CC3, V(ped)); }
		// Used only once (am_mp_property_int)
		// 
		// ped was PLAYER_PED_ID()
		// 
		// Related to CTaskAmbientClips.
		public static bool IS_PED_PLAYING_BASE_CLIP_IN_SCENARIO(Ped ped) { return Invoke<bool>(0x621C6E4729388E41, V(ped)); }
		// Appears only in fm_mission_controller and used only 3 times.
		// 
		// ped was always PLAYER_PED_ID()
		// p1 was always true
		// p2 was always true
		public static void SET_PED_CAN_PLAY_AMBIENT_IDLES(Ped ped, bool blockIdleClips, bool removeIdleClipIfPlaying) { Invoke(0x8FD89A6240813FD0, V(ped), V(blockIdleClips), V(removeIdleClipIfPlaying)); }
		// Despite its name, it only attacks ONE hated target. The one closest to the specified position.
		public static void TASK_COMBAT_HATED_TARGETS_IN_AREA(Ped ped, float x, float y, float z, float radius, int combatFlags) { Invoke(0x4CF5F55DAC3280A0, V(ped), V(x), V(y), V(z), V(radius), V(combatFlags)); }
		// Despite its name, it only attacks ONE hated target. The one closest hated target.
		// 
		// p2 seems to be always 0
		public static void TASK_COMBAT_HATED_TARGETS_AROUND_PED(Ped ped, float radius, int combatFlags) { Invoke(0x7BF835BB9E2698C8, V(ped), V(radius), V(combatFlags)); }
		public static void TASK_COMBAT_HATED_TARGETS_AROUND_PED_TIMED(Ped ped, float radius, int time, int combatFlags) { Invoke(0x2BBA30B854534A0C, V(ped), V(radius), V(time), V(combatFlags)); }
		// In every case of this native, I've only seen the first parameter passed as 0, although I believe it's a Ped after seeing tasks around it using 0. That's because it's used in a Sequence Task.
		// 
		// The last 3 parameters are definitely coordinates after seeing them passed in other scripts, and even being used straight from the player's coordinates.
		// ---
		// It seems that - in the decompiled scripts - this native was used on a ped who was in a vehicle to throw a projectile out the window at the player. This is something any ped will naturally do if they have a throwable and they are doing driveby-combat (although not very accurately).
		// It is possible, however, that this is how SWAT throws smoke grenades at the player when in cover.
		// ----------------------------------------------------
		// The first comment is right it definately is the ped as if you look in script finale_heist2b.c line 59628 in Xbox Scripts atleast you will see task_throw_projectile and the first param is Local_559[2 <14>] if you look above it a little bit line 59622 give_weapon_to_ped uses the same exact param Local_559[2 <14>] and we all know the first param of that native is ped. So it guaranteed has to be ped. 0 just may mean to use your ped by default for some reason.
		public static void TASK_THROW_PROJECTILE(Ped ped, float x, float y, float z, int ignoreCollisionEntityIndex, bool createInvincibleProjectile) { Invoke(0x7285951DBF6B5A51, V(ped), V(x), V(y), V(z), V(ignoreCollisionEntityIndex), V(createInvincibleProjectile)); }
		public static void TASK_SWAP_WEAPON(Ped ped, bool drawWeapon) { Invoke(0xA21C51255B205245, V(ped), V(drawWeapon)); }
		// The 2nd param (drawWeapon) is not implemented.
		// 
		// -----------------------------------------------------------------------
		// 
		// The only occurrence I found in a R* script ("assassin_construction.ysc.c4"):
		// 
		//             if (((v_3 < v_4) && (TASK::GET_SCRIPT_TASK_STATUS(PLAYER::PLAYER_PED_ID(), 0x6a67a5cc) != 1)) && (v_5 > v_3)) {
		//                 TASK::TASK_RELOAD_WEAPON(PLAYER::PLAYER_PED_ID(), 1);
		//             }
		public static void TASK_RELOAD_WEAPON(Ped ped, bool drawWeapon) { Invoke(0x62D2916F56B9CD2D, V(ped), V(drawWeapon)); }
		public static bool IS_PED_GETTING_UP(Ped ped) { return Invoke<bool>(0x2A74E1D5F2F00EEC, V(ped)); }
		// EX: Function.Call(Ped1, Ped2, Time, 0);
		// 
		// The last parameter is always 0 for some reason I do not know. The first parameter is the pedestrian who will writhe to the pedestrian in the other parameter. The third paremeter is how long until the Writhe task ends. When the task ends, the ped will die. If set to -1, he will not die automatically, and the task will continue until something causes it to end. This can be being touched by an entity, being shot, explosion, going into ragdoll, having task cleared. Anything that ends the current task will kill the ped at this point.
		// 
		// 
		// 
		// Third parameter does not appear to be time. The last parameter is not implemented (It's not used, regardless of value).
		public static void TASK_WRITHE(Ped ped, Ped target, int minFireLoops, int startState, bool forceShootOnGround, int shootFromGroundTimer) { Invoke(0xCDDC2B77CE54AC6E, V(ped), V(target), V(minFireLoops), V(startState), V(forceShootOnGround), V(shootFromGroundTimer)); }
		// This native checks if a ped is on the ground, in pain from a (gunshot) wound.
		// Returns `true` if the ped is in writhe, `false` otherwise.
		public static bool IS_PED_IN_WRITHE(Ped ped) { return Invoke<bool>(0xDEB6D52126E7D640, V(ped)); }
		//  patrolRoutes found in the b617d scripts:
		//  "miss_Ass0",
		//  "miss_Ass1",
		//  "miss_Ass2",
		//  "miss_Ass3",
		//  "miss_Ass4",
		//  "miss_Ass5",
		//  "miss_Ass6",
		//  "MISS_PATROL_6",
		//  "MISS_PATROL_7",
		//  "MISS_PATROL_8",
		//  "MISS_PATROL_9",
		//  "miss_Tower_01",
		//  "miss_Tower_02",
		//  "miss_Tower_03",
		//  "miss_Tower_04",
		//  "miss_Tower_05",
		//  "miss_Tower_06",
		//  "miss_Tower_07",
		//  "miss_Tower_08",
		//  "miss_Tower_10"
		public static void OPEN_PATROL_ROUTE(string patrolRoute) { Invoke(0xA36BFB5EE89F3D82, V(patrolRoute)); }
		public static void CLOSE_PATROL_ROUTE() { Invoke(0xB043ECA801B8CBC1); }
		// Example: 
		// TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", -193.4915, -2378.864990234375, 10.9719, -193.4915, -2378.864990234375, 10.9719, 3000);
		// 
		// p0 is between 0 and 4 in the scripts.
		// 
		// p1 is "WORLD_HUMAN_GUARD_STAND" or "StandGuard".
		// 
		// p2, p3 and p4 is only one parameter sometimes in the scripts. Most likely a Vector3 hence p2, p3 and p4 are coordinates. 
		// Examples: 
		// TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_739[7/*3*/], 0.0, 0.0, 0.0, 0);
		// 
		// TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_B0[17/*44*/]._f3, l_B0[17/*44*/]._f3, 2000);
		// 
		// p5, p6 and p7 are for example set to: 1599.0406494140625, 2713.392578125, 44.4309.
		// 
		// p8 is an int, often random set to for example: MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000).
		public static void ADD_PATROL_ROUTE_NODE(int nodeId, string nodeType, float posX, float posY, float posZ, float headingX, float headingY, float headingZ, int duration) { Invoke(0x8EDF950167586B7C, V(nodeId), V(nodeType), V(posX), V(posY), V(posZ), V(headingX), V(headingY), V(headingZ), V(duration)); }
		public static void ADD_PATROL_ROUTE_LINK(int nodeId1, int nodeId2) { Invoke(0x23083260DEC3A551, V(nodeId1), V(nodeId2)); }
		public static void CREATE_PATROL_ROUTE() { Invoke(0xAF8A443CCC8018DC); }
		// From the b617d scripts:
		// 
		// TASK::DELETE_PATROL_ROUTE("miss_merc0");
		// TASK::DELETE_PATROL_ROUTE("miss_merc1");
		// TASK::DELETE_PATROL_ROUTE("miss_merc2");
		// TASK::DELETE_PATROL_ROUTE("miss_dock");
		public static void DELETE_PATROL_ROUTE(string patrolRoute) { Invoke(0x7767DD9D65E91319, V(patrolRoute)); }
		public static bool GET_PATROL_TASK_INFO(Ped ped, int* timeLeftAtNode, int* nodeId) { return Invoke<bool>(0x52F734CEBE20DFBA, V(ped), V(timeLeftAtNode), V(nodeId)); }
		// After looking at some scripts the second parameter seems to be an id of some kind. Here are some I found from some R* scripts:
		// 
		// "miss_Tower_01" (this went from 01 - 10)
		// "miss_Ass0" (0, 4, 6, 3)
		// "MISS_PATROL_8"
		// 
		// I think they're patrol routes, but I'm not sure. And I believe the 3rd parameter is a bool, but I can't confirm other than only seeing 0 and 1 being passed.
		// 
		// 
		// As far as I can see the patrol routes names such as "miss_Ass0" have been defined earlier in the scripts. This leads me to believe we can defined our own new patrol routes by following the same approach. 
		// From the scripts
		// 
		//     TASK::OPEN_PATROL_ROUTE("miss_Ass0");
		//     TASK::ADD_PATROL_ROUTE_NODE(0, "WORLD_HUMAN_GUARD_STAND", l_738[0/*3*/], -139.4076690673828, -993.4732055664062, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
		//     TASK::ADD_PATROL_ROUTE_NODE(1, "WORLD_HUMAN_GUARD_STAND", l_738[1/*3*/], -116.1391830444336, -987.4984130859375, 26.38541030883789, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
		//     TASK::ADD_PATROL_ROUTE_NODE(2, "WORLD_HUMAN_GUARD_STAND", l_738[2/*3*/], -128.46847534179688, -979.0340576171875, 26.2754, MISC::GET_RANDOM_INT_IN_RANGE(5000, 10000));
		//     TASK::ADD_PATROL_ROUTE_LINK(0, 1);
		//     TASK::ADD_PATROL_ROUTE_LINK(1, 2);
		//     TASK::ADD_PATROL_ROUTE_LINK(2, 0);
		//     TASK::CLOSE_PATROL_ROUTE();
		//     TASK::CREATE_PATROL_ROUTE();
		// 
		// 
		public static void TASK_PATROL(Ped ped, string patrolRouteName, int alertState, bool canChatToPeds, bool useHeadLookAt) { Invoke(0xBDA5DF49D080FE4E, V(ped), V(patrolRouteName), V(alertState), V(canChatToPeds), V(useHeadLookAt)); }
		// Makes the ped run to take cover
		public static void TASK_STAY_IN_COVER(Ped ped) { Invoke(0xE5DA8615A6180789, V(ped)); }
		// x, y, z: offset in world coords from some entity.
		public static void ADD_VEHICLE_SUBTASK_ATTACK_COORD(Ped ped, float x, float y, float z) { Invoke(0x5CF0D8F9BBA0DD75, V(ped), V(x), V(y), V(z)); }
		public static void ADD_VEHICLE_SUBTASK_ATTACK_PED(Ped ped, Ped target) { Invoke(0x85F462BADC7DA47F, V(ped), V(target)); }
		public static void TASK_VEHICLE_SHOOT_AT_PED(Ped ped, Ped target, float fireTolerance) { Invoke(0x10AB107B887214D8, V(ped), V(target), V(fireTolerance)); }
		public static void TASK_VEHICLE_AIM_AT_PED(Ped ped, Ped target) { Invoke(0xE41885592B08B097, V(ped), V(target)); }
		public static void TASK_VEHICLE_SHOOT_AT_COORD(Ped ped, float x, float y, float z, float fireTolerance) { Invoke(0x5190796ED39C9B6D, V(ped), V(x), V(y), V(z), V(fireTolerance)); }
		public static void TASK_VEHICLE_AIM_AT_COORD(Ped ped, float x, float y, float z) { Invoke(0x447C1E9EF844BC0F, V(ped), V(x), V(y), V(z)); }
		// Differs from TASK_VEHICLE_DRIVE_TO_COORDS in that it will pick the shortest possible road route without taking one-way streets and other "road laws" into consideration.
		// 
		// WARNING:
		// A behaviorFlag value of 0 will result in a clunky, stupid driver!
		// 
		// Recommended settings:
		// speed = 30.0f,
		// behaviorFlag = 156, 
		// stoppingRange = 5.0f;
		// 
		// If you simply want to have your driver move to a fixed location, call it only once, or, when necessary in the evt of interruption. 
		// 
		// If using this to continually follow a Ped who is on foot:  You will need to run this in a tick loop.  Call it in with the Ped's updated coordinates every 20 ticks or so and you will have one hell of a smart, fast-reacting NPC driver -- provided he doesn't get stuck.  If your update frequency is too fast, the Ped may not have enough time to figure his way out of being stuck, and thus, remain stuck.  One way around this would be to implement an "anti-stuck" mechanism, which allows the driver to realize he's stuck, temporarily pause the tick, unstuck, then resume the tick.
		// 
		// EDIT:  This is being discussed in more detail at http://gtaforums.com/topic/818504-any-idea-on-how-to-make-peds-clever-and-insanely-fast-c/  
		public static void TASK_VEHICLE_GOTO_NAVMESH(Ped ped, Vehicle vehicle, float x, float y, float z, float speed, int behaviorFlag, float stoppingRange) { Invoke(0x195AEEB13CEFE2EE, V(ped), V(vehicle), V(x), V(y), V(z), V(speed), V(behaviorFlag), V(stoppingRange)); }
		// movement_speed: mostly 2f, but also 1/1.2f, etc.
		// p8: always false
		// p9: 2f
		// p10: 0.5f
		// p11: true
		// p12: 0 / 512 / 513, etc.
		// p13: 0
		// firing_pattern: ${firing_pattern_full_auto}, 0xC6EE6B4C
		public static void TASK_GO_TO_COORD_WHILE_AIMING_AT_COORD(Ped ped, float x, float y, float z, float aimAtX, float aimAtY, float aimAtZ, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, int navFlags, bool instantBlendToAim, Hash firingPattern) { Invoke(V(0x11315AB3385B8AC0), V(ped), V(x), V(y), V(z), V(aimAtX), V(aimAtY), V(aimAtZ), V(moveBlendRatio), V(shoot), V(targetRadius), V(slowDistance), V(useNavMesh), V(navFlags), V(instantBlendToAim), V(firingPattern)); }
		public static void TASK_GO_TO_COORD_WHILE_AIMING_AT_ENTITY(Ped ped, float x, float y, float z, Entity aimAtID, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, int navFlags, bool instantBlendToAim, Hash firingPattern, int time) { Invoke(0xB2A16444EAD9AE47, V(ped), V(x), V(y), V(z), V(aimAtID), V(moveBlendRatio), V(shoot), V(targetRadius), V(slowDistance), V(useNavMesh), V(navFlags), V(instantBlendToAim), V(firingPattern), V(time)); }
		// The ped will walk or run towards goToLocation, aiming towards goToLocation or focusLocation (depending on the aimingFlag) and shooting if shootAtEnemies = true to any enemy in his path.
		// 
		// If the ped is closer than noRoadsDistance, the ped will ignore pathing/navmesh and go towards goToLocation directly. This could cause the ped to get stuck behind tall walls if the goToLocation is on the other side. To avoid this, use 0.0f and the ped will always use pathing/navmesh to reach his destination.
		// 
		// If the speed is set to 0.0f, the ped will just stand there while aiming, if set to 1.0f he will walk while aiming, 2.0f will run while aiming.
		// 
		// The ped will stop aiming when he is closer than distanceToStopAt to goToLocation.
		// 
		// I still can't figure out what unkTrue is used for. I don't notice any difference if I set it to false but in the decompiled scripts is always true.
		// 
		// I think that unkFlag, like the driving styles, could be a flag that "work as a list of 32 bits converted to a decimal integer. Each bit acts as a flag, and enables or disables a function". What leads me to this conclusion is the fact that in the decompiled scripts, unkFlag takes values like: 0, 1, 5 (101 in binary) and 4097 (4096 + 1 or 1000000000001 in binary). For now, I don't know what behavior enable or disable this possible flag so I leave it at 0.
		// 
		// Note: After some testing, using unkFlag = 16 (0x10) enables the use of sidewalks while moving towards goToLocation.
		// 
		// The aimingFlag takes 2 values: 0 to aim at the focusLocation, 1 to aim at where the ped is heading (goToLocation).
		// 
		// Example:
		// 
		// enum AimFlag
		// {
		//    AimAtFocusLocation,
		//    AimAtGoToLocation
		// };
		// 
		// Vector3 goToLocation1 = { 996.2867f, 0, -2143.044f, 0, 28.4763f, 0 }; // remember the padding.
		// 
		// Vector3 goToLocation2 = { 990.2867f, 0, -2140.044f, 0, 28.4763f, 0 }; // remember the padding.
		// 
		// Vector3 focusLocation = { 994.3478f, 0, -2136.118f, 0, 29.2463f, 0 }; // the coord z should be a little higher, around +1.0f to avoid aiming at the ground
		// 
		// // 1st example
		// TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation1.x, goToLocation1.y, goToLocation1.z, focusLocation.x, focusLocation.y, focusLocation.z, 2.0f /*run*/, true /*shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtGoToLocation, -957453492 /*FullAuto pattern*/);
		// 
		// // 2nd example
		// TASK::TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(pedHandle, goToLocation2.x, goToLocation2.y, goToLocation2.z, focusLocation.x, focusLocation.y, focusLocation.z, 1.0f /*walk*/, false /*don't shoot*/, 3.0f /*stop at*/, 0.0f /*noRoadsDistance*/, true /*always true*/, 0 /*possible flag*/, AimFlag::AimAtFocusLocation, -957453492 /*FullAuto pattern*/);
		// 
		// 
		// 1st example: The ped (pedhandle) will run towards goToLocation1. While running and aiming towards goToLocation1, the ped will shoot on sight to any enemy in his path, using "FullAuto" firing pattern. The ped will stop once he is closer than distanceToStopAt to goToLocation1.
		// 
		// 2nd example: The ped will walk towards goToLocation2. This time, while walking towards goToLocation2 and aiming at focusLocation, the ped will point his weapon on sight to any enemy in his path without shooting. The ped will stop once he is closer than distanceToStopAt to goToLocation2.
		public static void TASK_GO_TO_COORD_AND_AIM_AT_HATED_ENTITIES_NEAR_COORD(Ped pedHandle, float goToLocationX, float goToLocationY, float goToLocationZ, float focusLocationX, float focusLocationY, float focusLocationZ, float speed, bool shootAtEnemies, float distanceToStopAt, float noRoadsDistance, bool useNavMesh, int navFlags, int taskFlags, Hash firingPattern) { Invoke(V(0xA55547801EB331FC), V(pedHandle), V(goToLocationX), V(goToLocationY), V(goToLocationZ), V(focusLocationX), V(focusLocationY), V(focusLocationZ), V(speed), V(shootAtEnemies), V(distanceToStopAt), V(noRoadsDistance), V(useNavMesh), V(navFlags), V(taskFlags), V(firingPattern)); }
		public static void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_COORD(Ped ped, Entity entity, float aimX, float aimY, float aimZ, float moveBlendRatio, bool shoot, float targetRadius, float slowDistance, bool useNavMesh, bool instantBlendToAim, Hash firingPattern) { Invoke(0x04701832B739DCE5, V(ped), V(entity), V(aimX), V(aimY), V(aimZ), V(moveBlendRatio), V(shoot), V(targetRadius), V(slowDistance), V(useNavMesh), V(instantBlendToAim), V(firingPattern)); }
		// shootatEntity:
		// If true, peds will shoot at Entity till it is dead.
		// If false, peds will just walk till they reach the entity and will cease shooting.
		public static void TASK_GO_TO_ENTITY_WHILE_AIMING_AT_ENTITY(Ped ped, Entity entityToWalkTo, Entity entityToAimAt, float speed, bool shootatEntity, float targetRadius, float slowDistance, bool useNavMesh, bool instantBlendToAim, Hash firingPattern) { Invoke(0x97465886D35210E9, V(ped), V(entityToWalkTo), V(entityToAimAt), V(speed), V(shootatEntity), V(targetRadius), V(slowDistance), V(useNavMesh), V(instantBlendToAim), V(firingPattern)); }
		// Makes the ped ragdoll like when falling from a great height
		public static void SET_HIGH_FALL_TASK(Ped ped, int minTime, int maxTime, int entryType) { Invoke(0x8C825BDC7741D37C, V(ped), V(minTime), V(maxTime), V(entryType)); }
		// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
		// For a full list of the points, see here: goo.gl/wIH0vn
		// 
		// Max number of loaded recordings is 32.
		public static void REQUEST_WAYPOINT_RECORDING(string name) { Invoke(0x9EEFB62EB27B5792, V(name)); }
		// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
		public static bool GET_IS_WAYPOINT_RECORDING_LOADED(string name) { return Invoke<bool>(0xCB4E8BE8A0063C5D, V(name)); }
		// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
		public static void REMOVE_WAYPOINT_RECORDING(string name) { Invoke(0xFF1B8B4AA1C25DC8, V(name)); }
		// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
		// For a full list of the points, see here: goo.gl/wIH0vn
		public static bool WAYPOINT_RECORDING_GET_NUM_POINTS(string name, int* points) { return Invoke<bool>(0x5343532C01A07234, V(name), V(points)); }
		// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
		// For a full list of the points, see here: goo.gl/wIH0vn
		public static bool WAYPOINT_RECORDING_GET_COORD(string name, int point, Vector3* coord) { return Invoke<bool>(0x2FB897405C90B361, V(name), V(point), V(coord)); }
		// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
		public static float WAYPOINT_RECORDING_GET_SPEED_AT_POINT(string name, int point) { return Invoke<float>(0x005622AEBC33ACA9, V(name), V(point)); }
		// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
		// For a full list of the points, see here: goo.gl/wIH0vn
		public static bool WAYPOINT_RECORDING_GET_CLOSEST_WAYPOINT(string name, float x, float y, float z, int* point) { return Invoke<bool>(0xB629A298081F876F, V(name), V(x), V(y), V(z), V(point)); }
		public static void TASK_FOLLOW_WAYPOINT_RECORDING(Ped ped, string name, int p2, int p3, int p4) { Invoke(0x0759591819534F7B, V(ped), V(name), V(p2), V(p3), V(p4)); }
		public static bool IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_PED(Ped ped) { return Invoke<bool>(0xE03B3F2D3DC59B64, V(ped)); }
		public static int GET_PED_WAYPOINT_PROGRESS(Ped ped) { return Invoke<int>(0x2720AAA75001E094, V(ped)); }
		public static float GET_PED_WAYPOINT_DISTANCE(Any p0) { return Invoke<float>(0xE6A877C64CAF1BC5, V(p0)); }
		public static bool SET_PED_WAYPOINT_ROUTE_OFFSET(Ped ped, float x, float y, float z) { return Invoke<bool>(0xED98E10B0AFCE4B4, V(ped), V(x), V(y), V(z)); }
		public static float GET_WAYPOINT_DISTANCE_ALONG_ROUTE(string name, int point) { return Invoke<float>(0xA5B769058763E497, V(name), V(point)); }
		public static bool WAYPOINT_PLAYBACK_GET_IS_PAUSED(Any p0) { return Invoke<bool>(0x701375A7D43F01CB, V(p0)); }
		public static void WAYPOINT_PLAYBACK_PAUSE(Any p0, bool p1, bool p2) { Invoke(0x0F342546AA06FED5, V(p0), V(p1), V(p2)); }
		public static void WAYPOINT_PLAYBACK_RESUME(Any p0, bool p1, Any p2, Any p3) { Invoke(0x244F70C84C547D2D, V(p0), V(p1), V(p2), V(p3)); }
		public static void WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Any p0, float p1, bool p2) { Invoke(0x7D7D2B47FA788E85, V(p0), V(p1), V(p2)); }
		public static void WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(Any p0) { Invoke(0x6599D834B12D0800, V(p0)); }
		public static void USE_WAYPOINT_RECORDING_AS_ASSISTED_MOVEMENT_ROUTE(string name, bool p1, float p2, float p3) { Invoke(0x5A353B8E6B1095B5, V(name), V(p1), V(p2), V(p3)); }
		public static void WAYPOINT_PLAYBACK_START_AIMING_AT_PED(Ped ped, Ped target, bool p2) { Invoke(0x20E330937C399D29, V(ped), V(target), V(p2)); }
		public static void WAYPOINT_PLAYBACK_START_AIMING_AT_COORD(Ped ped, float x, float y, float z, bool p4) { Invoke(0x8968400D900ED8B3, V(ped), V(x), V(y), V(z), V(p4)); }
		public static void WAYPOINT_PLAYBACK_START_SHOOTING_AT_PED(Ped ped, Ped ped2, bool p2, bool p3) { Invoke(0xE70BA7B90F8390DC, V(ped), V(ped2), V(p2), V(p3)); }
		public static void WAYPOINT_PLAYBACK_START_SHOOTING_AT_COORD(Ped ped, float x, float y, float z, bool p4, Hash firingPattern) { Invoke(0x057A25CFCC9DB671, V(ped), V(x), V(y), V(z), V(p4), V(firingPattern)); }
		public static void WAYPOINT_PLAYBACK_STOP_AIMING_OR_SHOOTING(Ped ped) { Invoke(0x47EFA040EBB8E2EA, V(ped)); }
		// Routes: "1_FIBStairs", "2_FIBStairs", "3_FIBStairs", "4_FIBStairs", "5_FIBStairs", "5_TowardsFire", "6a_FIBStairs", "7_FIBStairs", "8_FIBStairs", "Aprtmnt_1", "AssAfterLift", "ATM_1", "coroner2", "coroner_stairs", "f5_jimmy1", "fame1", "family5b", "family5c", "Family5d", "family5d", "FIB_Glass1", "FIB_Glass2", "FIB_Glass3", "finaBroute1A", "finalb1st", "finalB1sta", "finalbround", "finalbroute2", "Hairdresser1", "jan_foyet_ft_door", "Jo_3", "Lemar1", "Lemar2", "mansion_1", "Mansion_1", "pols_1", "pols_2", "pols_3", "pols_4", "pols_5", "pols_6", "pols_7", "pols_8", "Pro_S1", "Pro_S1a", "Pro_S2", "Towards_case", "trev_steps", "tunrs1", "tunrs2", "tunrs3", "Wave01457s"
		public static void ASSISTED_MOVEMENT_REQUEST_ROUTE(string route) { Invoke(0x817268968605947A, V(route)); }
		public static void ASSISTED_MOVEMENT_REMOVE_ROUTE(string route) { Invoke(0x3548536485DD792B, V(route)); }
		public static bool ASSISTED_MOVEMENT_IS_ROUTE_LOADED(string route) { return Invoke<bool>(0x60F9A4393A21F741, V(route)); }
		public static void ASSISTED_MOVEMENT_SET_ROUTE_PROPERTIES(string route, int props) { Invoke(0xD5002D78B7162E1B, V(route), V(props)); }
		public static void ASSISTED_MOVEMENT_OVERRIDE_LOAD_DISTANCE_THIS_FRAME(float dist) { Invoke(0x13945951E16EF912, V(dist)); }
		// 
		// 
		// p2 = Waypoint recording string (found in update\update.rpf\x64\levels\gta5\waypointrec.rpf
		// p3 = 786468
		// p4 = 0
		// p5 = 16
		// p6 = -1 (angle?)
		// p7/8/9 = usually v3.zero
		// p10 = bool (repeat?)
		// p11 = 1073741824
		// 
		// Full list of waypoint recordings by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/waypointRecordings.json
		public static void TASK_VEHICLE_FOLLOW_WAYPOINT_RECORDING(Ped ped, Vehicle vehicle, string WPRecording, int p3, int p4, int p5, int p6, float p7, bool p8, float p9) { Invoke(0x3123FAA6DB1CF7ED, V(ped), V(vehicle), V(WPRecording), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(p9)); }
		public static bool IS_WAYPOINT_PLAYBACK_GOING_ON_FOR_VEHICLE(Vehicle vehicle) { return Invoke<bool>(0xF5134943EA29868C, V(vehicle)); }
		public static int GET_VEHICLE_WAYPOINT_PROGRESS(Vehicle vehicle) { return Invoke<int>(0x9824CFF8FC66E159, V(vehicle)); }
		public static int GET_VEHICLE_WAYPOINT_TARGET_POINT(Vehicle vehicle) { return Invoke<int>(0x416B62AC8B9E5BBD, V(vehicle)); }
		public static void VEHICLE_WAYPOINT_PLAYBACK_PAUSE(Vehicle vehicle) { Invoke(0x8A4E6AC373666BC5, V(vehicle)); }
		public static void VEHICLE_WAYPOINT_PLAYBACK_RESUME(Vehicle vehicle) { Invoke(0xDC04FCAA7839D492, V(vehicle)); }
		public static void VEHICLE_WAYPOINT_PLAYBACK_USE_DEFAULT_SPEED(Vehicle vehicle) { Invoke(0x5CEB25A7D2848963, V(vehicle)); }
		public static void VEHICLE_WAYPOINT_PLAYBACK_OVERRIDE_SPEED(Vehicle vehicle, float speed) { Invoke(0x121F0593E0A431D7, V(vehicle), V(speed)); }
		// I cant believe I have to define this, this is one of the best natives.
		// 
		// It makes the ped ignore basically all shocking events around it. Occasionally the ped may comment or gesture, but other than that they just continue their daily activities. This includes shooting and wounding the ped. And - most importantly - they do not flee.
		// 
		// Since it is a task, every time the native is called the ped will stop for a moment. 
		public static void TASK_SET_BLOCKING_OF_NON_TEMPORARY_EVENTS(Ped ped, bool toggle) { Invoke(0x90D2156198831D69, V(ped), V(toggle)); }
		// p2 always false
		// 
		// [30/03/2017] ins1de :
		// 
		// See FORCE_PED_MOTION_STATE
		public static void TASK_FORCE_MOTION_STATE(Ped ped, Hash state, bool forceRestart) { Invoke(0x4F056E1AFFEF17AB, V(ped), V(state), V(forceRestart)); }
		// Example:
		// TASK::TASK_MOVE_NETWORK_BY_NAME(PLAYER::PLAYER_PED_ID(), "arm_wrestling_sweep_paired_a_rev3", 0.0f, true, "mini@arm_wrestling", 0);
		public static void TASK_MOVE_NETWORK_BY_NAME(Ped ped, string task, float multiplier, bool allowOverrideCloneUpdate, string animDict, int flags) { Invoke(0x2D537BA194896636, V(ped), V(task), V(multiplier), V(allowOverrideCloneUpdate), V(animDict), V(flags)); }
		// Example:
		// TASK::TASK_MOVE_NETWORK_ADVANCED_BY_NAME(PLAYER::PLAYER_PED_ID(), "minigame_tattoo_michael_parts", 324.13f, 181.29f, 102.6f, 0.0f, 0.0f, 22.32f, 2, 0, false, 0, 0);
		public static void TASK_MOVE_NETWORK_ADVANCED_BY_NAME(Ped ped, string network, float x, float y, float z, float rotX, float rotY, float rotZ, int rotOrder, float blendDuration, bool allowOverrideCloneUpdate, string animDict, int flags) { Invoke(0xD5B35BEA41919ACB, V(ped), V(network), V(x), V(y), V(z), V(rotX), V(rotY), V(rotZ), V(rotOrder), V(blendDuration), V(allowOverrideCloneUpdate), V(animDict), V(flags)); }
		// Used only once in the scripts (am_mp_nightclub)
		public static void TASK_MOVE_NETWORK_BY_NAME_WITH_INIT_PARAMS(Ped ped, string network, int* initialParameters, float blendDuration, bool allowOverrideCloneUpdate, string animDict, int flags) { Invoke(0x3D45B0B355C5E0C9, V(ped), V(network), V(initialParameters), V(blendDuration), V(allowOverrideCloneUpdate), V(animDict), V(flags)); }
		public static void TASK_MOVE_NETWORK_ADVANCED_BY_NAME_WITH_INIT_PARAMS(Ped ped, string network, int* initialParameters, float x, float y, float z, float rotX, float rotY, float rotZ, int rotOrder, float blendDuration, bool allowOverrideCloneUpdate, string dictionary, int flags) { Invoke(0x29682E2CCF21E9B5, V(ped), V(network), V(initialParameters), V(x), V(y), V(z), V(rotX), V(rotY), V(rotZ), V(rotOrder), V(blendDuration), V(allowOverrideCloneUpdate), V(dictionary), V(flags)); }
		public static bool IS_TASK_MOVE_NETWORK_ACTIVE(Ped ped) { return Invoke<bool>(0x921CE12C489C4C41, V(ped)); }
		public static bool IS_TASK_MOVE_NETWORK_READY_FOR_TRANSITION(Ped ped) { return Invoke<bool>(0x30ED88D5E0C56A37, V(ped)); }
		public static bool REQUEST_TASK_MOVE_NETWORK_STATE_TRANSITION(Ped ped, string name) { return Invoke<bool>(0xD01015C7316AE176, V(ped), V(name)); }
		// Used only once in the scripts (fm_mission_controller) like so:
		// 
		// TASK::SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(iLocal_3160, "Cutting");
		public static bool SET_EXPECTED_CLONE_NEXT_TASK_MOVE_NETWORK_STATE(Ped ped, string state) { return Invoke<bool>(0xAB13A5565480B6D9, V(ped), V(state)); }
		public static byte* GET_TASK_MOVE_NETWORK_STATE(Ped ped) { return PInvoke<byte>(0x717E4D1F2048376D, V(ped)); }
		public static void SET_TASK_MOVE_NETWORK_ANIM_SET(Ped ped, Hash clipSet, Hash variableClipSet) { Invoke(0x8423541E8B3A1589, V(ped), V(clipSet), V(variableClipSet)); }
		// signalName - "Phase", "Wobble", "x_axis","y_axis","introphase","speed".
		// p2 - From what i can see it goes up to 1f (maybe).
		// 
		// Example: TASK::SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(PLAYER::PLAYER_PED_ID(), "Phase", 0.5);
		public static void SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, string signalName, float value) { Invoke(0xD5BB4025AE449A4E, V(ped), V(signalName), V(value)); }
		public static void SET_TASK_MOVE_NETWORK_SIGNAL_LOCAL_FLOAT(Ped ped, string signalName, float value) { Invoke(0x373EF409B82697A3, V(ped), V(signalName), V(value)); }
		public static void SET_TASK_MOVE_NETWORK_SIGNAL_FLOAT_LERP_RATE(Ped ped, string signalName, float value) { Invoke(0x8634CEF2522D987B, V(ped), V(signalName), V(value)); }
		public static void SET_TASK_MOVE_NETWORK_SIGNAL_BOOL(Ped ped, string signalName, bool value) { Invoke(0xB0A6CFD2C69C1088, V(ped), V(signalName), V(value)); }
		public static float GET_TASK_MOVE_NETWORK_SIGNAL_FLOAT(Ped ped, string signalName) { return Invoke<float>(0x44AB0B3AFECCE242, V(ped), V(signalName)); }
		public static bool GET_TASK_MOVE_NETWORK_SIGNAL_BOOL(Ped ped, string signalName) { return Invoke<bool>(0xA7FFBA498E4AAF67, V(ped), V(signalName)); }
		public static bool GET_TASK_MOVE_NETWORK_EVENT(Ped ped, string eventName) { return Invoke<bool>(0xB4F47213DF45A64C, V(ped), V(eventName)); }
		// Doesn't actually return anything.
		public static bool SET_TASK_MOVE_NETWORK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(Ped ped, bool enable) { return Invoke<bool>(0x0FFB3C758E8C07B9, V(ped), V(enable)); }
		public static void _SET_SCRIPT_TASK_ENABLE_COLLISION_ON_NETWORK_CLONE_WHEN_FIXED(Ped ped, bool enable) { Invoke(0x32F6EEF031F943DC, V(ped), V(enable)); }
		public static bool IS_MOVE_BLEND_RATIO_STILL(Ped ped) { return Invoke<bool>(0x349CE7B56DAFD95C, V(ped)); }
		public static bool IS_MOVE_BLEND_RATIO_WALKING(Ped ped) { return Invoke<bool>(0xF133BBBE91E1691F, V(ped)); }
		public static bool IS_MOVE_BLEND_RATIO_RUNNING(Ped ped) { return Invoke<bool>(0xD4D8636C0199A939, V(ped)); }
		public static bool IS_MOVE_BLEND_RATIO_SPRINTING(Ped ped) { return Invoke<bool>(0x24A2AD74FA9814E2, V(ped)); }
		public static bool IS_PED_STILL(Ped ped) { return Invoke<bool>(0xAC29253EEF8F0180, V(ped)); }
		public static bool IS_PED_WALKING(Ped ped) { return Invoke<bool>(0xDE4C184B2B9B071A, V(ped)); }
		public static bool IS_PED_RUNNING(Ped ped) { return Invoke<bool>(0xC5286FFC176F28A2, V(ped)); }
		public static bool IS_PED_SPRINTING(Ped ped) { return Invoke<bool>(0x57E457CD2C0FC168, V(ped)); }
		// What's strafing?
		public static bool IS_PED_STRAFING(Ped ped) { return Invoke<bool>(0xE45B7F222DE47E09, V(ped)); }
		//  TASK::TASK_SYNCHRONIZED_SCENE(ped, scene, "creatures@rottweiler@in_vehicle@std_car", "get_in", 1000.0, -8.0, 4, 0, 0x447a0000, 0);
		// 
		// Full list of animation dictionaries and anims by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/animDictsCompact.json
		public static void TASK_SYNCHRONIZED_SCENE(Ped ped, int scene, string animDictionary, string animationName, float blendIn, float blendOut, int flags, int ragdollBlockingFlags, float moverBlendDelta, int ikFlags) { Invoke(0xEEA929141F699854, V(ped), V(scene), V(animDictionary), V(animationName), V(blendIn), V(blendOut), V(flags), V(ragdollBlockingFlags), V(moverBlendDelta), V(ikFlags)); }
		public static void TASK_AGITATED_ACTION_CONFRONT_RESPONSE(Ped ped, Ped ped2) { Invoke(0x19D1B791CB3670FE, V(ped), V(ped2)); }
		// This function is called on peds in vehicles.
		// 
		// anim: animation name
		// p2, p3, p4: "sweep_low", "sweep_med" or "sweep_high"
		// p5: no idea what it does but is usually -1
		public static void TASK_SWEEP_AIM_ENTITY(Ped ped, string animDict, string lowAnimName, string medAnimName, string hiAnimName, int runtime, Entity targetEntity, float turnRate, float blendInDuration) { Invoke(0x2047C02158D6405A, V(ped), V(animDict), V(lowAnimName), V(medAnimName), V(hiAnimName), V(runtime), V(targetEntity), V(turnRate), V(blendInDuration)); }
		public static void UPDATE_TASK_SWEEP_AIM_ENTITY(Ped ped, Entity entity) { Invoke(0xE4973DBDBE6E44B3, V(ped), V(entity)); }
		public static void TASK_SWEEP_AIM_POSITION(Ped ped, string animDict, string lowAnimName, string medAnimName, string hiAnimName, int runtime, float x, float y, float z, float turnRate, float blendInDuration) { Invoke(0x7AFE8FDC10BC07D2, V(ped), V(animDict), V(lowAnimName), V(medAnimName), V(hiAnimName), V(runtime), V(x), V(y), V(z), V(turnRate), V(blendInDuration)); }
		public static void UPDATE_TASK_SWEEP_AIM_POSITION(Ped ped, float x, float y, float z) { Invoke(0xBB106883F5201FC4, V(ped), V(x), V(y), V(z)); }
		// Example from "me_amanda1.ysc.c4":
		// TASK::TASK_ARREST_PED(l_19F /* This is a Ped */ , PLAYER::PLAYER_PED_ID());
		// 
		// Example from "armenian1.ysc.c4":
		// if (!PED::IS_PED_INJURED(l_B18[0/*1*/])) {
		//     TASK::TASK_ARREST_PED(l_B18[0/*1*/], PLAYER::PLAYER_PED_ID());
		// }
		// 
		// I would love to have time to experiment to see if a player Ped can arrest another Ped. Might make for a good cop mod.
		// 
		// 
		// Looks like only the player can be arrested this way. Peds react and try to arrest you if you task them, but the player charater doesn't do anything if tasked to arrest another ped.
		public static void TASK_ARREST_PED(Ped ped, Ped target) { Invoke(0xF3B9A78A178572B1, V(ped), V(target)); }
		public static bool IS_PED_RUNNING_ARREST_TASK(Ped ped) { return Invoke<bool>(0x3DC52677769B4AE0, V(ped)); }
		// This function is hard-coded to always return 0.
		public static bool IS_PED_BEING_ARRESTED(Ped ped) { return Invoke<bool>(0x90A09F3A45FED688, V(ped)); }
		public static void UNCUFF_PED(Ped ped) { Invoke(0x67406F2C8F87FC4F, V(ped)); }
		public static bool IS_PED_CUFFED(Ped ped) { return Invoke<bool>(0x74E559B3BC910685, V(ped)); }




		// p7 when set to true allows you to spawn vehicles under -100 z.
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static Vehicle CREATE_VEHICLE(Hash modelHash, float x, float y, float z, float heading, bool isNetwork, bool bScriptHostVeh, bool p7) { return Invoke<Vehicle>(0xAF35D0D2583051B0, V(modelHash), V(x), V(y), V(z), V(heading), V(isNetwork), V(bScriptHostVeh), V(p7)); }
		// Deletes a vehicle.
		// The vehicle must be a mission entity to delete, so call this before deleting: SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
		// 
		// eg how to use:
		// SET_ENTITY_AS_MISSION_ENTITY(vehicle, true, true);
		// DELETE_VEHICLE(&vehicle);
		// 
		// Deletes the specified vehicle, then sets the handle pointed to by the pointer to NULL.
		public static void DELETE_VEHICLE(Vehicle* vehicle) { Invoke(0xEA386986E786A54F, V(vehicle)); }
		public static void SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON(Vehicle vehicle, bool toggle, bool p2) { Invoke(0x7D6F9A3EF26136A0, V(vehicle), V(toggle), V(p2)); }
		public static void SET_VEHICLE_ALLOW_HOMING_MISSLE_LOCKON_SYNCED(Vehicle vehicle, bool canBeLockedOn, bool p2) { Invoke(0x1DDA078D12879EEE, V(vehicle), V(canBeLockedOn), V(p2)); }
		// Makes the vehicle accept no passengers.
		public static void SET_VEHICLE_ALLOW_NO_PASSENGERS_LOCKON(Vehicle veh, bool toggle) { Invoke(0x5D14D4154BFE7B2C, V(veh), V(toggle)); }
		// Returns a value depending on the lock-on state of vehicle weapons.
		// 0: not locked on
		// 1: locking on
		// 2: locked on
		public static int GET_VEHICLE_HOMING_LOCKON_STATE(Vehicle vehicle) { return Invoke<int>(0xE6B0E8CFC3633BF0, V(vehicle)); }
		public static int GET_VEHICLE_HOMING_LOCKEDONTO_STATE(Any p0) { return Invoke<int>(0x6EAAEFC76ACC311F, V(p0)); }
		public static void SET_VEHICLE_HOMING_LOCKEDONTO_STATE(Any p0, Any p1) { Invoke(0x407DC5E97DB1A4D3, V(p0), V(p1)); }
		public static bool IS_VEHICLE_MODEL(Vehicle vehicle, Hash model) { return Invoke<bool>(0x423E8DE37D934D89, V(vehicle), V(model)); }
		public static bool DOES_SCRIPT_VEHICLE_GENERATOR_EXIST(int vehicleGenerator) { return Invoke<bool>(0xF6086BC836400876, V(vehicleGenerator)); }
		// Creates a script vehicle generator at the given coordinates. Most parameters after the model hash are unknown.
		// 
		// Parameters:
		// x/y/z - Generator position
		// heading - Generator heading
		// p4 - Unknown (always 5.0)
		// p5 - Unknown (always 3.0)
		// modelHash - Vehicle model hash
		// p7/8/9/10 - Unknown (always -1)
		// p11 - Unknown (usually TRUE, only one instance of FALSE)
		// p12/13 - Unknown (always FALSE)
		// p14 - Unknown (usally FALSE, only two instances of TRUE)
		// p15 - Unknown (always TRUE)
		// p16 - Unknown (always -1)
		// 
		// Vector3 coords = GET_ENTITY_COORDS(PLAYER_PED_ID(), 0);    CREATE_SCRIPT_VEHICLE_GENERATOR(coords.x, coords.y, coords.z, 1.0f, 5.0f, 3.0f, GET_HASH_KEY("adder"), -1. -1, -1, -1, -1, true, false, false, false, true, -1);
		public static int CREATE_SCRIPT_VEHICLE_GENERATOR(float x, float y, float z, float heading, float p4, float p5, Hash modelHash, int p7, int p8, int p9, int p10, bool p11, bool p12, bool p13, bool p14, bool p15, int p16) { return Invoke<int>(V(0x9DEF883114668116), V(x), V(y), V(z), V(heading), V(p4), V(p5), V(modelHash), V(p7), V(p8), V(p9), V(p10), V(p11), V(p12), V(p13), V(p14), V(p15), V(p16)); }
		public static void DELETE_SCRIPT_VEHICLE_GENERATOR(int vehicleGenerator) { Invoke(0x22102C9ABFCF125D, V(vehicleGenerator)); }
		// Only called once in the decompiled scripts. Presumably activates the specified generator.
		public static void SET_SCRIPT_VEHICLE_GENERATOR(int vehicleGenerator, bool enabled) { Invoke(0xD9D620E0AC6DC4B0, V(vehicleGenerator), V(enabled)); }
		// When p6 is true, vehicle generators are active.
		// p7 seems to always be true in story mode scripts, but it's sometimes false in online scripts.
		public static void SET_ALL_VEHICLE_GENERATORS_ACTIVE_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, bool toggle, bool p7) { Invoke(0xC12321827687FE4D, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(toggle), V(p7)); }
		public static void SET_ALL_VEHICLE_GENERATORS_ACTIVE() { Invoke(0x34AD89078831A4BC); }
		public static void SET_ALL_LOW_PRIORITY_VEHICLE_GENERATORS_ACTIVE(bool active) { Invoke(0x608207E7A8FB787C, V(active)); }
		// Related to car generators & CPlayerSwitchMgrLong
		public static void SET_VEHICLE_GENERATOR_AREA_OF_INTEREST(float x, float y, float z, float radius) { Invoke(0x9A75585FB2E54FAD, V(x), V(y), V(z), V(radius)); }
		public static void CLEAR_VEHICLE_GENERATOR_AREA_OF_INTEREST() { Invoke(0x0A436B8643716D14); }
		// Sets a vehicle on the ground on all wheels.  Returns whether or not the operation was successful.
		// 
		// sfink: This has an additional param(Vehicle vehicle, float p1) which is always set to 5.0f in the b944 scripts.
		public static bool SET_VEHICLE_ON_GROUND_PROPERLY(Vehicle vehicle, float p1) { return Invoke<bool>(0x49733E92263139D1, V(vehicle), V(p1)); }
		public static bool SET_VEHICLE_USE_CUTSCENE_WHEEL_COMPRESSION(Vehicle p0, bool p1, bool p2, bool p3) { return Invoke<bool>(0xE023E8AC4EF7C117, V(p0), V(p1), V(p2), V(p3)); }
		public static bool IS_VEHICLE_STUCK_ON_ROOF(Vehicle vehicle) { return Invoke<bool>(0xB497F06B288DCFDF, V(vehicle)); }
		public static void ADD_VEHICLE_UPSIDEDOWN_CHECK(Vehicle vehicle) { Invoke(0xB72E26D81006005B, V(vehicle)); }
		public static void REMOVE_VEHICLE_UPSIDEDOWN_CHECK(Vehicle vehicle) { Invoke(0xC53EB42A499A7E90, V(vehicle)); }
		// Returns true if the vehicle's current speed is less than, or equal to 0.0025f.
		// 
		// For some vehicles it returns true if the current speed is <= 0.00039999999.
		public static bool IS_VEHICLE_STOPPED(Vehicle vehicle) { return Invoke<bool>(0x5721B434AD84D57A, V(vehicle)); }
		// Gets the number of passengers.
		// 
		// This native was modified in b2545 to take two additional parameters, allowing you to include the driver or exclude dead passengers.
		// 
		// To keep it working like before b2545, set includeDriver to false and includeDeadOccupants to true.
		public static int GET_VEHICLE_NUMBER_OF_PASSENGERS(Vehicle vehicle, bool includeDriver, bool includeDeadOccupants) { return Invoke<int>(0x24CB2137731FFE89, V(vehicle), V(includeDriver), V(includeDeadOccupants)); }
		public static int GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(Vehicle vehicle) { return Invoke<int>(0xA7C4F2C6E744A550, V(vehicle)); }
		// Returns max number of passengers (including the driver) for the specified vehicle model.
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static int GET_VEHICLE_MODEL_NUMBER_OF_SEATS(Hash modelHash) { return Invoke<int>(0x2AD93716F184EDA4, V(modelHash)); }
		public static bool IS_SEAT_WARP_ONLY(Vehicle vehicle, int seatIndex) { return Invoke<bool>(0xF7F203E31F96F6A1, V(vehicle), V(seatIndex)); }
		public static bool IS_TURRET_SEAT(Vehicle vehicle, int seatIndex) { return Invoke<bool>(0xE33FFA906CE74880, V(vehicle), V(seatIndex)); }
		// Returns true if the vehicle has the FLAG_ALLOWS_RAPPEL flag set.
		public static bool DOES_VEHICLE_ALLOW_RAPPEL(Vehicle vehicle) { return Invoke<bool>(0x4E417C547182C84D, V(vehicle)); }
		// Use this native inside a looped function.
		// Values:
		// - `0.0` = no vehicles on streets
		// - `1.0` = normal vehicles on streets
		public static void SET_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) { Invoke(0x245A6883D966D537, V(multiplier)); }
		public static void SET_RANDOM_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) { Invoke(0xB3B3359379FE77D3, V(multiplier)); }
		public static void SET_PARKED_VEHICLE_DENSITY_MULTIPLIER_THIS_FRAME(float multiplier) { Invoke(0xEAE6DCC7EEE3DB1D, V(multiplier)); }
		public static void SET_DISABLE_RANDOM_TRAINS_THIS_FRAME(bool toggle) { Invoke(0xD4B8E3D1917BC86B, V(toggle)); }
		public static void SET_AMBIENT_VEHICLE_RANGE_MULTIPLIER_THIS_FRAME(float value) { Invoke(0x90B6DA738A9A25DA, V(value)); }
		public static void SET_FAR_DRAW_VEHICLES(bool toggle) { Invoke(0x26324F33423F3CC3, V(toggle)); }
		public static void SET_NUMBER_OF_PARKED_VEHICLES(int value) { Invoke(0xCAA15F13EBD417FF, V(value)); }
		// enum eVehicleLockState
		// {
		// 	VEHICLELOCK_NONE,
		// 	VEHICLELOCK_UNLOCKED,
		// 	VEHICLELOCK_LOCKED,
		// 	VEHICLELOCK_LOCKOUT_PLAYER_ONLY,
		// 	VEHICLELOCK_LOCKED_PLAYER_INSIDE,
		// 	VEHICLELOCK_LOCKED_INITIALLY,
		// 	VEHICLELOCK_FORCE_SHUT_DOORS,
		// 	VEHICLELOCK_LOCKED_BUT_CAN_BE_DAMAGED,
		// 	VEHICLELOCK_LOCKED_BUT_BOOT_UNLOCKED,
		// 	VEHICLELOCK_LOCKED_NO_PASSENGERS,
		// 	VEHICLELOCK_CANNOT_ENTER	
		// };
		public static void SET_VEHICLE_DOORS_LOCKED(Vehicle vehicle, int doorLockStatus) { Invoke(0xB664292EAECF7FA6, V(vehicle), V(doorLockStatus)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static void SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED(Vehicle vehicle, int doorId, int doorLockStatus) { Invoke(0xBE70724027F85BCD, V(vehicle), V(doorId), V(doorLockStatus)); }
		// If set to true, prevents vehicle sirens from having sound, leaving only the lights.
		public static void SET_VEHICLE_HAS_MUTED_SIRENS(Vehicle vehicle, bool toggle) { Invoke(0xD8050E0EB60CF274, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player, bool toggle) { Invoke(0x517AAF684BB50CD1, V(vehicle), V(player), V(toggle)); }
		public static bool GET_VEHICLE_DOORS_LOCKED_FOR_PLAYER(Vehicle vehicle, Player player) { return Invoke<bool>(0xF6AF6CB341349015, V(vehicle), V(player)); }
		// After some analysis, I've decided that these are what the parameters are.
		// 
		// We can see this being used in R* scripts such as "am_mp_property_int.ysc.c4":
		// l_11A1 = PED::GET_VEHICLE_PED_IS_IN(PLAYER::PLAYER_PED_ID(), 1);
		// ...
		// VEHICLE::SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(l_11A1, 1);
		public static void SET_VEHICLE_DOORS_LOCKED_FOR_ALL_PLAYERS(Vehicle vehicle, bool toggle) { Invoke(0xA2F80B8D040727CC, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_DOORS_LOCKED_FOR_NON_SCRIPT_PLAYERS(Vehicle vehicle, bool toggle) { Invoke(0x9737A37136F07E75, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_DOORS_LOCKED_FOR_TEAM(Vehicle vehicle, int team, bool toggle) { Invoke(0xB81F6D4A8F5EEBA8, V(vehicle), V(team), V(toggle)); }
		public static void SET_VEHICLE_DOORS_LOCKED_FOR_ALL_TEAMS(Vehicle vehicle, bool toggle) { Invoke(0x203B527D1B77904C, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_DONT_TERMINATE_TASK_WHEN_ACHIEVED(Vehicle vehicle) { Invoke(0x76D26A22750E849E, V(vehicle)); }
		// 0.0f = engine rev minimum
		// 1.0f = engine rev limit
		public static void _SET_VEHICLE_MAX_LAUNCH_ENGINE_REVS(Vehicle vehicle, float modifier) { Invoke(0x5AE614ECA5FDD423, V(vehicle), V(modifier)); }
		public static float _GET_VEHICLE_THROTTLE(Vehicle vehicle) { return Invoke<float>(0x92D96892FC06AF22, V(vehicle)); }
		// Explodes a selected vehicle.
		// 
		// Vehicle vehicle = Vehicle you want to explode.
		// bool isAudible = If explosion makes a sound.
		// bool isInvisible = If the explosion is invisible or not.
		// 
		// First bool does not give any visual explosion, the vehicle just falls apart completely but slowly and starts to burn.
		public static void EXPLODE_VEHICLE(Vehicle vehicle, bool isAudible, bool isInvisible) { Invoke(0xBA71116ADF5B514C, V(vehicle), V(isAudible), V(isInvisible)); }
		// Tested on the player's current vehicle. Unless you kill the driver, the vehicle doesn't loose control, however, if enabled, explodeOnImpact is still active. The moment you crash, boom.
		public static void SET_VEHICLE_OUT_OF_CONTROL(Vehicle vehicle, bool killDriver, bool explodeOnImpact) { Invoke(0xF19D095E42D430CC, V(vehicle), V(killDriver), V(explodeOnImpact)); }
		public static void SET_VEHICLE_TIMED_EXPLOSION(Vehicle vehicle, Ped ped, bool toggle) { Invoke(0x2E0A74E1002380B1, V(vehicle), V(ped), V(toggle)); }
		public static void ADD_VEHICLE_PHONE_EXPLOSIVE_DEVICE(Vehicle vehicle) { Invoke(0x99AD4CCCB128CBC9, V(vehicle)); }
		public static void CLEAR_VEHICLE_PHONE_EXPLOSIVE_DEVICE() { Invoke(0xAA3F739ABDDCF21F); }
		public static bool HAS_VEHICLE_PHONE_EXPLOSIVE_DEVICE() { return Invoke<bool>(0x6ADAABD3068C5235); }
		public static void DETONATE_VEHICLE_PHONE_EXPLOSIVE_DEVICE() { Invoke(0xEF49CF0270307CBE); }
		public static bool HAVE_VEHICLE_REAR_DOORS_BEEN_BLOWN_OPEN_BY_STICKYBOMB(Vehicle vehicle) { return Invoke<bool>(0x6B407F2525E93644, V(vehicle)); }
		// This is not tested - it's just an assumption.
		// - Nac
		// 
		// Doesn't seem to work.  I'll try with an int instead. --JT
		// 
		// Read the scripts, im dumpass. 
		// 
		//                             if (!VEHICLE::IS_TAXI_LIGHT_ON(l_115)) {
		//                                 VEHICLE::SET_TAXI_LIGHTS(l_115, 1);
		//                             }
		public static void SET_TAXI_LIGHTS(Vehicle vehicle, bool state) { Invoke(0x598803E85E8448D9, V(vehicle), V(state)); }
		public static bool IS_TAXI_LIGHT_ON(Vehicle vehicle) { return Invoke<bool>(0x7504C0F113AB50FC, V(vehicle)); }
		// garageName example "Michael - Beverly Hills"
		// 
		// Full list of garages by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/garages.json
		public static bool IS_VEHICLE_IN_GARAGE_AREA(string garageName, Vehicle vehicle) { return Invoke<bool>(0xCEE4490CD57BB3C2, V(garageName), V(vehicle)); }
		// colorPrimary & colorSecondary are the paint index for the vehicle.
		// For a list of valid paint indexes, view: https://pastebin.com/pwHci0xK
		// -------------------------------------------------------------------------
		// Note: minimum color index is 0, maximum color index is (numColorIndices - 1)
		// 
		// Full list of vehicle colors by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
		public static void SET_VEHICLE_COLOURS(Vehicle vehicle, int colorPrimary, int colorSecondary) { Invoke(0x4F1D4BE3A7F24601, V(vehicle), V(colorPrimary), V(colorSecondary)); }
		// It switch to highbeam when p1 is set to true.
		public static void SET_VEHICLE_FULLBEAM(Vehicle vehicle, bool toggle) { Invoke(0x8B7FD87F0DDB421E, V(vehicle), V(toggle)); }
		// p1 (toggle) was always 1 (true) except in one case in the b678 scripts.
		public static void SET_VEHICLE_IS_RACING(Vehicle vehicle, bool toggle) { Invoke(0x07116E24E9D1929D, V(vehicle), V(toggle)); }
		// p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
		public static void SET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle, int r, int g, int b) { Invoke(0x7141766F91D15BEA, V(vehicle), V(r), V(g), V(b)); }
		public static void GET_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle, int* r, int* g, int* b) { Invoke(0xB64CF2CCA9D95F52, V(vehicle), V(r), V(g), V(b)); }
		public static void CLEAR_VEHICLE_CUSTOM_PRIMARY_COLOUR(Vehicle vehicle) { Invoke(0x55E1D2758F34E437, V(vehicle)); }
		public static bool GET_IS_VEHICLE_PRIMARY_COLOUR_CUSTOM(Vehicle vehicle) { return Invoke<bool>(0xF095C0405307B21B, V(vehicle)); }
		// p1, p2, p3 are RGB values for color (255,0,0 for Red, ect)
		public static void SET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle, int r, int g, int b) { Invoke(0x36CED73BFED89754, V(vehicle), V(r), V(g), V(b)); }
		public static void GET_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle, int* r, int* g, int* b) { Invoke(0x8389CD56CA8072DC, V(vehicle), V(r), V(g), V(b)); }
		public static void CLEAR_VEHICLE_CUSTOM_SECONDARY_COLOUR(Vehicle vehicle) { Invoke(0x5FFBDEEC3E8E2009, V(vehicle)); }
		// Check if Vehicle Secondary is avaliable for customize
		public static bool GET_IS_VEHICLE_SECONDARY_COLOUR_CUSTOM(Vehicle vehicle) { return Invoke<bool>(0x910A32E7AAD2656C, V(vehicle)); }
		// The parameter fade is a value from 0-1, where 0 is fresh paint.
		public static void SET_VEHICLE_ENVEFF_SCALE(Vehicle vehicle, float fade) { Invoke(0x3AFDC536C3D01674, V(vehicle), V(fade)); }
		// The result is a value from 0-1, where 0 is fresh paint.
		public static float GET_VEHICLE_ENVEFF_SCALE(Vehicle vehicle) { return Invoke<float>(0xA82819CAC9C4C403, V(vehicle)); }
		// Hardcoded to not work in multiplayer.
		public static void SET_CAN_RESPRAY_VEHICLE(Vehicle vehicle, bool state) { Invoke(0x52BBA29D5EC69356, V(vehicle), V(state)); }
		// Used for GTAO CEO/Associate spawned vehicles.
		public static void SET_GOON_BOSS_VEHICLE(Vehicle vehicle, bool toggle) { Invoke(0xAB31EF4DE6800CE9, V(vehicle), V(toggle)); }
		public static void SET_OPEN_REAR_DOORS_ON_EXPLOSION(Vehicle vehicle, bool toggle) { Invoke(0x1B212B26DD3C04DF, V(vehicle), V(toggle)); }
		public static void FORCE_SUBMARINE_SURFACE_MODE(Vehicle vehicle, bool toggle) { Invoke(0x33506883545AC0DF, V(vehicle), V(toggle)); }
		public static void FORCE_SUBMARINE_NEURTAL_BUOYANCY(Any p0, Any p1) { Invoke(0xC67DB108A9ADE3BE, V(p0), V(p1)); }
		public static void SET_SUBMARINE_CRUSH_DEPTHS(Vehicle vehicle, bool p1, float depth1, float depth2, float depth3) { Invoke(0xC59872A5134879C7, V(vehicle), V(p1), V(depth1), V(depth2), V(depth3)); }
		public static bool GET_SUBMARINE_IS_UNDER_DESIGN_DEPTH(Vehicle submarine) { return Invoke<bool>(0x3E71D0B300B7AA79, V(submarine)); }
		public static int GET_SUBMARINE_NUMBER_OF_AIR_LEAKS(Vehicle submarine) { return Invoke<int>(0x093D6DDCA5B8FBAE, V(submarine)); }
		public static void SET_BOAT_IGNORE_LAND_PROBES(Any p0, Any p1) { Invoke(0xED5EDE9E676643C9, V(p0), V(p1)); }
		// Use the vehicle bounds (instead of viewport) when deciding if a vehicle is sufficiently above the water (waterheight.dat), bypassing wave simulation checks
		public static void _SET_BOUNDS_AFFECT_WATER_PROBES(Vehicle vehicle, bool toggle) { Invoke(0x85FC953F6C6CBDE1, V(vehicle), V(toggle)); }
		public static void SET_BOAT_ANCHOR(Vehicle vehicle, bool toggle) { Invoke(0x75DBEC174AEEAD10, V(vehicle), V(toggle)); }
		public static bool CAN_ANCHOR_BOAT_HERE(Vehicle vehicle) { return Invoke<bool>(0x26C10ECBDA5D043B, V(vehicle)); }
		public static bool CAN_ANCHOR_BOAT_HERE_IGNORE_PLAYERS(Vehicle vehicle) { return Invoke<bool>(0x24F4121D07579880, V(vehicle)); }
		public static void SET_BOAT_REMAINS_ANCHORED_WHILE_PLAYER_IS_DRIVER(Vehicle vehicle, bool toggle) { Invoke(0xE3EBAAE484798530, V(vehicle), V(toggle)); }
		// No observed effect.
		public static void SET_FORCE_LOW_LOD_ANCHOR_MODE(Vehicle vehicle, bool p1) { Invoke(0xB28B1FE5BFADD7F5, V(vehicle), V(p1)); }
		public static void SET_BOAT_LOW_LOD_ANCHOR_DISTANCE(Vehicle vehicle, float value) { Invoke(0xE842A9398079BD82, V(vehicle), V(value)); }
		public static bool IS_BOAT_ANCHORED(Vehicle vehicle) { return Invoke<bool>(0xB0AD1238A709B1A2, V(vehicle)); }
		public static void SET_BOAT_SINKS_WHEN_WRECKED(Vehicle vehicle, bool toggle) { Invoke(0x8F719973E1445BA2, V(vehicle), V(toggle)); }
		public static void SET_BOAT_WRECKED(Vehicle vehicle) { Invoke(0xBD32E46AA95C1DD2, V(vehicle)); }
		// Activate siren on vehicle (Only works if the vehicle has a siren).
		public static void SET_VEHICLE_SIREN(Vehicle vehicle, bool toggle) { Invoke(0xF4924635A19EB37D, V(vehicle), V(toggle)); }
		public static bool IS_VEHICLE_SIREN_ON(Vehicle vehicle) { return Invoke<bool>(0x4C9BF537BE2634B2, V(vehicle)); }
		public static bool IS_VEHICLE_SIREN_AUDIO_ON(Vehicle vehicle) { return Invoke<bool>(0xB5CC40FBCB586380, V(vehicle)); }
		// If set to true, vehicle will not take crash damage, but is still susceptible to damage from bullets and explosives
		public static void SET_VEHICLE_STRONG(Vehicle vehicle, bool toggle) { Invoke(0x3E8C8727991A8A0B, V(vehicle), V(toggle)); }
		public static void REMOVE_VEHICLE_STUCK_CHECK(Vehicle vehicle) { Invoke(0x8386BFB614D06749, V(vehicle)); }
		public static void GET_VEHICLE_COLOURS(Vehicle vehicle, int* colorPrimary, int* colorSecondary) { Invoke(0xA19435F193E081AC, V(vehicle), V(colorPrimary), V(colorSecondary)); }
		// Check if a vehicle seat is free.
		// 
		// seatIndex  = -1 being the driver seat.
		// Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
		// isTaskRunning = on true the function returns already false while a task on the target seat is running (TASK_ENTER_VEHICLE/TASK_SHUFFLE_TO_NEXT_VEHICLE_SEAT) - on false only when a ped is finally sitting in the seat.
		public static bool IS_VEHICLE_SEAT_FREE(Vehicle vehicle, int seatIndex, bool isTaskRunning) { return Invoke<bool>(0x22AC59A870E6A669, V(vehicle), V(seatIndex), V(isTaskRunning)); }
		// If there is no ped in the seat, and the game considers the vehicle as ambient population, this will create a random occupant ped in the seat, which may be cleaned up by the game fairly soon if not marked as script-owned mission entity.
		// 
		// Seat indexes:
		// -1 = Driver
		// 0 = Front Right Passenger
		// 1 = Back Left Passenger
		// 2 = Back Right Passenger
		// 3 = Further Back Left Passenger (vehicles > 4 seats)
		// 4 = Further Back Right Passenger (vehicles > 4 seats)
		// etc.
		// 
		// If p2 is true it uses a different GetOccupant function.
		public static Ped GET_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int seatIndex, bool p2) { return Invoke<Ped>(0xBB40DD2270B65366, V(vehicle), V(seatIndex), V(p2)); }
		public static Ped GET_LAST_PED_IN_VEHICLE_SEAT(Vehicle vehicle, int seatIndex) { return Invoke<Ped>(0x83F969AA1EE2A664, V(vehicle), V(seatIndex)); }
		public static bool GET_VEHICLE_LIGHTS_STATE(Vehicle vehicle, bool* lightsOn, bool* highbeamsOn) { return Invoke<bool>(0xB91B4C20085BD12F, V(vehicle), V(lightsOn), V(highbeamsOn)); }
		// wheelID used for 4 wheelers seem to be (0, 1, 4, 5)
		// completely - is to check if tire completely gone from rim.
		// 
		// '0 = wheel_lf / bike, plane or jet front
		// '1 = wheel_rf
		// '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
		// '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
		// '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
		// '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
		// '45 = 6 wheels trailer mid wheel left
		// '47 = 6 wheels trailer mid wheel right
		public static bool IS_VEHICLE_TYRE_BURST(Vehicle vehicle, int wheelID, bool completely) { return Invoke<bool>(0xBA291848A0815CA9, V(vehicle), V(wheelID), V(completely)); }
		// SCALE: Setting the speed to 30 would result in a speed of roughly 60mph, according to speedometer.
		// 
		// Speed is in meters per second
		// You can convert meters/s to mph here:
		// http://www.calculateme.com/Speed/MetersperSecond/ToMilesperHour.htm
		public static void SET_VEHICLE_FORWARD_SPEED(Vehicle vehicle, float speed) { Invoke(0xAB54A438726D25D5, V(vehicle), V(speed)); }
		// Seems to be identical to SET_VEHICLE_FORWARD_SPEED
		public static void SET_VEHICLE_FORWARD_SPEED_XY(Vehicle vehicle, float speed) { Invoke(0x6501129C9E0FFA05, V(vehicle), V(speed)); }
		// This native makes the vehicle stop immediately, as happens when we enter a MP garage.
		// 
		// . distance defines how far it will travel until stopping. Garage doors use 3.0.
		// 
		// . If killEngine is set to 1, you cannot resume driving the vehicle once it stops. This looks like is a bitmapped integer.
		public static void BRING_VEHICLE_TO_HALT(Vehicle vehicle, float distance, int duration, bool p3) { Invoke(0x260BE8F09E326A20, V(vehicle), V(distance), V(duration), V(p3)); }
		public static void SET_VEHICLE_STEER_FOR_BUILDINGS(Vehicle vehicle, Any p1) { Invoke(0xDCE97BDF8A0EABC8, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_CAUSES_SWERVING(Vehicle vehicle, bool toggle) { Invoke(0x9849DE24FCF23CCC, V(vehicle), V(toggle)); }
		public static void SET_IGNORE_PLANES_SMALL_PITCH_CHANGE(Any p0, Any p1) { Invoke(0x8664170EF165C4A6, V(p0), V(p1)); }
		// Stops CTaskBringVehicleToHalt
		public static void STOP_BRINGING_VEHICLE_TO_HALT(Vehicle vehicle) { Invoke(0x7C06330BFDDA182E, V(vehicle)); }
		// Returns true if vehicle is halted by BRING_VEHICLE_TO_HALT
		public static bool IS_VEHICLE_BEING_BROUGHT_TO_HALT(Vehicle vehicle) { return Invoke<bool>(0xC69BB1D832A710EF, V(vehicle)); }
		public static void LOWER_FORKLIFT_FORKS(Vehicle forklift) { Invoke(0x923A293361DF44E5, V(forklift)); }
		// 0.0 = Lowest 1.0 = Highest. This is best to be used if you wanna pick-up a car since un-realistically on GTA V forklifts can't pick up much of anything due to vehicle mass. If you put this under a car then set it above 0.0 to a 'lifted-value' it will raise the car with no issue lol
		public static void SET_FORKLIFT_FORK_HEIGHT(Vehicle vehicle, float height) { Invoke(0x37EBBF3117BD6A25, V(vehicle), V(height)); }
		public static bool IS_ENTITY_ATTACHED_TO_HANDLER_FRAME(Vehicle vehicle, Entity entity) { return Invoke<bool>(0x57715966069157AD, V(vehicle), V(entity)); }
		public static bool IS_ANY_ENTITY_ATTACHED_TO_HANDLER_FRAME(Vehicle vehicle) { return Invoke<bool>(0x62CA17B74C435651, V(vehicle)); }
		// Finds the vehicle that is carrying this entity with a handler frame.
		// The model of the entity must be prop_contr_03b_ld or the function will return 0.
		public static Vehicle FIND_HANDLER_VEHICLE_CONTAINER_IS_ATTACHED_TO(Entity entity) { return Invoke<Vehicle>(0x375E7FC44F21C8AB, V(entity)); }
		public static bool IS_HANDLER_FRAME_LINED_UP_WITH_CONTAINER(Vehicle vehicle, Entity entity) { return Invoke<bool>(0x89D630CF5EA96D23, V(vehicle), V(entity)); }
		public static void ATTACH_CONTAINER_TO_HANDLER_FRAME_WHEN_LINED_UP(Vehicle vehicle, Entity entity) { Invoke(0x6A98C2ECF57FA5D4, V(vehicle), V(entity)); }
		public static void DETACH_CONTAINER_FROM_HANDLER_FRAME(Vehicle vehicle) { Invoke(0x7C0043FDFF6436BC, V(vehicle)); }
		public static void SET_VEHICLE_DISABLE_HEIGHT_MAP_AVOIDANCE(Vehicle vehicle, bool p1) { Invoke(0x8AA9180DE2FEDD45, V(vehicle), V(p1)); }
		public static void _SET_PLANE_AVOIDS_OTHERS(Vehicle vehicle, bool toggle) { Invoke(0xBAFB99B304BC52A7, V(vehicle), V(toggle)); }
		public static void SET_BOAT_DISABLE_AVOIDANCE(Vehicle vehicle, bool p1) { Invoke(0x0A6A279F3AA4FD70, V(vehicle), V(p1)); }
		public static bool IS_HELI_LANDING_AREA_BLOCKED(Vehicle vehicle) { return Invoke<bool>(0x634148744F385576, V(vehicle)); }
		// Used on helicopters and blimps during the CTaskVehicleLand task. Sets a value on the task to 10f
		public static void SET_SHORT_SLOWDOWN_FOR_LANDING(Vehicle vehicle) { Invoke(0x107A473D7A6647A9, V(vehicle)); }
		public static void SET_HELI_TURBULENCE_SCALAR(Vehicle vehicle, float p1) { Invoke(0xE6F13851780394DA, V(vehicle), V(p1)); }
		// Initially used in Max Payne 3, that's why we know the name.
		public static void SET_CAR_BOOT_OPEN(Vehicle vehicle) { Invoke(0xFC40CBF7B90CA77C, V(vehicle)); }
		// "To burst tyres VEHICLE::SET_VEHICLE_TYRE_BURST(vehicle, 0, true, 1000.0)
		// to burst all tyres type it 8 times where p1 = 0 to 7.
		// 
		// p3 seems to be how much damage it has taken. 0 doesn't deflate them, 1000 completely deflates them.
		// 
		// '0 = wheel_lf / bike, plane or jet front
		// '1 = wheel_rf
		// '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
		// '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
		// '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
		// '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
		// '45 = 6 wheels trailer mid wheel left
		// '47 = 6 wheels trailer mid wheel right
		public static void SET_VEHICLE_TYRE_BURST(Vehicle vehicle, int index, bool onRim, float p3) { Invoke(0xEC6A202EE4960385, V(vehicle), V(index), V(onRim), V(p3)); }
		// Closes all doors of a vehicle:
		public static void SET_VEHICLE_DOORS_SHUT(Vehicle vehicle, bool closeInstantly) { Invoke(0x781B3D62BB013EF5, V(vehicle), V(closeInstantly)); }
		// Allows you to toggle bulletproof tires.
		public static void SET_VEHICLE_TYRES_CAN_BURST(Vehicle vehicle, bool toggle) { Invoke(0xEB9DC3C7D8596C46, V(vehicle), V(toggle)); }
		public static bool GET_VEHICLE_TYRES_CAN_BURST(Vehicle vehicle) { return Invoke<bool>(0x678B9BB8C3F58FEB, V(vehicle)); }
		public static void SET_VEHICLE_WHEELS_CAN_BREAK(Vehicle vehicle, bool enabled) { Invoke(0x29B18B4FD460CA8F, V(vehicle), V(enabled)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static void SET_VEHICLE_DOOR_OPEN(Vehicle vehicle, int doorId, bool loose, bool openInstantly) { Invoke(0x7C65DAC73C35C862, V(vehicle), V(doorId), V(loose), V(openInstantly)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		// 
		// Usually used alongside other vehicle door natives.
		public static void SET_VEHICLE_DOOR_AUTO_LOCK(Vehicle vehicle, int doorId, bool toggle) { Invoke(0x3B458DDB57038F08, V(vehicle), V(doorId), V(toggle)); }
		public static void SET_FLEEING_VEHICLES_USE_SWITCHED_OFF_NODES(Any p0) { Invoke(0xA247F9EF01D8082E, V(p0)); }
		// windowIndex:
		// 0 = Front Right Window
		// 1 = Front Left Window
		// 2 = Back Right Window
		// 3 = Back Left Window
		// 4 = Unknown
		// 5 = Unknown
		// 6 = Windscreen
		// 7 = Rear Windscreen
		public static void REMOVE_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex) { Invoke(0xA711568EEDB43069, V(vehicle), V(windowIndex)); }
		// Roll down all the windows of the vehicle passed through the first parameter.
		public static void ROLL_DOWN_WINDOWS(Vehicle vehicle) { Invoke(0x85796B0549DDE156, V(vehicle)); }
		// windowIndex:
		// 0 = Front Left Window
		// 1 = Front Right Window
		// 2 = Rear Left Window
		// 3 = Rear Right Window
		// 4 = Front Windscreen
		// 5 = Rear Windscreen
		// 6 = Mid Left
		// 7 = Mid Right
		// 8 = Invalid
		public static void ROLL_DOWN_WINDOW(Vehicle vehicle, int windowIndex) { Invoke(0x7AD9E6CE657D69E3, V(vehicle), V(windowIndex)); }
		// windowIndex:
		// 0 = Front Left Window
		// 1 = Front Right Window
		// 2 = Rear Left Window
		// 3 = Rear Right Window
		// 4 = Front Windscreen
		// 5 = Rear Windscreen
		// 6 = Mid Left
		// 7 = Mid Right
		// 8 = Invalid
		public static void ROLL_UP_WINDOW(Vehicle vehicle, int windowIndex) { Invoke(0x602E548F46E24D59, V(vehicle), V(windowIndex)); }
		// windowIndex:
		// 0 = Front Left Window
		// 1 = Front Right Window
		// 2 = Rear Left Window
		// 3 = Rear Right Window
		// 4 = Front Windscreen
		// 5 = Rear Windscreen
		// 6 = Mid Left
		// 7 = Mid Right
		// 8 = Invalid
		public static void SMASH_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex) { Invoke(0x9E5B5E4D2CCD2259, V(vehicle), V(windowIndex)); }
		// windowIndex:
		// 0 = Front Left Window
		// 1 = Front Right Window
		// 2 = Rear Left Window
		// 3 = Rear Right Window
		// 4 = Front Windscreen
		// 5 = Rear Windscreen
		// 6 = Mid Left
		// 7 = Mid Right
		// 8 = Invalid
		// 
		// Additional information: FIX_VEHICLE_WINDOW (0x140D0BB88) references an array of bone vehicle indices (0x141D4B3E0) { 2Ah, 2Bh, 2Ch, 2Dh, 2Eh, 2Fh, 28h, 29h } that correspond to: window_lf, window_rf, window_lr, window_rr, window_lm, window_rm, windscreen, windscreen_r. This array is used by most vehwindow natives.
		// 
		// Also, this function is coded to not work on vehicles of type: CBike, Bmx, CBoat, CTrain, and CSubmarine.
		public static void FIX_VEHICLE_WINDOW(Vehicle vehicle, int windowIndex) { Invoke(0x772282EBEB95E682, V(vehicle), V(windowIndex)); }
		// Detaches the vehicle's windscreen.
		// For further information, see : gtaforums.com/topic/859570-glass/#entry1068894566
		public static void POP_OUT_VEHICLE_WINDSCREEN(Vehicle vehicle) { Invoke(0x6D645D59FB5F5AD3, V(vehicle)); }
		// Pops off the "roof" bone in the direction of the specified offset from the vehicle.
		public static void POP_OFF_VEHICLE_ROOF_WITH_IMPULSE(Vehicle vehicle, float x, float y, float z) { Invoke(0xE38CB9D7D39FDBCC, V(vehicle), V(x), V(y), V(z)); }
		// set's if the vehicle has lights or not.
		// not an on off toggle.
		// p1 = 0 ;vehicle normal lights, off then lowbeams, then highbeams
		// p1 = 1 ;vehicle doesn't have lights, always off
		// p1 = 2 ;vehicle has always on lights
		// p1 = 3 ;or even larger like 4,5,... normal lights like =1
		// note1: when using =2 on day it's lowbeam,highbeam
		// but at night it's lowbeam,lowbeam,highbeam
		// note2: when using =0 it's affected by day or night for highbeams don't exist in daytime.
		public static void SET_VEHICLE_LIGHTS(Vehicle vehicle, int state) { Invoke(0x34E710FF01247C5A, V(vehicle), V(state)); }
		public static void SET_VEHICLE_USE_PLAYER_LIGHT_SETTINGS(Vehicle vehicle, bool toggle) { Invoke(0xC45C27EF50F36ADC, V(vehicle), V(toggle)); }
		// p1 can be either 0, 1 or 2.
		// 
		// Determines how vehicle lights behave when toggled.
		// 
		// 0 = Default (Lights can be toggled between off, normal and high beams)
		// 1 = Lights Disabled (Lights are fully disabled, cannot be toggled)
		// 2 = Always On (Lights can be toggled between normal and high beams)
		public static void SET_VEHICLE_HEADLIGHT_SHADOWS(Vehicle vehicle, int p1) { Invoke(0x1FD09E7390A74D54, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_ALARM(Vehicle vehicle, bool state) { Invoke(0xCDE5E70C1DDB954C, V(vehicle), V(state)); }
		public static void START_VEHICLE_ALARM(Vehicle vehicle) { Invoke(0xB8FF7AB45305C345, V(vehicle)); }
		public static bool IS_VEHICLE_ALARM_ACTIVATED(Vehicle vehicle) { return Invoke<bool>(0x4319E335B71FFF34, V(vehicle)); }
		public static void SET_VEHICLE_INTERIORLIGHT(Vehicle vehicle, bool toggle) { Invoke(0xBC2042F090AF6AD3, V(vehicle), V(toggle)); }
		// Sets some bit of vehicle
		public static void SET_VEHICLE_FORCE_INTERIORLIGHT(Vehicle vehicle, bool toggle) { Invoke(0x8821196D91FA2DE5, V(vehicle), V(toggle)); }
		// multiplier = brightness of head lights.
		// this value isn't capped afaik.
		// 
		// multiplier = 0.0 no lights
		// multiplier = 1.0 default game value
		// 
		public static void SET_VEHICLE_LIGHT_MULTIPLIER(Vehicle vehicle, float multiplier) { Invoke(0xB385454F8791F57C, V(vehicle), V(multiplier)); }
		public static void ATTACH_VEHICLE_TO_TRAILER(Vehicle vehicle, Vehicle trailer, float radius) { Invoke(0x3C7D42D58F770B54, V(vehicle), V(trailer), V(radius)); }
		// This is the proper way of attaching vehicles to the car carrier, it's what Rockstar uses. Video Demo: https://www.youtube.com/watch?v=2lVEIzf7bgo
		public static void ATTACH_VEHICLE_ON_TO_TRAILER(Vehicle vehicle, Vehicle trailer, float offsetX, float offsetY, float offsetZ, float coordsX, float coordsY, float coordsZ, float rotationX, float rotationY, float rotationZ, float disableCollisions) { Invoke(0x16B5E274BDE402F8, V(vehicle), V(trailer), V(offsetX), V(offsetY), V(offsetZ), V(coordsX), V(coordsY), V(coordsZ), V(rotationX), V(rotationY), V(rotationZ), V(disableCollisions)); }
		public static void STABILISE_ENTITY_ATTACHED_TO_HELI(Vehicle vehicle, Entity entity, float p2) { Invoke(0x374706271354CB18, V(vehicle), V(entity), V(p2)); }
		public static void DETACH_VEHICLE_FROM_TRAILER(Vehicle vehicle) { Invoke(0x90532EDF0D2BDD86, V(vehicle)); }
		public static bool IS_VEHICLE_ATTACHED_TO_TRAILER(Vehicle vehicle) { return Invoke<bool>(0xE7CF3C4F9F489F0C, V(vehicle)); }
		public static void SET_TRAILER_INVERSE_MASS_SCALE(Vehicle vehicle, float p1) { Invoke(0x2A8F319B392E7B3F, V(vehicle), V(p1)); }
		// in the decompiled scripts, seems to be always called on the vehicle right after being attached to a trailer.
		public static void SET_TRAILER_LEGS_RAISED(Vehicle vehicle) { Invoke(0x95CF53B3D687F9FA, V(vehicle)); }
		public static void SET_TRAILER_LEGS_LOWERED(Vehicle vehicle) { Invoke(0x878C75C09FBDB942, V(vehicle)); }
		// tyreIndex = 0 to 4 on normal vehicles
		// 
		// '0 = wheel_lf / bike, plane or jet front
		// '1 = wheel_rf
		// '2 = wheel_lm / in 6 wheels trailer, plane or jet is first one on left
		// '3 = wheel_rm / in 6 wheels trailer, plane or jet is first one on right
		// '4 = wheel_lr / bike rear / in 6 wheels trailer, plane or jet is last one on left
		// '5 = wheel_rr / in 6 wheels trailer, plane or jet is last one on right
		// '45 = 6 wheels trailer mid wheel left
		// '47 = 6 wheels trailer mid wheel right
		public static void SET_VEHICLE_TYRE_FIXED(Vehicle vehicle, int tyreIndex) { Invoke(0x6E13FC662B882D1D, V(vehicle), V(tyreIndex)); }
		// Sets a vehicle's license plate text.  8 chars maximum.
		// 
		// Example:
		// Ped playerPed = PLAYER::PLAYER_PED_ID();
		// Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
		// char *plateText = "KING";
		// VEHICLE::SET_VEHICLE_NUMBER_PLATE_TEXT(veh, plateText);
		public static void SET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle vehicle, string plateText) { Invoke(0x95A88F0B409CDA47, V(vehicle), V(plateText)); }
		// Returns the license plate text from a vehicle. 8 chars maximum.
		public static byte* GET_VEHICLE_NUMBER_PLATE_TEXT(Vehicle vehicle) { return PInvoke<byte>(0x7CE1CCB9B293020E, V(vehicle)); }
		// Returns the number of *types* of licence plates, enumerated below in SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX.
		public static int GET_NUMBER_OF_VEHICLE_NUMBER_PLATES() { return Invoke<int>(0x4C4D6B2644F458CB); }
		// Plates:
		// Blue/White - 0
		// Yellow/black - 1
		// Yellow/Blue - 2
		// Blue/White2 - 3
		// Blue/White3 - 4
		// Yankton - 5
		public static void SET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle vehicle, int plateIndex) { Invoke(0x9088EB5A43FFB0A1, V(vehicle), V(plateIndex)); }
		// Returns the PlateType of a vehicle
		//       Blue_on_White_1 = 3,
		//       Blue_on_White_2 = 0,
		//       Blue_on_White_3 = 4,
		//       Yellow_on_Blue = 2,
		//        Yellow_on_Black = 1,
		//       North_Yankton = 5,
		public static int GET_VEHICLE_NUMBER_PLATE_TEXT_INDEX(Vehicle vehicle) { return Invoke<int>(0xF11BC2DD9A3E7195, V(vehicle)); }
		public static void SET_RANDOM_TRAINS(bool toggle) { Invoke(0x80D9F74197EA47D9, V(toggle)); }
		// Train models HAVE TO be loaded (requested) before you use this.
		// For variation 15 - request:
		// 
		// freight
		// freightcar
		// freightgrain
		// freightcont1
		// freightcont2
		// freighttrailer
		// 
		// 
		public static Vehicle CREATE_MISSION_TRAIN(int variation, float x, float y, float z, bool direction, Any p5, Any p6) { return Invoke<Vehicle>(0x63C6CCA8E68AE8C8, V(variation), V(x), V(y), V(z), V(direction), V(p5), V(p6)); }
		// Toggles whether ambient trains can spawn on the specified track or not
		// 
		// `trackId` is the internal id of the train track to switch.
		// `state` is whether ambient trains can spawn or not
		// 
		// trackIds
		// 0 (`trains1.dat`) Main track around SA
		// 1 (`trains2.dat`) Davis Quartz Quarry branch
		// 2 (`trains3.dat`) Second track alongside live track along Roy Lewenstein Blv.
		// 3 (`trains4.dat`) Metro track circuit
		// 4 (`trains5.dat`) Branch in Mirror Park Railyard
		// 5 (`trains6.dat`) Branch in Mirror Park Railyard
		// 6 (`trains7.dat`) LS branch to Mirror Park Railyard
		// 7 (`trains8.dat`) Overground part of metro track along Forum Dr.
		// 8 (`trains9.dat`) Branch to Mirror Park Railyard
		// 9 (`trains10.dat`) Yankton train
		// 10 (`trains11.dat`) Part of metro track near mission row
		// 11 (`trains12.dat`) Yankton prologue mission train
		// Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
		public static void SWITCH_TRAIN_TRACK(int trackId, bool state) { Invoke(0xFD813BB7DB977F20, V(trackId), V(state)); }
		// Only called once inside main_persitant with the parameters p0 = 0, p1 = 120000
		// 
		// trackIndex: 0 - 26
		// Full list of all train tracks + track nodes by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/traintracks.json
		public static void SET_TRAIN_TRACK_SPAWN_FREQUENCY(int trackIndex, int frequency) { Invoke(0x21973BBF8D17EDFA, V(trackIndex), V(frequency)); }
		public static void ALLOW_TRAIN_TO_BE_REMOVED_BY_POPULATION(Any p0) { Invoke(0x2310A8F9421EBF43, V(p0)); }
		public static void DELETE_ALL_TRAINS() { Invoke(0x736A718577F39C7D); }
		public static void SET_TRAIN_SPEED(Vehicle train, float speed) { Invoke(0xAA0BC91BE0B796E3, V(train), V(speed)); }
		public static void SET_TRAIN_CRUISE_SPEED(Vehicle train, float speed) { Invoke(0x16469284DB8C62B5, V(train), V(speed)); }
		public static void SET_RANDOM_BOATS(bool toggle) { Invoke(0x84436EC293B1415F, V(toggle)); }
		public static void SET_RANDOM_BOATS_MP(bool toggle) { Invoke(0xDA5E12F728DB30CA, V(toggle)); }
		public static void SET_GARBAGE_TRUCKS(bool toggle) { Invoke(0x2AFD795EEAC8D30D, V(toggle)); }
		// Maximum amount of vehicles with vehicle stuck check appears to be 16.
		public static bool DOES_VEHICLE_HAVE_STUCK_VEHICLE_CHECK(Vehicle vehicle) { return Invoke<bool>(0x57E4C39DE5EE8470, V(vehicle)); }
		// See REQUEST_VEHICLE_RECORDING
		public static int GET_VEHICLE_RECORDING_ID(int recording, string script) { return Invoke<int>(0x21543C612379DB3C, V(recording), V(script)); }
		// Request the vehicle recording defined by the lowercase format string "%s%03d.yvr". For example, REQUEST_VEHICLE_RECORDING(1, "FBIs1UBER") corresponds to fbis1uber001.yvr.
		// For all vehicle recording/playback natives, "script" is a common prefix that usually corresponds to the script/mission the recording is used in, "recording" is its int suffix, and "id" (e.g., in native GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID) corresponds to a unique identifier within the recording streaming module.
		// Note that only 24 recordings (hardcoded in multiple places) can ever active at a given time before clobbering begins.
		public static void REQUEST_VEHICLE_RECORDING(int recording, string script) { Invoke(0xAF514CABE74CBF15, V(recording), V(script)); }
		// See REQUEST_VEHICLE_RECORDING
		public static bool HAS_VEHICLE_RECORDING_BEEN_LOADED(int recording, string script) { return Invoke<bool>(0x300D614A4C785FC4, V(recording), V(script)); }
		// See REQUEST_VEHICLE_RECORDING
		public static void REMOVE_VEHICLE_RECORDING(int recording, string script) { Invoke(0xF1160ACCF98A3FC8, V(recording), V(script)); }
		public static Vector3 GET_POSITION_OF_VEHICLE_RECORDING_ID_AT_TIME(int id, float time) { return Invoke<Vector3>(0x92523B76657A517D, V(id), V(time)); }
		// This native does no interpolation between pathpoints. The same position will be returned for all times up to the next pathpoint in the recording.
		// 
		// See REQUEST_VEHICLE_RECORDING
		public static Vector3 GET_POSITION_OF_VEHICLE_RECORDING_AT_TIME(int recording, float time, string script) { return Invoke<Vector3>(0xD242728AA6F0FBA2, V(recording), V(time), V(script)); }
		public static Vector3 GET_ROTATION_OF_VEHICLE_RECORDING_ID_AT_TIME(int id, float time) { return Invoke<Vector3>(0xF0F2103EFAF8CBA7, V(id), V(time)); }
		// This native does no interpolation between pathpoints. The same rotation will be returned for all times up to the next pathpoint in the recording.
		// 
		// See REQUEST_VEHICLE_RECORDING
		public static Vector3 GET_ROTATION_OF_VEHICLE_RECORDING_AT_TIME(int recording, float time, string script) { return Invoke<Vector3>(0x2058206FBE79A8AD, V(recording), V(time), V(script)); }
		public static float GET_TOTAL_DURATION_OF_VEHICLE_RECORDING_ID(int id) { return Invoke<float>(0x102D125411A7B6E6, V(id)); }
		// See REQUEST_VEHICLE_RECORDING
		public static float GET_TOTAL_DURATION_OF_VEHICLE_RECORDING(int recording, string script) { return Invoke<float>(0x0E48D1C262390950, V(recording), V(script)); }
		// Distance traveled in the vehicles current recording.
		public static float GET_POSITION_IN_RECORDING(Vehicle vehicle) { return Invoke<float>(0x2DACD605FC681475, V(vehicle)); }
		// Can be used with GET_TOTAL_DURATION_OF_VEHICLE_RECORDING{_ID} to compute a percentage.
		public static float GET_TIME_POSITION_IN_RECORDING(Vehicle vehicle) { return Invoke<float>(0x5746F3A7AB7FE544, V(vehicle)); }
		// p3 is some flag related to 'trailers' (invokes CVehicle::GetTrailer).
		// 
		// See REQUEST_VEHICLE_RECORDING
		public static void START_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle, int recording, string script, bool p3) { Invoke(0x3F878F92B3A7A071, V(vehicle), V(recording), V(script), V(p3)); }
		// flags requires further research, e.g., 0x4/0x8 are related to the AI driving task and 0x20 is internally set and interacts with dynamic entity components.
		// 
		// time, often zero and capped at 500, is related to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER
		public static void START_PLAYBACK_RECORDED_VEHICLE_WITH_FLAGS(Vehicle vehicle, int recording, string script, int flags, int time, int drivingStyle) { Invoke(0x7D80FD645D4DA346, V(vehicle), V(recording), V(script), V(flags), V(time), V(drivingStyle)); }
		// Often called after START_PLAYBACK_RECORDED_VEHICLE and SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE; similar in use to FORCE_ENTITY_AI_AND_ANIMATION_UPDATE.
		public static void FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE(Vehicle vehicle, bool p1) { Invoke(0x1F2E4E06DEA8992B, V(vehicle), V(p1)); }
		public static void STOP_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle) { Invoke(0x54833611C17ABDEA, V(vehicle)); }
		public static void PAUSE_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle) { Invoke(0x632A689BF42301B1, V(vehicle)); }
		public static void UNPAUSE_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle) { Invoke(0x8879EE09268305D5, V(vehicle)); }
		public static bool IS_PLAYBACK_GOING_ON_FOR_VEHICLE(Vehicle vehicle) { return Invoke<bool>(0x1C8A4C2C19E68EEC, V(vehicle)); }
		public static bool IS_PLAYBACK_USING_AI_GOING_ON_FOR_VEHICLE(Vehicle vehicle) { return Invoke<bool>(0xAEA8FD591FAD4106, V(vehicle)); }
		public static int GET_CURRENT_PLAYBACK_FOR_VEHICLE(Vehicle vehicle) { return Invoke<int>(0x42BC05C27A946054, V(vehicle)); }
		public static void SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle) { Invoke(0xAB8E2EDA0C0A5883, V(vehicle)); }
		public static void SET_PLAYBACK_SPEED(Vehicle vehicle, float speed) { Invoke(0x6683AB880E427778, V(vehicle), V(speed)); }
		// AI abides by the provided driving style (e.g., stopping at red lights or waiting behind traffic) while executing the specificed vehicle recording.
		// 
		// FORCE_PLAYBACK_RECORDED_VEHICLE_UPDATE is a related native that deals with the AI physics for such recordings.
		public static void START_PLAYBACK_RECORDED_VEHICLE_USING_AI(Vehicle vehicle, int recording, string script, float speed, int drivingStyle) { Invoke(0x29DE5FA52D00428C, V(vehicle), V(recording), V(script), V(speed), V(drivingStyle)); }
		// SET_TIME_POSITION_IN_RECORDING can be emulated by: desired_time - GET_TIME_POSITION_IN_RECORDING(vehicle)
		public static void SKIP_TIME_IN_PLAYBACK_RECORDED_VEHICLE(Vehicle vehicle, float time) { Invoke(0x9438F7AD68771A20, V(vehicle), V(time)); }
		// Identical to SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER with 0 as arguments for p1 and p3.
		public static void SET_PLAYBACK_TO_USE_AI(Vehicle vehicle, int drivingStyle) { Invoke(0xA549C3B37EA28131, V(vehicle), V(drivingStyle)); }
		// Time is number of milliseconds before reverting, zero for indefinitely.
		public static void SET_PLAYBACK_TO_USE_AI_TRY_TO_REVERT_BACK_LATER(Vehicle vehicle, int time, int drivingStyle, bool p3) { Invoke(0x6E63860BBB190730, V(vehicle), V(time), V(drivingStyle), V(p3)); }
		public static void SET_ADDITIONAL_ROTATION_FOR_RECORDED_VEHICLE_PLAYBACK(Vehicle vehicle, float x, float y, float z, Any p4) { Invoke(0x5845066D8A1EA7F7, V(vehicle), V(x), V(y), V(z), V(p4)); }
		public static void SET_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(Vehicle vehicle, float x, float y, float z) { Invoke(0x796A877E459B99EA, V(vehicle), V(x), V(y), V(z)); }
		public static void SET_GLOBAL_POSITION_OFFSET_FOR_RECORDED_VEHICLE_PLAYBACK(Vehicle vehicle, float x, float y, float z) { Invoke(0xFAF2A78061FD9EF4, V(vehicle), V(x), V(y), V(z)); }
		// A vehicle recording playback flag only used in jewelry_heist
		public static void SET_SHOULD_LERP_FROM_AI_TO_FULL_RECORDING(Vehicle vehicle, bool p1) { Invoke(0x063AE2B2CC273588, V(vehicle), V(p1)); }
		public static void EXPLODE_VEHICLE_IN_CUTSCENE(Vehicle vehicle, bool p1) { Invoke(0x786A4EB67B01BF0B, V(vehicle), V(p1)); }
		public static void ADD_VEHICLE_STUCK_CHECK_WITH_WARP(Any p0, float p1, Any p2, bool p3, bool p4, bool p5, Any p6) { Invoke(0x2FA9923062DD396C, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		// Makes the vehicle stop spawning naturally in traffic. Here's an essential example:
		// 
		// VEHICLE::SET_VEHICLE_MODEL_IS_SUPPRESSED(MISC::GET_HASH_KEY("taco"), true);
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static void SET_VEHICLE_MODEL_IS_SUPPRESSED(Hash model, bool suppressed) { Invoke(0x0FC2D89AC25A5814, V(model), V(suppressed)); }
		// Gets a random vehicle in a sphere at the specified position, of the specified radius.
		// 
		// x: The X-component of the position of the sphere.
		// y: The Y-component of the position of the sphere.
		// z: The Z-component of the position of the sphere.
		// radius: The radius of the sphere. Max is 9999.9004.
		// modelHash: The vehicle model to limit the selection to. Pass 0 for any model.
		// flags: The bitwise flags that modifies the behaviour of this function.
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static Vehicle GET_RANDOM_VEHICLE_IN_SPHERE(float x, float y, float z, float radius, Hash modelHash, int flags) { return Invoke<Vehicle>(0x386F6CE5BAF6091C, V(x), V(y), V(z), V(radius), V(modelHash), V(flags)); }
		public static Vehicle GET_RANDOM_VEHICLE_FRONT_BUMPER_IN_SPHERE(float p0, float p1, float p2, float p3, int p4, int p5, int p6) { return Invoke<Vehicle>(0xC5574E0AEB86BA68, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static Vehicle GET_RANDOM_VEHICLE_BACK_BUMPER_IN_SPHERE(float p0, float p1, float p2, float p3, int p4, int p5, int p6) { return Invoke<Vehicle>(0xB50807EABE20A8DC, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		// Example usage
		// VEHICLE::GET_CLOSEST_VEHICLE(x, y, z, radius, hash, unknown leave at 70) 
		// 
		// x, y, z: Position to get closest vehicle to.
		// radius: Max radius to get a vehicle.
		// modelHash: Limit to vehicles with this model. 0 for any.
		// flags: The bitwise flags altering the function's behaviour.
		// 
		// Does not return police cars or helicopters.
		// 
		// It seems to return police cars for me, does not seem to return helicopters, planes or boats for some reason
		// 
		// Only returns non police cars and motorbikes with the flag set to 70 and modelHash to 0. ModelHash seems to always be 0 when not a modelHash in the scripts, as stated above. 
		// 
		// These flags were found in the b617d scripts: 0,2,4,6,7,23,127,260,2146,2175,12294,16384,16386,20503,32768,67590,67711,98309,100359.
		// Converted to binary, each bit probably represents a flag as explained regarding another native here: gtaforums.com/topic/822314-guide-driving-styles
		// 
		// Conversion of found flags to binary: https://pastebin.com/kghNFkRi
		// 
		// At exactly 16384 which is 0100000000000000 in binary and 4000 in hexadecimal only planes are returned. 
		// 
		// It's probably more convenient to use worldGetAllVehicles(int *arr, int arrSize) and check the shortest distance yourself and sort if you want by checking the vehicle type with for example VEHICLE::IS_THIS_MODEL_A_BOAT
		// 
		// -------------------------------------------------------------------------
		// 
		// Conclusion: This native is not worth trying to use. Use something like this instead: https://pastebin.com/xiFdXa7h
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static Vehicle GET_CLOSEST_VEHICLE(float x, float y, float z, float radius, Hash modelHash, int flags) { return Invoke<Vehicle>(0xF73EB622C4F1689B, V(x), V(y), V(z), V(radius), V(modelHash), V(flags)); }
		// Corrected p1. it's basically the 'carriage/trailer number'. So if the train has 3 trailers you'd call the native once with a var or 3 times with 1, 2, 3.
		public static Vehicle GET_TRAIN_CARRIAGE(Vehicle train, int trailerNumber) { return Invoke<Vehicle>(0x08AAFD0814722BC3, V(train), V(trailerNumber)); }
		public static bool IS_MISSION_TRAIN(Vehicle train) { return Invoke<bool>(0xAD464F2E18836BFC, V(train)); }
		public static void DELETE_MISSION_TRAIN(Vehicle* train) { Invoke(0x5B76B14AE875C795, V(train)); }
		// p1 is always 0
		public static void SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED(Vehicle* train, bool p1) { Invoke(0xBBE7648349B49BE8, V(train), V(p1)); }
		public static void SET_MISSION_TRAIN_COORDS(Vehicle train, float x, float y, float z) { Invoke(0x591CA673AA6AB736, V(train), V(x), V(y), V(z)); }
		public static bool IS_THIS_MODEL_A_BOAT(Hash model) { return Invoke<bool>(0x45A9187928F4B9E3, V(model)); }
		// Checks if model is a boat, then checks for FLAG_IS_JETSKI.
		public static bool IS_THIS_MODEL_A_JETSKI(Hash model) { return Invoke<bool>(0x9537097412CF75FE, V(model)); }
		public static bool IS_THIS_MODEL_A_PLANE(Hash model) { return Invoke<bool>(0xA0948AB42D7BA0DE, V(model)); }
		public static bool IS_THIS_MODEL_A_HELI(Hash model) { return Invoke<bool>(0xDCE4334788AF94EA, V(model)); }
		// To check if the model is an amphibious car, use IS_THIS_MODEL_AN_AMPHIBIOUS_CAR.
		public static bool IS_THIS_MODEL_A_CAR(Hash model) { return Invoke<bool>(0x7F6DB52EEFC96DF8, V(model)); }
		public static bool IS_THIS_MODEL_A_TRAIN(Hash model) { return Invoke<bool>(0xAB935175B22E822B, V(model)); }
		public static bool IS_THIS_MODEL_A_BIKE(Hash model) { return Invoke<bool>(0xB50C0B0CEDC6CE84, V(model)); }
		public static bool IS_THIS_MODEL_A_BICYCLE(Hash model) { return Invoke<bool>(0xBF94DD42F63BDED2, V(model)); }
		public static bool IS_THIS_MODEL_A_QUADBIKE(Hash model) { return Invoke<bool>(0x39DAC362EE65FA28, V(model)); }
		public static bool IS_THIS_MODEL_AN_AMPHIBIOUS_CAR(Hash model) { return Invoke<bool>(0x633F6F44A537EBB6, V(model)); }
		public static bool IS_THIS_MODEL_AN_AMPHIBIOUS_QUADBIKE(Hash model) { return Invoke<bool>(0xA1A9FC1C76A6730D, V(model)); }
		// Equivalent of SET_HELI_BLADES_SPEED(vehicleHandle, 1.0f);
		// 
		// this native works on planes to?
		public static void SET_HELI_BLADES_FULL_SPEED(Vehicle vehicle) { Invoke(0xA178472EBB8AE60D, V(vehicle)); }
		// Sets the speed of the helicopter blades in percentage of the full speed.
		// 
		// vehicleHandle: The helicopter.
		// speed: The speed in percentage, 0.0f being 0% and 1.0f being 100%.
		public static void SET_HELI_BLADES_SPEED(Vehicle vehicle, float speed) { Invoke(0xFD280B4D7F3ABC4D, V(vehicle), V(speed)); }
		public static void FORCE_SUB_THROTTLE_FOR_TIME(Vehicle vehicle, float p1, float p2) { Invoke(0x99CAD8E7AFDB60FA, V(vehicle), V(p1), V(p2)); }
		// This has not yet been tested - it's just an assumption of what the types could be.
		public static void SET_VEHICLE_CAN_BE_TARGETTED(Vehicle vehicle, bool state) { Invoke(0x3750146A28097A82, V(vehicle), V(state)); }
		public static void SET_DONT_ALLOW_PLAYER_TO_ENTER_VEHICLE_IF_LOCKED_FOR_PLAYER(Vehicle vehicle, bool p1) { Invoke(0xDBC631F109350B8C, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_CAN_BE_VISIBLY_DAMAGED(Vehicle vehicle, bool state) { Invoke(0x4C7028F78FFD3681, V(vehicle), V(state)); }
		public static void SET_VEHICLE_HAS_UNBREAKABLE_LIGHTS(Vehicle vehicle, bool toggle) { Invoke(0x1AA8A837D2169D94, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_RESPECTS_LOCKS_WHEN_HAS_DRIVER(Vehicle vehicle, bool p1) { Invoke(0x2311DD7159F00582, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_CAN_EJECT_PASSENGERS_IF_LOCKED(Any p0, Any p1) { Invoke(0x065D03A9D6B2C6B5, V(p0), V(p1)); }
		// Dirt level does not become greater than 15.0
		public static float GET_VEHICLE_DIRT_LEVEL(Vehicle vehicle) { return Invoke<float>(0x8F17BC8BA08DA62B, V(vehicle)); }
		// You can't use values greater than 15.0
		// Also, R* does (float)(rand() % 15) to get a random dirt level when generating a vehicle.
		public static void SET_VEHICLE_DIRT_LEVEL(Vehicle vehicle, float dirtLevel) { Invoke(0x79D3B596FE44EE8B, V(vehicle), V(dirtLevel)); }
		// Appears to return true if the vehicle has any damage, including cosmetically.
		public static bool GET_DOES_VEHICLE_HAVE_DAMAGE_DECALS(Vehicle vehicle) { return Invoke<bool>(0xBCDC5017D3CE1E9E, V(vehicle)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static bool IS_VEHICLE_DOOR_FULLY_OPEN(Vehicle vehicle, int doorId) { return Invoke<bool>(0x3E933CFF7B111C22, V(vehicle), V(doorId)); }
		// Starts or stops the engine on the specified vehicle.
		// 
		// vehicle: The vehicle to start or stop the engine on.
		// value: true to turn the vehicle on; false to turn it off.
		// instantly: if true, the vehicle will be set to the state immediately; otherwise, the current driver will physically turn on or off the engine.
		// disableAutoStart: If true, the system will prevent the engine from starting when the player got into it.
		// 
		// from what I've tested when I do this to a helicopter the propellers turn off after the engine has started. so is there any way to keep the heli propellers on?
		public static void SET_VEHICLE_ENGINE_ON(Vehicle vehicle, bool value, bool instantly, bool disableAutoStart) { Invoke(0x2497C4717C8B881E, V(vehicle), V(value), V(instantly), V(disableAutoStart)); }
		public static void SET_VEHICLE_UNDRIVEABLE(Vehicle vehicle, bool toggle) { Invoke(0x8ABA6AF54B942B95, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_PROVIDES_COVER(Vehicle vehicle, bool toggle) { Invoke(0x5AFEEDD9BB2899D7, V(vehicle), V(toggle)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static void SET_VEHICLE_DOOR_CONTROL(Vehicle vehicle, int doorId, int speed, float angle) { Invoke(0xF2BFA0430F0A0FCB, V(vehicle), V(doorId), V(speed), V(angle)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static void SET_VEHICLE_DOOR_LATCHED(Vehicle vehicle, int doorId, bool p2, bool p3, bool p4) { Invoke(0xA5A9653A8D2CAF48, V(vehicle), V(doorId), V(p2), V(p3), V(p4)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static float GET_VEHICLE_DOOR_ANGLE_RATIO(Vehicle vehicle, int doorId) { return Invoke<float>(0xFE3F9C29F7B32BD5, V(vehicle), V(doorId)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static Ped GET_PED_USING_VEHICLE_DOOR(Vehicle vehicle, int doord) { return Invoke<Ped>(0x218297BF0CFD853B, V(vehicle), V(doord)); }
		// enum eDoorId
		// {
		// 	VEH_EXT_DOOR_INVALID_ID = -1,
		// 	VEH_EXT_DOOR_DSIDE_F,
		// 	VEH_EXT_DOOR_DSIDE_R,
		// 	VEH_EXT_DOOR_PSIDE_F,
		// 	VEH_EXT_DOOR_PSIDE_R,
		// 	VEH_EXT_BONNET,
		// 	VEH_EXT_BOOT
		// };
		public static void SET_VEHICLE_DOOR_SHUT(Vehicle vehicle, int doorId, bool closeInstantly) { Invoke(0x93D9BD300D7789E5, V(vehicle), V(doorId), V(closeInstantly)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static void SET_VEHICLE_DOOR_BROKEN(Vehicle vehicle, int doorId, bool deleteDoor) { Invoke(0xD4D4F6A4AB575A33, V(vehicle), V(doorId), V(deleteDoor)); }
		public static void SET_VEHICLE_CAN_BREAK(Vehicle vehicle, bool toggle) { Invoke(0x59BF8C3D52C92F66, V(vehicle), V(toggle)); }
		public static bool DOES_VEHICLE_HAVE_ROOF(Vehicle vehicle) { return Invoke<bool>(0x8AC862B0B32C5B80, V(vehicle)); }
		public static void SET_VEHICLE_REMOVE_AGGRESSIVE_CARJACK_MISSION(Any p0) { Invoke(0xC4B3347BD68BD609, V(p0)); }
		public static void SET_VEHICLE_AVOID_PLAYER_VEHICLE_RIOT_VAN_MISSION(Any p0) { Invoke(0xD3301660A57C9272, V(p0)); }
		public static void SET_CARJACK_MISSION_REMOVAL_PARAMETERS(Any p0, Any p1) { Invoke(0xB9562064627FF9DB, V(p0), V(p1)); }
		// Returns true if MF_IS_BIG (strModelFlags 0x8) handling model flag is set.
		public static bool IS_BIG_VEHICLE(Vehicle vehicle) { return Invoke<bool>(0x9F243D3919F442FE, V(vehicle)); }
		// Returns the total amount of color combinations found in the vehicle's carvariations.meta entry.
		public static int GET_NUMBER_OF_VEHICLE_COLOURS(Vehicle vehicle) { return Invoke<int>(0x3B963160CD65D41E, V(vehicle)); }
		// Sets the selected vehicle's colors to the specified index of the color combination found in the vehicle's carvariations.meta entry.
		public static void SET_VEHICLE_COLOUR_COMBINATION(Vehicle vehicle, int colorCombination) { Invoke(0x33E8CD3322E2FE31, V(vehicle), V(colorCombination)); }
		// Returns the index of the color combination found in the vehicle's carvariations.meta entry.
		public static int GET_VEHICLE_COLOUR_COMBINATION(Vehicle vehicle) { return Invoke<int>(0x6A842D197F845D56, V(vehicle)); }
		// `color`: is the paint index for the vehicle.
		// Paint index goes from 0 to 12.
		// Be aware that it only works on xenon lights. Example: https://i.imgur.com/yV3cpG9.png
		// Full list of all vehicle xenon lights by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
		public static void SET_VEHICLE_XENON_LIGHT_COLOR_INDEX(Vehicle vehicle, int colorIndex) { Invoke(0xE41033B25D003A07, V(vehicle), V(colorIndex)); }
		// Returns the headlight color index from the vehicle. Value between 0, 12.
		// Use SET_VEHICLE_XENON_LIGHT_COLOR_INDEX to set the headlights color for the vehicle.
		// Must enable xenon headlights before it'll take affect.
		// 
		// Returns an int, value between 0-12 or 255 if no color is set.
		public static int GET_VEHICLE_XENON_LIGHT_COLOR_INDEX(Vehicle vehicle) { return Invoke<int>(0x3DFF319A831E0CDB, V(vehicle)); }
		// Setting this to false, makes the specified vehicle to where if you press Y your character doesn't even attempt the animation to enter the vehicle. Hence it's not considered aka ignored.
		public static void SET_VEHICLE_IS_CONSIDERED_BY_PLAYER(Vehicle vehicle, bool toggle) { Invoke(0x31B927BBC44156CD, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_WILL_FORCE_OTHER_VEHICLES_TO_STOP(Vehicle vehicle, bool toggle) { Invoke(0xBE5C1255A1830FF5, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_ACT_AS_IF_HAS_SIREN_ON(Vehicle vehicle, bool p1) { Invoke(0x9BECD4B9FEF3F8A6, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_USE_MORE_RESTRICTIVE_SPAWN_CHECKS(Vehicle vehicle, bool p1) { Invoke(0x88BC673CA9E0AE99, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_MAY_BE_USED_BY_GOTO_POINT_ANY_MEANS(Vehicle vehicle, bool p1) { Invoke(0xE851E480B814D4BA, V(vehicle), V(p1)); }
		// Not present in the retail version! It's just a nullsub.
		// 
		// p0 always true (except in one case)
		// successIndicator: 0 if success, -1 if failed
		public static void GET_RANDOM_VEHICLE_MODEL_IN_MEMORY(bool p0, Hash* modelHash, int* successIndicator) { Invoke(0x055BF0AC0C34F4FD, V(p0), V(modelHash), V(successIndicator)); }
		// enum VehicleLockStatus = {
		//     None = 0,
		//     Unlocked = 1,
		//     Locked = 2,
		//     LockedForPlayer = 3,
		//     StickPlayerInside = 4, -- Doesn't allow players to exit the vehicle with the exit vehicle key.
		//     CanBeBrokenInto = 7, -- Can be broken into the car. If the glass is broken, the value will be set to 1
		//     CanBeBrokenIntoPersist = 8, -- Can be broken into persist
		//     CannotBeTriedToEnter = 10, -- Cannot be tried to enter (Nothing happens when you press the vehicle enter key).
		// }
		public static int GET_VEHICLE_DOOR_LOCK_STATUS(Vehicle vehicle) { return Invoke<int>(0x25BC98A59C2EA962, V(vehicle)); }
		// Returns vehicle door lock state previously set with SET_VEHICLE_INDIVIDUAL_DOORS_LOCKED
		public static int GET_VEHICLE_INDIVIDUAL_DOOR_LOCK_STATUS(Vehicle vehicle, int doorId) { return Invoke<int>(0xCA4AC3EAAE46EC7B, V(vehicle), V(doorId)); }
		// doorID starts at 0, not seeming to skip any numbers. Four door vehicles intuitively range from 0 to 3.
		public static bool IS_VEHICLE_DOOR_DAMAGED(Vehicle veh, int doorID) { return Invoke<bool>(0xB8E181E559464527, V(veh), V(doorID)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static void SET_DOOR_ALLOWED_TO_BE_BROKEN_OFF(Vehicle vehicle, int doorId, bool isBreakable) { Invoke(0x2FA133A4A9D37ED8, V(vehicle), V(doorId), V(isBreakable)); }
		public static bool IS_VEHICLE_BUMPER_BOUNCING(Vehicle vehicle, bool frontBumper) { return Invoke<bool>(0x27B926779DEB502D, V(vehicle), V(frontBumper)); }
		public static bool IS_VEHICLE_BUMPER_BROKEN_OFF(Vehicle vehicle, bool frontBumper) { return Invoke<bool>(0x468056A6BB6F3846, V(vehicle), V(frontBumper)); }
		// Usage:
		// 
		// public static bool isCopInRange(Vector3 Location, float Range)
		//         {
		//             return Function.Call<bool>(Hash.IS_COP_PED_IN_AREA_3D, Location.X - Range, Location.Y - Range, Location.Z - Range, Location.X + Range, Location.Y + Range, Location.Z + Range);
		//         }
		public static bool IS_COP_VEHICLE_IN_AREA_3D(float x1, float x2, float y1, float y2, float z1, float z2) { return Invoke<bool>(0x7EEF65D5F153E26A, V(x1), V(x2), V(y1), V(y2), V(z1), V(z2)); }
		//  public static Function isVehicleOnAllWheels(vh As Vehicle) As Boolean
		//         Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_ON_ALL_WHEELS, vh)
		//     End Function
		// 
		public static bool IS_VEHICLE_ON_ALL_WHEELS(Vehicle vehicle) { return Invoke<bool>(0xB104CD1BABF302E2, V(vehicle)); }
		// Returns `nMonetaryValue` from handling.meta for specific model.
		public static int GET_VEHICLE_MODEL_VALUE(Hash vehicleModel) { return Invoke<int>(0x5873C14A52D74236, V(vehicleModel)); }

		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static Hash GET_VEHICLE_LAYOUT_HASH(Vehicle vehicle) { return Invoke<Hash>(0x28D37D4F71AC5C58, V(vehicle)); }
		public static Hash GET_IN_VEHICLE_CLIPSET_HASH_FOR_SEAT(Vehicle vehicle, int p1) { return Invoke<Hash>(0xA01BC64DD4BFBBAC, V(vehicle), V(p1)); }
		// Makes the train all jumbled up and derailed as it moves on the tracks (though that wont stop it from its normal operations)
		public static void SET_RENDER_TRAIN_AS_DERAILED(Vehicle train, bool toggle) { Invoke(0x317B11A312DF5534, V(train), V(toggle)); }
		// They use the same color indexs as SET_VEHICLE_COLOURS.
		public static void SET_VEHICLE_EXTRA_COLOURS(Vehicle vehicle, int pearlescentColor, int wheelColor) { Invoke(0x2036F561ADD12E33, V(vehicle), V(pearlescentColor), V(wheelColor)); }
		public static void GET_VEHICLE_EXTRA_COLOURS(Vehicle vehicle, int* pearlescentColor, int* wheelColor) { Invoke(0x3BC4245933A166F7, V(vehicle), V(pearlescentColor), V(wheelColor)); }
		public static void SET_VEHICLE_EXTRA_COLOUR_5(Vehicle vehicle, int color) { Invoke(0xF40DD601A65F7F19, V(vehicle), V(color)); }
		public static void GET_VEHICLE_EXTRA_COLOUR_5(Vehicle vehicle, int* color) { Invoke(0x7D1464D472D32136, V(vehicle), V(color)); }
		public static void SET_VEHICLE_EXTRA_COLOUR_6(Vehicle vehicle, int color) { Invoke(0x6089CDF6A57F326C, V(vehicle), V(color)); }
		public static void GET_VEHICLE_EXTRA_COLOUR_6(Vehicle vehicle, int* color) { Invoke(0xB7635E80A5C31BFF, V(vehicle), V(color)); }
		public static void STOP_ALL_GARAGE_ACTIVITY() { Invoke(0x0F87E938BDF29D66); }
		// This fixes a vehicle.
		// If the vehicle's engine's broken then you cannot fix it with this native.
		public static void SET_VEHICLE_FIXED(Vehicle vehicle) { Invoke(0x115722B1B9C14C1C, V(vehicle)); }
		// This fixes the deformation of a vehicle but the vehicle health doesn't improve
		public static void SET_VEHICLE_DEFORMATION_FIXED(Vehicle vehicle) { Invoke(0x953DA1E1B12C0491, V(vehicle)); }
		public static void SET_VEHICLE_CAN_ENGINE_MISSFIRE(Vehicle vehicle, bool toggle) { Invoke(0x206BC5DC9D1AC70A, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_CAN_LEAK_OIL(Vehicle vehicle, bool toggle) { Invoke(0x51BB2D88D31A914B, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_CAN_LEAK_PETROL(Vehicle vehicle, bool toggle) { Invoke(0x192547247864DFDD, V(vehicle), V(toggle)); }
		public static void SET_DISABLE_VEHICLE_PETROL_TANK_FIRES(Vehicle vehicle, bool toggle) { Invoke(0x465BF26AB9684352, V(vehicle), V(toggle)); }
		public static void SET_DISABLE_VEHICLE_PETROL_TANK_DAMAGE(Vehicle vehicle, bool toggle) { Invoke(0x37C8252A7C92D017, V(vehicle), V(toggle)); }
		public static void SET_DISABLE_VEHICLE_ENGINE_FIRES(Vehicle vehicle, bool toggle) { Invoke(0x91A0BD635321F145, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_LIMIT_SPEED_WHEN_PLAYER_INACTIVE(Vehicle vehicle, bool toggle) { Invoke(0xC50CE861B55EAB8B, V(vehicle), V(toggle)); }
		// sfink: sets bit in vehicle's structure, used by maintransition, fm_mission_controller, mission_race and a couple of other scripts. see dissassembly: 
		// CVehicle *__fastcall sub_140CDAA10(signed int a1, char a2)
		// {
		//     CVehicle *result; // rax@1
		// 
		//     result = EntityAsCVehicle(a1);
		//     if ( result )
		//     {
		//         result->field_886 &= 0xEFu;
		//         result->field_886 |= 16 * (a2 & 1);
		//     }
		//     return result;
		// }
		public static void SET_VEHICLE_STOP_INSTANTLY_WHEN_PLAYER_INACTIVE(Vehicle vehicle, bool toggle) { Invoke(0x6EBFB22D646FFC18, V(vehicle), V(toggle)); }
		public static void SET_DISABLE_PRETEND_OCCUPANTS(Vehicle vehicle, bool toggle) { Invoke(0x25367DE49D64CF16, V(vehicle), V(toggle)); }
		public static void REMOVE_VEHICLES_FROM_GENERATORS_IN_AREA(float x1, float y1, float z1, float x2, float y2, float z2, Any p6) { Invoke(0x46A1E1A299EC4BBA, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(p6)); }
		// Locks the vehicle's steering to the desired angle, explained below.
		// 
		// Requires to be called onTick. Steering is unlocked the moment the function stops being called on the vehicle.
		// 
		// Steer bias:
		// -1.0 = full right
		// 0.0 = centered steering
		// 1.0 = full left
		public static void SET_VEHICLE_STEER_BIAS(Vehicle vehicle, float value) { Invoke(0x42A8EC77D5150CBE, V(vehicle), V(value)); }
		public static bool IS_VEHICLE_EXTRA_TURNED_ON(Vehicle vehicle, int extraId) { return Invoke<bool>(0xD2E6822DBFD6C8BD, V(vehicle), V(extraId)); }
		// Available extraIds are 1-14, however none of the vehicles have extras above 12.
		public static void SET_VEHICLE_EXTRA(Vehicle vehicle, int extraId, bool disable) { Invoke(0x7EE3A3C5E4A40CC9, V(vehicle), V(extraId), V(disable)); }
		// Checks via CVehicleModelInfo
		public static bool DOES_EXTRA_EXIST(Vehicle vehicle, int extraId) { return Invoke<bool>(0x1262D55792428154, V(vehicle), V(extraId)); }
		// Returns true if specified extra part is broken off. It only works for extras that can break off during collisions, non-breakable extras always return false. Also returns true if the breakable extra is toggled off through script.
		public static bool IS_EXTRA_BROKEN_OFF(Vehicle vehicle, int extraId) { return Invoke<bool>(0x534E36D4DB9ECC5D, V(vehicle), V(extraId)); }
		public static void SET_CONVERTIBLE_ROOF(Vehicle vehicle, bool p1) { Invoke(0xF39C4F538B5124C2, V(vehicle), V(p1)); }
		public static void LOWER_CONVERTIBLE_ROOF(Vehicle vehicle, bool instantlyLower) { Invoke(0xDED51F703D0FA83D, V(vehicle), V(instantlyLower)); }
		public static void RAISE_CONVERTIBLE_ROOF(Vehicle vehicle, bool instantlyRaise) { Invoke(0x8F5FB35D7E88FC70, V(vehicle), V(instantlyRaise)); }
		// 0 -> up
		// 1 -> lowering down
		// 2 -> down
		// 3 -> raising up
		public static int GET_CONVERTIBLE_ROOF_STATE(Vehicle vehicle) { return Invoke<int>(0xF8C397922FC03F41, V(vehicle)); }
		// Returns true if the vehicle has a convertible roof.
		// 
		// p1 is false almost always. However, in launcher_carwash/carwash1/carwash2 scripts, p1 is true and is accompanied by DOES_VEHICLE_HAVE_ROOF. If p1 is true, it seems that every single vehicle will return true irrespective of being a convertible.
		public static bool IS_VEHICLE_A_CONVERTIBLE(Vehicle vehicle, bool p1) { return Invoke<bool>(0x52F357A30698BCCE, V(vehicle), V(p1)); }
		// Transforms the `stormberg`/`toreador` to its "submarine" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
		public static bool TRANSFORM_TO_SUBMARINE(Vehicle vehicle, bool noAnimation) { return Invoke<bool>(0xBE4C854FFDB6EEBE, V(vehicle), V(noAnimation)); }

		// Transforms the `stormberg`/`toreador` to its "road vehicle" variant. If the vehicle is already in that state then the vehicle transformation audio will still play, but the vehicle won't change at all.
		public static void TRANSFORM_TO_CAR(Vehicle vehicle, bool noAnimation) { Invoke(0x2A69FFD1B42BFF9E, V(vehicle), V(noAnimation)); }

		public static bool IS_VEHICLE_IN_SUBMARINE_MODE(Vehicle vehicle) { return Invoke<bool>(0xA77DC70BD689A1E5, V(vehicle)); }

		public static bool IS_VEHICLE_STOPPED_AT_TRAFFIC_LIGHTS(Vehicle vehicle) { return Invoke<bool>(0x2959F696AE390A99, V(vehicle)); }
		// Apply damage to vehicle at a location. Location is relative to vehicle model (not world).
		// 
		// Radius of effect damage applied in a sphere at impact location
		// When `focusOnModel` set to `true`, the damage sphere will travel towards the vehicle from the given point, thus guaranteeing an impact
		public static void SET_VEHICLE_DAMAGE(Vehicle vehicle, float xOffset, float yOffset, float zOffset, float damage, float radius, bool focusOnModel) { Invoke(0xA1DD317EA8FD4F29, V(vehicle), V(xOffset), V(yOffset), V(zOffset), V(damage), V(radius), V(focusOnModel)); }
		public static void SET_VEHICLE_OCCUPANTS_TAKE_EXPLOSIVE_DAMAGE(Vehicle vehicle, bool toggle) { Invoke(0x35BB21DE06784373, V(vehicle), V(toggle)); }
		// Returns 1000.0 if the function is unable to get the address of the specified vehicle or if it's not a vehicle.
		// 
		// Minimum: -4000
		// Maximum: 1000
		// 
		// -4000: Engine is destroyed
		// 0 and below: Engine catches fire and health rapidly declines
		// 300: Engine is smoking and losing functionality
		// 1000: Engine is perfect
		public static float GET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle) { return Invoke<float>(0xC45D23BAF168AAB8, V(vehicle)); }
		// 1000 is max health
		// Begins leaking gas at around 650 health
		// Minimum: -4000
		// Maximum: 1000
		// 
		// -4000: Engine is destroyed
		// 0 and below: Engine catches fire and health rapidly declines
		// 300: Engine is smoking and losing functionality
		// 1000: Engine is perfect
		public static void SET_VEHICLE_ENGINE_HEALTH(Vehicle vehicle, float health) { Invoke(0x45F6D8EEF34ABEF1, V(vehicle), V(health)); }
		// Works just like SET_VEHICLE_ENGINE_HEALTH, but only for planes.
		public static void SET_PLANE_ENGINE_HEALTH(Vehicle vehicle, float health) { Invoke(0x2A86A0475B6A1434, V(vehicle), V(health)); }
		// 1000 is max health
		// Begins leaking gas at around 650 health
		// -999.90002441406 appears to be minimum health, although nothing special occurs
		public static float GET_VEHICLE_PETROL_TANK_HEALTH(Vehicle vehicle) { return Invoke<float>(0x7D5DABE888D2D074, V(vehicle)); }
		// 1000 is max health
		// Begins leaking gas at around 650 health
		// -999.90002441406 appears to be minimum health, although nothing special occurs
		public static void SET_VEHICLE_PETROL_TANK_HEALTH(Vehicle vehicle, float health) { Invoke(0x70DB57649FA8D0D8, V(vehicle), V(health)); }
		// p1 can be anywhere from 0 to 3 in the scripts.
		// p2 being how long in milliseconds the vehicle has been stuck
		public static bool IS_VEHICLE_STUCK_TIMER_UP(Vehicle vehicle, int p1, int ms) { return Invoke<bool>(0x679BE1DAF71DA874, V(vehicle), V(p1), V(ms)); }
		// The inner function has a switch on the second parameter. It's the stuck timer index.
		// 
		// Here's some pseudo code I wrote for the inner function:
		// void __fastcall NATIVE_RESET_VEHICLE_STUCK_TIMER_INNER(CUnknown* unknownClassInVehicle, int timerIndex)
		// {
		//  switch (timerIndex)
		//    {
		//  case 0:
		//        unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
		//  case 1:
		//        unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
		//     case 2:
		//        unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
		//  case 3:
		//        unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
		//     case 4:
		//        unknownClassInVehicle->FirstStuckTimer = (WORD)0u;
		//      unknownClassInVehicle->SecondStuckTimer = (WORD)0u;
		//         unknownClassInVehicle->ThirdStuckTimer = (WORD)0u;
		//      unknownClassInVehicle->FourthStuckTimer = (WORD)0u;
		//         break;
		//     };
		// }
		public static void RESET_VEHICLE_STUCK_TIMER(Vehicle vehicle, int nullAttributes) { Invoke(0xD7591B0065AFAA7A, V(vehicle), V(nullAttributes)); }
		// p1 is always 0 in the scripts.
		// 
		// p1 = check if vehicle is on fire
		public static bool IS_VEHICLE_DRIVEABLE(Vehicle vehicle, bool isOnFireCheck) { return Invoke<bool>(0x4C241E39B23DF959, V(vehicle), V(isOnFireCheck)); }
		public static void SET_VEHICLE_HAS_BEEN_OWNED_BY_PLAYER(Vehicle vehicle, bool owned) { Invoke(0x2B5F9D2AF1F1722D, V(vehicle), V(owned)); }
		public static void SET_VEHICLE_NEEDS_TO_BE_HOTWIRED(Vehicle vehicle, bool toggle) { Invoke(0xFBA550EA44404EE6, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_BLIP_THROTTLE_RANDOMLY(Vehicle vehicle, bool p1) { Invoke(0x9F3F689B814F2599, V(vehicle), V(p1)); }
		public static void SET_POLICE_FOCUS_WILL_TRACK_VEHICLE(Vehicle vehicle, bool toggle) { Invoke(0x4E74E62E0A97E901, V(vehicle), V(toggle)); }
		// Sounds the horn for the specified vehicle.
		// 
		// vehicle: The vehicle to activate the horn for.
		// mode: The hash of "NORMAL" or "HELDDOWN". Can be 0.
		// duration: The duration to sound the horn, in milliseconds.
		// 
		// Note: If a player is in the vehicle, it will only sound briefly.
		public static void START_VEHICLE_HORN(Vehicle vehicle, int duration, Hash mode, bool forever) { Invoke(0x9C8C6504B5B63D2C, V(vehicle), V(duration), V(mode), V(forever)); }
		// If set to TRUE, it seems to suppress door noises and doesn't allow the horn to be continuous.
		public static void SET_VEHICLE_IN_CAR_MOD_SHOP(Vehicle vehicle, bool toggle) { Invoke(0x9D44FCCE98450843, V(vehicle), V(toggle)); }
		// if true, axles won't bend.
		public static void SET_VEHICLE_HAS_STRONG_AXLES(Vehicle vehicle, bool toggle) { Invoke(0x92F0CF722BC4202F, V(vehicle), V(toggle)); }
		// Returns model name of vehicle in all caps. Needs to be displayed through localizing text natives to get proper display name.
		// -----------------------------------------------------------------------------------------------------------------------------------------
		// While often the case, this does not simply return the model name of the vehicle (which could be hashed to return the model hash). Variations of the same vehicle may also use the same display name.
		// -----------------------------------------------------------------------------------------------------------------------------------------
		// 
		// Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
		// 
		// Using HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION, you can get the localized name.
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static byte* GET_DISPLAY_NAME_FROM_VEHICLE_MODEL(Hash modelHash) { return PInvoke<byte>(0xB215AAC32D25D019, V(modelHash)); }
		// Will return a vehicle's manufacturer display label.
		// Returns "CARNOTFOUND" if the hash doesn't match a vehicle hash.
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static byte* GET_MAKE_NAME_FROM_VEHICLE_MODEL(Hash modelHash) { return PInvoke<byte>(0xF7AF4F159FF99F97, V(modelHash)); }
		// The only example I can find of this function in the scripts, is this:
		// 
		// struct _s = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(rPtr((A_0) + 4), 1.21f, 6.15f, 0.3f);
		// 
		// -----------------------------------------------------------------------------------------------------------------------------------------
		// PC scripts:
		// 
		// v_5/*{3}*/ = VEHICLE::GET_VEHICLE_DEFORMATION_AT_POS(a_0._f1, 1.21, 6.15, 0.3);
		public static Vector3 GET_VEHICLE_DEFORMATION_AT_POS(Vehicle vehicle, float offsetX, float offsetY, float offsetZ) { return Invoke<Vector3>(0x4EC6CFBC7B2E9536, V(vehicle), V(offsetX), V(offsetY), V(offsetZ)); }
		public static void SET_VEHICLE_LIVERY(Vehicle vehicle, int livery) { Invoke(0x60BF608F1B8CD1B6, V(vehicle), V(livery)); }
		// -1 = no livery
		public static int GET_VEHICLE_LIVERY(Vehicle vehicle) { return Invoke<int>(0x2BB9230590DA5E8A, V(vehicle)); }
		// Returns -1 if the vehicle has no livery
		public static int GET_VEHICLE_LIVERY_COUNT(Vehicle vehicle) { return Invoke<int>(0x87B63E25A529D526, V(vehicle)); }
		// Used to set the secondary livery (the roof on Tornado Custom being one such example.)
		// 
		// Livery value is dependent on the amount of liveries present in the vehicle's texture dictionary, for Tornado Custom this would be 0-6.
		public static void SET_VEHICLE_LIVERY2(Vehicle vehicle, int livery) { Invoke(0xA6D3A8750DC73270, V(vehicle), V(livery)); }
		// Returns index of the current vehicle's secondary livery. A getter for SET_VEHICLE_LIVERY2.
		public static int GET_VEHICLE_LIVERY2(Vehicle vehicle) { return Invoke<int>(0x60190048C0764A26, V(vehicle)); }
		// Returns a number of available secondary liveries, or -1 if vehicle has no secondary liveries available.
		public static int GET_VEHICLE_LIVERY2_COUNT(Vehicle vehicle) { return Invoke<int>(0x5ECB40269053C0D4, V(vehicle)); }
		// This will return false if the window is broken, or rolled down.
		// Window indexes:
		// 0 = Front Right Window
		// 1 = Front Left Window
		// 2 = Back Right Window
		// 3 = Back Left Window
		// 
		// 
		// Those numbers go on for vehicles that have more than 4 doors with windows.
		public static bool IS_VEHICLE_WINDOW_INTACT(Vehicle vehicle, int windowIndex) { return Invoke<bool>(0x46E571A0E20D01F1, V(vehicle), V(windowIndex)); }
		// Appears to return false if any window is broken.
		public static bool ARE_ALL_VEHICLE_WINDOWS_INTACT(Vehicle vehicle) { return Invoke<bool>(0x11D862A3E977A9EF, V(vehicle)); }
		// Returns false if every seat is occupied.
		public static bool ARE_ANY_VEHICLE_SEATS_FREE(Vehicle vehicle) { return Invoke<bool>(0x2D34FC3BC4ADB780, V(vehicle)); }
		public static void RESET_VEHICLE_WHEELS(Vehicle vehicle, bool toggle) { Invoke(0x21D2E5662C1F6FED, V(vehicle), V(toggle)); }
		public static bool IS_HELI_PART_BROKEN(Vehicle vehicle, bool p1, bool p2, bool p3) { return Invoke<bool>(0xBC74B4BE25EB6C8A, V(vehicle), V(p1), V(p2), V(p3)); }
		// Max 1000.
		// At 0 the main rotor will stall.
		public static float GET_HELI_MAIN_ROTOR_HEALTH(Vehicle vehicle) { return Invoke<float>(0xE4CB7541F413D2C5, V(vehicle)); }
		// Max 1000.
		// At 0 the tail rotor will stall.
		public static float GET_HELI_TAIL_ROTOR_HEALTH(Vehicle vehicle) { return Invoke<float>(0xAE8CE82A4219AC8C, V(vehicle)); }
		// Max 1000.
		// At -100 both helicopter rotors will stall.
		public static float GET_HELI_TAIL_BOOM_HEALTH(Vehicle vehicle) { return Invoke<float>(0xAC51915D27E4A5F7, V(vehicle)); }
		public static void SET_HELI_MAIN_ROTOR_HEALTH(Vehicle vehicle, float health) { Invoke(0x4056EA1105F5ABD7, V(vehicle), V(health)); }
		public static void SET_HELI_TAIL_ROTOR_HEALTH(Vehicle vehicle, float health) { Invoke(0xFE205F38AAA58E5B, V(vehicle), V(health)); }
		public static bool SET_HELI_TAIL_BOOM_CAN_BREAK_OFF(Vehicle vehicle, bool toggle) { return Invoke<bool>(0x3EC8BF18AA453FE9, V(vehicle), V(toggle)); }
		// NOTE: Debugging functions are not present in the retail version of the game.
		public static void SET_VEHICLE_NAME_DEBUG(Vehicle vehicle, string name) { Invoke(0xBFDF984E2C22B94F, V(vehicle), V(name)); }
		// Sets a vehicle to be strongly resistant to explosions. p0 is the vehicle; set p1 to false to toggle the effect on/off.
		public static void SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE(Vehicle vehicle, bool toggle) { Invoke(0x71B0892EC081D60A, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_EXPLODES_ON_EXPLOSION_DAMAGE_AT_ZERO_BODY_HEALTH(Vehicle vehicle, bool toggle) { Invoke(0xD565F438137F0E10, V(vehicle), V(toggle)); }
		public static void SET_ALLOW_VEHICLE_EXPLODES_ON_CONTACT(Vehicle vehicle, bool toggle) { Invoke(0x3441CAD2F2231923, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_DISABLE_TOWING(Vehicle vehicle, bool toggle) { Invoke(0x2B6747FAA9DB9D6B, V(vehicle), V(toggle)); }
		public static bool GET_VEHICLE_HAS_LANDING_GEAR(Vehicle vehicle) { return Invoke<bool>(0xE43701C36CAFF1A4, V(vehicle)); }
		// Works for vehicles with a retractable landing gear
		// 
		// Landing gear states:
		// 
		// 0: Deployed
		// 1: Closing
		// 2: Opening
		// 3: Retracted
		public static void CONTROL_LANDING_GEAR(Vehicle vehicle, int state) { Invoke(0xCFC8BE9A5E1FE575, V(vehicle), V(state)); }
		// Landing gear states:
		// 
		// 0: Deployed
		// 1: Closing (Retracting)
		// 2: (Landing gear state 2 is never used.)
		// 3: Opening (Deploying)
		// 4: Retracted
		// 
		// Returns the current state of the vehicles landing gear.
		public static int GET_LANDING_GEAR_STATE(Vehicle vehicle) { return Invoke<int>(0x9B0F3DCA3DB0F4CD, V(vehicle)); }
		public static bool IS_ANY_VEHICLE_NEAR_POINT(float x, float y, float z, float radius) { return Invoke<bool>(0x61E1DD6125A3EEE6, V(x), V(y), V(z), V(radius)); }
		public static void REQUEST_VEHICLE_HIGH_DETAIL_MODEL(Vehicle vehicle) { Invoke(0xA6E9FDCB2C76785E, V(vehicle)); }
		public static int _GET_VEHICLE_MODEL_NUM_DRIVE_GEARS(Hash vehicleModel) { return Invoke<int>(0x61F02E4E9A7A61EA, V(vehicleModel)); }
		public static int _GET_VEHICLE_MAX_DRIVE_GEAR_COUNT(Vehicle vehicle) { return Invoke<int>(0x24910C3D66BA770D, V(vehicle)); }
		public static bool _GET_IS_VEHICLE_ELECTRIC(Hash vehicleModel) { return Invoke<bool>(0x1FCB07FE230B6639, V(vehicleModel)); }
		// Returns the vehicle's drivetrain type.
		// 
		// enum eVehicleDrivetrainType
		// {
		// 	VehicleDrivetrainType_INVALID,
		// 	VehicleDrivetrainType_FWD,
		// 	VehicleDrivetrainType_RWD,
		// 	VehicleDrivetrainType_AWD
		// };
		// 
		// _GET_VEHICLE_DE* - _GET_VEHICLE_DI*
		public static int _GET_VEHICLE_DRIVETRAIN_TYPE(Hash vehicleModel) { return Invoke<int>(0x1423725069EE1D14, V(vehicleModel)); }
		public static int _GET_VEHICLE_CURRENT_DRIVE_GEAR(Vehicle vehicle) { return Invoke<int>(0x56185A25D45A0DCD, V(vehicle)); }
		public static float _GET_VEHICLE_CURRENT_REV_RATIO(Vehicle vehicle) { return Invoke<float>(0xF9DDA40BC293A61E, V(vehicle)); }
		public static void REMOVE_VEHICLE_HIGH_DETAIL_MODEL(Vehicle vehicle) { Invoke(0x00689CDE5F7C6787, V(vehicle)); }
		public static bool IS_VEHICLE_HIGH_DETAIL(Vehicle vehicle) { return Invoke<bool>(0x1F25887F3C104278, V(vehicle)); }
		// REQUEST_VEHICLE_ASSET(GET_HASH_KEY(cargobob3), 3);
		// 
		// vehicle found that have asset's:
		// cargobob3
		// submersible
		// blazer
		public static void REQUEST_VEHICLE_ASSET(Hash vehicleHash, int vehicleAsset) { Invoke(0x81A15811460FAB3A, V(vehicleHash), V(vehicleAsset)); }
		public static bool HAS_VEHICLE_ASSET_LOADED(int vehicleAsset) { return Invoke<bool>(0x1BBE0523B8DB9A21, V(vehicleAsset)); }
		public static void REMOVE_VEHICLE_ASSET(int vehicleAsset) { Invoke(0xACE699C71AB9DEB5, V(vehicleAsset)); }
		// Sets how much the crane on the tow truck is raised, where 0.0 is fully lowered and 1.0 is fully raised.
		public static void SET_VEHICLE_TOW_TRUCK_ARM_POSITION(Vehicle vehicle, float position) { Invoke(0xFE54B92A344583CA, V(vehicle), V(position)); }
		public static void _SET_ATTACHED_VEHICLE_TO_TOW_TRUCK_ARM(Vehicle towTruck, Vehicle vehicle) { Invoke(0x48BD57D0DD17786A, V(towTruck), V(vehicle)); }
		// HookOffset defines where the hook is attached. leave at 0 for default attachment.
		public static void ATTACH_VEHICLE_TO_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle, bool rear, float hookOffsetX, float hookOffsetY, float hookOffsetZ) { Invoke(0x29A16F8D621C4508, V(towTruck), V(vehicle), V(rear), V(hookOffsetX), V(hookOffsetY), V(hookOffsetZ)); }
		// First two parameters swapped. Scripts verify that towTruck is the first parameter, not the second.
		public static void DETACH_VEHICLE_FROM_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle) { Invoke(0xC2DB6B6708350ED8, V(towTruck), V(vehicle)); }
		public static bool DETACH_VEHICLE_FROM_ANY_TOW_TRUCK(Vehicle vehicle) { return Invoke<bool>(0xD0E9CE05A1E68CD8, V(vehicle)); }
		// Scripts verify that towTruck is the first parameter, not the second.
		public static bool IS_VEHICLE_ATTACHED_TO_TOW_TRUCK(Vehicle towTruck, Vehicle vehicle) { return Invoke<bool>(0x146DF9EC4C4B9FD4, V(towTruck), V(vehicle)); }
		public static Entity GET_ENTITY_ATTACHED_TO_TOW_TRUCK(Vehicle towTruck) { return Invoke<Entity>(0xEFEA18DCF10F8F75, V(towTruck)); }
		public static Entity SET_VEHICLE_AUTOMATICALLY_ATTACHES(Vehicle vehicle, bool p1, Any p2) { return Invoke<Entity>(0x8BA6F76BC53A1493, V(vehicle), V(p1), V(p2)); }
		// Sets the arm position of a bulldozer. Position must be a value between 0.0 and 1.0. Ignored when `p2` is set to false, instead incrementing arm position by 0.1 (or 10%).
		public static void SET_VEHICLE_BULLDOZER_ARM_POSITION(Vehicle vehicle, float position, bool p2) { Invoke(0xF8EBCCC96ADB9FB7, V(vehicle), V(position), V(p2)); }
		public static void SET_VEHICLE_TANK_TURRET_POSITION(Vehicle vehicle, float position, bool p2) { Invoke(0x56B94C6D7127DFBA, V(vehicle), V(position), V(p2)); }
		public static void SET_VEHICLE_TURRET_TARGET(Vehicle vehicle, bool p1, float x, float y, float z, bool p5) { Invoke(0x0581730AB9380412, V(vehicle), V(p1), V(x), V(y), V(z), V(p5)); }
		public static void SET_VEHICLE_TANK_STATIONARY(Vehicle vehicle, bool p1) { Invoke(0x737E398138550FFF, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_TURRET_SPEED_THIS_FRAME(Vehicle vehicle, float speed) { Invoke(0x1093408B4B9D1146, V(vehicle), V(speed)); }
		public static void DISABLE_VEHICLE_TURRET_MOVEMENT_THIS_FRAME(Vehicle vehicle) { Invoke(0x32CAEDF24A583345, V(vehicle)); }
		public static void SET_VEHICLE_FLIGHT_NOZZLE_POSITION(Vehicle vehicle, float angleRatio) { Invoke(0x30D779DE7C4F6DD3, V(vehicle), V(angleRatio)); }
		public static void SET_VEHICLE_FLIGHT_NOZZLE_POSITION_IMMEDIATE(Vehicle vehicle, float angle) { Invoke(0x9AA47FFF660CB932, V(vehicle), V(angle)); }
		public static float GET_VEHICLE_FLIGHT_NOZZLE_POSITION(Vehicle plane) { return Invoke<float>(0xDA62027C8BDB326E, V(plane)); }

		// True stops vtols from switching modes. Doesn't stop the sound though.
		public static void SET_DISABLE_VERTICAL_FLIGHT_MODE_TRANSITION(Vehicle vehicle, bool toggle) { Invoke(0xCE2B43770B655F8F, V(vehicle), V(toggle)); }
		public static bool GENERATE_VEHICLE_CREATION_POS_FROM_PATHS(Vector3* outVec, Any p1, Vector3* outVec1, Any p3, Any p4, Any p5, Any p6, Any p7, Any p8) { return Invoke<bool>(0xA4822F1CF23F4810, V(outVec), V(p1), V(outVec1), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8)); }
		// On accelerating, spins the driven wheels with the others braked, so you don't go anywhere.
		public static void SET_VEHICLE_BURNOUT(Vehicle vehicle, bool toggle) { Invoke(0xFB8794444A7D60FB, V(vehicle), V(toggle)); }
		// Returns whether the specified vehicle is currently in a burnout.
		// 
		// 
		// vb.net
		// public static Function isVehicleInBurnout(vh As Vehicle) As Boolean
		//         Return Native.Function.Call(Of Boolean)(Hash.IS_VEHICLE_IN_BURNOUT, vh)
		//     End Function
		public static bool IS_VEHICLE_IN_BURNOUT(Vehicle vehicle) { return Invoke<bool>(0x1297A88E081430EB, V(vehicle)); }
		// Reduces grip significantly so it's hard to go anywhere.
		public static void SET_VEHICLE_REDUCE_GRIP(Vehicle vehicle, bool toggle) { Invoke(0x222FF6A823D122E2, V(vehicle), V(toggle)); }
		// val is 0-3
		// Often used in conjunction with: SET_VEHICLE_REDUCE_GRIP
		public static void SET_VEHICLE_REDUCE_GRIP_LEVEL(Vehicle vehicle, int val) { Invoke(0x6DEE944E1EE90CFB, V(vehicle), V(val)); }
		// Sets the turn signal enabled for a vehicle.
		// Set turnSignal to 1 for left light, 0 for right light.
		public static void SET_VEHICLE_INDICATOR_LIGHTS(Vehicle vehicle, int turnSignal, bool toggle) { Invoke(0xB5D45264751B7DF0, V(vehicle), V(turnSignal), V(toggle)); }
		public static void SET_VEHICLE_BRAKE_LIGHTS(Vehicle vehicle, bool toggle) { Invoke(0x92B35082E0B42F66, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_TAIL_LIGHTS(Vehicle vehicle, bool toggle) { Invoke(0x5815BD2763178DF4, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_HANDBRAKE(Vehicle vehicle, bool toggle) { Invoke(0x684785568EF26A22, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_BRAKE(Vehicle vehicle, bool toggle) { Invoke(0xE4E2FD323574965C, V(vehicle), V(toggle)); }

		public static void INSTANTLY_FILL_VEHICLE_POPULATION() { Invoke(0x48ADC8A773564670); }
		public static bool HAS_INSTANT_FILL_VEHICLE_POPULATION_FINISHED() { return Invoke<bool>(0x91D6DD290888CBAB); }
		public static void NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(bool toggle) { Invoke(0x51DB102F4A3BA5E0, V(toggle)); }
		// Default:1000||This sets a value which is used when NETWORK_ENABLE_EMPTY_CROWDING_VEHICLES_REMOVAL(true) is called each frame.
		public static void NETWORK_CAP_EMPTY_CROWDING_VEHICLES_REMOVAL(int p0) { Invoke(0xA4A9A4C40E615885, V(p0)); }
		// Gets the trailer of a vehicle and puts it into the trailer parameter.
		public static bool GET_VEHICLE_TRAILER_VEHICLE(Vehicle vehicle, Vehicle* trailer) { return Invoke<bool>(0x1CDD6BADC297830D, V(vehicle), V(trailer)); }
		public static Vehicle _GET_VEHICLE_TRAILER_PARENT_VEHICLE(Vehicle trailer) { return Invoke<Vehicle>(0x80D9D32636369C92, V(trailer)); }
		// vehicle must be a plane
		public static void SET_VEHICLE_USES_LARGE_REAR_RAMP(Vehicle vehicle, bool toggle) { Invoke(0xCAC66558B944DA67, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_RUDDER_BROKEN(Vehicle vehicle, bool toggle) { Invoke(0x09606148B6C71DEF, V(vehicle), V(toggle)); }
		public static void SET_CONVERTIBLE_ROOF_LATCH_STATE(Vehicle vehicle, bool state) { Invoke(0x1A78AD3D8240536F, V(vehicle), V(state)); }
		public static float GET_VEHICLE_ESTIMATED_MAX_SPEED(Vehicle vehicle) { return Invoke<float>(0x53AF99BAA671CA47, V(vehicle)); }
		public static float GET_VEHICLE_MAX_BRAKING(Vehicle vehicle) { return Invoke<float>(0xAD7E85FC227197C4, V(vehicle)); }
		public static float GET_VEHICLE_MAX_TRACTION(Vehicle vehicle) { return Invoke<float>(0xA132FB5370554DB0, V(vehicle)); }
		// static - max acceleration
		public static float GET_VEHICLE_ACCELERATION(Vehicle vehicle) { return Invoke<float>(0x5DD35C8D074E57AE, V(vehicle)); }
		// Returns max speed (without mods) of the specified vehicle model in m/s.
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static float GET_VEHICLE_MODEL_ESTIMATED_MAX_SPEED(Hash modelHash) { return Invoke<float>(0xF417C2502FFFED43, V(modelHash)); }
		// Returns max braking of the specified vehicle model.
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static float GET_VEHICLE_MODEL_MAX_BRAKING(Hash modelHash) { return Invoke<float>(0xDC53FD41B4ED944C, V(modelHash)); }
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static float GET_VEHICLE_MODEL_MAX_BRAKING_MAX_MODS(Hash modelHash) { return Invoke<float>(0xBFBA3BA79CFF7EBF, V(modelHash)); }
		// Returns max traction of the specified vehicle model.
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static float GET_VEHICLE_MODEL_MAX_TRACTION(Hash modelHash) { return Invoke<float>(0x539DE94D44FDFD0D, V(modelHash)); }
		// Returns the acceleration of the specified model.
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static float GET_VEHICLE_MODEL_ACCELERATION(Hash modelHash) { return Invoke<float>(0x8C044C5C84505B6A, V(modelHash)); }
		// 9.8 * thrust if air vehicle, else 0.38 + drive force?
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static float GET_VEHICLE_MODEL_ACCELERATION_MAX_MODS(Hash modelHash) { return Invoke<float>(0x53409B5163D5B846, V(modelHash)); }
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static float GET_FLYING_VEHICLE_MODEL_AGILITY(Hash modelHash) { return Invoke<float>(0xC6AD107DDC9054CC, V(modelHash)); }
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static float GET_BOAT_VEHICLE_MODEL_AGILITY(Hash modelHash) { return Invoke<float>(0x5AA3F878A178C4FC, V(modelHash)); }
		public static float GET_VEHICLE_CLASS_ESTIMATED_MAX_SPEED(int vehicleClass) { return Invoke<float>(0x00C09F246ABEDD82, V(vehicleClass)); }
		public static float GET_VEHICLE_CLASS_MAX_TRACTION(int vehicleClass) { return Invoke<float>(0xDBC86D85C5059461, V(vehicleClass)); }
		public static float GET_VEHICLE_CLASS_MAX_AGILITY(int vehicleClass) { return Invoke<float>(0x4F930AD022D6DE3B, V(vehicleClass)); }
		public static float GET_VEHICLE_CLASS_MAX_ACCELERATION(int vehicleClass) { return Invoke<float>(0x2F83E7E45D9EA7AE, V(vehicleClass)); }
		public static float GET_VEHICLE_CLASS_MAX_BRAKING(int vehicleClass) { return Invoke<float>(0x4BF54C16EC8FEC03, V(vehicleClass)); }
		public static int ADD_ROAD_NODE_SPEED_ZONE(float x, float y, float z, float radius, float speed, bool p5) { return Invoke<int>(0x2CE544C68FB812A0, V(x), V(y), V(z), V(radius), V(speed), V(p5)); }
		public static bool REMOVE_ROAD_NODE_SPEED_ZONE(int speedzone) { return Invoke<bool>(0x1033371FC8E842A7, V(speedzone)); }
		public static void OPEN_BOMB_BAY_DOORS(Vehicle vehicle) { Invoke(0x87E7F24270732CB1, V(vehicle)); }
		public static void CLOSE_BOMB_BAY_DOORS(Vehicle vehicle) { Invoke(0x3556041742A0DC74, V(vehicle)); }
		// Returns true when the bomb bay doors of this plane are open. False if they're closed.
		public static bool GET_ARE_BOMB_BAY_DOORS_OPEN(Vehicle aircraft) { return Invoke<bool>(0xD0917A423314BBA8, V(aircraft)); }
		// Possibly: Returns whether the searchlight (found on police vehicles) is toggled on.
		// 
		// @Author Nac
		public static bool IS_VEHICLE_SEARCHLIGHT_ON(Vehicle vehicle) { return Invoke<bool>(0xC0F97FCE55094987, V(vehicle)); }
		// Only works during nighttime.
		public static void SET_VEHICLE_SEARCHLIGHT(Vehicle heli, bool toggle, bool canBeUsedByAI) { Invoke(0x14E85C5EE7A4D542, V(heli), V(toggle), V(canBeUsedByAI)); }
		public static bool DOES_VEHICLE_HAVE_SEARCHLIGHT(Vehicle vehicle) { return Invoke<bool>(0x99015ED7DBEA5113, V(vehicle)); }
		// Check if a vehicle seat is accessible. If you park your vehicle near a wall and the ped cannot enter/exit this side, the return value toggles from true (not blocked) to false (blocked).
		// 
		// seatIndex  = -1 being the driver seat.
		// Use GET_VEHICLE_MAX_NUMBER_OF_PASSENGERS(vehicle) - 1 for last seat index.
		// side = only relevant for bikes/motorcycles to check if the left (false)/right (true) side is blocked.
		// onEnter = check if you can enter (true) or exit (false) a vehicle.
		public static bool IS_ENTRY_POINT_FOR_SEAT_CLEAR(Ped ped, Vehicle vehicle, int seatIndex, bool side, bool onEnter) { return Invoke<bool>(0x639431E895B9AA57, V(ped), V(vehicle), V(seatIndex), V(side), V(onEnter)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static Vector3 GET_ENTRY_POINT_POSITION(Vehicle vehicle, int doorId) { return Invoke<Vector3>(0xC0572928C0ABFDA3, V(vehicle), V(doorId)); }
		public static bool CAN_SHUFFLE_SEAT(Vehicle vehicle, int seatIndex) { return Invoke<bool>(0x30785D90C956BF35, V(vehicle), V(seatIndex)); }
		public static int GET_NUM_MOD_KITS(Vehicle vehicle) { return Invoke<int>(0x33F2E3FE70EAAE1D, V(vehicle)); }
		// Set modKit to 0 if you plan to call SET_VEHICLE_MOD. That's what the game does. Most body modifications through SET_VEHICLE_MOD will not take effect until this is set to 0.
		// 
		// Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
		public static void SET_VEHICLE_MOD_KIT(Vehicle vehicle, int modKit) { Invoke(0x1F2AA07F00B3217A, V(vehicle), V(modKit)); }
		public static int GET_VEHICLE_MOD_KIT(Vehicle vehicle) { return Invoke<int>(0x6325D1A044AE510D, V(vehicle)); }
		public static int GET_VEHICLE_MOD_KIT_TYPE(Vehicle vehicle) { return Invoke<int>(0xFC058F5121E54C32, V(vehicle)); }
		// Returns an int
		// 
		// Wheel Types:
		// 0: Sport
		// 1: Muscle
		// 2: Lowrider
		// 3: SUV
		// 4: Offroad
		// 5: Tuner
		// 6: Bike Wheels
		// 7: High End
		// 8: Benny's Originals
		// 9: Benny's Bespoke
		// 10: Racing
		// 11: Street
		// 12: Track
		// 
		// Tested in Los Santos Customs
		public static int GET_VEHICLE_WHEEL_TYPE(Vehicle vehicle) { return Invoke<int>(0xB3ED1BFB4BE636DC, V(vehicle)); }
		// 0: Sport
		// 1: Muscle
		// 2: Lowrider
		// 3: SUV
		// 4: Offroad
		// 5: Tuner
		// 6: Bike Wheels
		// 7: High End
		// 8: Benny's Originals
		// 9: Benny's Bespoke
		// 10: Racing
		// 11: Street
		// 12: Track
		public static void SET_VEHICLE_WHEEL_TYPE(Vehicle vehicle, int WheelType) { Invoke(0x487EB21CC7295BA1, V(vehicle), V(WheelType)); }
		// paintType:
		// 0: Normal
		// 1: Metallic
		// 2: Pearl
		// 3: Matte
		// 4: Metal
		// 5: Chrome
		// 6: Chameleon
		public static int GET_NUM_MOD_COLORS(int paintType, bool p1) { return Invoke<int>(0xA551BE18C11A476D, V(paintType), V(p1)); }
		// paintType:
		// 0: Normal
		// 1: Metallic
		// 2: Pearl
		// 3: Matte
		// 4: Metal
		// 5: Chrome
		// 6: Chameleon
		// 
		// color: number of the color.
		// 
		// p3 seems to always be 0.
		// 
		// Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
		public static void SET_VEHICLE_MOD_COLOR_1(Vehicle vehicle, int paintType, int color, int pearlescentColor) { Invoke(0x43FEB945EE7F85B8, V(vehicle), V(paintType), V(color), V(pearlescentColor)); }
		// Changes the secondary paint type and color
		// paintType:
		// 0: Normal
		// 1: Metallic
		// 2: Pearl
		// 3: Matte
		// 4: Metal
		// 5: Chrome
		// 6: Chameleon
		// 
		// color: number of the color
		// 
		// Full list of vehicle colors and vehicle plates by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
		public static void SET_VEHICLE_MOD_COLOR_2(Vehicle vehicle, int paintType, int color) { Invoke(0x816562BADFDEC83E, V(vehicle), V(paintType), V(color)); }
		public static void GET_VEHICLE_MOD_COLOR_1(Vehicle vehicle, int* paintType, int* color, int* pearlescentColor) { Invoke(0xE8D65CA700C9A693, V(vehicle), V(paintType), V(color), V(pearlescentColor)); }
		public static void GET_VEHICLE_MOD_COLOR_2(Vehicle vehicle, int* paintType, int* color) { Invoke(0x81592BE4E3878728, V(vehicle), V(paintType), V(color)); }
		// Returns a string which is the codename of the vehicle's currently selected primary color
		// 
		// p1 is always 0
		public static byte* GET_VEHICLE_MOD_COLOR_1_NAME(Vehicle vehicle, bool p1) { return PInvoke<byte>(0xB45085B721EFD38C, V(vehicle), V(p1)); }
		// Returns a string which is the codename of the vehicle's currently selected secondary color
		public static byte* GET_VEHICLE_MOD_COLOR_2_NAME(Vehicle vehicle) { return PInvoke<byte>(0x4967A516ED23A5A1, V(vehicle)); }
		public static bool HAVE_VEHICLE_MODS_STREAMED_IN(Vehicle vehicle) { return Invoke<bool>(0x9A83F5F9963775EF, V(vehicle)); }
		// Returns true for any mod part listed in GEN9_EXCLUSIVE_ASSETS_VEHICLES_FILE.
		public static bool IS_VEHICLE_MOD_GEN9_EXCLUSIVE(Vehicle vehicle, int modType, int modIndex) { return Invoke<bool>(0x00834EAC4A96E010, V(vehicle), V(modType), V(modIndex)); }
		// In b944, there are 50 (0 - 49) mod types.
		// 
		// Sets the vehicle mod.
		// The vehicle must have a mod kit first.
		// 
		// Any out of range ModIndex is stock.
		// 
		// #Mod Type
		// Spoilers - 0
		// Front Bumper - 1
		// Rear Bumper - 2
		// Side Skirt - 3
		// Exhaust - 4
		// Frame - 5
		// Grille - 6
		// Hood - 7
		// Fender - 8
		// Right Fender - 9
		// Roof - 10
		// Engine - 11
		// Brakes - 12
		// Transmission - 13
		// Horns - 14 (modIndex from 0 to 51)
		// Suspension - 15
		// Armor - 16
		// Front Wheels - 23
		// Back Wheels - 24 //only for motocycles
		// Plate holders - 25
		// Trim Design - 27
		// Ornaments - 28
		// Dial Design - 30
		// Steering Wheel - 33
		// Shifter Leavers - 34
		// Plaques - 35
		// Hydraulics - 38
		// Livery - 48
		// 
		// ENUMS: https://pastebin.com/QzEAn02v
		public static void SET_VEHICLE_MOD(Vehicle vehicle, int modType, int modIndex, bool customTires) { Invoke(0x6AF0636DDEDCB6DD, V(vehicle), V(modType), V(modIndex), V(customTires)); }
		// In b944, there are 50 (0 - 49) mod types. See SET_VEHICLE_MOD for the list.
		// 
		// Returns -1 if the vehicle mod is stock
		public static int GET_VEHICLE_MOD(Vehicle vehicle, int modType) { return Invoke<int>(0x772960298DA26FDB, V(vehicle), V(modType)); }
		// Only used for wheels(ModType = 23/24) Returns true if the wheels are custom wheels
		public static int GET_VEHICLE_MOD_VARIATION(Vehicle vehicle, int modType) { return Invoke<int>(0xB3924ECD70E095DC, V(vehicle), V(modType)); }
		// Returns how many possible mods a vehicle has for a given mod type
		public static int GET_NUM_VEHICLE_MODS(Vehicle vehicle, int modType) { return Invoke<int>(0xE38E9162A2500646, V(vehicle), V(modType)); }
		public static void REMOVE_VEHICLE_MOD(Vehicle vehicle, int modType) { Invoke(0x92D619E420858204, V(vehicle), V(modType)); }
		// Toggles:
		// UNK17 - 17
		// Turbo - 18
		// UNK19 - 19
		// Tire Smoke - 20
		// UNK21 - 21
		// Xenon Headlights - 22
		public static void TOGGLE_VEHICLE_MOD(Vehicle vehicle, int modType, bool toggle) { Invoke(0x2A1F4F37F95BAD08, V(vehicle), V(modType), V(toggle)); }
		public static bool IS_TOGGLE_MOD_ON(Vehicle vehicle, int modType) { return Invoke<bool>(0x84B233A8C8FC8AE7, V(vehicle), V(modType)); }
		// Returns the text label of a mod type for a given vehicle
		// 
		// Use GET_FILENAME_FOR_AUDIO_CONVERSATION to get the part name in the game's language
		public static byte* GET_MOD_TEXT_LABEL(Vehicle vehicle, int modType, int modValue) { return PInvoke<byte>(0x8935624F8C5592CC, V(vehicle), V(modType), V(modValue)); }
		// Returns the name for the type of vehicle mod(Armour, engine etc)
		// 
		public static byte* GET_MOD_SLOT_NAME(Vehicle vehicle, int modType) { return PInvoke<byte>(0x51F0FEB9F6AE98C0, V(vehicle), V(modType)); }
		// Returns the text label of the vehicle's liveryIndex, as specified by the liveryNames section of the vehicle's modkit data in the carcols file.
		// 
		// example 
		// 
		// int count = VEHICLE::GET_VEHICLE_LIVERY_COUNT(veh);
		// for (int i = 0; i < count; i++)  
		//   {
		//      string LiveryName = VEHICLE::GET_LIVERY_NAME(veh, i);
		//   }
		// 
		// 
		// this example will work fine to fetch all names 
		// for example for Sanchez we get 
		// 
		// SANC_LV1
		// SANC_LV2
		// SANC_LV3
		// SANC_LV4
		// SANC_LV5
		// 
		// 
		// Use GET_FILENAME_FOR_AUDIO_CONVERSATION, to get the localized livery name.
		// 
		// Full list of vehicle mod kits and mods by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleModKits.json
		public static byte* GET_LIVERY_NAME(Vehicle vehicle, int liveryIndex) { return PInvoke<byte>(0xB4C7A93837C91A1F, V(vehicle), V(liveryIndex)); }
		public static int GET_VEHICLE_MOD_MODIFIER_VALUE(Vehicle vehicle, int modType, int modIndex) { return Invoke<int>(0x90A38E9838E0A8C1, V(vehicle), V(modType), V(modIndex)); }
		// Can be used for IS_DLC_VEHICLE_MOD and GET_DLC_VEHICLE_MOD_LOCK_HASH
		public static Hash GET_VEHICLE_MOD_IDENTIFIER_HASH(Vehicle vehicle, int modType, int modIndex) { return Invoke<Hash>(0x4593CF82AA179706, V(vehicle), V(modType), V(modIndex)); }
		public static void PRELOAD_VEHICLE_MOD(Vehicle vehicle, int modType, int modIndex) { Invoke(0x758F49C24925568A, V(vehicle), V(modType), V(modIndex)); }
		public static bool HAS_PRELOAD_MODS_FINISHED(Vehicle vehicle) { return Invoke<bool>(0x06F43E5175EB6D96, V(vehicle)); }
		public static void RELEASE_PRELOAD_MODS(Vehicle vehicle) { Invoke(0x445D79F995508307, V(vehicle)); }
		// Sets the tire smoke's color of this vehicle.
		// 
		// vehicle: The vehicle that is the target of this method.
		// r: The red level in the RGB color code.
		// g: The green level in the RGB color code.
		// b: The blue level in the RGB color code.
		// 
		// Note: setting r,g,b to 0 will give the car the "Patriot" tire smoke.
		public static void SET_VEHICLE_TYRE_SMOKE_COLOR(Vehicle vehicle, int r, int g, int b) { Invoke(0xB5BA80F839791C0F, V(vehicle), V(r), V(g), V(b)); }
		public static void GET_VEHICLE_TYRE_SMOKE_COLOR(Vehicle vehicle, int* r, int* g, int* b) { Invoke(0xB635392A4938B3C3, V(vehicle), V(r), V(g), V(b)); }
		// enum WindowTints
		// {
		//  WINDOWTINT_NONE,
		//   WINDOWTINT_PURE_BLACK,
		//     WINDOWTINT_DARKSMOKE,
		//  WINDOWTINT_LIGHTSMOKE,
		//     WINDOWTINT_STOCK,
		//  WINDOWTINT_LIMO,
		//   WINDOWTINT_GREEN
		// };
		// Full list of all vehicle window tints by DurtyFree https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicleColors.json
		public static void SET_VEHICLE_WINDOW_TINT(Vehicle vehicle, int tint) { Invoke(0x57C51E6BAD752696, V(vehicle), V(tint)); }
		public static int GET_VEHICLE_WINDOW_TINT(Vehicle vehicle) { return Invoke<int>(0x0EE21293DAD47C95, V(vehicle)); }
		public static int GET_NUM_VEHICLE_WINDOW_TINTS() { return Invoke<int>(0x9D1224004B3A6707); }
		// What's this for? Primary and Secondary RGB have their own natives and this one doesn't seem specific.
		public static void GET_VEHICLE_COLOR(Vehicle vehicle, int* r, int* g, int* b) { Invoke(0xF3CC740D36221548, V(vehicle), V(r), V(g), V(b)); }
		// Some kind of flags.
		public static int GET_VEHICLE_COLOURS_WHICH_CAN_BE_SET(Vehicle vehicle) { return Invoke<int>(0xEEBFC7A7EFDC35B4, V(vehicle)); }
		// iVar3 = get_vehicle_cause_of_destruction(uLocal_248[iVar2]);
		// if (iVar3 == joaat("weapon_stickybomb"))
		// {
		// 	func_171(726);
		// 	iLocal_260 = 1;
		// }
		public static Hash GET_VEHICLE_CAUSE_OF_DESTRUCTION(Vehicle vehicle) { return Invoke<Hash>(0xE495D1EF4C91FD20, V(vehicle)); }
		// Used for helis.
		public static void OVERRIDE_PLANE_DAMAGE_THREHSOLD(Vehicle vehicle, float health) { Invoke(0x5EE5632F47AE9695, V(vehicle), V(health)); }
		public static void _SET_TRANSMISSION_REDUCED_GEAR_RATIO(Vehicle vehicle, bool toggle) { Invoke(0x337EF33DA3DDB990, V(vehicle), V(toggle)); }
		public static int _GET_VEHICLE_DESIRED_DRIVE_GEAR(Vehicle vehicle) { return Invoke<int>(0xFD8CE53356B5D745, V(vehicle)); }
		// From the driver's perspective, is the left headlight broken.
		public static bool GET_IS_LEFT_VEHICLE_HEADLIGHT_DAMAGED(Vehicle vehicle) { return Invoke<bool>(0x5EF77C9ADD3B11A3, V(vehicle)); }
		// From the driver's perspective, is the right headlight broken.
		public static bool GET_IS_RIGHT_VEHICLE_HEADLIGHT_DAMAGED(Vehicle vehicle) { return Invoke<bool>(0xA7ECB73355EB2F20, V(vehicle)); }
		// Returns true when both headlights are broken. This does not include extralights.
		public static bool GET_BOTH_VEHICLE_HEADLIGHTS_DAMAGED(Vehicle vehicle) { return Invoke<bool>(0xEC69ADF931AAE0C3, V(vehicle)); }
		public static void MODIFY_VEHICLE_TOP_SPEED(Vehicle vehicle, float value) { Invoke(0x93A3996368C94158, V(vehicle), V(value)); }
		// To reset the max speed, set the `speed` value to `0.0` or lower.
		public static void SET_VEHICLE_MAX_SPEED(Vehicle vehicle, float speed) { Invoke(0xBAA045B4E42F3C06, V(vehicle), V(speed)); }
		// Has something to do with trains. Always precedes SET_MISSION_TRAIN_AS_NO_LONGER_NEEDED.
		// May be true that it can be used with trains not sure, but not specifically for trains. Go find Xbox360 decompiled scripts and search for 'func_1333' in freemode.c it isn't used just for trains. Thanks for the info tho.
		public static void SET_VEHICLE_STAYS_FROZEN_WHEN_CLEANED_UP(Vehicle vehicle, bool toggle) { Invoke(0x1CF38D529D7441D9, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_ACT_AS_IF_HIGH_SPEED_FOR_FRAG_SMASHING(Vehicle vehicle, bool p1) { Invoke(0x1F9FB66F3A3842D2, V(vehicle), V(p1)); }
		// Sets some bit and float of vehicle. float is >= 0
		public static void SET_PEDS_CAN_FALL_OFF_THIS_VEHICLE_FROM_LARGE_FALL_DAMAGE(Vehicle vehicle, bool toggle, float p2) { Invoke(0x59C3757B3B7408E8, V(vehicle), V(toggle), V(p2)); }
		public static int ADD_VEHICLE_COMBAT_ANGLED_AVOIDANCE_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6) { return Invoke<int>(0x54B0F614960F4A5F, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6)); }
		public static void REMOVE_VEHICLE_COMBAT_AVOIDANCE_AREA(int p0) { Invoke(0xE30524E1871F481D, V(p0)); }
		public static bool IS_ANY_PED_RAPPELLING_FROM_HELI(Vehicle vehicle) { return Invoke<bool>(0x291E373D483E7EE7, V(vehicle)); }
		// <1.0 - Decreased torque
		// =1.0 - Default torque
		// >1.0 - Increased torque
		// 
		// Negative values will cause the vehicle to go backwards instead of forwards while accelerating.
		// 
		// value - is between 0.2 and 1.8 in the decompiled scripts. 
		// 
		// This needs to be called every frame to take effect.
		public static void SET_VEHICLE_CHEAT_POWER_INCREASE(Vehicle vehicle, float value) { Invoke(0xB59E4BD37AE292DB, V(vehicle), V(value)); }
		public static void SET_VEHICLE_INFLUENCES_WANTED_LEVEL(Any p0, bool p1) { Invoke(0x0AD9E8F87FF7C16F, V(p0), V(p1)); }
		// Sets the wanted state of this vehicle.
		public static void SET_VEHICLE_IS_WANTED(Vehicle vehicle, bool state) { Invoke(0xF7EC25A3EBEEC726, V(vehicle), V(state)); }
		// Sets the boat boom position for the `TR3` trailer.
		// Ratio value is between `0.0` and `1.0`, where `0.0` is 90 degrees to the left of the boat, and `1.0` is just slightly to the right/back of the boat.
		// To get the current boom position ratio, use GET_BOAT_BOOM_POSITION_RATIO
		public static void SWING_BOAT_BOOM_TO_RATIO(Vehicle vehicle, float ratio) { Invoke(0xF488C566413B4232, V(vehicle), V(ratio)); }
		// Same call as ALLOW_BOAT_BOOM_TO_ANIMATE
		public static void SWING_BOAT_BOOM_FREELY(Vehicle vehicle, bool toggle) { Invoke(0xC1F981A6F74F0C23, V(vehicle), V(toggle)); }
		public static void ALLOW_BOAT_BOOM_TO_ANIMATE(Vehicle vehicle, bool toggle) { Invoke(0x0F3B4D4E43177236, V(vehicle), V(toggle)); }
		public static float GET_BOAT_BOOM_POSITION_RATIO(Vehicle vehicle) { return Invoke<float>(0x6636C535F6CC2725, V(vehicle)); }
		public static void DISABLE_PLANE_AILERON(Vehicle vehicle, bool p1, bool p2) { Invoke(0x23428FC53C60919C, V(vehicle), V(p1), V(p2)); }
		// Returns true when in a vehicle, false whilst entering/exiting.
		public static bool GET_IS_VEHICLE_ENGINE_RUNNING(Vehicle vehicle) { return Invoke<bool>(0xAE31E7DF9B5B132E, V(vehicle)); }
		public static void SET_VEHICLE_USE_ALTERNATE_HANDLING(Vehicle vehicle, bool toggle) { Invoke(0x1D97D1E3A70A649F, V(vehicle), V(toggle)); }
		// Only works on bikes, both X and Y work in the -1 - 1 range.
		// 
		// X forces the bike to turn left or right (-1, 1)
		// Y forces the bike to lean to the left or to the right (-1, 1)
		// 
		// Example with X -1/Y 1
		// http://i.imgur.com/TgIuAPJ.jpg
		public static void SET_BIKE_ON_STAND(Vehicle vehicle, float x, float y) { Invoke(0x9CFA4896C3A53CBB, V(vehicle), V(x), V(y)); }
		public static void SET_VEHICLE_NOT_STEALABLE_AMBIENTLY(Vehicle vehicle, bool p1) { Invoke(0xAB04325045427AAE, V(vehicle), V(p1)); }
		public static void LOCK_DOORS_WHEN_NO_LONGER_NEEDED(Vehicle vehicle) { Invoke(0xCFD778E7904C255E, V(vehicle)); }
		public static void SET_LAST_DRIVEN_VEHICLE(Vehicle vehicle) { Invoke(0xACFB2463CC22BED2, V(vehicle)); }
		public static Vehicle GET_LAST_DRIVEN_VEHICLE() { return Invoke<Vehicle>(0xB2D06FAEDE65B577); }
		public static void CLEAR_LAST_DRIVEN_VEHICLE() { Invoke(0xE01903C47C7AC89E); }
		public static void SET_VEHICLE_HAS_BEEN_DRIVEN_FLAG(Vehicle vehicle, bool toggle) { Invoke(0x02398B627547189C, V(vehicle), V(toggle)); }
		public static void SET_TASK_VEHICLE_GOTO_PLANE_MIN_HEIGHT_ABOVE_TERRAIN(Vehicle plane, int height) { Invoke(0xB893215D8D4C015B, V(plane), V(height)); }
		public static void SET_VEHICLE_LOD_MULTIPLIER(Vehicle vehicle, float multiplier) { Invoke(0x93AE6A61BE015BF1, V(vehicle), V(multiplier)); }
		public static void SET_VEHICLE_CAN_SAVE_IN_GARAGE(Vehicle vehicle, bool toggle) { Invoke(0x428BACCDF5E26EAD, V(vehicle), V(toggle)); }
		// Also includes some "turnOffBones" when vehicle mods are installed.
		public static int GET_VEHICLE_NUM_OF_BROKEN_OFF_PARTS(Vehicle vehicle) { return Invoke<int>(0x42A4BEB35D372407, V(vehicle)); }
		public static int GET_VEHICLE_NUM_OF_BROKEN_LOOSEN_PARTS(Vehicle vehicle) { return Invoke<int>(0x2C8CBFE1EA5FC631, V(vehicle)); }
		public static void SET_FORCE_VEHICLE_ENGINE_DAMAGE_BY_BULLET(Any p0, bool p1) { Invoke(0x4D9D109F63FEE1D4, V(p0), V(p1)); }
		// Allows creation of CEventShockingPlaneFlyby, CEventShockingHelicopterOverhead, and other(?) Shocking events
		public static void SET_VEHICLE_GENERATES_ENGINE_SHOCKING_EVENTS(Vehicle vehicle, bool toggle) { Invoke(0x279D50DE5652D935, V(vehicle), V(toggle)); }
		// Copies sourceVehicle's damage (broken bumpers, broken lights, etc.) to targetVehicle.
		public static void COPY_VEHICLE_DAMAGES(Vehicle sourceVehicle, Vehicle targetVehicle) { Invoke(0xE44A982368A4AF23, V(sourceVehicle), V(targetVehicle)); }
		public static void DISABLE_VEHICLE_EXPLOSION_BREAK_OFF_PARTS() { Invoke(0xF25E02CB9C5818F8); }
		public static void SET_LIGHTS_CUTOFF_DISTANCE_TWEAK(float distance) { Invoke(0xBC3CCA5844452B06, V(distance)); }
		// Commands the driver of an armed vehicle (p0) to shoot its weapon at a target (p1). p3, p4 and p5 are the coordinates of the target. Example:
		// 
		// WEAPON::SET_CURRENT_PED_VEHICLE_WEAPON(pilot,MISC::GET_HASH_KEY("VEHICLE_WEAPON_PLANE_ROCKET"));                        VEHICLE::SET_VEHICLE_SHOOT_AT_TARGET(pilot, target, targPos.x, targPos.y, targPos.z);
		public static void SET_VEHICLE_SHOOT_AT_TARGET(Ped driver, Entity entity, float xTarget, float yTarget, float zTarget) { Invoke(0x74CD9A9327A282EA, V(driver), V(entity), V(xTarget), V(yTarget), V(zTarget)); }
		public static bool GET_VEHICLE_LOCK_ON_TARGET(Vehicle vehicle, Entity* entity) { return Invoke<bool>(0x8F5EBAB1F260CFCE, V(vehicle), V(entity)); }
		public static void SET_FORCE_HD_VEHICLE(Vehicle vehicle, bool toggle) { Invoke(0x97CE68CB032583F0, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_CUSTOM_PATH_NODE_STREAMING_RADIUS(Vehicle vehicle, float p1) { Invoke(0x182F266C2D9E2BEB, V(vehicle), V(p1)); }
		public static int GET_VEHICLE_PLATE_TYPE(Vehicle vehicle) { return Invoke<int>(0x9CCC9525BF2408E0, V(vehicle)); }
		// in script hook .net 
		// 
		// Vehicle v = ...;
		// Function.Call(Hash.TRACK_VEHICLE_VISIBILITY, v.Handle);
		public static void TRACK_VEHICLE_VISIBILITY(Vehicle vehicle) { Invoke(0x64473AEFDCF47DCA, V(vehicle)); }
		// must be called after TRACK_VEHICLE_VISIBILITY 
		// 
		// it's not instant so probabilly must pass an 'update' to see correct result.
		public static bool IS_VEHICLE_VISIBLE(Vehicle vehicle) { return Invoke<bool>(0xAA0A52D24FB98293, V(vehicle)); }
		public static void SET_VEHICLE_GRAVITY(Vehicle vehicle, bool toggle) { Invoke(0x89F149B6131E57DA, V(vehicle), V(toggle)); }
		// Enable/Disables global slipstream physics
		public static void SET_ENABLE_VEHICLE_SLIPSTREAMING(bool toggle) { Invoke(0xE6C0C80B8C867537, V(toggle)); }
		public static void SET_VEHICLE_SLIPSTREAMING_SHOULD_TIME_OUT(bool toggle) { Invoke(0xF051D9BFB6BA39C0, V(toggle)); }
		// Returns a float value between 0.0 and 3.0 related to its slipstream draft (boost/speedup).
		public static float GET_VEHICLE_CURRENT_TIME_IN_SLIP_STREAM(Vehicle vehicle) { return Invoke<float>(0x36492C2F0D134C56, V(vehicle)); }
		// Returns true if the vehicle is being slipstreamed by another vehicle
		public static bool IS_VEHICLE_PRODUCING_SLIP_STREAM(Vehicle vehicle) { return Invoke<bool>(0x48C633E94A8142A7, V(vehicle)); }
		public static void SET_VEHICLE_INACTIVE_DURING_PLAYBACK(Vehicle vehicle, bool toggle) { Invoke(0x06582AFF74894C75, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_ACTIVE_DURING_PLAYBACK(Vehicle vehicle, bool toggle) { Invoke(0xDFFCEF48E511DB48, V(vehicle), V(toggle)); }
		// Returns false if the vehicle has the FLAG_NO_RESPRAY flag set.
		public static bool IS_VEHICLE_SPRAYABLE(Vehicle vehicle) { return Invoke<bool>(0x8D474C8FAEFF6CDE, V(vehicle)); }
		public static void SET_VEHICLE_ENGINE_CAN_DEGRADE(Vehicle vehicle, bool toggle) { Invoke(0x983765856F2564F9, V(vehicle), V(toggle)); }
		// Adds some kind of shadow to the vehicle.
		// 
		// p1 and p2 use values from 0-255 and both make the shadow darker the lower the value is. -1 disables the effect.
		public static void DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES(Vehicle vehicle, int p1, int p2) { Invoke(0xF0E4BA16D1DB546C, V(vehicle), V(p1), V(p2)); }
		// Remove the weird shadow applied by DISABLE_VEHCILE_DYNAMIC_AMBIENT_SCALES.
		public static void ENABLE_VEHICLE_DYNAMIC_AMBIENT_SCALES(Vehicle vehicle) { Invoke(0xF87D9F2301F7D206, V(vehicle)); }
		public static bool IS_PLANE_LANDING_GEAR_INTACT(Vehicle plane) { return Invoke<bool>(0x4198AB0022B15F87, V(plane)); }
		public static bool ARE_PLANE_PROPELLERS_INTACT(Vehicle plane) { return Invoke<bool>(0x755D6D5267CBBD7E, V(plane)); }
		public static bool SET_PLANE_PROPELLER_HEALTH(Vehicle plane, float health) { return Invoke<bool>(0x4C815EB175086F84, V(plane), V(health)); }
		public static void SET_VEHICLE_CAN_DEFORM_WHEELS(Vehicle vehicle, bool toggle) { Invoke(0x0CDDA42F9E360CA6, V(vehicle), V(toggle)); }
		// Only returns true if the vehicle was marked as stolen with SET_VEHICLE_IS_STOLEN.
		public static bool IS_VEHICLE_STOLEN(Vehicle vehicle) { return Invoke<bool>(0x4AF9BD80EEBEB453, V(vehicle)); }
		public static void SET_VEHICLE_IS_STOLEN(Vehicle vehicle, bool isStolen) { Invoke(0x67B2C79AA7FF5738, V(vehicle), V(isStolen)); }
		// This native sets the turbulence multiplier. It only works for planes.
		// 0.0 = no turbulence at all.
		// 1.0 = heavy turbulence.
		// Works by just calling it once, does not need to be called every tick.
		public static void SET_PLANE_TURBULENCE_MULTIPLIER(Vehicle vehicle, float multiplier) { Invoke(0xAD2D28A1AFDFF131, V(vehicle), V(multiplier)); }
		public static bool ARE_WINGS_OF_PLANE_INTACT(Vehicle plane) { return Invoke<bool>(0x5991A01434CE9677, V(plane)); }
		// This native doesn't seem to do anything, might be a debug-only native.
		// 
		// Confirmed, it is a debug native.
		public static void ALLOW_AMBIENT_VEHICLES_TO_AVOID_ADVERSE_CONDITIONS(Vehicle vehicle) { Invoke(0xB264C4D2F2B0A78B, V(vehicle)); }
		public static void DETACH_VEHICLE_FROM_CARGOBOB(Vehicle vehicle, Vehicle cargobob) { Invoke(0x0E21D3DF1051399D, V(vehicle), V(cargobob)); }
		public static bool DETACH_VEHICLE_FROM_ANY_CARGOBOB(Vehicle vehicle) { return Invoke<bool>(0xADF7BE450512C12F, V(vehicle)); }
		public static bool DETACH_ENTITY_FROM_CARGOBOB(Vehicle cargobob, Entity entity) { return Invoke<bool>(0xAF03011701811146, V(cargobob), V(entity)); }
		public static bool IS_VEHICLE_ATTACHED_TO_CARGOBOB(Vehicle cargobob, Vehicle vehicleAttached) { return Invoke<bool>(0xD40148F22E81A1D9, V(cargobob), V(vehicleAttached)); }
		// Returns attached vehicle (Vehicle in parameter must be cargobob)
		public static Vehicle GET_VEHICLE_ATTACHED_TO_CARGOBOB(Vehicle cargobob) { return Invoke<Vehicle>(0x873B82D42AC2B9E5, V(cargobob)); }
		public static Entity GET_ENTITY_ATTACHED_TO_CARGOBOB(Any p0) { return Invoke<Entity>(0x99093F60746708CA, V(p0)); }
		public static void ATTACH_VEHICLE_TO_CARGOBOB(Vehicle cargobob, Vehicle vehicle, int p2, float x, float y, float z) { Invoke(0x4127F1D84E347769, V(cargobob), V(vehicle), V(p2), V(x), V(y), V(z)); }
		public static void ATTACH_ENTITY_TO_CARGOBOB(Any p0, Any p1, Any p2, Any p3, Any p4, Any p5) { Invoke(0xA1DD82F3CCF9A01E, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5)); }

		// Stops cargobob from being able to detach the attached vehicle.
		public static void SET_CARGOBOB_FORCE_DONT_DETACH_VEHICLE(Vehicle cargobob, bool toggle) { Invoke(0x571FEB383F629926, V(cargobob), V(toggle)); }
		public static void SET_CARGOBOB_EXCLUDE_FROM_PICKUP_ENTITY(Any p0, Any p1) { Invoke(0x1F34B0626C594380, V(p0), V(p1)); }
		public static bool CAN_CARGOBOB_PICK_UP_ENTITY(Any p0, Any p1) { return Invoke<bool>(0x2C1D8B3B19E517CC, V(p0), V(p1)); }
		// Gets the position of the cargobob hook, in world coords.
		public static Vector3 GET_ATTACHED_PICK_UP_HOOK_POSITION(Vehicle cargobob) { return Invoke<Vector3>(0xCBDB9B923CACC92D, V(cargobob)); }
		// Returns true only when the hook is active, will return false if the magnet is active
		public static bool DOES_CARGOBOB_HAVE_PICK_UP_ROPE(Vehicle cargobob) { return Invoke<bool>(0x1821D91AD4B56108, V(cargobob)); }
		// Drops the Hook/Magnet on a cargobob
		// 
		// state
		// enum eCargobobHook
		// {
		//   CARGOBOB_HOOK = 0,
		//     CARGOBOB_MAGNET = 1,
		// };
		public static void CREATE_PICK_UP_ROPE_FOR_CARGOBOB(Vehicle cargobob, int state) { Invoke(0x7BEB0C7A235F6F3B, V(cargobob), V(state)); }
		// Retracts the hook on the cargobob.
		// 
		// Note: after you retract it the natives for dropping the hook no longer work
		public static void REMOVE_PICK_UP_ROPE_FOR_CARGOBOB(Vehicle cargobob) { Invoke(0x9768CF648F54C804, V(cargobob)); }
		// min: 1.9f, max: 100.0f
		public static void SET_PICKUP_ROPE_LENGTH_FOR_CARGOBOB(Vehicle cargobob, float length1, float length2, bool p3) { Invoke(0x877C1EAEAC531023, V(cargobob), V(length1), V(length2), V(p3)); }
		public static void SET_PICKUP_ROPE_LENGTH_WITHOUT_CREATING_ROPE_FOR_CARGOBOB(Any p0, Any p1, Any p2) { Invoke(0xC0ED6438E6D39BA8, V(p0), V(p1), V(p2)); }
		public static void SET_CARGOBOB_PICKUP_ROPE_DAMPING_MULTIPLIER(Any p0, Any p1) { Invoke(0xCF1182F682F65307, V(p0), V(p1)); }
		public static void SET_CARGOBOB_PICKUP_ROPE_TYPE(Any p0, Any p1) { Invoke(0x0D5F65A8F4EBDAB5, V(p0), V(p1)); }
		// Returns true only when the magnet is active, will return false if the hook is active
		public static bool DOES_CARGOBOB_HAVE_PICKUP_MAGNET(Vehicle cargobob) { return Invoke<bool>(0x6E08BF5B3722BAC9, V(cargobob)); }
		// Won't attract or magnetize to any helicopters or planes of course, but that's common sense.
		public static void SET_CARGOBOB_PICKUP_MAGNET_ACTIVE(Vehicle cargobob, bool isActive) { Invoke(0x9A665550F8DA349B, V(cargobob), V(isActive)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_STRENGTH(Vehicle cargobob, float strength) { Invoke(0xBCBFCD9D1DAC19E2, V(cargobob), V(strength)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_FALLOFF(Vehicle cargobob, float p1) { Invoke(0xA17BAD153B51547E, V(cargobob), V(p1)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_REDUCED_STRENGTH(Vehicle cargobob, float p1) { Invoke(0x66979ACF5102FD2F, V(cargobob), V(p1)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_REDUCED_FALLOFF(Vehicle cargobob, float p1) { Invoke(0x6D8EAC07506291FB, V(cargobob), V(p1)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_PULL_STRENGTH(Vehicle cargobob, float p1) { Invoke(0xED8286F71A819BAA, V(cargobob), V(p1)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_PULL_ROPE_LENGTH(Vehicle vehicle, float p1) { Invoke(0x685D5561680D088B, V(vehicle), V(p1)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_SET_TARGETED_MODE(Vehicle vehicle, Vehicle cargobob) { Invoke(0xE301BD63E9E13CF0, V(vehicle), V(cargobob)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_SET_AMBIENT_MODE(Vehicle vehicle, bool p1, bool p2) { Invoke(0x9BDDC73CC6A115D4, V(vehicle), V(p1), V(p2)); }
		public static void SET_CARGOBOB_PICKUP_MAGNET_ENSURE_PICKUP_ENTITY_UPRIGHT(Vehicle vehicle, bool p1) { Invoke(0x56EB5E94318D3FB6, V(vehicle), V(p1)); }
		public static bool DOES_VEHICLE_HAVE_WEAPONS(Vehicle vehicle) { return Invoke<bool>(0x25ECB9F8017D98E0, V(vehicle)); }
		public static void SET_VEHICLE_WILL_TELL_OTHERS_TO_HURRY(Vehicle vehicle, bool p1) { Invoke(0x2C4A1590ABF43E8B, V(vehicle), V(p1)); }
		// Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void DISABLE_VEHICLE_WEAPON(bool disabled, Hash weaponHash, Vehicle vehicle, Ped owner) { Invoke(0xF4FC6A6F67D8D856, V(disabled), V(weaponHash), V(vehicle), V(owner)); }
		// Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool IS_VEHICLE_WEAPON_DISABLED(Hash weaponHash, Vehicle vehicle, Ped owner) { return Invoke<bool>(0x563B65A643ED072E, V(weaponHash), V(vehicle), V(owner)); }
		public static void SET_VEHICLE_USED_FOR_PILOT_SCHOOL(Vehicle vehicle, bool toggle) { Invoke(0xE05DD0E9707003A3, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_ACTIVE_FOR_PED_NAVIGATION(Vehicle vehicle, bool toggle) { Invoke(0x21115BCD6E44656A, V(vehicle), V(toggle)); }
		// Returns an int
		// 
		// Vehicle Classes:
		// 0: Compacts
		// 1: Sedans
		// 2: SUVs
		// 3: Coupes
		// 4: Muscle
		// 5: Sports Classics
		// 6: Sports
		// 7: Super
		// 8: Motorcycles
		// 9: Off-road
		// 10: Industrial
		// 11: Utility
		// 12: Vans
		// 13: Cycles
		// 14: Boats
		// 15: Helicopters
		// 16: Planes
		// 17: Service
		// 18: Emergency
		// 19: Military
		// 20: Commercial
		// 21: Trains
		// 
		// char buffer[128];
		// std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS(vehicle));
		// 
		// string className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
		public static int GET_VEHICLE_CLASS(Vehicle vehicle) { return Invoke<int>(0x29439776AAA00A62, V(vehicle)); }
		// char buffer[128];
		// std::sprintf(buffer, "VEH_CLASS_%i", VEHICLE::GET_VEHICLE_CLASS_FROM_NAME (hash));
		// 
		// string className = HUD::GET_FILENAME_FOR_AUDIO_CONVERSATION(buffer);
		// 
		// Full list of vehicles by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/vehicles.json
		public static int GET_VEHICLE_CLASS_FROM_NAME(Hash modelHash) { return Invoke<int>(0xDEDF1C8BD47C2200, V(modelHash)); }
		public static void SET_PLAYERS_LAST_VEHICLE(Vehicle vehicle) { Invoke(0xBCDF8BAF56C87B6A, V(vehicle)); }
		public static void SET_VEHICLE_CAN_BE_USED_BY_FLEEING_PEDS(Vehicle vehicle, bool toggle) { Invoke(0x300504B23BD3B711, V(vehicle), V(toggle)); }
		public static void SET_AIRCRAFT_PILOT_SKILL_NOISE_SCALAR(Vehicle vehicle, float p1) { Invoke(0xE5810AC70602F2F5, V(vehicle), V(p1)); }
		// Money pickups are created around cars when they explode. Only works when the vehicle model is a car. A single pickup is between 1 and 18 dollars in size. All car models seem to give the same amount of money.
		// 
		// youtu.be/3arlUxzHl5Y 
		// i.imgur.com/WrNpYFs.jpg
		public static void SET_VEHICLE_DROPS_MONEY_WHEN_BLOWN_UP(Vehicle vehicle, bool toggle) { Invoke(0x068F64F2470F9656, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_KEEP_ENGINE_ON_WHEN_ABANDONED(Vehicle vehicle, bool toggle) { Invoke(0xB8FBC8B1330CA9B4, V(vehicle), V(toggle)); }
		// Seems to copy some values in vehicle
		public static void SET_VEHICLE_IMPATIENCE_TIMER(Vehicle vehicle, Any p1) { Invoke(0x6A973569BA094650, V(vehicle), V(p1)); }
		// Use the "AIHandling" string found in handling.meta
		public static void SET_VEHICLE_HANDLING_OVERRIDE(Vehicle vehicle, Hash hash) { Invoke(0x10655FAB9915623D, V(vehicle), V(hash)); }
		// Max value is 32767
		public static void SET_VEHICLE_EXTENDED_REMOVAL_RANGE(Vehicle vehicle, int range) { Invoke(0x79DF7E806202CE01, V(vehicle), V(range)); }
		public static void SET_VEHICLE_STEERING_BIAS_SCALAR(Any p0, float p1) { Invoke(0x9007A2F21DC108D4, V(p0), V(p1)); }
		// value between 0.0 and 1.0
		public static void SET_HELI_CONTROL_LAGGING_RATE_SCALAR(Vehicle helicopter, float multiplier) { Invoke(0x6E0859B530A365CC, V(helicopter), V(multiplier)); }
		// Seems to be related to the metal parts, not tyres (like i was expecting lol)
		public static void SET_VEHICLE_FRICTION_OVERRIDE(Vehicle vehicle, float friction) { Invoke(0x1837AF7C627009BA, V(vehicle), V(friction)); }
		public static void SET_VEHICLE_WHEELS_CAN_BREAK_OFF_WHEN_BLOW_UP(Vehicle vehicle, bool toggle) { Invoke(0xA37B9A517B133349, V(vehicle), V(toggle)); }
		public static bool ARE_PLANE_CONTROL_PANELS_INTACT(Vehicle vehicle, bool p1) { return Invoke<bool>(0xF78F94D60248C737, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_CEILING_HEIGHT(Vehicle vehicle, float height) { Invoke(0xA46413066687A328, V(vehicle), V(height)); }
		public static void SET_VEHICLE_NO_EXPLOSION_DAMAGE_FROM_DRIVER(Vehicle vehicle, bool toggle) { Invoke(0x5E569EC46EC21CAE, V(vehicle), V(toggle)); }
		public static void CLEAR_VEHICLE_ROUTE_HISTORY(Vehicle vehicle) { Invoke(0x6D6AF961B72728AE, V(vehicle)); }
		public static Vehicle DOES_VEHICLE_EXIST_WITH_DECORATOR(string decorator) { return Invoke<Vehicle>(0x956B409B984D9BF7, V(decorator)); }
		// Used to be incorrectly named SET_VEHICLE_EXCLUSIVE_DRIVER
		// Toggles a flag related to SET_VEHICLE_EXCLUSIVE_DRIVER, however, doesn't enable that feature (or trigger script events related to it).
		public static void SET_VEHICLE_AI_CAN_USE_EXCLUSIVE_SEATS(Vehicle vehicle, bool toggle) { Invoke(0x41062318F23ED854, V(vehicle), V(toggle)); }
		// index: 0 - 1
		// 
		// Used to be incorrectly named _SET_VEHICLE_EXCLUSIVE_DRIVER_2
		public static void SET_VEHICLE_EXCLUSIVE_DRIVER(Vehicle vehicle, Ped ped, int index) { Invoke(0xB5C51B5502E85E83, V(vehicle), V(ped), V(index)); }
		public static bool IS_PED_EXCLUSIVE_DRIVER_OF_VEHICLE(Ped ped, Vehicle vehicle, int* outIndex) { return Invoke<bool>(0xB09D25E77C33EB3F, V(ped), V(vehicle), V(outIndex)); }
		public static void DISABLE_INDIVIDUAL_PLANE_PROPELLER(Vehicle vehicle, int propeller) { Invoke(0x500873A45724C863, V(vehicle), V(propeller)); }
		public static void _ENABLE_INDIVIDUAL_PLANE_PROPELLER(Vehicle vehicle, int propeller) { Invoke(0xDC05D2777F855F44, V(vehicle), V(propeller)); }
		public static void SET_VEHICLE_FORCE_AFTERBURNER(Vehicle vehicle, bool toggle) { Invoke(0xB055A34527CB8FD7, V(vehicle), V(toggle)); }
		// R* used it to "remove" vehicle windows when "nightshark" had some mod, which adding some kind of armored windows. When enabled, you can't break vehicles glass. All your bullets wiil shoot through glass. You also will not able to break the glass with any other way (hitting and etc)
		public static void SET_DONT_PROCESS_VEHICLE_GLASS(Vehicle vehicle, bool toggle) { Invoke(0x1087BC8EC540DAEB, V(vehicle), V(toggle)); }
		public static void SET_DISABLE_WANTED_CONES_RESPONSE(Vehicle vehicle, bool toggle) { Invoke(0x4AD280EB48B2D8E6, V(vehicle), V(toggle)); }
		public static void SET_USE_DESIRED_Z_CRUISE_SPEED_FOR_LANDING(Vehicle vehicle, bool toggle) { Invoke(0xB68CFAF83A02768D, V(vehicle), V(toggle)); }
		public static void SET_ARRIVE_DISTANCE_OVERRIDE_FOR_VEHICLE_PERSUIT_ATTACK(Vehicle vehicle, float p1) { Invoke(0x0205F5365292D2EB, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_READY_FOR_CLEANUP(Any p0) { Invoke(0xCF9159024555488C, V(p0)); }
		// Toggles to render distant vehicles. They may not be vehicles but images to look like vehicles.
		public static void SET_DISTANT_CARS_ENABLED(bool toggle) { Invoke(0xF796359A959DF65D, V(toggle)); }
		// Sets the color of the neon lights of the specified vehicle.
		public static void SET_VEHICLE_NEON_COLOUR(Vehicle vehicle, int r, int g, int b) { Invoke(0x8E0A582209A62695, V(vehicle), V(r), V(g), V(b)); }
		// Index references CVehicleModelColor
		public static void SET_VEHICLE_NEON_INDEX_COLOUR(Vehicle vehicle, int index) { Invoke(0xB93B2867F7B479D1, V(vehicle), V(index)); }
		// Gets the color of the neon lights of the specified vehicle.
		// 
		// See SET_VEHICLE_NEON_COLOUR (0x8E0A582209A62695) for more information
		public static void GET_VEHICLE_NEON_COLOUR(Vehicle vehicle, int* r, int* g, int* b) { Invoke(0x7619EEE8C886757F, V(vehicle), V(r), V(g), V(b)); }
		// Sets the neon lights of the specified vehicle on/off.
		// 
		// Indices:
		// 0 = Left
		// 1 = Right
		// 2 = Front
		// 3 = Back
		public static void SET_VEHICLE_NEON_ENABLED(Vehicle vehicle, int index, bool toggle) { Invoke(0x2AA720E4287BF269, V(vehicle), V(index), V(toggle)); }
		// indices:
		// 0 = Left
		// 1 = Right
		// 2 = Front
		// 3 = Back
		public static bool GET_VEHICLE_NEON_ENABLED(Vehicle vehicle, int index) { return Invoke<bool>(0x8C4B92553E4766A5, V(vehicle), V(index)); }
		public static void SET_AMBIENT_VEHICLE_NEON_ENABLED(bool p0) { Invoke(0x35E0654F4BAD7971, V(p0)); }
		public static void SUPPRESS_NEONS_ON_VEHICLE(Vehicle vehicle, bool toggle) { Invoke(0x83F813570FF519DE, V(vehicle), V(toggle)); }
		public static void SET_DISABLE_SUPERDUMMY(Vehicle vehicle, bool p1) { Invoke(0xB088E9A47AE6EDD5, V(vehicle), V(p1)); }
		public static void REQUEST_VEHICLE_DIAL(Vehicle vehicle) { Invoke(0xDBA3C090E3D74690, V(vehicle)); }
		// Seems related to vehicle health, like the one in IV.
		// Max 1000, min 0.
		// Vehicle does not necessarily explode or become undrivable at 0.
		public static float GET_VEHICLE_BODY_HEALTH(Vehicle vehicle) { return Invoke<float>(0xF271147EB7B40F12, V(vehicle)); }
		// p2 often set to 1000.0 in the decompiled scripts.
		public static void SET_VEHICLE_BODY_HEALTH(Vehicle vehicle, float value) { Invoke(0xB77D05AC8C78AADB, V(vehicle), V(value)); }
		// Outputs 2 Vector3's.
		// Scripts check if out2.x - out1.x > someshit.x
		// Could be suspension related, as in max suspension height and min suspension height, considering the natives location.
		public static void GET_VEHICLE_SIZE(Vehicle vehicle, Vector3* out1, Vector3* out2) { Invoke(0xDF7E3EEB29642C38, V(vehicle), V(out1), V(out2)); }
		// Gets the height of the vehicle's suspension.
		// The higher the value the lower the suspension. Each 0.002 corresponds with one more level lowered.
		// 0.000 is the stock suspension.
		// 0.008 is Ultra Suspension.
		public static float GET_FAKE_SUSPENSION_LOWERING_AMOUNT(Vehicle vehicle) { return Invoke<float>(0x53952FD2BAA19F17, V(vehicle)); }
		public static void SET_CAR_HIGH_SPEED_BUMP_SEVERITY_MULTIPLIER(float multiplier) { Invoke(0x84FD40F56075E816, V(multiplier)); }
		public static int GET_NUMBER_OF_VEHICLE_DOORS(Vehicle vehicle) { return Invoke<int>(0x92922A607497B14D, V(vehicle)); }
		// If false, lowers hydraulics (if raised) and disables hydraulics controls. If true, raises hydraulics and enables hydraulics controls.
		// 
		// Only used once in each carmod script, on a car that does not have hydraulics to begin with.
		public static void SET_HYDRAULICS_CONTROL(Vehicle vehicle, bool toggle) { Invoke(0x28B18377EB6E25F6, V(vehicle), V(toggle)); }
		public static void SET_CAN_ADJUST_GROUND_CLEARANCE(Vehicle vehicle, bool p1) { Invoke(0xA7DCDF4DED40A8F4, V(vehicle), V(p1)); }
		// 0 min 100 max
		// starts at 100
		// Seams to have health zones
		// Front of vehicle when damaged goes from 100-50 and stops at 50.
		// Rear can be damaged from 100-0
		// Only tested with two cars.
		// 
		// any idea how this differs from the first one?
		// 
		// --
		// May return the vehicle health on a scale of 0.0 - 100.0 (needs to be confirmed)
		// 
		// example:
		// 
		// v_F = ENTITY::GET_ENTITY_MODEL(v_3);
		// if (((v_F == ${tanker}) || (v_F == ${armytanker})) || (v_F == ${tanker2})) {
		//     if (VEHICLE::GET_VEHICLE_HEALTH_PERCENTAGE(v_3) <= 1.0) {
		//         NETWORK::NETWORK_EXPLODE_VEHICLE(v_3, 1, 1, -1);
		//     }
		// }
		public static float GET_VEHICLE_HEALTH_PERCENTAGE(Vehicle vehicle, float maxEngineHealth, float maxPetrolTankHealth, float maxBodyHealth, float maxMainRotorHealth, float maxTailRotorHealth, float maxUnkHealth) { return Invoke<float>(0xB8EF61207C2393A9, V(vehicle), V(maxEngineHealth), V(maxPetrolTankHealth), V(maxBodyHealth), V(maxMainRotorHealth), V(maxTailRotorHealth), V(maxUnkHealth)); }
		public static bool GET_VEHICLE_IS_MERCENARY(Vehicle vehicle) { return Invoke<bool>(0xD4C4642CB7F50B5D, V(vehicle)); }
		public static void SET_VEHICLE_BROKEN_PARTS_DONT_AFFECT_AI_HANDLING(Vehicle vehicle, bool p1) { Invoke(0xC361AA040D6637A8, V(vehicle), V(p1)); }
		public static void SET_VEHICLE_KERS_ALLOWED(Vehicle vehicle, bool toggle) { Invoke(0x99C82F8A139F3E4E, V(vehicle), V(toggle)); }
		// Returns true if the vehicle has a HF_HAS_KERS (strHandlingFlags 0x4) handing flag set, for instance the lectro/vindicator bikes or the open wheelers.
		public static bool GET_VEHICLE_HAS_KERS(Vehicle vehicle) { return Invoke<bool>(0x50634E348C8D44EF, V(vehicle)); }

		public static void SET_PLANE_RESIST_TO_EXPLOSION(Vehicle vehicle, bool toggle) { Invoke(0xE16142B94664DEFD, V(vehicle), V(toggle)); }
		public static void SET_HELI_RESIST_TO_EXPLOSION(Vehicle vehicle, bool toggle) { Invoke(0x8074CC1886802912, V(vehicle), V(toggle)); }
		public static void SET_DISABLE_BMX_EXTRA_TRICK_FORCES(Any p0) { Invoke(0x26D99D5A82FD18E8, V(p0)); }
		// Works only on vehicles that support hydraulics.
		public static void SET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(Vehicle vehicle, int wheelId, float value) { Invoke(0x84EA99C62CB3EF0C, V(vehicle), V(wheelId), V(value)); }
		public static float GET_HYDRAULIC_SUSPENSION_RAISE_FACTOR(Vehicle vehicle, int wheelId) { return Invoke<float>(0x0BB5CBDDD0F25AE3, V(vehicle), V(wheelId)); }
		public static void SET_CAN_USE_HYDRAULICS(Vehicle vehicle, bool toggle) { Invoke(0x1201E8A3290A3B98, V(vehicle), V(toggle)); }
		// States:
		// 4 = raise
		// 5 = lower
		// 6 = jump
		public static void SET_HYDRAULIC_VEHICLE_STATE(Vehicle vehicle, int state) { Invoke(0x8EA86DF356801C7D, V(vehicle), V(state)); }
		// Sets vehicle wheel hydraulic states transition. Known states:
		// 0 - reset
		// 1 - raise wheel (uses value arg, works just like _SET_VEHICLE_HYDRAULIC_WHEEL_VALUE)
		// 2 - jump using wheel
		public static void SET_HYDRAULIC_WHEEL_STATE(Vehicle vehicle, int wheelId, int state, float value, Any p4) { Invoke(0xC24075310A8B9CD1, V(vehicle), V(wheelId), V(state), V(value), V(p4)); }
		public static bool HAS_VEHICLE_PETROLTANK_SET_ON_FIRE_BY_ENTITY(Any p0, Any p1) { return Invoke<bool>(0x5BA68A0840D546AC, V(p0), V(p1)); }
		public static void CLEAR_VEHICLE_PETROLTANK_FIRE_CULPRIT(Vehicle vehicle) { Invoke(0x4419966C9936071A, V(vehicle)); }
		// Controls how fast bobbleheads and tsurikawas move on each axis.
		// 
		// p2 is probably z, but changing that value didn't seem to have a noticeable effect.
		public static void SET_VEHICLE_BOBBLEHEAD_VELOCITY(float x, float y, float p2) { Invoke(0x870B8B7A766615C8, V(x), V(y), V(p2)); }
		public static bool GET_VEHICLE_IS_DUMMY(Any p0) { return Invoke<bool>(0x8533CAFDE1F0F336, V(p0)); }
		public static bool SET_VEHICLE_DAMAGE_SCALE(Vehicle vehicle, float p1) { return Invoke<bool>(0x4E20D2A627011E8E, V(vehicle), V(p1)); }
		// Does not actually return anything.
		public static Any _SET_VEHICLE_EXPLOSIVE_DAMAGE_SCALE(Vehicle vehicle, float scale) { return Invoke<Any>(0x84D7FFD223CAAFFD, V(vehicle), V(scale)); }
		public static bool SET_VEHICLE_WEAPON_DAMAGE_SCALE(Vehicle vehicle, float multiplier) { return Invoke<bool>(0x45A561A9421AB6AD, V(vehicle), V(multiplier)); }
		public static bool SET_DISABLE_DAMAGE_WITH_PICKED_UP_ENTITY(Any p0, Any p1) { return Invoke<bool>(0xD4196117AF7BB974, V(p0), V(p1)); }
		public static void SET_VEHICLE_USES_MP_PLAYER_DAMAGE_MULTIPLIER(Any p0, Any p1) { Invoke(0xBB2333BB87DDD87F, V(p0), V(p1)); }
		// When enabled, the player won't fall off the bike when landing from large heights.
		public static void SET_BIKE_EASY_TO_LAND(Vehicle vehicle, bool toggle) { Invoke(0x73561D4425A021A2, V(vehicle), V(toggle)); }
		// Inverts vehicle's controls. So INPUT_VEH_ACCELERATE will be INPUT_VEH_BRAKE and vise versa (same for A/D controls)
		// Doesn't work for planes/helis.
		public static void SET_INVERT_VEHICLE_CONTROLS(Vehicle vehicle, bool state) { Invoke(0x5B91B229243351A8, V(vehicle), V(state)); }
		// Disables the screen effects and sound effects when driving over a speed boost pad.
		public static void SET_SPEED_BOOST_EFFECT_DISABLED(bool disabled) { Invoke(0x7BBE7FF626A591FE, V(disabled)); }
		// Disables the screen effects and sound effects when driving over a slowdown pad.
		public static void SET_SLOW_DOWN_EFFECT_DISABLED(bool disabled) { Invoke(0x65B080555EA48149, V(disabled)); }
		public static void SET_FORMATION_LEADER(Vehicle vehicle, float x, float y, float z, float p4) { Invoke(0x428AD3E26C8D9EB0, V(vehicle), V(x), V(y), V(z), V(p4)); }
		// Resets the effect of SET_FORMATION_LEADER
		public static void RESET_FORMATION_LEADER() { Invoke(0xE2F53F172B45EDE1); }
		public static bool GET_IS_BOAT_CAPSIZED(Vehicle vehicle) { return Invoke<bool>(0xBA91D045575699AD, V(vehicle)); }
		public static void SET_ALLOW_RAMMING_SOOP_OR_RAMP(Any p0, Any p1) { Invoke(0x80E3357FDEF45C21, V(p0), V(p1)); }
		public static void SET_SCRIPT_RAMP_IMPULSE_SCALE(Vehicle vehicle, float impulseScale) { Invoke(0xEFC13B1CE30D755D, V(vehicle), V(impulseScale)); }
		// doorId: see SET_VEHICLE_DOOR_SHUT
		public static bool GET_IS_DOOR_VALID(Vehicle vehicle, int doorId) { return Invoke<bool>(0x645F4B6E8499F632, V(vehicle), V(doorId)); }
		public static void SET_SCRIPT_ROCKET_BOOST_RECHARGE_TIME(Vehicle vehicle, float seconds) { Invoke(0xE00F2AB100B76E89, V(vehicle), V(seconds)); }
		public static bool GET_HAS_ROCKET_BOOST(Vehicle vehicle) { return Invoke<bool>(0x36D782F68B309BDA, V(vehicle)); }
		public static bool IS_ROCKET_BOOST_ACTIVE(Vehicle vehicle) { return Invoke<bool>(0x3D34E80EED4AE3BE, V(vehicle)); }
		public static void SET_ROCKET_BOOST_ACTIVE(Vehicle vehicle, bool active) { Invoke(0x81E1552E35DC3839, V(vehicle), V(active)); }
		public static bool GET_HAS_RETRACTABLE_WHEELS(Vehicle vehicle) { return Invoke<bool>(0xDCA174A42133F08C, V(vehicle)); }
		public static bool GET_IS_WHEELS_RETRACTED(Vehicle vehicle) { return Invoke<bool>(0x1DA0DA9CB3F0C8BF, V(vehicle)); }
		public static void SET_WHEELS_EXTENDED_INSTANTLY(Vehicle vehicle) { Invoke(0xF660602546D27BA8, V(vehicle)); }
		public static void SET_WHEELS_RETRACTED_INSTANTLY(Vehicle vehicle) { Invoke(0x5335BE58C083E74E, V(vehicle)); }
		// Returns true if the vehicle has the FLAG_JUMPING_CAR flag set.
		public static bool GET_CAR_HAS_JUMP(Vehicle vehicle) { return Invoke<bool>(0x9078C0C5EF8C19E9, V(vehicle)); }
		// Allows vehicles with the FLAG_JUMPING_CAR flag to jump higher (i.e. Ruiner 2000).
		public static void SET_USE_HIGHER_CAR_JUMP(Vehicle vehicle, bool toggle) { Invoke(0xF06A16CA55D138D8, V(vehicle), V(toggle)); }
		public static void SET_CLEAR_FREEZE_WAITING_ON_COLLISION_ONCE_PLAYER_ENTERS(Vehicle vehicle, bool toggle) { Invoke(0xB2E0C0D6922D31F2, V(vehicle), V(toggle)); }
		// Set vehicle's primary mounted weapon 2 ammo. For example, use it on APC.
		// For example, you can "remove" any vehicle weapon from any vehicle.
		// ammoAmount -1 = infinite ammo (default value for any spawned vehicle tho)
		public static void SET_VEHICLE_WEAPON_RESTRICTED_AMMO(Vehicle vehicle, int weaponIndex, int capacity) { Invoke(0x44CD1F493DB2A0A6, V(vehicle), V(weaponIndex), V(capacity)); }
		public static int GET_VEHICLE_WEAPON_RESTRICTED_AMMO(Vehicle vehicle, int weaponIndex) { return Invoke<int>(0x8181CE2F25CB9BB7, V(vehicle), V(weaponIndex)); }
		public static bool GET_VEHICLE_HAS_PARACHUTE(Vehicle vehicle) { return Invoke<bool>(0xBC9CFF381338CB4F, V(vehicle)); }
		public static bool GET_VEHICLE_CAN_DEPLOY_PARACHUTE(Vehicle vehicle) { return Invoke<bool>(0xA916396DF4154EE3, V(vehicle)); }
		public static void VEHICLE_START_PARACHUTING(Vehicle vehicle, bool active) { Invoke(0x0BFFB028B3DD0A97, V(vehicle), V(active)); }
		public static bool IS_VEHICLE_PARACHUTE_DEPLOYED(Vehicle vehicle) { return Invoke<bool>(0x3DE51E9C80B116CF, V(vehicle)); }
		public static void VEHICLE_SET_RAMP_AND_RAMMING_CARS_TAKE_DAMAGE(Vehicle vehicle, bool toggle) { Invoke(0x28D034A93FE31BF5, V(vehicle), V(toggle)); }
		public static void VEHICLE_SET_ENABLE_RAMP_CAR_SIDE_IMPULSE(Any p0, Any p1) { Invoke(0x1BBAC99C0BC53656, V(p0), V(p1)); }
		public static void VEHICLE_SET_ENABLE_NORMALISE_RAMP_CAR_VERTICAL_VELOCTIY(Any p0, Any p1) { Invoke(0x756AE6E962168A04, V(p0), V(p1)); }
		public static void VEHICLE_SET_JET_WASH_FORCE_ENABLED(Any p0) { Invoke(0x9D30687C57BAA0BB, V(p0)); }
		public static void SET_VEHICLE_WEAPON_CAN_TARGET_OBJECTS(Vehicle vehicle, bool toggle) { Invoke(0x86B4B6212CB8B627, V(vehicle), V(toggle)); }
		// Used for blazer5. Changes the quadbike-jetski transformation input from raise/lower convertible roof (hold H by default) to horn (press E by default.)
		public static void SET_VEHICLE_USE_BOOST_BUTTON_FOR_WHEEL_RETRACT(bool toggle) { Invoke(0x41290B40FA63E6DA, V(toggle)); }
		public static void _SET_VEHICLE_USE_HORN_BUTTON_FOR_NITROUS(bool toggle) { Invoke(0x1980F68872CC2C3D, V(toggle)); }
		// Parachute models:
		// - sr_prop_specraces_para_s_01
		// - imp_prop_impexp_para_s (SecuroServ; Default)
		// Plus, many more props can be used as vehicle parachutes, like umbrellas (prop_beach_parasol_03), and unlike SET_PLAYER_PARACHUTE_MODEL_OVERRIDE, you won't get stuck mid-air when using an umbrella.
		public static void VEHICLE_SET_PARACHUTE_MODEL_OVERRIDE(Vehicle vehicle, Hash modelHash) { Invoke(0x4D610C6B56031351, V(vehicle), V(modelHash)); }
		// Variations available for the generic parachute (sr_prop_specraces_para_s_01):
		// - 0: Rainbow
		// - 1: Red
		// - 2: White, blue, yellow
		// - 3: Black, red, white
		// - 4: Red, white, blue
		// - 5: Blue
		// - 6: Black
		// - 7: Black, yellow
		public static void VEHICLE_SET_PARACHUTE_MODEL_TINT_INDEX(Vehicle vehicle, int textureVariation) { Invoke(0xA74AD2439468C883, V(vehicle), V(textureVariation)); }
		public static int VEHICLE_SET_OVERRIDE_EXTENABLE_SIDE_RATIO(Any p0, Any p1) { return Invoke<int>(0x0419B167EE128F33, V(p0), V(p1)); }
		public static int VEHICLE_SET_EXTENABLE_SIDE_TARGET_RATIO(Any p0, Any p1) { return Invoke<int>(0xF3B0E0AED097A3F5, V(p0), V(p1)); }
		public static int VEHICLE_SET_OVERRIDE_SIDE_RATIO(Any p0, Any p1) { return Invoke<int>(0xD3E51C0AB8C26EEE, V(p0), V(p1)); }
		public static int GET_ALL_VEHICLES(Any* vehsStruct) { return Invoke<int>(0x9B8E1BF04B51F2E8, V(vehsStruct)); }
		public static void SET_CARGOBOB_EXTA_PICKUP_RANGE(Any p0, Any p1) { Invoke(0x72BECCF4B829522E, V(p0), V(p1)); }
		public static void SET_OVERRIDE_VEHICLE_DOOR_TORQUE(Any p0, Any p1, Any p2) { Invoke(0x66E3AAFACE2D1EB8, V(p0), V(p1), V(p2)); }
		// Enables/disables the ability to wheelie on motorcycles.
		public static void SET_WHEELIE_ENABLED(Vehicle vehicle, bool enabled) { Invoke(0x1312DDD8385AEE4E, V(vehicle), V(enabled)); }
		// Prevents the vehicle from exploding when taking body damage. Only works for helis and planes.
		public static void SET_DISABLE_HELI_EXPLODE_FROM_BODY_DAMAGE(Vehicle vehicle, bool disable) { Invoke(0xEDBC8405B3895CC9, V(vehicle), V(disable)); }
		// Prevents the vehicle from exploding when taking body damage if it was caused by a collision. Only works for planes.
		public static void SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_ON_COLLISION(Vehicle vehicle, bool disable) { Invoke(0x26E13D440E7F6064, V(vehicle), V(disable)); }
		// Prevents the vehicle from exploding when taking body damage if the inflictor is an AI-controlled vehicle. Only works for planes.
		public static void _SET_DISABLE_EXPLODE_FROM_BODY_DAMAGE_RECEIVED_BY_AI_VEHICLE(Vehicle vehicle, bool disable) { Invoke(0xB0B7DF5CB876FF5E, V(vehicle), V(disable)); }
		public static void SET_TRAILER_ATTACHMENT_ENABLED(Any p0, Any p1) { Invoke(0x2FA2494B47FDD009, V(p0), V(p1)); }
		public static void SET_ROCKET_BOOST_FILL(Vehicle vehicle, float percentage) { Invoke(0xFEB2DDED3509562E, V(vehicle), V(percentage)); }
		// Set state to true to extend the wings, false to retract them.
		public static void SET_GLIDER_ACTIVE(Vehicle vehicle, bool state) { Invoke(0x544996C0081ABDEB, V(vehicle), V(state)); }
		// Resets the vehicle's turret to its default position in scripted cameras. Doesn't seem to affect turrets that are occupied by a ped.
		public static void SET_SHOULD_RESET_TURRET_IN_SCRIPTED_CAMERAS(Vehicle vehicle, bool shouldReset) { Invoke(0x78CEEE41F49F421F, V(vehicle), V(shouldReset)); }
		public static void SET_VEHICLE_DISABLE_COLLISION_UPON_CREATION(Vehicle vehicle, bool disable) { Invoke(0xAF60E6A2936F982A, V(vehicle), V(disable)); }
		public static void SET_GROUND_EFFECT_REDUCES_DRAG(bool toggle) { Invoke(0x430A7631A84C9BE7, V(toggle)); }
		// Disables collision for this vehicle (maybe it also supports other entities, not sure).
		// Only world/building/fixed world objects will have their collisions disabled, props, peds, or any other entity still collides with the vehicle.
		// Example: https://streamable.com/6n45d5
		// Not sure if there is a native (and if so, which one) that resets the collisions.
		public static void SET_DISABLE_MAP_COLLISION(Vehicle vehicle) { Invoke(0x75627043C6AA90AD, V(vehicle)); }
		public static void SET_DISABLE_PED_STAND_ON_TOP(Vehicle vehicle, bool toggle) { Invoke(0x8235F1BEAD557629, V(vehicle), V(toggle)); }
		public static void SET_VEHICLE_DAMAGE_SCALES(Vehicle vehicle, Any p1, Any p2, Any p3, Any p4) { Invoke(0x9640E30A7F395E4B, V(vehicle), V(p1), V(p2), V(p3), V(p4)); }
		public static void SET_PLANE_SECTION_DAMAGE_SCALE(Vehicle vehicle, Any p1, Any p2) { Invoke(0x0BBB9A7A8FFE931B, V(vehicle), V(p1), V(p2)); }
		public static void SET_PLANE_CONTROL_SECTIONS_SHOULD_BREAK_OFF_FROM_EXPLOSIONS(Vehicle vehicle, bool toggle) { Invoke(0xDD8A2D3337F04196, V(vehicle), V(toggle)); }
		// Stops the cargobob from being able to attach any vehicle
		public static void SET_HELI_CAN_PICKUP_ENTITY_THAT_HAS_PICK_UP_DISABLED(Vehicle vehicle, bool toggle) { Invoke(0x94A68DA412C4007D, V(vehicle), V(toggle)); }
		// Sets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
		public static void SET_VEHICLE_BOMB_AMMO(Vehicle vehicle, int bombCount) { Invoke(0xF4B2ED59DEB5D774, V(vehicle), V(bombCount)); }
		// Gets the amount of bombs that this vehicle has. As far as I know, this does _not_ impact vehicle weapons or the ammo of those weapons in any way, it is just a way to keep track of the amount of bombs in a specific plane.
		public static int GET_VEHICLE_BOMB_AMMO(Vehicle vehicle) { return Invoke<int>(0xEA12BD130D7569A1, V(vehicle)); }
		// Similar to SET_VEHICLE_BOMB_AMMO, this sets the amount of countermeasures that are present on this vehicle.
		// Use GET_VEHICLE_BOMB_AMMO to get the current amount.
		public static void SET_VEHICLE_COUNTERMEASURE_AMMO(Vehicle vehicle, int counterMeasureCount) { Invoke(0x9BDA23BF666F0855, V(vehicle), V(counterMeasureCount)); }
		// Similar to `GET_VEHICLE_BOMB_AMMO`, this gets the amount of countermeasures that are present on this vehicle.
		// Use SET_VEHICLE_COUNTERMEASURE_AMMO to set the current amount.
		public static int GET_VEHICLE_COUNTERMEASURE_AMMO(Vehicle vehicle) { return Invoke<int>(0xF846AA63DF56B804, V(vehicle)); }
		public static void SET_HELI_COMBAT_OFFSET(Vehicle vehicle, float x, float y, float z) { Invoke(0x0A3F820A9A9A9AC5, V(vehicle), V(x), V(y), V(z)); }
		// Used in decompiled scripts in combination with GET_VEHICLE_SIZE
		// p7 is usually 2
		// p8 is usually 1
		public static bool GET_CAN_VEHICLE_BE_PLACED_HERE(Vehicle vehicle, float x, float y, float z, float rotX, float rotY, float rotZ, int p7, Any p8) { return Invoke<bool>(0x51F30DB60626A20E, V(vehicle), V(x), V(y), V(z), V(rotX), V(rotY), V(rotZ), V(p7), V(p8)); }
		// Sets a flag on heli and another vehicle type.
		public static void SET_DISABLE_AUTOMATIC_CRASH_TASK(Vehicle vehicle, bool toggle) { Invoke(0x97841634EF7DF1D6, V(vehicle), V(toggle)); }
		// Used in conjunction with SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, in Rockstar's scripts. Using this will instantly transform the vehicle into hover mode starting from the given ratio (ranging from 0.0 to 1.0, values greater than 1.0 will put the vehicle into a glitched state.) If this is not used alongside SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO, the vehicle will automatically transform back into car mode.
		// 
		// Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
		// 
		// Example:
		// Ped playerPed = PLAYER::PLAYER_PED_ID();
		// Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
		// VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
		// VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
		public static void SET_SPECIAL_FLIGHT_MODE_RATIO(Vehicle vehicle, float ratio) { Invoke(0xD138FA15C9776837, V(vehicle), V(ratio)); }
		// Used in conjunction with SET_SPECIAL_FLIGHT_MODE_RATIO, in Rockstar's scripts. The vehicle will transform into the given targetRatio, starting from the vehicle's current hover mode transform ratio (which can also be manually set by SET_SPECIAL_FLIGHT_MODE_RATIO,) i.e. setting targetRatio to 0.0 while the vehicle is in hover mode will transform the vehicle into car mode, likewise setting targetRatio to 1.0 while the vehicle is in car mode will transform the vehicle into hover mode, and if the current transform ratio is set to 0.7 while targetRatio is 1.0 the vehicle will transform into hover mode starting from being already partially transformed.
		// 
		// targetRatio is recommended to always be 0.0 or 1.0, otherwise the vehicle will transform into a glitched state.
		// 
		// Usable only with the deluxo and other vehicles with deluxo-like hover mode toggle, modded or otherwise. Does nothing when used on oppressor2.
		// 
		// Example:
		// Ped playerPed = PLAYER::PLAYER_PED_ID();
		// Vehicle veh = PED::GET_VEHICLE_PED_IS_USING(playerPed);
		// VEHICLE::SET_SPECIAL_FLIGHT_MODE_RATIO(veh, 0.7f);
		// VEHICLE::SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(veh, 1.0f);
		public static void SET_SPECIAL_FLIGHT_MODE_TARGET_RATIO(Vehicle vehicle, float targetRatio) { Invoke(0x438B3D7CA026FE91, V(vehicle), V(targetRatio)); }
		// It will override the ability to transform deluxo. For oppressor it will work just like SET_DISABLE_HOVER_MODE_FLIGHT
		public static void SET_SPECIAL_FLIGHT_MODE_ALLOWED(Vehicle vehicle, bool toggle) { Invoke(0xF1211889DF15A763, V(vehicle), V(toggle)); }
		// Disables "wings" for some flying vehicles. Works only for oppressor _2_ and deluxo.
		// For deluxo it just immediately removes vehicle's "wings" and you will be not able to fly up.
		// For oppressor 2 it will remove wings right after you land. And you will not able to fly up anymore too.
		// But for opressor 2 you still can fly if you somehow get back in the air.
		public static void SET_DISABLE_HOVER_MODE_FLIGHT(Vehicle vehicle, bool toggle) { Invoke(0x2D55FE374D5FDB91, V(vehicle), V(toggle)); }
		// Checks if Chernobog's stabilizers are deployed or not.
		// These are the metal supports that allow it to fire.
		// This native only applies to the Chernobog.
		public static bool GET_OUTRIGGERS_DEPLOYED(Vehicle vehicle) { return Invoke<bool>(0x3A9128352EAC9E85, V(vehicle)); }
		// Native is significantly more complicated than simply generating a random vector & length.
		// The 'point' is either 400.0 or 250.0 units away from the Ped's current coordinates; and paths into functions like rage::grcViewport___IsSphereVisible
		public static Vector3 FIND_SPAWN_COORDINATES_FOR_HELI(Ped ped) { return Invoke<Vector3>(0x8DC9675797123522, V(ped)); }
		// Only used with the "akula" and "annihilator2" in the decompiled native scripts.
		public static void SET_DEPLOY_FOLDING_WINGS(Vehicle vehicle, bool deploy, bool p2) { Invoke(0xB251E0B33E58B424, V(vehicle), V(deploy), V(p2)); }
		// Only used with the "akula" and "annihilator2" in the decompiled native scripts.
		public static bool ARE_FOLDING_WINGS_DEPLOYED(Vehicle vehicle) { return Invoke<bool>(0xAEF12960FA943792, V(vehicle)); }
		public static void _SET_DEPLOY_MISSILE_BAYS(Vehicle vehicle, bool deploy) { Invoke(0x0C02468829E4AA65, V(vehicle), V(deploy)); }
		public static bool _ARE_MISSILE_BAYS_DEPLOYED(Vehicle vehicle) { return Invoke<bool>(0xEA4743874D515F13, V(vehicle)); }
		public static void SET_DIP_STRAIGHT_DOWN_WHEN_CRASHING_PLANE(Vehicle vehicle, bool toggle) { Invoke(0xAA653AE61924B0A0, V(vehicle), V(toggle)); }
		// Toggles specific flag on turret
		public static void SET_TURRET_HIDDEN(Vehicle vehicle, int index, bool toggle) { Invoke(0xC60060EB0D8AC7B1, V(vehicle), V(index), V(toggle)); }
		public static void SET_HOVER_MODE_WING_RATIO(Vehicle vehicle, float ratio) { Invoke(0x70A252F60A3E036B, V(vehicle), V(ratio)); }
		// Disables turret movement when called in a loop. You can still fire and aim. You cannot shoot backwards though.
		public static void SET_DISABLE_TURRET_MOVEMENT(Vehicle vehicle, int turretId) { Invoke(0xE615BB7A7752C76A, V(vehicle), V(turretId)); }
		public static void SET_FORCE_FIX_LINK_MATRICES(Vehicle vehicle) { Invoke(0x887FA38787DE8C72, V(vehicle)); }
		// Affects the playback speed of the submarine car conversion animations. Does not affect hardcoded animations such as the wheels being retracted.
		public static void SET_TRANSFORM_RATE_FOR_ANIMATION(Vehicle vehicle, float transformRate) { Invoke(0x498218259FB7C72D, V(vehicle), V(transformRate)); }
		// When set to true, the key to transform a car to submarine mode changes from raise/lower convertible roof (hold H by default) to special vehicle transform (press X by default.)
		public static void SET_TRANSFORM_TO_SUBMARINE_USES_ALTERNATE_INPUT(Vehicle vehicle, bool toggle) { Invoke(0x41B9FB92EDED32A6, V(vehicle), V(toggle)); }
		// Does nothing. It's a nullsub.
		public static void SET_VEHICLE_COMBAT_MODE(bool toggle) { Invoke(0x36DE109527A2C0C4, V(toggle)); }
		// Does nothing. It's a nullsub.
		public static void SET_VEHICLE_DETONATION_MODE(bool toggle) { Invoke(0x82E0AC411E41A5B4, V(toggle)); }
		// Does nothing. It's a nullsub.
		public static void SET_VEHICLE_SHUNT_ON_STICK(bool toggle) { Invoke(0x99A05839C46CE316, V(toggle)); }
		public static bool _IS_VEHICLE_ON_BOOST_PAD(Vehicle vehicle) { return Invoke<bool>(0x71C6302CBCA6CA35, V(vehicle)); }
		public static bool GET_IS_VEHICLE_SHUNTING(Vehicle vehicle) { return Invoke<bool>(0xA2459F72C14E2E8D, V(vehicle)); }
		public static bool GET_HAS_VEHICLE_BEEN_HIT_BY_SHUNT(Vehicle vehicle) { return Invoke<bool>(0xE8718FAF591FD224, V(vehicle)); }
		// Returns last vehicle that was rammed by the given vehicle using the shunt boost.
		public static Vehicle GET_LAST_SHUNT_VEHICLE(Vehicle vehicle) { return Invoke<Vehicle>(0x04F2FA6E234162F7, V(vehicle)); }
		public static void SET_DISABLE_VEHICLE_EXPLOSIONS_DAMAGE(bool toggle) { Invoke(0x143921E45EC44D62, V(toggle)); }
		public static void SET_OVERRIDE_NITROUS_LEVEL(Vehicle vehicle, bool toggle, float level, float power, float rechargeTime, bool disableSound) { Invoke(0xC8E9B6B71B8E660D, V(vehicle), V(toggle), V(level), V(power), V(rechargeTime), V(disableSound)); }
		public static void _SET_NITROUS_IS_VISIBLE(Vehicle vehicle, bool enabled) { Invoke(0x465EEA70AF251045, V(vehicle), V(enabled)); }
		public static void _SET_OVERRIDE_TRACTION_LOSS_MULTIPLIER(Vehicle vehicle, float modifier) { Invoke(0xAFD262ACCA64479A, V(vehicle), V(modifier)); }
		// First two floats relate to rumble, the last is a threshold
		public static void _SET_DRIFT_SLIP_ANGLE_LIMITS(Vehicle vehicle, float durationScalar, float amplitudeScalar, float slipAngleLimit) { Invoke(0xDAF4C98C18AC6F06, V(vehicle), V(durationScalar), V(amplitudeScalar), V(slipAngleLimit)); }
		public static void _SET_MINIMUM_TIME_BETWEEN_GEAR_SHIFTS(Vehicle vehicle, int time) { Invoke(0x16CFBC5E7EB32861, V(vehicle), V(time)); }
		public static void FULLY_CHARGE_NITROUS(Vehicle vehicle) { Invoke(0x1A2BCC8C636F9226, V(vehicle)); }
		public static void _SET_REMAINING_NITROUS_DURATION(Vehicle vehicle, float duration) { Invoke(0x1AD0F63A94E10EFF, V(vehicle), V(duration)); }
		public static float _GET_REMAINING_NITROUS_DURATION(Vehicle vehicle) { return Invoke<float>(0xBEC4B8653462450E, V(vehicle)); }
		public static bool IS_NITROUS_ACTIVE(Vehicle vehicle) { return Invoke<bool>(0x491E822B2C464FE4, V(vehicle)); }
		public static void CLEAR_NITROUS(Vehicle vehicle) { Invoke(0xC889AE921400E1ED, V(vehicle)); }
		public static void SET_NITROUS_IS_ACTIVE(Vehicle vehicle, bool toggle) { Invoke(0x9E566EA551F4F1A6, V(vehicle), V(toggle)); }
		public static void SET_INCREASE_WHEEL_CRUSH_DAMAGE(Vehicle vehicle, bool toggle) { Invoke(0x2970EAA18FD5E42F, V(vehicle), V(toggle)); }
		// Sets some global vehicle related bool
		public static void SET_DISABLE_WEAPON_BLADE_FORCES(bool toggle) { Invoke(0x211E95CE9903940C, V(toggle)); }
		// Changes the car jump control to require a double-tap to activate.
		public static void SET_USE_DOUBLE_CLICK_FOR_CAR_JUMP(bool toggle) { Invoke(0x5BBCF35BF6E456F7, V(toggle)); }
		// Returns true only if the "tombstone" bone is attached to the vehicle, irrespective of "FLAG_HAS_TOMBSTONE" being present or not. Detaching the tombstone will return false.
		public static bool GET_DOES_VEHICLE_HAVE_TOMBSTONE(Vehicle vehicle) { return Invoke<bool>(0x71AFB258CCED3A27, V(vehicle)); }
		// Disables detachable bumber from domnator4, dominator5, dominator6, see https://gfycat.com/SecondUnluckyGosling
		public static void HIDE_TOMBSTONE(Vehicle vehicle, bool toggle) { Invoke(0xAE71FB656C600587, V(vehicle), V(toggle)); }
		public static void APPLY_EMP_EFFECT(Vehicle vehicle) { Invoke(0x249249D74F813EB2, V(vehicle)); }
		// Returns whether this vehicle is currently disabled by an EMP mine.
		public static bool GET_IS_VEHICLE_DISABLED_BY_EMP(Vehicle vehicle) { return Invoke<bool>(0x0506ED94363AD905, V(vehicle)); }
		public static void SET_DISABLE_RETRACTING_WEAPON_BLADES(bool toggle) { Invoke(0x8F0D5BA1C2CC91D7, V(toggle)); }
		// Usable wheels:
		// 0: wheel_lf
		// 1: wheel_rf
		// 2: wheel_lm1
		// 3: wheel_rm1
		// 4: wheel_lr
		// 5: wheel_rr
		public static float GET_TYRE_HEALTH(Vehicle vehicle, int wheelIndex) { return Invoke<float>(0x55EAB010FAEE9380, V(vehicle), V(wheelIndex)); }
		// SET_TYRE_WEAR_RATE must be active, otherwise values set to <1000.0f will default to 350.0f
		// 
		// Usable wheels:
		// 0: wheel_lf
		// 1: wheel_rf
		// 2: wheel_lm1
		// 3: wheel_rm1
		// 4: wheel_lr
		// 5: wheel_rr
		public static void SET_TYRE_HEALTH(Vehicle vehicle, int wheelIndex, float health) { Invoke(0x74C68EF97645E79D, V(vehicle), V(wheelIndex), V(health)); }
		// Returns the multiplier value from SET_TYRE_WEAR_RATE
		// 
		// Usable wheels:
		// 0: wheel_lf
		// 1: wheel_rf
		// 2: wheel_lm1
		// 3: wheel_rm1
		// 4: wheel_lr
		// 5: wheel_rr
		public static float GET_TYRE_WEAR_RATE(Vehicle vehicle, int wheelIndex) { return Invoke<float>(0x6E387895952F4F71, V(vehicle), V(wheelIndex)); }
		// Needs to be run for tire wear to work. Multiplier affects the downforce and how fast the tires will wear out, higher values essentially make the vehicle slower on straights and its tires will wear down quicker when cornering. Value must be >0f.
		// Default value in Rockstar's Open Wheel Race JSON's ("owrtws", "owrtwm", "owrtwh") is 1.0
		// 
		// Usable wheels:
		// 0: wheel_lf
		// 1: wheel_rf
		// 2: wheel_lm1
		// 3: wheel_rm1
		// 4: wheel_lr
		// 5: wheel_rr
		public static void SET_TYRE_WEAR_RATE(Vehicle vehicle, int wheelIndex, float multiplier) { Invoke(0x01894E2EDE923CA2, V(vehicle), V(wheelIndex), V(multiplier)); }
		// Controls how fast the tires wear out.
		// 
		// Default values from Rockstar's Open Wheel Race JSON's:
		// "owrtss" (Soft): 2.2
		// "owrtsm" (Medium): 1.7
		// "owrtsh" (Hard): 1.2
		// 
		// Usable wheels:
		// 0: wheel_lf
		// 1: wheel_rf
		// 2: wheel_lm1
		// 3: wheel_rm1
		// 4: wheel_lr
		// 5: wheel_rr
		public static void SET_TYRE_WEAR_RATE_SCALE(Vehicle vehicle, int wheelIndex, float multiplier) { Invoke(0x392183BB9EA57697, V(vehicle), V(wheelIndex), V(multiplier)); }
		// Controls how much traction the wheel loses.
		// 
		// Default values from Rockstar's Open Wheel Race JSON's:
		// "owrtds" (Soft): 0.05
		// "owrtdm" (Medium): 0.45
		// "owrtdh" (Hard): 0.8
		// 
		// Usable wheels:
		// 0: wheel_lf
		// 1: wheel_rf
		// 2: wheel_lm1
		// 3: wheel_rm1
		// 4: wheel_lr
		// 5: wheel_rr
		public static void SET_TYRE_MAXIMUM_GRIP_DIFFERENCE_DUE_TO_WEAR_RATE(Vehicle vehicle, int wheelIndex, float multiplier) { Invoke(0xC970D0E0FC31D768, V(vehicle), V(wheelIndex), V(multiplier)); }
		public static void SET_AIRCRAFT_IGNORE_HIGHTMAP_OPTIMISATION(Vehicle vehicle, int p1) { Invoke(0xF8B49F5BA7F850E7, V(vehicle), V(p1)); }
		// Lowers the vehicle's stance. Only works for vehicles that have strAdvancedFlags 0x8000 and 0x4000000 set.
		public static void SET_REDUCED_SUSPENSION_FORCE(Vehicle vehicle, bool enable) { Invoke(0x3A375167F5782A65, V(vehicle), V(enable)); }
		public static void SET_DRIFT_TYRES(Vehicle vehicle, bool toggle) { Invoke(0x5AC79C98C5C17F05, V(vehicle), V(toggle)); }
		public static bool GET_DRIFT_TYRES_SET(Vehicle vehicle) { return Invoke<bool>(0x2F5A72430E78C8D3, V(vehicle)); }
		// Implemented only for trains.
		public static void NETWORK_USE_HIGH_PRECISION_TRAIN_BLENDING(Vehicle vehicle, bool toggle) { Invoke(0xEC0C1D4922AF9754, V(vehicle), V(toggle)); }
		// Only used in R* Script fm_content_cargo
		public static void SET_CHECK_FOR_ENOUGH_ROOM_FOR_PED(Vehicle vehicle, bool p1) { Invoke(0xEF9D388F8D377F44, V(vehicle), V(p1)); }
		// _SET_ALLOW_R* - _SET_ALLOW_V*
		public static void _SET_ALLOW_COLLISION_WHEN_IN_VEHICLE(Vehicle vehicle, bool toggle) { Invoke(0x27D27223E8EF22ED, V(vehicle), V(toggle)); }
		public static bool _IS_VEHICLE_GEN9_EXCLUSIVE_MODEL(Hash vehicleModel) { return Invoke<bool>(0x6638C0F19DE692FE, V(vehicleModel)); }
		public static int _GET_VEHICLE_MAX_EXHAUST_BONE_COUNT() { return Invoke<int>(0x3EE18B00CD86C54F); }
		public static bool _GET_VEHICLE_EXHAUST_BONE(Vehicle vehicle, int index, int* boneIndex, bool* axisX) { return Invoke<bool>(0xE728F090D538CB18, V(vehicle), V(index), V(boneIndex), V(axisX)); }




		// This function set height to the value of z-axis of the water surface.
		// 
		// This function works with sea and lake. However it does not work with shallow rivers (e.g. raton canyon will return -100000.0f)
		// 
		// note: seems to return true when you are in water
		public static bool GET_WATER_HEIGHT(float x, float y, float z, float* height) { return Invoke<bool>(0xF6829842C06AE524, V(x), V(y), V(z), V(height)); }
		public static bool GET_WATER_HEIGHT_NO_WAVES(float x, float y, float z, float* height) { return Invoke<bool>(0x8EE6B53CE13A9794, V(x), V(y), V(z), V(height)); }
		public static bool TEST_PROBE_AGAINST_WATER(float x1, float y1, float z1, float x2, float y2, float z2, Vector3* result) { return Invoke<bool>(0xFFA5D878809819DB, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(result)); }
		// enum eScriptWaterTestResult
		// {
		// 	SCRIPT_WATER_TEST_RESULT_NONE,
		// 	SCRIPT_WATER_TEST_RESULT_WATER,
		// 	SCRIPT_WATER_TEST_RESULT_BLOCKED,
		// };
		public static int TEST_PROBE_AGAINST_ALL_WATER(float x1, float y1, float z1, float x2, float y2, float z2, int flags, float* waterHeight) { return Invoke<int>(0x8974647ED222EA5F, V(x1), V(y1), V(z1), V(x2), V(y2), V(z2), V(flags), V(waterHeight)); }
		// See TEST_PROBE_AGAINST_ALL_WATER.
		public static int TEST_VERTICAL_PROBE_AGAINST_ALL_WATER(float x, float y, float z, int flags, float* waterHeight) { return Invoke<int>(0x2B3451FA1E3142E2, V(x), V(y), V(z), V(flags), V(waterHeight)); }
		// Sets the water height for a given position and radius.
		// 
		public static void MODIFY_WATER(float x, float y, float radius, float height) { Invoke(0xC443FD757C3BA637, V(x), V(y), V(radius), V(height)); }
		public static int ADD_EXTRA_CALMING_QUAD(float xLow, float yLow, float xHigh, float yHigh, float height) { return Invoke<int>(0xFDBF4CDBC07E1706, V(xLow), V(yLow), V(xHigh), V(yHigh), V(height)); }
		// p0 is the handle returned from ADD_EXTRA_CALMING_QUAD
		public static void REMOVE_EXTRA_CALMING_QUAD(int calmingQuad) { Invoke(0xB1252E3E59A82AAF, V(calmingQuad)); }
		// Sets a value that determines how aggressive the ocean waves will be. Values of 2.0 or more make for very aggressive waves like you see during a thunderstorm.
		// 
		// Works only ~200 meters around the player.
		public static void SET_DEEP_OCEAN_SCALER(float intensity) { Invoke(0xB96B00E976BE977F, V(intensity)); }
		// Gets the aggressiveness factor of the ocean waves.
		public static float GET_DEEP_OCEAN_SCALER() { return Invoke<float>(0x2B2A2CC86778B619); }
		public static void SET_CALMED_WAVE_HEIGHT_SCALER(float height) { Invoke(0x547237AA71AB44DE, V(height)); }
		// Sets the waves intensity back to original (1.0 in most cases).
		public static void RESET_DEEP_OCEAN_SCALER() { Invoke(0x5E5E99285AE812DB); }




		// Enables laser sight on any weapon.
		// 
		// It doesn't work. Neither on tick nor OnKeyDown
		public static void ENABLE_LASER_SIGHT_RENDERING(bool toggle) { Invoke(0xC8B46D7727D864AA, V(toggle)); }
		public static Hash GET_WEAPON_COMPONENT_TYPE_MODEL(Hash componentHash) { return Invoke<Hash>(0x0DB57B41EC1DB083, V(componentHash)); }
		// Returns the model of any weapon.
		// 
		// Can also take an ammo hash?
		// sub_6663a(&l_115B, WEAPON::GET_WEAPONTYPE_MODEL(${ammo_rpg}));
		public static Hash GET_WEAPONTYPE_MODEL(Hash weaponHash) { return Invoke<Hash>(0xF46CDC33180FDA94, V(weaponHash)); }
		public static Hash GET_WEAPONTYPE_SLOT(Hash weaponHash) { return Invoke<Hash>(0x4215460B9B8B7FA0, V(weaponHash)); }
		public static Hash GET_WEAPONTYPE_GROUP(Hash weaponHash) { return Invoke<Hash>(0xC3287EE3050FB74C, V(weaponHash)); }
		// Returns the amount of extra components the specified component has.
		// Returns -1 if the component isn't of type CWeaponComponentVariantModel.
		public static int GET_WEAPON_COMPONENT_VARIANT_EXTRA_COUNT(Hash componentHash) { return Invoke<int>(0x6558AC7C17BFEF58, V(componentHash)); }
		// Returns the model hash of the extra component at specified index.
		public static Hash GET_WEAPON_COMPONENT_VARIANT_EXTRA_MODEL(Hash componentHash, int extraComponentIndex) { return Invoke<Hash>(0x4D1CB8DC40208A17, V(componentHash), V(extraComponentIndex)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_CURRENT_PED_WEAPON(Ped ped, Hash weaponHash, bool bForceInHand) { Invoke(0xADF692B254977C0C, V(ped), V(weaponHash), V(bForceInHand)); }
		// The return value seems to indicate returns true if the hash of the weapon obj weapon equals the weapon hash.
		// p2 seems to be 1 most of the time.
		// 
		// 
		// 
		// 
		// 
		// p2 is not implemented
		// 
		// disassembly said that?
		// 
		public static bool GET_CURRENT_PED_WEAPON(Ped ped, Hash* weaponHash, bool p2) { return Invoke<bool>(0x3A87E44BB9A01D54, V(ped), V(weaponHash), V(p2)); }
		public static Entity GET_CURRENT_PED_WEAPON_ENTITY_INDEX(Ped ped, Any p1) { return Invoke<Entity>(0x3B390A939AF0B5FC, V(ped), V(p1)); }
		// p1 is always 0 in the scripts.
		public static Hash GET_BEST_PED_WEAPON(Ped ped, bool p1) { return Invoke<Hash>(0x8483E98E8B888AE2, V(ped), V(p1)); }
		// Full list of weapons by DurtyFree (Search for VEHICLE_*): https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool SET_CURRENT_PED_VEHICLE_WEAPON(Ped ped, Hash weaponHash) { return Invoke<bool>(0x75C55983C2C39DAA, V(ped), V(weaponHash)); }
		// Example in VB
		// 
		//     public static Shared Function GetVehicleCurrentWeapon(Ped As Ped) As Integer
		//         Dim arg As New OutputArgument()
		//         Native.Function.Call(Hash.GET_CURRENT_PED_VEHICLE_WEAPON, Ped, arg)
		//         Return arg.GetResult(Of Integer)()
		//     End Function
		// 
		// Usage:
		// If GetVehicleCurrentWeapon(Game.Player.Character) = -821520672 Then ...Do something
		// Note: -821520672 = VEHICLE_WEAPON_PLANE_ROCKET
		public static bool GET_CURRENT_PED_VEHICLE_WEAPON(Ped ped, Hash* weaponHash) { return Invoke<bool>(0x1017582BCD3832DC, V(ped), V(weaponHash)); }
		public static void SET_PED_CYCLE_VEHICLE_WEAPONS_ONLY(Ped ped) { Invoke(0x50276EF8172F5F12, V(ped)); }
		// Checks if the ped is currently equipped with a weapon matching a bit specified using a bitwise-or in typeFlags.
		// 
		// Type flag bit values:
		// 1 = Melee weapons
		// 2 = Explosive weapons
		// 4 = Any other weapons
		// 
		// Not specifying any bit will lead to the native *always* returning 'false', and for example specifying '4 | 2' will check for any weapon except fists and melee weapons.
		// 7 returns true if you are equipped with any weapon except your fists.
		// 6 returns true if you are equipped with any weapon except melee weapons.
		// 5 returns true if you are equipped with any weapon except the Explosives weapon group.
		// 4 returns true if you are equipped with any weapon except Explosives weapon group AND melee weapons.
		// 3 returns true if you are equipped with either Explosives or Melee weapons (the exact opposite of 4).
		// 2 returns true only if you are equipped with any weapon from the Explosives weapon group.
		// 1 returns true only if you are equipped with any Melee weapon.
		// 0 never returns true.
		// 
		// Note: When I say "Explosives weapon group", it does not include the Jerry can and Fire Extinguisher.
		public static bool IS_PED_ARMED(Ped ped, int typeFlags) { return Invoke<bool>(0x475768A975D5AD17, V(ped), V(typeFlags)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool IS_WEAPON_VALID(Hash weaponHash) { return Invoke<bool>(0x937C71165CF334B3, V(weaponHash)); }
		// p2 should be FALSE, otherwise it seems to always return FALSE
		// 
		// Bool does not check if the weapon is current equipped, unfortunately.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool HAS_PED_GOT_WEAPON(Ped ped, Hash weaponHash, bool p2) { return Invoke<bool>(0x8DECB02F88F428BC, V(ped), V(weaponHash), V(p2)); }
		public static bool IS_PED_WEAPON_READY_TO_SHOOT(Ped ped) { return Invoke<bool>(0xB80CA294F2F26749, V(ped)); }
		public static Hash GET_PED_WEAPONTYPE_IN_SLOT(Ped ped, Hash weaponSlot) { return Invoke<Hash>(0xEFFED78E9011134D, V(ped), V(weaponSlot)); }
		// WEAPON::GET_AMMO_IN_PED_WEAPON(PLAYER::PLAYER_PED_ID(), a_0)
		// 
		// From decompiled scripts
		// Returns total ammo in weapon
		// 
		// GTALua Example :
		// natives.WEAPON.GET_AMMO_IN_PED_WEAPON(plyPed, WeaponHash)
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int GET_AMMO_IN_PED_WEAPON(Ped ped, Hash weaponhash) { return Invoke<int>(0x015A522136D7F951, V(ped), V(weaponhash)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void ADD_AMMO_TO_PED(Ped ped, Hash weaponHash, int ammo) { Invoke(0x78F0424C34306220, V(ped), V(weaponHash), V(ammo)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_PED_AMMO(Ped ped, Hash weaponHash, int ammo, bool p3) { Invoke(0x14E56BC5B5DB6A19, V(ped), V(weaponHash), V(ammo), V(p3)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_PED_INFINITE_AMMO(Ped ped, bool toggle, Hash weaponHash) { Invoke(0x3EDCB0505123623B, V(ped), V(toggle), V(weaponHash)); }
		public static void SET_PED_INFINITE_AMMO_CLIP(Ped ped, bool toggle) { Invoke(0x183DADC6AA953186, V(ped), V(toggle)); }
		public static void SET_PED_STUN_GUN_FINITE_AMMO(Any p0, Any p1) { Invoke(0x24C024BA8379A70A, V(p0), V(p1)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void GIVE_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, bool isHidden, bool bForceInHand) { Invoke(0xBF0FD6E56C964FCB, V(ped), V(weaponHash), V(ammoCount), V(isHidden), V(bForceInHand)); }
		// Gives a weapon to PED with a delay, example:
		// 
		// WEAPON::GIVE_DELAYED_WEAPON_TO_PED(PED::PLAYER_PED_ID(), MISC::GET_HASH_KEY("WEAPON_PISTOL"), 1000, false)
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void GIVE_DELAYED_WEAPON_TO_PED(Ped ped, Hash weaponHash, int ammoCount, bool bForceInHand) { Invoke(0xB282DC6EBD803C75, V(ped), V(weaponHash), V(ammoCount), V(bForceInHand)); }
		// setting the last params to false it does that same so I would suggest its not a toggle
		public static void REMOVE_ALL_PED_WEAPONS(Ped ped, bool p1) { Invoke(0xF25DF915FA38C5F3, V(ped), V(p1)); }
		// This native removes a specified weapon from your selected ped.
		// 
		// Example:
		// C#:
		// Function.Call(Hash.REMOVE_WEAPON_FROM_PED, Game.Player.Character, 0x99B507EA);
		// 
		// C++:
		// WEAPON::REMOVE_WEAPON_FROM_PED(PLAYER::PLAYER_PED_ID(), 0x99B507EA);
		// 
		// The code above removes the knife from the player.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void REMOVE_WEAPON_FROM_PED(Ped ped, Hash weaponHash) { Invoke(0x4899CB088EDF59B8, V(ped), V(weaponHash)); }
		// Hides the players weapon during a cutscene.
		public static void HIDE_PED_WEAPON_FOR_SCRIPTED_CUTSCENE(Ped ped, bool toggle) { Invoke(0x6F6981D2253C208F, V(ped), V(toggle)); }
		// Has 5 parameters since latest patches.
		public static void SET_PED_CURRENT_WEAPON_VISIBLE(Ped ped, bool visible, bool deselectWeapon, bool p3, bool p4) { Invoke(0x0725A4CCFDED9A70, V(ped), V(visible), V(deselectWeapon), V(p3), V(p4)); }
		public static void SET_PED_DROPS_WEAPONS_WHEN_DEAD(Ped ped, bool toggle) { Invoke(0x476AE72C1D19D1A8, V(ped), V(toggle)); }
		// It determines what weapons caused damage:
		// 
		// If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
		// If you want to define any melee weapon, second parameter=0, third parameter=1.
		// If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool HAS_PED_BEEN_DAMAGED_BY_WEAPON(Ped ped, Hash weaponHash, int weaponType) { return Invoke<bool>(0x2D343D2219CD027A, V(ped), V(weaponHash), V(weaponType)); }
		// Does NOT seem to work with HAS_PED_BEEN_DAMAGED_BY_WEAPON. Use CLEAR_ENTITY_LAST_WEAPON_DAMAGE and HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON instead.
		public static void CLEAR_PED_LAST_WEAPON_DAMAGE(Ped ped) { Invoke(0x0E98F88A24C5F4B8, V(ped)); }
		// It determines what weapons caused damage:
		// 
		// If you want to define only a specific weapon, second parameter=weapon hash code, third parameter=0
		// If you want to define any melee weapon, second parameter=0, third parameter=1.
		// If you want to identify any weapon (firearms, melee, rockets, etc.), second parameter=0, third parameter=2.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool HAS_ENTITY_BEEN_DAMAGED_BY_WEAPON(Entity entity, Hash weaponHash, int weaponType) { return Invoke<bool>(0x131D401334815E94, V(entity), V(weaponHash), V(weaponType)); }
		public static void CLEAR_ENTITY_LAST_WEAPON_DAMAGE(Entity entity) { Invoke(0xAC678E40BE7C74D2, V(entity)); }
		public static void SET_PED_DROPS_WEAPON(Ped ped) { Invoke(0x6B7513D9966FBEC0, V(ped)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_PED_DROPS_INVENTORY_WEAPON(Ped ped, Hash weaponHash, float xOffset, float yOffset, float zOffset, int ammoCount) { Invoke(0x208A1888007FC0E6, V(ped), V(weaponHash), V(xOffset), V(yOffset), V(zOffset), V(ammoCount)); }
		// p2 is mostly 1 in the scripts.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int GET_MAX_AMMO_IN_CLIP(Ped ped, Hash weaponHash, bool p2) { return Invoke<int>(0xA38DCFFCEA8962FA, V(ped), V(weaponHash), V(p2)); }
		public static int _GET_TIME_BEFORE_VEHICLE_WEAPON_RELOAD_FINISHES(Vehicle vehicle, int seat) { return Invoke<int>(0xC8C6F4B1CDEB40EF, V(vehicle), V(seat)); }
		public static bool _HAS_WEAPON_RELOADING_IN_VEHICLE(Vehicle vehicle, int seat) { return Invoke<bool>(0x8062F07153F4446F, V(vehicle), V(seat)); }
		public static float _GET_VEHICLE_WEAPON_RELOAD_TIME(Vehicle vehicle, int seat) { return Invoke<float>(0xD0AD348FFD7A6868, V(vehicle), V(seat)); }
		public static bool _GET_AMMO_IN_VEHICLE_WEAPON_CLIP(Vehicle vehicle, int seat, int* ammo) { return Invoke<bool>(0x2857938C5D407AFA, V(vehicle), V(seat), V(ammo)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool GET_AMMO_IN_CLIP(Ped ped, Hash weaponHash, int* ammo) { return Invoke<bool>(0x2E1202248937775C, V(ped), V(weaponHash), V(ammo)); }
		public static bool _SET_AMMO_IN_VEHICLE_WEAPON_CLIP(Vehicle vehicle, int seat, int ammo) { return Invoke<bool>(0x873906720EE842C3, V(vehicle), V(seat), V(ammo)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool SET_AMMO_IN_CLIP(Ped ped, Hash weaponHash, int ammo) { return Invoke<bool>(0xDCD2A934D65CB497, V(ped), V(weaponHash), V(ammo)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool GET_MAX_AMMO(Ped ped, Hash weaponHash, int* ammo) { return Invoke<bool>(0xDC16122C7A20C933, V(ped), V(weaponHash), V(ammo)); }
		// Returns the max ammo for an ammo type. Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
		public static bool GET_MAX_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash, int* ammo) { return Invoke<bool>(0x585847C5E4E11709, V(ped), V(ammoTypeHash), V(ammo)); }
		// Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
		public static void ADD_PED_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash, int ammo) { Invoke(0x2472622CE1F2D45F, V(ped), V(ammoTypeHash), V(ammo)); }
		// Ammo types: https://gist.github.com/root-cause/faf41f59f7a6d818b7db0b839bd147c1
		public static void SET_PED_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash, int ammo) { Invoke(0x5FD1E1F011E76D7E, V(ped), V(ammoTypeHash), V(ammo)); }
		public static int GET_PED_AMMO_BY_TYPE(Ped ped, Hash ammoTypeHash) { return Invoke<int>(0x39D22031557946C1, V(ped), V(ammoTypeHash)); }
		public static void SET_PED_AMMO_TO_DROP(Ped ped, int p1) { Invoke(0xA4EFEF9440A5B0EF, V(ped), V(p1)); }
		public static void SET_PICKUP_AMMO_AMOUNT_SCALER(float p0) { Invoke(0xE620FD3512A04F18, V(p0)); }
		// Returns the current ammo type of the specified ped's specified weapon.
		// MkII magazines will change the return value, like Pistol MkII returning AMMO_PISTOL without any components and returning AMMO_PISTOL_TRACER after Tracer Rounds component is attached.
		// Use 0xF489B44DD5AF4BD9 if you always want AMMO_PISTOL.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static Hash GET_PED_AMMO_TYPE_FROM_WEAPON(Ped ped, Hash weaponHash) { return Invoke<Hash>(0x7FEAD38B326B9F74, V(ped), V(weaponHash)); }
		// Returns the base1/default ammo type of the specified ped's specified weapon.
		// Use GET_PED_AMMO_TYPE_FROM_WEAPON if you want current ammo type (like AMMO_MG_INCENDIARY/AMMO_MG_TRACER while using MkII magazines) and use this if you want base1 ammo type. (AMMO_MG)
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static Hash GET_PED_ORIGINAL_AMMO_TYPE_FROM_WEAPON(Ped ped, Hash weaponHash) { return Invoke<Hash>(0xF489B44DD5AF4BD9, V(ped), V(weaponHash)); }
		// Pass ped. Pass address of Vector3.
		// The coord will be put into the Vector3.
		// The return will determine whether there was a coord found or not.
		public static bool GET_PED_LAST_WEAPON_IMPACT_COORD(Ped ped, Vector3* coords) { return Invoke<bool>(0x6C4D0409BA1A2BC2, V(ped), V(coords)); }
		// p1/gadgetHash was always 0xFBAB5776 ("GADGET_PARACHUTE").
		// p2 is always true.
		public static void SET_PED_GADGET(Ped ped, Hash gadgetHash, bool p2) { Invoke(0xD0D7B1E680ED4A1A, V(ped), V(gadgetHash), V(p2)); }
		// gadgetHash - was always 0xFBAB5776 ("GADGET_PARACHUTE").
		public static bool GET_IS_PED_GADGET_EQUIPPED(Ped ped, Hash gadgetHash) { return Invoke<bool>(0xF731332072F5156C, V(ped), V(gadgetHash)); }
		// Returns the hash of the weapon. 
		// 
		//             var num7 = WEAPON::GET_SELECTED_PED_WEAPON(num4);
		//             sub_27D3(num7);
		//             switch (num7)
		//             {
		//                 case 0x24B17070:
		// 
		// Also see WEAPON::GET_CURRENT_PED_WEAPON. Difference?
		// 
		// -------------------------------------------------------------------------
		// 
		// The difference is that GET_SELECTED_PED_WEAPON simply returns the ped's current weapon hash but GET_CURRENT_PED_WEAPON also checks the weapon obj and returns true if the hash of the weapon obj equals the weapon hash
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static Hash GET_SELECTED_PED_WEAPON(Ped ped) { return Invoke<Hash>(0x0A6DB4965674D243, V(ped)); }
		//              WEAPON::EXPLODE_PROJECTILES(PLAYER::PLAYER_PED_ID(), func_221(0x00000003), 0x00000001);
		public static void EXPLODE_PROJECTILES(Ped ped, Hash weaponHash, bool p2) { Invoke(0xFC4BD125DE7611E4, V(ped), V(weaponHash), V(p2)); }
		// If `explode` true, then removal is done through exploding the projectile. Basically the same as EXPLODE_PROJECTILES but without defining the owner ped.
		public static void REMOVE_ALL_PROJECTILES_OF_TYPE(Hash weaponHash, bool explode) { Invoke(0xFC52E0F37E446528, V(weaponHash), V(explode)); }
		public static float GET_LOCKON_DISTANCE_OF_CURRENT_PED_WEAPON(Ped ped) { return Invoke<float>(0x840F03E9041E2C9C, V(ped)); }
		public static float GET_MAX_RANGE_OF_CURRENT_PED_WEAPON(Ped ped) { return Invoke<float>(0x814C9D19DFD69679, V(ped)); }
		// Fourth Parameter = unsure, almost always -1
		public static bool HAS_VEHICLE_GOT_PROJECTILE_ATTACHED(Ped driver, Vehicle vehicle, Hash weaponHash, Any p3) { return Invoke<bool>(0x717C8481234E3B88, V(driver), V(vehicle), V(weaponHash), V(p3)); }
		// Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void GIVE_WEAPON_COMPONENT_TO_PED(Ped ped, Hash weaponHash, Hash componentHash) { Invoke(0xD966D51AA5B28BB9, V(ped), V(weaponHash), V(componentHash)); }
		// Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void REMOVE_WEAPON_COMPONENT_FROM_PED(Ped ped, Hash weaponHash, Hash componentHash) { Invoke(0x1E8BE90C74FB4C09, V(ped), V(weaponHash), V(componentHash)); }
		// Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool HAS_PED_GOT_WEAPON_COMPONENT(Ped ped, Hash weaponHash, Hash componentHash) { return Invoke<bool>(0xC593212475FAE340, V(ped), V(weaponHash), V(componentHash)); }
		// Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool IS_PED_WEAPON_COMPONENT_ACTIVE(Ped ped, Hash weaponHash, Hash componentHash) { return Invoke<bool>(0x0D78DE0572D3969E, V(ped), V(weaponHash), V(componentHash)); }
		public static bool REFILL_AMMO_INSTANTLY(Ped ped) { return Invoke<bool>(0x8C0D57EA686FAD87, V(ped)); }
		// Forces a ped to reload only if they are able to; if they have a full magazine, they will not reload.
		public static bool MAKE_PED_RELOAD(Ped ped) { return Invoke<bool>(0x20AE33F3AC9C0033, V(ped)); }
		public static bool _TRIGGER_VEHICLE_WEAPON_RELOAD(Vehicle vehicle, int seat, Ped ped) { return Invoke<bool>(0x5B1513F27F279A44, V(vehicle), V(seat), V(ped)); }
		// Nearly every instance of p1 I found was 31. Nearly every instance of p2 I found was 0.
		// 
		// REQUEST_WEAPON_ASSET(iLocal_1888, 31, 26);
		public static void REQUEST_WEAPON_ASSET(Hash weaponHash, int p1, int p2) { Invoke(0x5443438F033E29C3, V(weaponHash), V(p1), V(p2)); }
		public static bool HAS_WEAPON_ASSET_LOADED(Hash weaponHash) { return Invoke<bool>(0x36E353271F0E90EE, V(weaponHash)); }
		public static void REMOVE_WEAPON_ASSET(Hash weaponHash) { Invoke(0xAA08EF13F341C8FC, V(weaponHash)); }
		// Now has 8 params.
		public static Obj CREATE_WEAPON_OBJECT(Hash weaponHash, int ammoCount, float x, float y, float z, bool showWorldModel, float scale, Any p7, Any p8, Any p9) { return Invoke<Obj>(0x9541D3CF0D398F36, V(weaponHash), V(ammoCount), V(x), V(y), V(z), V(showWorldModel), V(scale), V(p7), V(p8), V(p9)); }
		// componentHash:
		// (use WEAPON::GET_WEAPON_COMPONENT_TYPE_MODEL() to get hash value)
		// ${component_at_ar_flsh}, ${component_at_ar_supp}, ${component_at_pi_flsh}, ${component_at_scope_large}, ${component_at_ar_supp_02}
		public static void GIVE_WEAPON_COMPONENT_TO_WEAPON_OBJECT(Obj weaponObject, Hash componentHash) { Invoke(0x33E179436C0B31DB, V(weaponObject), V(componentHash)); }
		// see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
		public static void REMOVE_WEAPON_COMPONENT_FROM_WEAPON_OBJECT(Obj obj, Hash componentHash) { Invoke(0xF7D82B0D66777611, V(obj), V(componentHash)); }
		// see DOES_WEAPON_TAKE_WEAPON_COMPONENT for full list of weapons & components
		public static bool HAS_WEAPON_GOT_WEAPON_COMPONENT(Obj weapon, Hash componentHash) { return Invoke<bool>(0x76A18844E743BF91, V(weapon), V(componentHash)); }
		public static void GIVE_WEAPON_OBJECT_TO_PED(Obj weaponObject, Ped ped) { Invoke(0xB1FA61371AF7C4B7, V(weaponObject), V(ped)); }
		// Full list of weapons & components by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool DOES_WEAPON_TAKE_WEAPON_COMPONENT(Hash weaponHash, Hash componentHash) { return Invoke<bool>(0x5CEE3DF569CECAB0, V(weaponHash), V(componentHash)); }
		// Drops the current weapon and returns the obj
		// 
		// Unknown behavior when unarmed.
		public static Obj GET_WEAPON_OBJECT_FROM_PED(Ped ped, bool p1) { return Invoke<Obj>(0xCAE1DC9A0E22A16D, V(ped), V(p1)); }
		// Gives the specified loadout to the specified ped. 
		// Loadouts are defined in common.rpf\data\ai\loadouts.meta
		public static void GIVE_LOADOUT_TO_PED(Ped ped, Hash loadoutHash) { Invoke(0x68F8BE6AF5CDF8A6, V(ped), V(loadoutHash)); }
		// tintIndex can be the following:
		// 
		// 0 - Normal
		// 1 - Green
		// 2 - Gold
		// 3 - Pink
		// 4 - Army
		// 5 - LSPD
		// 6 - Orange
		// 7 - Platinum
		// Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_PED_WEAPON_TINT_INDEX(Ped ped, Hash weaponHash, int tintIndex) { Invoke(0x50969B9B89ED5738, V(ped), V(weaponHash), V(tintIndex)); }
		// Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int GET_PED_WEAPON_TINT_INDEX(Ped ped, Hash weaponHash) { return Invoke<int>(0x2B9EEDC07BD06B9F, V(ped), V(weaponHash)); }
		// Full list of weapons, components & tint indexes by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_WEAPON_OBJECT_TINT_INDEX(Obj weapon, int tintIndex) { Invoke(0xF827589017D4E4A9, V(weapon), V(tintIndex)); }
		public static int GET_WEAPON_OBJECT_TINT_INDEX(Obj weapon) { return Invoke<int>(0xCD183314F7CD2E57, V(weapon)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int GET_WEAPON_TINT_COUNT(Hash weaponHash) { return Invoke<int>(0x5DCF6C5CAB2E9BF7, V(weaponHash)); }
		// Colors:
		// 0 = Gray
		// 1 = Dark Gray
		// 2 = Black
		// 3 = White
		// 4 = Blue
		// 5 = Cyan
		// 6 = Aqua
		// 7 = Cool Blue
		// 8 = Dark Blue
		// 9 = Royal Blue
		// 10 = Plum
		// 11 = Dark Purple
		// 12 = Purple
		// 13 = Red
		// 14 = Wine Red
		// 15 = Magenta
		// 16 = Pink
		// 17 = Salmon
		// 18 = Hot Pink
		// 19 = Rust Orange
		// 20 = Brown
		// 21 = Earth
		// 22 = Orange
		// 23 = Light Orange
		// 24 = Dark Yellow
		// 25 = Yellow
		// 26 = Light Brown
		// 27 = Lime Green
		// 28 = Olive
		// 29 = Moss
		// 30 = Turquoise
		// 31 = Dark Green
		// Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_PED_WEAPON_COMPONENT_TINT_INDEX(Ped ped, Hash weaponHash, Hash camoComponentHash, int colorIndex) { Invoke(0x9FE5633880ECD8ED, V(ped), V(weaponHash), V(camoComponentHash), V(colorIndex)); }
		// Returns -1 if camoComponentHash is invalid/not attached to the weapon.
		// Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int GET_PED_WEAPON_COMPONENT_TINT_INDEX(Ped ped, Hash weaponHash, Hash camoComponentHash) { return Invoke<int>(0xF0A60040BE558F2D, V(ped), V(weaponHash), V(camoComponentHash)); }
		// Colors:
		// 0 = Gray
		// 1 = Dark Gray
		// 2 = Black
		// 3 = White
		// 4 = Blue
		// 5 = Cyan
		// 6 = Aqua
		// 7 = Cool Blue
		// 8 = Dark Blue
		// 9 = Royal Blue
		// 10 = Plum
		// 11 = Dark Purple
		// 12 = Purple
		// 13 = Red
		// 14 = Wine Red
		// 15 = Magenta
		// 16 = Pink
		// 17 = Salmon
		// 18 = Hot Pink
		// 19 = Rust Orange
		// 20 = Brown
		// 21 = Earth
		// 22 = Orange
		// 23 = Light Orange
		// 24 = Dark Yellow
		// 25 = Yellow
		// 26 = Light Brown
		// 27 = Lime Green
		// 28 = Olive
		// 29 = Moss
		// 30 = Turquoise
		// 31 = Dark Green
		// Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(Obj weaponObject, Hash camoComponentHash, int colorIndex) { Invoke(0x5DA825A85D0EA6E6, V(weaponObject), V(camoComponentHash), V(colorIndex)); }
		// Returns -1 if camoComponentHash is invalid/not attached to the weapon obj.
		// Full list of weapons, components, tint indexes & weapon liveries by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int GET_WEAPON_OBJECT_COMPONENT_TINT_INDEX(Obj weaponObject, Hash camoComponentHash) { return Invoke<int>(0xB3EA4FEABF41464B, V(weaponObject), V(camoComponentHash)); }
		public static int GET_PED_WEAPON_CAMO_INDEX(Ped ped, Hash weaponHash) { return Invoke<int>(0xA2C9AC24B4061285, V(ped), V(weaponHash)); }
		public static void SET_WEAPON_OBJECT_CAMO_INDEX(Obj weaponObject, int p1) { Invoke(0x977CA98939E82E4B, V(weaponObject), V(p1)); }
		// struct WeaponHudStatsData
		// {
		//     BYTE hudDamage; // 0x0000
		//     char _0x0001[0x7]; // 0x0001
		//     BYTE hudSpeed; // 0x0008
		//     char _0x0009[0x7]; // 0x0009
		//     BYTE hudCapacity; // 0x0010
		//     char _0x0011[0x7]; // 0x0011
		//     BYTE hudAccuracy; // 0x0018
		//     char _0x0019[0x7]; // 0x0019
		//     BYTE hudRange; // 0x0020
		// };
		// 
		// Usage:
		// 
		// WeaponHudStatsData data;
		// if (GET_WEAPON_HUD_STATS(weaponHash, (int *)&data))
		// {
		//     // BYTE damagePercentage = data.hudDamage and so on
		// }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool GET_WEAPON_HUD_STATS(Hash weaponHash, Any* outData) { return Invoke<bool>(0xD92C739EE34C9EBA, V(weaponHash), V(outData)); }
		public static bool GET_WEAPON_COMPONENT_HUD_STATS(Hash componentHash, Any* outData) { return Invoke<bool>(0xB3CAF387AE12E9F8, V(componentHash), V(outData)); }
		// This native does not return damages of weapons from the melee and explosive group.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static float GET_WEAPON_DAMAGE(Hash weaponHash, Hash componentHash) { return Invoke<float>(0x3133B907D8B32053, V(weaponHash), V(componentHash)); }
		// // Returns the size of the default weapon component clip.
		// 
		// Use it like this:
		// 
		// char cClipSize[32];
		// Hash cur;
		// if (WEAPON::GET_CURRENT_PED_WEAPON(playerPed, &cur, 1))
		// {
		//     if (WEAPON::IS_WEAPON_VALID(cur))
		//     {
		//         int iClipSize = WEAPON::GET_WEAPON_CLIP_SIZE(cur);
		//         sprintf_s(cClipSize, "ClipSize: %.d", iClipSize);
		//         vDrawString(cClipSize, 0.5f, 0.5f);
		//     }
		// }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int GET_WEAPON_CLIP_SIZE(Hash weaponHash) { return Invoke<int>(0x583BE370B1EC6EB4, V(weaponHash)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static float GET_WEAPON_TIME_BETWEEN_SHOTS(Hash weaponHash) { return Invoke<float>(0x065D2AACAD8CF7A4, V(weaponHash)); }
		public static void SET_PED_CHANCE_OF_FIRING_BLANKS(Ped ped, float xBias, float yBias) { Invoke(0x8378627201D5497D, V(ped), V(xBias), V(yBias)); }
		// Returns handle of the projectile.
		public static Obj SET_PED_SHOOT_ORDNANCE_WEAPON(Ped ped, float p1) { return Invoke<Obj>(0xB4C8D77C80C0421E, V(ped), V(p1)); }
		public static void REQUEST_WEAPON_HIGH_DETAIL_MODEL(Entity weaponObject) { Invoke(0x48164DBB970AC3F0, V(weaponObject)); }
		public static void _SET_WEAPON_PED_DAMAGE_MODIFIER(Hash weapon, float damageModifier) { Invoke(0x1091922715B68DF0, V(weapon), V(damageModifier)); }
		// Changes the weapon damage output by the given multiplier value. Must be run every frame.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_WEAPON_DAMAGE_MODIFIER(Hash weaponHash, float damageMultiplier) { Invoke(0x4757F00BC6323CFE, V(weaponHash), V(damageMultiplier)); }
		public static void SET_WEAPON_AOE_MODIFIER(Hash weaponHash, float multiplier) { Invoke(0x4AE5AC8B852D642C, V(weaponHash), V(multiplier)); }
		// ex, WEAPON::SET_WEAPON_EFFECT_DURATION_MODIFIER(joaat("vehicle_weapon_mine_slick"), 1.0);
		public static void SET_WEAPON_EFFECT_DURATION_MODIFIER(Hash p0, float p1) { Invoke(0xE6D2CEDD370FF98E, V(p0), V(p1)); }
		// This native returns a true or false value.
		// 
		// Ped ped = The ped whose weapon you want to check.
		public static bool IS_PED_CURRENT_WEAPON_SILENCED(Ped ped) { return Invoke<bool>(0x65F0C5AE05943EC7, V(ped)); }
		public static bool IS_FLASH_LIGHT_ON(Ped ped) { return Invoke<bool>(0x4B7620C47217126C, V(ped)); }
		public static bool SET_FLASH_LIGHT_FADE_DISTANCE(float distance) { return Invoke<bool>(0xCEA66DAD478CD39B, V(distance)); }
		// Enables/disables flashlight on ped's weapon.
		public static void SET_FLASH_LIGHT_ACTIVE_HISTORY(Ped ped, bool toggle) { Invoke(0x988DB6FE9B3AC000, V(ped), V(toggle)); }
		// Changes the selected ped aiming animation style. 
		// Note : You must use GET_HASH_KEY!
		// 
		// Strings to use with GET_HASH_KEY :
		// 
		//     "Ballistic",
		//     "Default",
		//   "Fat",
		//   "Female",
		//    "FirstPerson",
		//   "FirstPersonAiming",
		//     "FirstPersonFranklin",
		//   "FirstPersonFranklinAiming",
		//     "FirstPersonFranklinRNG",
		//    "FirstPersonFranklinScope",
		//  "FirstPersonMPFemale",
		//   "FirstPersonMichael",
		//    "FirstPersonMichaelAiming",
		//  "FirstPersonMichaelRNG",
		//     "FirstPersonMichaelScope",
		//   "FirstPersonRNG",
		//    "FirstPersonScope",
		//  "FirstPersonTrevor",
		//     "FirstPersonTrevorAiming",
		//   "FirstPersonTrevorRNG",
		//  "FirstPersonTrevorScope",
		//    "Franklin",
		//  "Gang",
		//  "Gang1H",
		//    "GangFemale",
		//    "Hillbilly",
		//     "MP_F_Freemode",
		//     "Michael",
		//   "SuperFat",
		//  "Trevor"
		public static void SET_WEAPON_ANIMATION_OVERRIDE(Ped ped, Hash animStyle) { Invoke(0x1055AC3A667F09D9, V(ped), V(animStyle)); }
		// enum class eDamageType
		// {
		// 	UNKNOWN = 0,
		// 	NONE = 1,
		// 	MELEE = 2,
		// 	BULLET = 3,
		// 	BULLET_RUBBER = 4,
		// 	EXPLOSIVE = 5,
		// 	FIRE = 6,
		// 	COLLISION = 7,
		// 	FALL = 8,
		// 	DROWN = 9,
		// 	ELECTRIC = 10,
		// 	BARBED_WIRE = 11,
		// 	FIRE_EXTINGUISHER = 12,
		// 	SMOKE = 13,
		// 	WATER_CANNON = 14,
		// 	TRANQUILIZER = 15,
		// };
		// 
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int GET_WEAPON_DAMAGE_TYPE(Hash weaponHash) { return Invoke<int>(0x3BE0BB12D25FB305, V(weaponHash)); }
		public static void SET_EQIPPED_WEAPON_START_SPINNING_AT_FULL_SPEED(Ped ped) { Invoke(0xE4DCEC7FD5B739A5, V(ped)); }
		// this returns if you can use the weapon while using a parachute
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static bool CAN_USE_WEAPON_ON_PARACHUTE(Hash weaponHash) { return Invoke<bool>(0xBC7BE5ABC0879F74, V(weaponHash)); }
		// Both coordinates are from objects in the decompiled scripts. Native related to 0xECDC202B25E5CF48 p1 value. The only weapon hash used in the decompiled scripts is weapon_air_defence_gun. These two natives are used by the yacht script, decompiled scripts suggest it and the weapon hash used (valkyrie's rockets) are also used by yachts.
		public static int CREATE_AIR_DEFENCE_SPHERE(float x, float y, float z, float radius, float p4, float p5, float p6, Hash weaponHash) { return Invoke<int>(0x91EF34584710BE99, V(x), V(y), V(z), V(radius), V(p4), V(p5), V(p6), V(weaponHash)); }
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static int CREATE_AIR_DEFENCE_ANGLED_AREA(float p0, float p1, float p2, float p3, float p4, float p5, float p6, float p7, float p8, float radius, Hash weaponHash) { return Invoke<int>(0x9DA58CDBF6BDBC08, V(p0), V(p1), V(p2), V(p3), V(p4), V(p5), V(p6), V(p7), V(p8), V(radius), V(weaponHash)); }
		public static bool REMOVE_AIR_DEFENCE_SPHERE(int zoneId) { return Invoke<bool>(0x0ABF535877897560, V(zoneId)); }
		public static void REMOVE_ALL_AIR_DEFENCE_SPHERES() { Invoke(0x1E45B34ADEBEE48E); }
		public static void SET_PLAYER_TARGETTABLE_FOR_AIR_DEFENCE_SPHERE(Player player, int zoneId, bool enable) { Invoke(0xECDC202B25E5CF48, V(player), V(zoneId), V(enable)); }
		public static bool IS_AIR_DEFENCE_SPHERE_IN_AREA(float x, float y, float z, float radius, int* outZoneId) { return Invoke<bool>(0xDAB963831DBFD3F4, V(x), V(y), V(z), V(radius), V(outZoneId)); }
		public static void FIRE_AIR_DEFENCE_SPHERE_WEAPON_AT_POSITION(int zoneId, float x, float y, float z) { Invoke(0x44F1012B69313374, V(zoneId), V(x), V(y), V(z)); }
		public static bool DOES_AIR_DEFENCE_SPHERE_EXIST(int zoneId) { return Invoke<bool>(0xCD79A550999D7D4F, V(zoneId)); }
		// Disables selecting the given weapon. Ped isn't forced to put the gun away. However you can't reselect the weapon if you holster then unholster. Weapon is also grayed out on the weapon wheel.
		// Full list of weapons by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/weapons.json
		public static void SET_CAN_PED_SELECT_INVENTORY_WEAPON(Ped ped, Hash weaponHash, bool toggle) { Invoke(0xB4771B9AAF4E68E4, V(ped), V(weaponHash), V(toggle)); }
		// Disable all weapons. Does the same as 0xB4771B9AAF4E68E4 except for all weapons.
		public static void SET_CAN_PED_SELECT_ALL_WEAPONS(Ped ped, bool toggle) { Invoke(0xEFF296097FF1E509, V(ped), V(toggle)); }




		public static int GET_ZONE_AT_COORDS(float x, float y, float z) { return Invoke<int>(0x27040C25DE6CB2F4, V(x), V(y), V(z)); }
		// 'zoneName' corresponds to an entry in 'popzone.ipl'.
		// 
		// AIRP = Los Santos International Airport
		// ALAMO = Alamo Sea
		// ALTA = Alta
		// ARMYB = Fort Zancudo
		// BANHAMC = Banham Canyon Dr
		// BANNING = Banning
		// BEACH = Vespucci Beach
		// BHAMCA = Banham Canyon
		// BRADP = Braddock Pass
		// BRADT = Braddock Tunnel
		// BURTON = Burton
		// CALAFB = Calafia Bridge
		// CANNY = Raton Canyon
		// CCREAK = Cassidy Creek
		// CHAMH = Chamberlain Hills
		// CHIL = Vinewood Hills
		// CHU = Chumash
		// CMSW = Chiliad Mountain State Wilderness
		// CYPRE = Cypress Flats
		// DAVIS = Davis
		// DELBE = Del Perro Beach
		// DELPE = Del Perro
		// DELSOL = La Puerta
		// DESRT = Grand Senora Desert
		// DOWNT = Downtown
		// DTVINE = Downtown Vinewood
		// EAST_V = East Vinewood
		// EBURO = El Burro Heights
		// ELGORL = El Gordo Lighthouse
		// ELYSIAN = Elysian Island
		// GALFISH = Galilee
		// GOLF = GWC and Golfing Society
		// GRAPES = Grapeseed
		// GREATC = Great Chaparral
		// HARMO = Harmony
		// HAWICK = Hawick
		// HORS = Vinewood Racetrack
		// HUMLAB = Humane Labs and Research
		// JAIL = Bolingbroke Penitentiary
		// KOREAT = Little Seoul
		// LACT = Land Act Reservoir
		// LAGO = Lago Zancudo
		// LDAM = Land Act Dam
		// LEGSQU = Legion Square
		// LMESA = La Mesa
		// LOSPUER = La Puerta
		// MIRR = Mirror Park
		// MORN = Morningwood
		// MOVIE = Richards Majestic
		// MTCHIL = Mount Chiliad
		// MTGORDO = Mount Gordo
		// MTJOSE = Mount Josiah
		// MURRI = Murrieta Heights
		// NCHU = North Chumash
		// NOOSE = N.O.O.S.E
		// OCEANA = Pacific Ocean
		// PALCOV = Paleto Cove
		// PALETO = Paleto Bay
		// PALFOR = Paleto Forest
		// PALHIGH = Palomino Highlands
		// PALMPOW = Palmer-Taylor Power Station
		// PBLUFF = Pacific Bluffs
		// PBOX = Pillbox Hill
		// PROCOB = Procopio Beach
		// RANCHO = Rancho
		// RGLEN = Richman Glen
		// RICHM = Richman
		// ROCKF = Rockford Hills
		// RTRAK = Redwood Lights Track
		// SANAND = San Andreas
		// SANCHIA = San Chianski Mountain Range
		// SANDY = Sandy Shores
		// SKID = Mission Row
		// SLAB = Stab City
		// STAD = Maze Bank Arena
		// STRAW = Strawberry
		// TATAMO = Tataviam Mountains
		// TERMINA = Terminal
		// TEXTI = Textile City
		// TONGVAH = Tongva Hills
		// TONGVAV = Tongva Valley
		// VCANA = Vespucci Canals
		// VESP = Vespucci
		// VINE = Vinewood
		// WINDF = Ron Alternates Wind Farm
		// WVINE = West Vinewood
		// ZANCUDO = Zancudo River
		// ZP_ORT = Port of South Los Santos
		// ZQ_UAR = Davis Quartz
		// 
		// Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
		public static int GET_ZONE_FROM_NAME_ID(string zoneName) { return Invoke<int>(0x98CD1D2934B76CC1, V(zoneName)); }
		public static int GET_ZONE_POPSCHEDULE(int zoneId) { return Invoke<int>(0x4334BC40AA0CB4BB, V(zoneId)); }
		// AIRP = Los Santos International Airport
		// ALAMO = Alamo Sea
		// ALTA = Alta
		// ARMYB = Fort Zancudo
		// BANHAMC = Banham Canyon Dr
		// BANNING = Banning
		// BEACH = Vespucci Beach
		// BHAMCA = Banham Canyon
		// BRADP = Braddock Pass
		// BRADT = Braddock Tunnel
		// BURTON = Burton
		// CALAFB = Calafia Bridge
		// CANNY = Raton Canyon
		// CCREAK = Cassidy Creek
		// CHAMH = Chamberlain Hills
		// CHIL = Vinewood Hills
		// CHU = Chumash
		// CMSW = Chiliad Mountain State Wilderness
		// CYPRE = Cypress Flats
		// DAVIS = Davis
		// DELBE = Del Perro Beach
		// DELPE = Del Perro
		// DELSOL = La Puerta
		// DESRT = Grand Senora Desert
		// DOWNT = Downtown
		// DTVINE = Downtown Vinewood
		// EAST_V = East Vinewood
		// EBURO = El Burro Heights
		// ELGORL = El Gordo Lighthouse
		// ELYSIAN = Elysian Island
		// GALFISH = Galilee
		// GOLF = GWC and Golfing Society
		// GRAPES = Grapeseed
		// GREATC = Great Chaparral
		// HARMO = Harmony
		// HAWICK = Hawick
		// HORS = Vinewood Racetrack
		// HUMLAB = Humane Labs and Research
		// JAIL = Bolingbroke Penitentiary
		// KOREAT = Little Seoul
		// LACT = Land Act Reservoir
		// LAGO = Lago Zancudo
		// LDAM = Land Act Dam
		// LEGSQU = Legion Square
		// LMESA = La Mesa
		// LOSPUER = La Puerta
		// MIRR = Mirror Park
		// MORN = Morningwood
		// MOVIE = Richards Majestic
		// MTCHIL = Mount Chiliad
		// MTGORDO = Mount Gordo
		// MTJOSE = Mount Josiah
		// MURRI = Murrieta Heights
		// NCHU = North Chumash
		// NOOSE = N.O.O.S.E
		// OCEANA = Pacific Ocean
		// PALCOV = Paleto Cove
		// PALETO = Paleto Bay
		// PALFOR = Paleto Forest
		// PALHIGH = Palomino Highlands
		// PALMPOW = Palmer-Taylor Power Station
		// PBLUFF = Pacific Bluffs
		// PBOX = Pillbox Hill
		// PROCOB = Procopio Beach
		// RANCHO = Rancho
		// RGLEN = Richman Glen
		// RICHM = Richman
		// ROCKF = Rockford Hills
		// RTRAK = Redwood Lights Track
		// SANAND = San Andreas
		// SANCHIA = San Chianski Mountain Range
		// SANDY = Sandy Shores
		// SKID = Mission Row
		// SLAB = Stab City
		// STAD = Maze Bank Arena
		// STRAW = Strawberry
		// TATAMO = Tataviam Mountains
		// TERMINA = Terminal
		// TEXTI = Textile City
		// TONGVAH = Tongva Hills
		// TONGVAV = Tongva Valley
		// VCANA = Vespucci Canals
		// VESP = Vespucci
		// VINE = Vinewood
		// WINDF = Ron Alternates Wind Farm
		// WVINE = West Vinewood
		// ZANCUDO = Zancudo River
		// ZP_ORT = Port of South Los Santos
		// ZQ_UAR = Davis Quartz
		// 
		// Full list of zones by DurtyFree: https://github.com/DurtyFree/gta-v-data-dumps/blob/master/zones.json
		public static byte* GET_NAME_OF_ZONE(float x, float y, float z) { return PInvoke<byte>(0xCD90657D4C30E1CA, V(x), V(y), V(z)); }
		public static void SET_ZONE_ENABLED(int zoneId, bool toggle) { Invoke(0xBA5ECEEA120E5611, V(zoneId), V(toggle)); }
		// cellphone range 1- 5 used for signal bar in iFruit phone
		public static int GET_ZONE_SCUMMINESS(int zoneId) { return Invoke<int>(0x5F7B268D15BA0739, V(zoneId)); }
		// Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
		// 
		// Modified example from "am_imp_exp.c4", line 6406:
		// /* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
		// etc.
		// */
		// ZONE::OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(popSchedules[index], vehicleHash);
		// STREAMING::REQUEST_MODEL(vehicleHash);
		public static void OVERRIDE_POPSCHEDULE_VEHICLE_MODEL(int scheduleId, Hash vehicleHash) { Invoke(0x5F7D596BAC2E7777, V(scheduleId), V(vehicleHash)); }
		// Only used once in the decompiled scripts. Seems to be related to scripted vehicle generators.
		// 
		// Modified example from "am_imp_exp.c4", line 6418:
		// /* popSchedules[0] = ZONE::GET_ZONE_POPSCHEDULE(ZONE::GET_ZONE_AT_COORDS(891.3, 807.9, 188.1));
		// etc.
		// */
		// STREAMING::SET_MODEL_AS_NO_LONGER_NEEDED(vehicleHash);
		// ZONE::CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(popSchedules[index]);
		public static void CLEAR_POPSCHEDULE_OVERRIDE_VEHICLE_MODEL(int scheduleId) { Invoke(0x5C0DE367AA0D911C, V(scheduleId)); }
		// Returns a hash representing which part of the map the given coords are located.
		// 
		// Possible return values:
		// (Hash of) city -> -289320599
		// (Hash of) countryside -> 2072609373
		// 
		// C# Example :
		// 
		// Ped player = Game.Player.Character;
		// Hash h = Function.Call<Hash>(Hash.GET_HASH_OF_MAP_AREA_AT_COORDS, player.Position.X, player.Position.Y, player.Position.Z);
		public static Hash GET_HASH_OF_MAP_AREA_AT_COORDS(float x, float y, float z) { return Invoke<Hash>(0x7EE64D51E8498728, V(x), V(y), V(z)); }

	}
}